using System.CodeDom.Compiler;
using VRage.Utils;

namespace Sandbox.Game.Localization
{
	[GeneratedCode("Space Engineers Localization Generator Template", "1.0.0.0")]
	public static class MySpaceTexts
	{
		public static readonly MyStringId Blank = default(MyStringId);

		/// <summary>
		/// Add
		/// </summary>
		public static readonly MyStringId Add = MyStringId.GetOrCompute("Add");

		/// <summary>
		/// Add all
		/// </summary>
		public static readonly MyStringId AddAll = MyStringId.GetOrCompute("AddAll");

		/// <summary>
		/// Add NPC
		/// </summary>
		public static readonly MyStringId AddNpcToFaction = MyStringId.GetOrCompute("AddNpcToFaction");

		/// <summary>
		/// Adds new NPC identity to this faction - faction will not cease to exist when last player leaves. Available in scenario edit mode only.
		/// </summary>
		public static readonly MyStringId AddNpcToFactionHelp = MyStringId.GetOrCompute("AddNpcToFactionHelp");

		/// <summary>
		/// Admin menu is available only when you're admin or when admin promotes you to Observer and beyond
		/// </summary>
		public static readonly MyStringId AdminMenuNotAvailable = MyStringId.GetOrCompute("AdminMenuNotAvailable");

		/// <summary>
		/// Sprint
		/// </summary>
		public static readonly MyStringId Afterburner = MyStringId.GetOrCompute("Afterburner");

		/// <summary>
		/// A-Gravity
		/// </summary>
		public static readonly MyStringId AGravity = MyStringId.GetOrCompute("AGravity");

<<<<<<< HEAD
		/// <summary>
		/// Weather
		/// </summary>
		public static readonly MyStringId Weather = MyStringId.GetOrCompute("Weather");

		/// <summary>
		/// Center
		/// </summary>
=======
		public static readonly MyStringId Weather = MyStringId.GetOrCompute("Weather");

>>>>>>> d46cf8619665219cc163a7b28984ced59ed9470d
		public static readonly MyStringId Align_Center = MyStringId.GetOrCompute("Align_Center");

		/// <summary>
		/// Left
		/// </summary>
		public static readonly MyStringId Align_Left = MyStringId.GetOrCompute("Align_Left");

		/// <summary>
		/// Right
		/// </summary>
		public static readonly MyStringId Align_Right = MyStringId.GetOrCompute("Align_Right");

		/// <summary>
		/// Press {0} to dismount target
		/// </summary>
		public static readonly MyStringId AngleGrinderPrimaryAction = MyStringId.GetOrCompute("AngleGrinderPrimaryAction");

		/// <summary>
		/// GDPR Consent agreement
		/// </summary>
		public static readonly MyStringId GDPR_Caption = MyStringId.GetOrCompute("GDPR_Caption");

<<<<<<< HEAD
		/// <summary>
		/// Workshop Consent
		/// </summary>
		public static readonly MyStringId WorkshopConsent = MyStringId.GetOrCompute("WorkshopConsent");

		/// <summary>
		/// Consent
		/// </summary>
		public static readonly MyStringId Consent = MyStringId.GetOrCompute("Consent");

		/// <summary>
		/// Mod.io Consent
		/// </summary>
		public static readonly MyStringId ModIoConsent = MyStringId.GetOrCompute("ModIoConsent");

		/// <summary>
		/// Read our Privacy Policy
		/// </summary>
=======
		public static readonly MyStringId WorkshopConsent = MyStringId.GetOrCompute("WorkshopConsent");

		public static readonly MyStringId Consent = MyStringId.GetOrCompute("Consent");

		public static readonly MyStringId ModIoConsent = MyStringId.GetOrCompute("ModIoConsent");

>>>>>>> d46cf8619665219cc163a7b28984ced59ed9470d
		public static readonly MyStringId GDPR_PrivacyPolicy = MyStringId.GetOrCompute("GDPR_PrivacyPolicy");

		/// <summary>
		/// Data protection laws have changed in the European Union and we want to make sure you review how your personal data is processed in Space Engineers.
		/// </summary>
		public static readonly MyStringId GDPR_Text1 = MyStringId.GetOrCompute("GDPR_Text1");

		/// <summary>
		/// By clicking Yes you agree to collect personal data according to GDPR. Read more info in our Privacy policy.
		/// </summary>
		public static readonly MyStringId GDPR_Text2 = MyStringId.GetOrCompute("GDPR_Text2");

		/// <summary>
		/// Enable broadcasting
		/// </summary>
		public static readonly MyStringId Antenna_EnableBroadcast = MyStringId.GetOrCompute("Antenna_EnableBroadcast");

		/// <summary>
		/// Ignore Allied Broadcast
		/// </summary>
		public static readonly MyStringId Antenna_IgnoreAlliedBroadcast = MyStringId.GetOrCompute("Antenna_IgnoreAlliedBroadcast");

		/// <summary>
		/// Ignores broadcasts sent by friendly antenna that do not belong to you
		/// </summary>
		public static readonly MyStringId Antenna_IgnoreAlliedBroadcastTooltip = MyStringId.GetOrCompute("Antenna_IgnoreAlliedBroadcastTooltip");

		/// <summary>
		/// Ignore Other Broadcast
		/// </summary>
		public static readonly MyStringId Antenna_IgnoreOtherBroadcast = MyStringId.GetOrCompute("Antenna_IgnoreOtherBroadcast");

		/// <summary>
		/// Ignores broadcasts sent by neutral and enemy antenna
		/// </summary>
		public static readonly MyStringId Antenna_IgnoreOtherBroadcastTooltip = MyStringId.GetOrCompute("Antenna_IgnoreOtherBroadcastTooltip");

		/// <summary>
		/// Disabled
		/// </summary>
		public static readonly MyStringId AssemblerState_Disabled = MyStringId.GetOrCompute("AssemblerState_Disabled");

		/// <summary>
		/// Inventory is full
		/// </summary>
		public static readonly MyStringId AssemblerState_InventoryFull = MyStringId.GetOrCompute("AssemblerState_InventoryFull");

		/// <summary>
		/// Missing items
		/// </summary>
		public static readonly MyStringId AssemblerState_MissingItems = MyStringId.GetOrCompute("AssemblerState_MissingItems");

		/// <summary>
		/// Not enough power
		/// </summary>
		public static readonly MyStringId AssemblerState_NotEnoughPower = MyStringId.GetOrCompute("AssemblerState_NotEnoughPower");

		/// <summary>
		/// Nothing produced right now
		/// </summary>
		public static readonly MyStringId AssemblerState_NothingBeingProduced = MyStringId.GetOrCompute("AssemblerState_NothingBeingProduced");

		/// <summary>
		/// Assembler damaged or dismounted
		/// </summary>
		public static readonly MyStringId AssemblerState_NotWorking = MyStringId.GetOrCompute("AssemblerState_NotWorking");

		/// <summary>
		/// Cooperative Mode
		/// </summary>
		public static readonly MyStringId Assembler_SlaveMode = MyStringId.GetOrCompute("Assembler_SlaveMode");

		/// <summary>
		/// Asteroids
		/// </summary>
		public static readonly MyStringId Asteroids = MyStringId.GetOrCompute("Asteroids");

		/// <summary>
		/// Asteroid amount
		/// </summary>
		public static readonly MyStringId Asteroid_Amount = MyStringId.GetOrCompute("Asteroid_Amount");

		/// <summary>
		/// Attach to selected entity
		/// </summary>
		public static readonly MyStringId AttachToSelectedEntity = MyStringId.GetOrCompute("AttachToSelectedEntity");

		/// <summary>
		/// AUTO
		/// </summary>
		public static readonly MyStringId AUTO = MyStringId.GetOrCompute("AUTO");

		/// <summary>
		/// Battery
		/// </summary>
		public static readonly MyStringId BatteryBlock = MyStringId.GetOrCompute("BatteryBlock");

		/// <summary>
		/// BiggestDistanceFromPlayers
		/// </summary>
		public static readonly MyStringId BiggestDistanceFromPlayers = MyStringId.GetOrCompute("BiggestDistanceFromPlayers");

		/// <summary>
		/// BiggestGrids
		/// </summary>
		public static readonly MyStringId BiggestGrids = MyStringId.GetOrCompute("BiggestGrids");

		/// <summary>
		/// Blind Jump
		/// </summary>
		public static readonly MyStringId BlindJump = MyStringId.GetOrCompute("BlindJump");

		/// <summary>
		/// Add Piston Head
		/// </summary>
		public static readonly MyStringId BlockActionTitle_AddPistonHead = MyStringId.GetOrCompute("BlockActionTitle_AddPistonHead");

		/// <summary>
		/// Add Rotor Head
		/// </summary>
		public static readonly MyStringId BlockActionTitle_AddRotorHead = MyStringId.GetOrCompute("BlockActionTitle_AddRotorHead");

		/// <summary>
		/// Add Small Head
		/// </summary>
		public static readonly MyStringId BlockActionTitle_AddSmallRotorHead = MyStringId.GetOrCompute("BlockActionTitle_AddSmallRotorHead");

<<<<<<< HEAD
		/// <summary>
		/// Add Hinge Head
		/// </summary>
		public static readonly MyStringId BlockActionTitle_AddHingeHead = MyStringId.GetOrCompute("BlockActionTitle_AddHingeHead");

		/// <summary>
		/// Add Small Head
		/// </summary>
		public static readonly MyStringId BlockActionTitle_AddSmallHingeHead = MyStringId.GetOrCompute("BlockActionTitle_AddSmallHingeHead");

		/// <summary>
		/// Add
		/// </summary>
=======
		public static readonly MyStringId BlockActionTitle_AddHingeHead = MyStringId.GetOrCompute("BlockActionTitle_AddHingeHead");

		public static readonly MyStringId BlockActionTitle_AddSmallHingeHead = MyStringId.GetOrCompute("BlockActionTitle_AddSmallHingeHead");

>>>>>>> d46cf8619665219cc163a7b28984ced59ed9470d
		public static readonly MyStringId BlockActionTitle_AddWaypoint = MyStringId.GetOrCompute("BlockActionTitle_AddWaypoint");

		/// <summary>
		/// Add Wheel
		/// </summary>
		public static readonly MyStringId BlockActionTitle_AddWheel = MyStringId.GetOrCompute("BlockActionTitle_AddWheel");

		/// <summary>
		/// Attach
		/// </summary>
		public static readonly MyStringId BlockActionTitle_Attach = MyStringId.GetOrCompute("BlockActionTitle_Attach");

		/// <summary>
		/// Enable Auto
		/// </summary>
		public static readonly MyStringId BlockActionTitle_AutoEnable = MyStringId.GetOrCompute("BlockActionTitle_AutoEnable");

		/// <summary>
		/// Detach
		/// </summary>
		public static readonly MyStringId BlockActionTitle_Detach = MyStringId.GetOrCompute("BlockActionTitle_Detach");

		/// <summary>
		/// Discharge On/Off
		/// </summary>
		public static readonly MyStringId BlockActionTitle_DischargeToggle = MyStringId.GetOrCompute("BlockActionTitle_DischargeToggle");

		/// <summary>
		/// Extend
		/// </summary>
		public static readonly MyStringId BlockActionTitle_Extend = MyStringId.GetOrCompute("BlockActionTitle_Extend");

		/// <summary>
		/// Jump
		/// </summary>
		public static readonly MyStringId BlockActionTitle_Jump = MyStringId.GetOrCompute("BlockActionTitle_Jump");

		/// <summary>
		/// Park
		/// </summary>
		public static readonly MyStringId BlockActionTitle_Park = MyStringId.GetOrCompute("BlockActionTitle_Park");

		/// <summary>
		/// Lock
		/// </summary>
		public static readonly MyStringId BlockActionTitle_Lock = MyStringId.GetOrCompute("BlockActionTitle_Lock");

		/// <summary>
		/// Move Down
		/// </summary>
		public static readonly MyStringId BlockActionTitle_MoveWaypointDown = MyStringId.GetOrCompute("BlockActionTitle_MoveWaypointDown");

		/// <summary>
		/// Move Up
		/// </summary>
		public static readonly MyStringId BlockActionTitle_MoveWaypointUp = MyStringId.GetOrCompute("BlockActionTitle_MoveWaypointUp");

		/// <summary>
		/// Recharge On/Off
		/// </summary>
		public static readonly MyStringId BlockActionTitle_RechargeToggle = MyStringId.GetOrCompute("BlockActionTitle_RechargeToggle");

		/// <summary>
		/// Copy
		/// </summary>
		public static readonly MyStringId BlockActionTitle_RemoteCopy = MyStringId.GetOrCompute("BlockActionTitle_RemoteCopy");

		/// <summary>
		/// Paste
		/// </summary>
		public static readonly MyStringId BlockActionTitle_RemotePaste = MyStringId.GetOrCompute("BlockActionTitle_RemotePaste");

		/// <summary>
		/// Remove
		/// </summary>
		public static readonly MyStringId BlockActionTitle_RemoveWaypoint = MyStringId.GetOrCompute("BlockActionTitle_RemoveWaypoint");

		/// <summary>
		/// Retract
		/// </summary>
		public static readonly MyStringId BlockActionTitle_Retract = MyStringId.GetOrCompute("BlockActionTitle_Retract");

		/// <summary>
		/// Reverse
		/// </summary>
		public static readonly MyStringId BlockActionTitle_Reverse = MyStringId.GetOrCompute("BlockActionTitle_Reverse");

		/// <summary>
		/// Switch lock
		/// </summary>
		public static readonly MyStringId BlockActionTitle_SwitchLock = MyStringId.GetOrCompute("BlockActionTitle_SwitchLock");

		/// <summary>
		/// Unlock
		/// </summary>
		public static readonly MyStringId BlockActionTitle_Unlock = MyStringId.GetOrCompute("BlockActionTitle_Unlock");

		/// <summary>
		/// View
		/// </summary>
		public static readonly MyStringId BlockActionTitle_View = MyStringId.GetOrCompute("BlockActionTitle_View");

		/// <summary>
		/// Reset waypoint
		/// </summary>
		public static readonly MyStringId BlockActionTitle_WaypointReset = MyStringId.GetOrCompute("BlockActionTitle_WaypointReset");

		/// <summary>
		/// Tries to add a piston head if no head is present
		/// </summary>
		public static readonly MyStringId BlockActionTooltip_AddPistonHead = MyStringId.GetOrCompute("BlockActionTooltip_AddPistonHead");

		/// <summary>
		/// Tries to add a Rotor head if no head is present
		/// </summary>
		public static readonly MyStringId BlockActionTooltip_AddRotorHead = MyStringId.GetOrCompute("BlockActionTooltip_AddRotorHead");

		/// <summary>
		/// Tries to add a Small Rotor head on Large Rotor if no head is present
		/// </summary>
		public static readonly MyStringId BlockActionTooltip_AddSmallRotorHead = MyStringId.GetOrCompute("BlockActionTooltip_AddSmallRotorHead");

<<<<<<< HEAD
		/// <summary>
		/// Tries to add a Hinge head if no head is present
		/// </summary>
		public static readonly MyStringId BlockActionTooltip_AddHingeHead = MyStringId.GetOrCompute("BlockActionTooltip_AddHingeHead");

		/// <summary>
		/// Tries to add a Small Hinge head on Large Hinge if no head is present
		/// </summary>
		public static readonly MyStringId BlockActionTooltip_AddSmallHingeHead = MyStringId.GetOrCompute("BlockActionTooltip_AddSmallHingeHead");

		/// <summary>
		/// Tries to add a Wheel if no wheel is present
		/// </summary>
=======
		public static readonly MyStringId BlockActionTooltip_AddHingeHead = MyStringId.GetOrCompute("BlockActionTooltip_AddHingeHead");

		public static readonly MyStringId BlockActionTooltip_AddSmallHingeHead = MyStringId.GetOrCompute("BlockActionTooltip_AddSmallHingeHead");

>>>>>>> d46cf8619665219cc163a7b28984ced59ed9470d
		public static readonly MyStringId BlockActionTooltip_AddWheel = MyStringId.GetOrCompute("BlockActionTooltip_AddWheel");

		/// <summary>
		/// To execute the jump, assign the "Jump" command to the toolbar of a cockpit
		/// </summary>
		public static readonly MyStringId BlockActionTooltip_SelectedJumpTarget = MyStringId.GetOrCompute("BlockActionTooltip_SelectedJumpTarget");

		/// <summary>
		/// Resets current waypoint to first position
		/// </summary>
		public static readonly MyStringId BlockActionTooltip_WaypointReset = MyStringId.GetOrCompute("BlockActionTooltip_WaypointReset");

		/// <summary>
		/// Blacklist
		/// </summary>
		public static readonly MyStringId BlockAction_ConveyorSorterBlacklist = MyStringId.GetOrCompute("BlockAction_ConveyorSorterBlacklist");

		/// <summary>
		/// Whitelist
		/// </summary>
		public static readonly MyStringId BlockAction_ConveyorSorterWhitelist = MyStringId.GetOrCompute("BlockAction_ConveyorSorterWhitelist");

		/// <summary>
		/// Closed
		/// </summary>
		public static readonly MyStringId BlockAction_DoorClosed = MyStringId.GetOrCompute("BlockAction_DoorClosed");

		/// <summary>
		/// Open
		/// </summary>
		public static readonly MyStringId BlockAction_DoorOpen = MyStringId.GetOrCompute("BlockAction_DoorOpen");

		/// <summary>
		/// [remove from toolbar]
		/// </summary>
		public static readonly MyStringId BlockAction_RemoveFromToolbar = MyStringId.GetOrCompute("BlockAction_RemoveFromToolbar");

		/// <summary>
		/// Switch
		/// </summary>
		public static readonly MyStringId BlockAction_Switch = MyStringId.GetOrCompute("BlockAction_Switch");

		/// <summary>
		/// Toggle block
		/// </summary>
		public static readonly MyStringId BlockAction_Toggle = MyStringId.GetOrCompute("BlockAction_Toggle");

		/// <summary>
		/// Only owner
		/// </summary>
		public static readonly MyStringId BlockComboBoxValue_TextPanelAccessOnlyOwner = MyStringId.GetOrCompute("BlockComboBoxValue_TextPanelAccessOnlyOwner");

		/// <summary>
		/// Everyone read-only
		/// </summary>
		public static readonly MyStringId BlockComboBoxValue_TextPanelAccessReadAll = MyStringId.GetOrCompute("BlockComboBoxValue_TextPanelAccessReadAll");

		/// <summary>
		/// Faction read-only
		/// </summary>
		public static readonly MyStringId BlockComboBoxValue_TextPanelAccessReadFaction = MyStringId.GetOrCompute("BlockComboBoxValue_TextPanelAccessReadFaction");

		/// <summary>
		/// Everyone read/write
		/// </summary>
		public static readonly MyStringId BlockComboBoxValue_TextPanelAccessReadWriteAll = MyStringId.GetOrCompute("BlockComboBoxValue_TextPanelAccessReadWriteAll");

		/// <summary>
		/// Faction read/write
		/// </summary>
		public static readonly MyStringId BlockComboBoxValue_TextPanelAccessReadWriteFaction = MyStringId.GetOrCompute("BlockComboBoxValue_TextPanelAccessReadWriteFaction");

		/// <summary>
		/// None
		/// </summary>
		public static readonly MyStringId BlockComboBoxValue_TextPanelShowTextNone = MyStringId.GetOrCompute("BlockComboBoxValue_TextPanelShowTextNone");

		/// <summary>
		/// Private
		/// </summary>
		public static readonly MyStringId BlockComboBoxValue_TextPanelShowTextPrivate = MyStringId.GetOrCompute("BlockComboBoxValue_TextPanelShowTextPrivate");

		/// <summary>
		/// Public
		/// </summary>
		public static readonly MyStringId BlockComboBoxValue_TextPanelShowTextPublic = MyStringId.GetOrCompute("BlockComboBoxValue_TextPanelShowTextPublic");

		/// <summary>
		/// BlockCount
		/// </summary>
		public static readonly MyStringId BlockCount = MyStringId.GetOrCompute("BlockCount");

		/// <summary>
		/// Block is not powered
		/// </summary>
		public static readonly MyStringId BlockIsNotPowered = MyStringId.GetOrCompute("BlockIsNotPowered");

		/// <summary>
		/// Me
		/// </summary>
		public static readonly MyStringId BlockOwner_Me = MyStringId.GetOrCompute("BlockOwner_Me");

		/// <summary>
		/// Nobody
		/// </summary>
		public static readonly MyStringId BlockOwner_Nobody = MyStringId.GetOrCompute("BlockOwner_Nobody");

		/// <summary>
		/// Owner
		/// </summary>
		public static readonly MyStringId BlockOwner_Owner = MyStringId.GetOrCompute("BlockOwner_Owner");

		/// <summary>
		/// Share with all
		/// </summary>
		public static readonly MyStringId BlockOwner_ShareAll = MyStringId.GetOrCompute("BlockOwner_ShareAll");

		/// <summary>
		/// Share with my faction
		/// </summary>
		public static readonly MyStringId BlockOwner_ShareFaction = MyStringId.GetOrCompute("BlockOwner_ShareFaction");

		/// <summary>
		/// No share
		/// </summary>
		public static readonly MyStringId BlockOwner_ShareNone = MyStringId.GetOrCompute("BlockOwner_ShareNone");

		/// <summary>
		/// Transfer ownership
		/// </summary>
		public static readonly MyStringId BlockOwner_Transfer = MyStringId.GetOrCompute("BlockOwner_Transfer");

		/// <summary>
		/// Transfer to:
		/// </summary>
		public static readonly MyStringId BlockOwner_TransferTo = MyStringId.GetOrCompute("BlockOwner_TransferTo");

		/// <summary>
		/// Unknown
		/// </summary>
		public static readonly MyStringId BlockOwner_Unknown = MyStringId.GetOrCompute("BlockOwner_Unknown");

		/// <summary>
		/// Current jump:
		/// </summary>
		public static readonly MyStringId BlockPropertiesText_CurrentJump = MyStringId.GetOrCompute("BlockPropertiesText_CurrentJump");

		/// <summary>
		/// Fully depleted in: 
		/// </summary>
		public static readonly MyStringId BlockPropertiesText_DepletedIn = MyStringId.GetOrCompute("BlockPropertiesText_DepletedIn");

		/// <summary>
		/// Effectiveness:
		/// </summary>
		public static readonly MyStringId BlockPropertiesText_Effectiveness = MyStringId.GetOrCompute("BlockPropertiesText_Effectiveness");

		/// <summary>
		/// Power Efficiency:
		/// </summary>
		public static readonly MyStringId BlockPropertiesText_Efficiency = MyStringId.GetOrCompute("BlockPropertiesText_Efficiency");

		/// <summary>
		/// Looking for any Head to attach
		/// </summary>
		public static readonly MyStringId BlockPropertiesText_HeadAttachingAny = MyStringId.GetOrCompute("BlockPropertiesText_HeadAttachingAny");

		/// <summary>
		/// Looking for specific Head to attach
		/// </summary>
		public static readonly MyStringId BlockPropertiesText_HeadAttachingSpecific = MyStringId.GetOrCompute("BlockPropertiesText_HeadAttachingSpecific");

		/// <summary>
		/// Lock State: 
		/// </summary>
		public static readonly MyStringId BlockPropertiesText_LockState = MyStringId.GetOrCompute("BlockPropertiesText_LockState");

		/// <summary>
		/// Loop timer: 
		/// </summary>
		public static readonly MyStringId BlockPropertiesText_LoopTimer = MyStringId.GetOrCompute("BlockPropertiesText_LoopTimer");

		/// <summary>
		/// Main ship cockpit
		/// </summary>
		public static readonly MyStringId BlockPropertiesText_MainCockpit = MyStringId.GetOrCompute("BlockPropertiesText_MainCockpit");

		/// <summary>
		/// Max jump distance:
		/// </summary>
		public static readonly MyStringId BlockPropertiesText_MaxJump = MyStringId.GetOrCompute("BlockPropertiesText_MaxJump");

		/// <summary>
		/// Max Output: 
		/// </summary>
		public static readonly MyStringId BlockPropertiesText_MaxOutput = MyStringId.GetOrCompute("BlockPropertiesText_MaxOutput");

		/// <summary>
		/// Max Required Input: 
		/// </summary>
		public static readonly MyStringId BlockPropertiesText_MaxRequiredInput = MyStringId.GetOrCompute("BlockPropertiesText_MaxRequiredInput");

		/// <summary>
		/// Max Stored Power: 
		/// </summary>
		public static readonly MyStringId BlockPropertiesText_MaxStoredPower = MyStringId.GetOrCompute("BlockPropertiesText_MaxStoredPower");

		/// <summary>
		/// The current rotor rotation speed is too high. Rotor will be locked when angular velocity gets lower.
		/// </summary>
		public static readonly MyStringId BlockPropertiesText_MotoLockOverrideDisabled = MyStringId.GetOrCompute("BlockPropertiesText_MotoLockOverrideDisabled");

		/// <summary>
		/// Attached
		/// </summary>
		public static readonly MyStringId BlockPropertiesText_MotorAttached = MyStringId.GetOrCompute("BlockPropertiesText_MotorAttached");

		/// <summary>
		/// Looking for any rotor to attach
		/// </summary>
		public static readonly MyStringId BlockPropertiesText_MotorAttachingAny = MyStringId.GetOrCompute("BlockPropertiesText_MotorAttachingAny");

		/// <summary>
		/// Looking for specific rotor to attach
		/// </summary>
		public static readonly MyStringId BlockPropertiesText_MotorAttachingSpecific = MyStringId.GetOrCompute("BlockPropertiesText_MotorAttachingSpecific");

		/// <summary>
		/// Current angle: 
		/// </summary>
		public static readonly MyStringId BlockPropertiesText_MotorCurrentAngle = MyStringId.GetOrCompute("BlockPropertiesText_MotorCurrentAngle");

		/// <summary>
		/// Detached
		/// </summary>
		public static readonly MyStringId BlockPropertiesText_MotorDetached = MyStringId.GetOrCompute("BlockPropertiesText_MotorDetached");

		/// <summary>
		/// The current rotor rotation is out of limits, the limits will be enabled when the rotor is within range
		/// </summary>
		public static readonly MyStringId BlockPropertiesText_MotorLimitsDisabled = MyStringId.GetOrCompute("BlockPropertiesText_MotorLimitsDisabled");

		/// <summary>
		/// Safety locked
		/// </summary>
		public static readonly MyStringId BlockPropertiesText_MotorLocked = MyStringId.GetOrCompute("BlockPropertiesText_MotorLocked");

		/// <summary>
		/// Oxygen Output: 
		/// </summary>
		public static readonly MyStringId BlockPropertiesText_OxygenOutput = MyStringId.GetOrCompute("BlockPropertiesText_OxygenOutput");

		/// <summary>
		/// Current position: 
		/// </summary>
		public static readonly MyStringId BlockPropertiesText_PistonCurrentPosition = MyStringId.GetOrCompute("BlockPropertiesText_PistonCurrentPosition");

		/// <summary>
		/// Productivity:
		/// </summary>
		public static readonly MyStringId BlockPropertiesText_Productivity = MyStringId.GetOrCompute("BlockPropertiesText_Productivity");

		/// <summary>
		/// Fully recharged in: 
		/// </summary>
		public static readonly MyStringId BlockPropertiesText_RechargedIn = MyStringId.GetOrCompute("BlockPropertiesText_RechargedIn");

		/// <summary>
		/// Required Input: 
		/// </summary>
		public static readonly MyStringId BlockPropertiesText_RequiredInput = MyStringId.GetOrCompute("BlockPropertiesText_RequiredInput");

		/// <summary>
		/// Stored power: 
		/// </summary>
		public static readonly MyStringId BlockPropertiesText_StoredPower = MyStringId.GetOrCompute("BlockPropertiesText_StoredPower");

		/// <summary>
		/// All blocks from the spawned ship will have the same ownership settings as this projector
		/// </summary>
		public static readonly MyStringId BlockPropertiesTooltip_Projector_GetOwnership = MyStringId.GetOrCompute("BlockPropertiesTooltip_Projector_GetOwnership");

		/// <summary>
		/// Retract
		/// </summary>
		public static readonly MyStringId BlockPropertyButtonOff_Retract = MyStringId.GetOrCompute("BlockPropertyButtonOff_Retract");

		/// <summary>
		/// Expand
		/// </summary>
		public static readonly MyStringId BlockPropertyButtonOn_Expand = MyStringId.GetOrCompute("BlockPropertyButtonOn_Expand");

		/// <summary>
		/// If false checks whether player pressing button has access to the block
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_AnyoneCanUse = MyStringId.GetOrCompute("BlockPropertyDescription_AnyoneCanUse");

		/// <summary>
		/// Landing gear will unlock automatically when force applied to keep it attached is larger than this value
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_BreakForce = MyStringId.GetOrCompute("BlockPropertyDescription_BreakForce");

		/// <summary>
		/// Broadcast radius
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_BroadcastRadius = MyStringId.GetOrCompute("BlockPropertyDescription_BroadcastRadius");

		/// <summary>
		/// Broadcast using antennas
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_BroadcastUsingAntennas = MyStringId.GetOrCompute("BlockPropertyDescription_BroadcastUsingAntennas");

		/// <summary>
		/// Connector strength when aligning ship (yellow color), smaller strength of two connectors is used
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_Connector_Strength = MyStringId.GetOrCompute("BlockPropertyDescription_Connector_Strength");

		/// <summary>
		/// The vent will remove air from the room and store it in tanks
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_Depressurize = MyStringId.GetOrCompute("BlockPropertyDescription_Depressurize");

		/// <summary>
		/// Gravitational acceleration of the generator
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_GravityAcceleration = MyStringId.GetOrCompute("BlockPropertyDescription_GravityAcceleration");

		/// <summary>
		/// Depth of the gravity field of the generator
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_GravityFieldDepth = MyStringId.GetOrCompute("BlockPropertyDescription_GravityFieldDepth");

		/// <summary>
		/// Height of the gravity field of the generator
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_GravityFieldHeight = MyStringId.GetOrCompute("BlockPropertyDescription_GravityFieldHeight");

		/// <summary>
		/// Radius of the gravity field
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_GravityFieldRadius = MyStringId.GetOrCompute("BlockPropertyDescription_GravityFieldRadius");

		/// <summary>
		/// Width of the gravity field of the generator
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_GravityFieldWidth = MyStringId.GetOrCompute("BlockPropertyDescription_GravityFieldWidth");

		/// <summary>
		/// If set, the gyro does not respond to cockpit controls, but can instead be controlled manually using the terminal control sliders
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_GyroOverride = MyStringId.GetOrCompute("BlockPropertyDescription_GyroOverride");

		/// <summary>
		/// Pitch component of the constant torque that is applied by this gyro if the cockpit controls are overridden
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_GyroPitchOverride = MyStringId.GetOrCompute("BlockPropertyDescription_GyroPitchOverride");

		/// <summary>
		/// Supplied power affects gyroscope force
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_GyroPower = MyStringId.GetOrCompute("BlockPropertyDescription_GyroPower");

		/// <summary>
		/// Roll component of the constant torque that is applied by this gyro if the cockpit controls are overridden
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_GyroRollOverride = MyStringId.GetOrCompute("BlockPropertyDescription_GyroRollOverride");

		/// <summary>
		/// Yaw component of the constant torque that is applied by this gyro if the cockpit controls are overridden
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_GyroYawOverride = MyStringId.GetOrCompute("BlockPropertyDescription_GyroYawOverride");

		/// <summary>
		/// Range
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_LaserRange = MyStringId.GetOrCompute("BlockPropertyDescription_LaserRange");

		/// <summary>
		/// Blinking interval of light (in seconds)
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_LightBlinkInterval = MyStringId.GetOrCompute("BlockPropertyDescription_LightBlinkInterval");

		/// <summary>
		/// Length of blinking as percentage of blink interval
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_LightBlinkLenght = MyStringId.GetOrCompute("BlockPropertyDescription_LightBlinkLenght");

		/// <summary>
		/// Offset of blinking as percentage of blink interval
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_LightBlinkOffset = MyStringId.GetOrCompute("BlockPropertyDescription_LightBlinkOffset");

		/// <summary>
		/// Color of the light
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_LightColor = MyStringId.GetOrCompute("BlockPropertyDescription_LightColor");

		/// <summary>
		/// Exponential falloff of the light (1 = linear, 2 = quadratic, etc)
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_LightFalloff = MyStringId.GetOrCompute("BlockPropertyDescription_LightFalloff");

		/// <summary>
		/// Intensity of the light
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_LightIntensity = MyStringId.GetOrCompute("BlockPropertyDescription_LightIntensity");

		/// <summary>
		/// Offset of the light from model
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_LightOffset = MyStringId.GetOrCompute("BlockPropertyDescription_LightOffset");

		/// <summary>
		/// Radius of influence of the light
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_LightRadius = MyStringId.GetOrCompute("BlockPropertyDescription_LightRadius");

		/// <summary>
		/// Reflector radius of influence of the light
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_LightReflectorRadius = MyStringId.GetOrCompute("BlockPropertyDescription_LightReflectorRadius");

		/// <summary>
		/// Braking strength of the {0}: how fast it will stop (applied when the {0} is turned off)
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_MotorBrakingTorque = MyStringId.GetOrCompute("BlockPropertyDescription_MotorBrakingTorque");

		/// <summary>
		/// Rotor will lock its current position
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_MotorLock = MyStringId.GetOrCompute("BlockPropertyDescription_MotorLock");

<<<<<<< HEAD
		/// <summary>
		/// Hinge will lock its current position
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_HingeLock = MyStringId.GetOrCompute("BlockPropertyDescription_HingeLock");

		/// <summary>
		/// Lower angular limit
		/// </summary>
=======
		public static readonly MyStringId BlockPropertyDescription_HingeLock = MyStringId.GetOrCompute("BlockPropertyDescription_HingeLock");

>>>>>>> d46cf8619665219cc163a7b28984ced59ed9470d
		public static readonly MyStringId BlockPropertyDescription_MotorLowerLimit = MyStringId.GetOrCompute("BlockPropertyDescription_MotorLowerLimit");

		/// <summary>
		/// Allows to move the rotor grid up or down to solve various alignment issues
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_MotorRotorDisplacement = MyStringId.GetOrCompute("BlockPropertyDescription_MotorRotorDisplacement");

		/// <summary>
		/// The torque of the {0}: how fast it will accelerate (applied when the {0} is turned on)
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_MotorTorque = MyStringId.GetOrCompute("BlockPropertyDescription_MotorTorque");

		/// <summary>
		/// Upper angular limit
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_MotorUpperLimit = MyStringId.GetOrCompute("BlockPropertyDescription_MotorUpperLimit");

		/// <summary>
		/// Indicates whether motor is controlled like a wheel directly from cockpit
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_MotorUsesWheelCommands = MyStringId.GetOrCompute("BlockPropertyDescription_MotorUsesWheelCommands");

		/// <summary>
		/// Target velocity of the {0}; the {0} will accelerate until the target velocity is reached
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_MotorVelocity = MyStringId.GetOrCompute("BlockPropertyDescription_MotorVelocity");

		/// <summary>
		/// Regulates wheel friction by changing pressure in the tire
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_Motor_Friction = MyStringId.GetOrCompute("BlockPropertyDescription_Motor_Friction");

		/// <summary>
		/// Axle height offset from center
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_Motor_Height = MyStringId.GetOrCompute("BlockPropertyDescription_Motor_Height");

		/// <summary>
		/// Invert the propulsion direction
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_Motor_InvertPropulsion = MyStringId.GetOrCompute("BlockPropertyDescription_Motor_InvertPropulsion");

		/// <summary>
		/// Invert the steering direction
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_Motor_InvertSteer = MyStringId.GetOrCompute("BlockPropertyDescription_Motor_InvertSteer");

		/// <summary>
		/// The maximum angle that the wheel will turn when steering
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_Motor_MaxSteerAngle = MyStringId.GetOrCompute("BlockPropertyDescription_Motor_MaxSteerAngle");

		/// <summary>
		/// Power supplied to propulsion
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_Motor_Power = MyStringId.GetOrCompute("BlockPropertyDescription_Motor_Power");

		/// <summary>
		/// If the wheel is propelled
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_Motor_Propulsion = MyStringId.GetOrCompute("BlockPropertyDescription_Motor_Propulsion");

		/// <summary>
		/// Propulsion override
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_Motor_PropulsionOverride = MyStringId.GetOrCompute("BlockPropertyDescription_Motor_PropulsionOverride");

		/// <summary>
		/// Control steering of this suspension from cockpit
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_Motor_Steering = MyStringId.GetOrCompute("BlockPropertyDescription_Motor_Steering");

		/// <summary>
		/// Steer override
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_Motor_SteerOverride = MyStringId.GetOrCompute("BlockPropertyDescription_Motor_SteerOverride");

		/// <summary>
		/// The wheel's return speed from turning
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_Motor_SteerReturnSpeed = MyStringId.GetOrCompute("BlockPropertyDescription_Motor_SteerReturnSpeed");

		/// <summary>
		/// The wheel turn speed
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_Motor_SteerSpeed = MyStringId.GetOrCompute("BlockPropertyDescription_Motor_SteerSpeed");

		/// <summary>
		/// Wheels will not be propeled over this speed
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_Motor_SuspensionSpeed = MyStringId.GetOrCompute("BlockPropertyDescription_Motor_SuspensionSpeed");

		/// <summary>
		/// Limits the suspension's travel height. Setting to 0% will effectively lock the suspension.
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_Motor_SuspensionTravel = MyStringId.GetOrCompute("BlockPropertyDescription_Motor_SuspensionTravel");

		/// <summary>
		/// Maximum detection range
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_OreDetectorRange = MyStringId.GetOrCompute("BlockPropertyDescription_OreDetectorRange");

		/// <summary>
		/// How far the sensing field extends backwards from the sensor's position
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_SensorFieldBack = MyStringId.GetOrCompute("BlockPropertyDescription_SensorFieldBack");

		/// <summary>
		/// How far the sensing field extends below the sensor's position
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_SensorFieldBottom = MyStringId.GetOrCompute("BlockPropertyDescription_SensorFieldBottom");

		/// <summary>
		/// How far the sensing field extends in front of the sensor
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_SensorFieldFront = MyStringId.GetOrCompute("BlockPropertyDescription_SensorFieldFront");

		/// <summary>
		/// How far the sensing field extends to the left from the sensor's position
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_SensorFieldLeft = MyStringId.GetOrCompute("BlockPropertyDescription_SensorFieldLeft");

		/// <summary>
		/// How far the sensing field extends to the right from the sensor's position
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_SensorFieldRight = MyStringId.GetOrCompute("BlockPropertyDescription_SensorFieldRight");

		/// <summary>
		/// How far the sensing field extends above the sensor's position
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_SensorFieldTop = MyStringId.GetOrCompute("BlockPropertyDescription_SensorFieldTop");

		/// <summary>
		/// Opens toolbar
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_SensorToolbarOpen = MyStringId.GetOrCompute("BlockPropertyDescription_SensorToolbarOpen");

		/// <summary>
		/// Show ship name
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_ShowShipName = MyStringId.GetOrCompute("BlockPropertyDescription_ShowShipName");

		/// <summary>
		/// Range of played sound
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_SoundBlockRange = MyStringId.GetOrCompute("BlockPropertyDescription_SoundBlockRange");

		/// <summary>
		/// Volume of played sound
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_SoundBlockVolume = MyStringId.GetOrCompute("BlockPropertyDescription_SoundBlockVolume");

		/// <summary>
		/// Friction
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_SpaceBallFriction = MyStringId.GetOrCompute("BlockPropertyDescription_SpaceBallFriction");

		/// <summary>
		/// Restitution
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_SpaceBallRestitution = MyStringId.GetOrCompute("BlockPropertyDescription_SpaceBallRestitution");

		/// <summary>
		/// Virtual mass
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_SpaceBallVirtualMass = MyStringId.GetOrCompute("BlockPropertyDescription_SpaceBallVirtualMass");

		/// <summary>
		/// Stockpiling tanks will not get drained by air vents
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_Stockpile = MyStringId.GetOrCompute("BlockPropertyDescription_Stockpile");

		/// <summary>
		/// Automatically increases the strength of suspension spring when it is about to land hard.
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_Suspension_AirShock = MyStringId.GetOrCompute("BlockPropertyDescription_Suspension_AirShock");

		/// <summary>
		/// Enables sensitivity on brake input.
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_Suspension_Brake = MyStringId.GetOrCompute("BlockPropertyDescription_Suspension_Brake");

		/// <summary>
		/// Overriding thruster will cause activation of thruster even without cockpit
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_ThrustOverride = MyStringId.GetOrCompute("BlockPropertyDescription_ThrustOverride");

		/// <summary>
		/// Set actions to be done when autopilot reaches this waypoint
		/// </summary>
		public static readonly MyStringId BlockPropertyPopup_AutoPilotToolbarOpen = MyStringId.GetOrCompute("BlockPropertyPopup_AutoPilotToolbarOpen");

		/// <summary>
		/// Current Input: 
		/// </summary>
		public static readonly MyStringId BlockPropertyProperties_CurrentInput = MyStringId.GetOrCompute("BlockPropertyProperties_CurrentInput");

		/// <summary>
		/// Current Mass: 
		/// </summary>
		public static readonly MyStringId BlockPropertyProperties_CurrentMass = MyStringId.GetOrCompute("BlockPropertyProperties_CurrentMass");

		/// <summary>
		/// Current Output: 
		/// </summary>
		public static readonly MyStringId BlockPropertyProperties_CurrentOutput = MyStringId.GetOrCompute("BlockPropertyProperties_CurrentOutput");

		/// <summary>
		/// Anyone Can Use
		/// </summary>
		public static readonly MyStringId BlockPropertyText_AnyoneCanUse = MyStringId.GetOrCompute("BlockPropertyText_AnyoneCanUse");

		/// <summary>
		/// Target Options
		/// </summary>
		public static readonly MyStringId BlockPropertyText_TargetOptions = MyStringId.GetOrCompute("BlockPropertyText_TargetOptions");

		/// <summary>
		/// Target 
		/// </summary>
		public static readonly MyStringId BlockPropertyText_TargetOptions_Target = MyStringId.GetOrCompute("BlockPropertyText_TargetOptions_Target");

		/// <summary>
		/// Default
		/// </summary>
		public static readonly MyStringId BlockPropertyItem_TargetOptions_Default = MyStringId.GetOrCompute("BlockPropertyItem_TargetOptions_Default");

		/// <summary>
		/// Unknown
		/// </summary>
		public static readonly MyStringId BlockPropertyItem_TargetOptions_Unknown = MyStringId.GetOrCompute("BlockPropertyItem_TargetOptions_Unknown");

		/// <summary>
		/// Weapons
		/// </summary>
		public static readonly MyStringId DisplayName_TargetOptions_Weapons = MyStringId.GetOrCompute("DisplayName_TargetOptions_Weapons");

		/// <summary>
		/// Propulsion
		/// </summary>
		public static readonly MyStringId DisplayName_TargetOptions_Propulsion = MyStringId.GetOrCompute("DisplayName_TargetOptions_Propulsion");

		/// <summary>
		/// Power systems
		/// </summary>
		public static readonly MyStringId DisplayName_TargetOptions_PowerSystems = MyStringId.GetOrCompute("DisplayName_TargetOptions_PowerSystems");

		/// <summary>
		/// Cycle Subsystems
		/// </summary>
		public static readonly MyStringId BlockPropertyItem_TargetOptions_CycleSubsystems = MyStringId.GetOrCompute("BlockPropertyItem_TargetOptions_CycleSubsystems");

		/// <summary>
		/// Button
		/// </summary>
		public static readonly MyStringId BlockPropertyText_Button = MyStringId.GetOrCompute("BlockPropertyText_Button");

		/// <summary>
		/// Available buttons
		/// </summary>
		public static readonly MyStringId BlockPropertyText_ButtonList = MyStringId.GetOrCompute("BlockPropertyText_ButtonList");

		/// <summary>
		/// Button name
		/// </summary>
		public static readonly MyStringId BlockPropertyText_ButtonName = MyStringId.GetOrCompute("BlockPropertyText_ButtonName");

		/// <summary>
		/// Alignment:
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_Alignment = MyStringId.GetOrCompute("BlockPropertyTitle_Alignment");

		/// <summary>
		/// Assigned camera
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_AssignedCamera = MyStringId.GetOrCompute("BlockPropertyTitle_AssignedCamera");

		/// <summary>
		/// Assigned Programmable Block
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_AssignedPB = MyStringId.GetOrCompute("BlockPropertyTitle_AssignedPB");

		/// <summary>
		/// Auto
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_Auto = MyStringId.GetOrCompute("BlockPropertyTitle_Auto");

		/// <summary>
		/// Autopilot
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_AutoPilot = MyStringId.GetOrCompute("BlockPropertyTitle_AutoPilot");

		/// <summary>
		/// Setup Actions
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_AutoPilotToolbarOpen = MyStringId.GetOrCompute("BlockPropertyTitle_AutoPilotToolbarOpen");

		/// <summary>
		/// Auto-Refill
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_AutoRefill = MyStringId.GetOrCompute("BlockPropertyTitle_AutoRefill");

		/// <summary>
		/// Backgr.
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_BackgroundColor = MyStringId.GetOrCompute("BlockPropertyTitle_BackgroundColor");

		/// <summary>
		/// Beacons
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_Beacons = MyStringId.GetOrCompute("BlockPropertyTitle_Beacons");

		/// <summary>
		/// Break Force
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_BreakForce = MyStringId.GetOrCompute("BlockPropertyTitle_BreakForce");

		/// <summary>
		/// Broadcast radius
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_BroadcastRadius = MyStringId.GetOrCompute("BlockPropertyTitle_BroadcastRadius");

		/// <summary>
		/// Charge Mode
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_ChargeMode = MyStringId.GetOrCompute("BlockPropertyTitle_ChargeMode");

		/// <summary>
		/// Collision avoidance
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_CollisionAvoidance = MyStringId.GetOrCompute("BlockPropertyTitle_CollisionAvoidance");

		/// <summary>
		/// Strength
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_Connector_Strength = MyStringId.GetOrCompute("BlockPropertyTitle_Connector_Strength");

		/// <summary>
		/// Content
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_PanelContent = MyStringId.GetOrCompute("BlockPropertyTitle_PanelContent");

		/// <summary>
		/// Add
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_ConveyorSorterAdd = MyStringId.GetOrCompute("BlockPropertyTitle_ConveyorSorterAdd");

		/// <summary>
		/// Add new filter
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_ConveyorSorterCandidatesList = MyStringId.GetOrCompute("BlockPropertyTitle_ConveyorSorterCandidatesList");

		/// <summary>
		/// Active filters
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_ConveyorSorterFilterItemsList = MyStringId.GetOrCompute("BlockPropertyTitle_ConveyorSorterFilterItemsList");

		/// <summary>
		/// Filter Mode
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_ConveyorSorterFilterMode = MyStringId.GetOrCompute("BlockPropertyTitle_ConveyorSorterFilterMode");

		/// <summary>
		/// Blacklist
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_ConveyorSorterFilterModeBlacklist = MyStringId.GetOrCompute("BlockPropertyTitle_ConveyorSorterFilterModeBlacklist");

		/// <summary>
		/// Whitelist
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_ConveyorSorterFilterModeWhitelist = MyStringId.GetOrCompute("BlockPropertyTitle_ConveyorSorterFilterModeWhitelist");

		/// <summary>
		/// Remove
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_ConveyorSorterRemove = MyStringId.GetOrCompute("BlockPropertyTitle_ConveyorSorterRemove");

		/// <summary>
		/// Depressurize
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_Depressurize = MyStringId.GetOrCompute("BlockPropertyTitle_Depressurize");

		/// <summary>
		/// Destination GPS coordinates:
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_DestinationGPS = MyStringId.GetOrCompute("BlockPropertyTitle_DestinationGPS");

		/// <summary>
		/// Discharge
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_Discharge = MyStringId.GetOrCompute("BlockPropertyTitle_Discharge");

		/// <summary>
		/// Precision Mode
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_EnableDockingMode = MyStringId.GetOrCompute("BlockPropertyTitle_EnableDockingMode");

		/// <summary>
		/// Flight Mode
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_FlightMode = MyStringId.GetOrCompute("BlockPropertyTitle_FlightMode");

		/// <summary>
		/// Circle
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_FlightMode_Circle = MyStringId.GetOrCompute("BlockPropertyTitle_FlightMode_Circle");

		/// <summary>
		/// One Way
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_FlightMode_OneWay = MyStringId.GetOrCompute("BlockPropertyTitle_FlightMode_OneWay");

		/// <summary>
		/// Patrol
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_FlightMode_Patrol = MyStringId.GetOrCompute("BlockPropertyTitle_FlightMode_Patrol");

		/// <summary>
		/// Font
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_Font = MyStringId.GetOrCompute("BlockPropertyTitle_Font");

		/// <summary>
		/// Color
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_FontColor = MyStringId.GetOrCompute("BlockPropertyTitle_FontColor");

		/// <summary>
		/// Force
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_Force = MyStringId.GetOrCompute("BlockPropertyTitle_Force");

		/// <summary>
		/// Forward Direction
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_ForwardDirection = MyStringId.GetOrCompute("BlockPropertyTitle_ForwardDirection");

		/// <summary>
		/// GPS Locations
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_GpsLocations = MyStringId.GetOrCompute("BlockPropertyTitle_GpsLocations");

		/// <summary>
		/// Acceleration
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_GravityAcceleration = MyStringId.GetOrCompute("BlockPropertyTitle_GravityAcceleration");

		/// <summary>
		/// Field depth
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_GravityFieldDepth = MyStringId.GetOrCompute("BlockPropertyTitle_GravityFieldDepth");

		/// <summary>
		/// Field height
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_GravityFieldHeight = MyStringId.GetOrCompute("BlockPropertyTitle_GravityFieldHeight");

		/// <summary>
		/// Radius
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_GravityFieldRadius = MyStringId.GetOrCompute("BlockPropertyTitle_GravityFieldRadius");

		/// <summary>
		/// Field width
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_GravityFieldWidth = MyStringId.GetOrCompute("BlockPropertyTitle_GravityFieldWidth");

		/// <summary>
		/// Override controls
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_GyroOverride = MyStringId.GetOrCompute("BlockPropertyTitle_GyroOverride");

		/// <summary>
		/// Pitch override
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_GyroPitchOverride = MyStringId.GetOrCompute("BlockPropertyTitle_GyroPitchOverride");

		/// <summary>
		/// Power
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_GyroPower = MyStringId.GetOrCompute("BlockPropertyTitle_GyroPower");

		/// <summary>
		/// Roll override
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_GyroRollOverride = MyStringId.GetOrCompute("BlockPropertyTitle_GyroRollOverride");

		/// <summary>
		/// Yaw override
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_GyroYawOverride = MyStringId.GetOrCompute("BlockPropertyTitle_GyroYawOverride");

		/// <summary>
		/// Distance
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_JumpDistance = MyStringId.GetOrCompute("BlockPropertyTitle_JumpDistance");

		/// <summary>
		/// Autolock
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_LandGearAutoLock = MyStringId.GetOrCompute("BlockPropertyTitle_LandGearAutoLock");

		/// <summary>
		/// Enable idle movement
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_LargeTurretEnableTurretIdleMovement = MyStringId.GetOrCompute("BlockPropertyTitle_LargeTurretEnableTurretIdleMovement");

		/// <summary>
		/// Enable target locking
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_LargeTurret_EnableTargetLocking = MyStringId.GetOrCompute("BlockPropertyTitle_LargeTurret_EnableTargetLocking");

		/// <summary>
		/// AI aiming radius
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_LargeTurretRadius = MyStringId.GetOrCompute("BlockPropertyTitle_LargeTurretRadius");

		/// <summary>
		/// Target characters
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_LargeTurretTargetCharacters = MyStringId.GetOrCompute("BlockPropertyTitle_LargeTurretTargetCharacters");

		/// <summary>
		/// Target decoys
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_LargeTurretTargetDecoys = MyStringId.GetOrCompute("BlockPropertyTitle_LargeTurretTargetDecoys");

		/// <summary>
		/// Target large ships
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_LargeTurretTargetLargeGrids = MyStringId.GetOrCompute("BlockPropertyTitle_LargeTurretTargetLargeGrids");

		/// <summary>
		/// Target meteors
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_LargeTurretTargetMeteors = MyStringId.GetOrCompute("BlockPropertyTitle_LargeTurretTargetMeteors");

		/// <summary>
		/// Target missiles
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_LargeTurretTargetMissiles = MyStringId.GetOrCompute("BlockPropertyTitle_LargeTurretTargetMissiles");

		/// <summary>
		/// Target moving objects
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_LargeTurretTargetMoving = MyStringId.GetOrCompute("BlockPropertyTitle_LargeTurretTargetMoving");

		/// <summary>
		/// Target neutrals
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_LargeTurretTargetNeutrals = MyStringId.GetOrCompute("BlockPropertyTitle_LargeTurretTargetNeutrals");

		/// <summary>
		/// Target small ships
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_LargeTurretTargetSmallGrids = MyStringId.GetOrCompute("BlockPropertyTitle_LargeTurretTargetSmallGrids");

		/// <summary>
		/// Target stations
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_LargeTurretTargetStations = MyStringId.GetOrCompute("BlockPropertyTitle_LargeTurretTargetStations");

		/// <summary>
		/// Range
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_LaserRange = MyStringId.GetOrCompute("BlockPropertyTitle_LaserRange");

		/// <summary>
		/// Loaded textures
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_LCDScreenDefinitionsTextures = MyStringId.GetOrCompute("BlockPropertyTitle_LCDScreenDefinitionsTextures");

		/// <summary>
		/// Image change interval
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_LCDScreenRefreshInterval = MyStringId.GetOrCompute("BlockPropertyTitle_LCDScreenRefreshInterval");

		/// <summary>
		/// Remove selected
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_LCDScreenRemoveSelectedTextures = MyStringId.GetOrCompute("BlockPropertyTitle_LCDScreenRemoveSelectedTextures");

		/// <summary>
		/// Selected textures
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_LCDScreenSelectedTextures = MyStringId.GetOrCompute("BlockPropertyTitle_LCDScreenSelectedTextures");

		/// <summary>
		/// Add to selection
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_LCDScreenSelectTextures = MyStringId.GetOrCompute("BlockPropertyTitle_LCDScreenSelectTextures");

		/// <summary>
		/// Font Size
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_LCDScreenTextSize = MyStringId.GetOrCompute("BlockPropertyTitle_LCDScreenTextSize");

		/// <summary>
		/// Text Padding
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_LCDScreenTextPadding = MyStringId.GetOrCompute("BlockPropertyTitle_LCDScreenTextPadding");

		/// <summary>
		/// Preserve aspect ratio
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_LCDScreenPreserveAspectRatio = MyStringId.GetOrCompute("BlockPropertyTitle_LCDScreenPreserveAspectRatio");

		/// <summary>
		/// Blink Interval
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_LightBlinkInterval = MyStringId.GetOrCompute("BlockPropertyTitle_LightBlinkInterval");

		/// <summary>
		/// Blink Length
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_LightBlinkLenght = MyStringId.GetOrCompute("BlockPropertyTitle_LightBlinkLenght");

		/// <summary>
		/// Blink Offset
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_LightBlinkOffset = MyStringId.GetOrCompute("BlockPropertyTitle_LightBlinkOffset");

		/// <summary>
		/// Color
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_LightColor = MyStringId.GetOrCompute("BlockPropertyTitle_LightColor");

		/// <summary>
		/// Color at minimal load
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_LightColorAtMinimalLoad = MyStringId.GetOrCompute("BlockPropertyTitle_LightColorAtMinimalLoad");

		/// <summary>
		/// Color at maximal load
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_LightColorAtMaximalLoad = MyStringId.GetOrCompute("BlockPropertyTitle_LightColorAtMaximalLoad");

		/// <summary>
		/// Falloff
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_LightFalloff = MyStringId.GetOrCompute("BlockPropertyTitle_LightFalloff");

		/// <summary>
		/// Intensity
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_LightIntensity = MyStringId.GetOrCompute("BlockPropertyTitle_LightIntensity");

		/// <summary>
		/// Offset
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_LightOffset = MyStringId.GetOrCompute("BlockPropertyTitle_LightOffset");

		/// <summary>
		/// Radius
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_LightRadius = MyStringId.GetOrCompute("BlockPropertyTitle_LightRadius");

		/// <summary>
		/// Reflector radius
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_LightReflectorRadius = MyStringId.GetOrCompute("BlockPropertyTitle_LightReflectorRadius");

		/// <summary>
		/// Rotation speed
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_LightReflectorRotationSpeed = MyStringId.GetOrCompute("BlockPropertyTitle_LightReflectorRotationSpeed");

		/// <summary>
		/// Maximum distance
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_MaximalDistance = MyStringId.GetOrCompute("BlockPropertyTitle_MaximalDistance");

		/// <summary>
		/// Max Impulse Axis
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_MaxImpulseAxis = MyStringId.GetOrCompute("BlockPropertyTitle_MaxImpulseAxis");

		/// <summary>
		/// Max Impulse NonAxis
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_MaxImpulseNonAxis = MyStringId.GetOrCompute("BlockPropertyTitle_MaxImpulseNonAxis");

		/// <summary>
		/// Minimum distance
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_MinimalDistance = MyStringId.GetOrCompute("BlockPropertyTitle_MinimalDistance");

		/// <summary>
		/// Braking torque
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_MotorBrakingTorque = MyStringId.GetOrCompute("BlockPropertyTitle_MotorBrakingTorque");

		/// <summary>
		/// Rotor lock
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_MotorLock = MyStringId.GetOrCompute("BlockPropertyTitle_MotorLock");

<<<<<<< HEAD
		/// <summary>
		/// Hinge lock
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_HingeLock = MyStringId.GetOrCompute("BlockPropertyTitle_HingeLock");

		/// <summary>
		/// Upper limit
		/// </summary>
=======
		public static readonly MyStringId BlockPropertyTitle_HingeLock = MyStringId.GetOrCompute("BlockPropertyTitle_HingeLock");

>>>>>>> d46cf8619665219cc163a7b28984ced59ed9470d
		public static readonly MyStringId BlockPropertyTitle_MotorMaxAngle = MyStringId.GetOrCompute("BlockPropertyTitle_MotorMaxAngle");

		/// <summary>
		/// Lower limit
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_MotorMinAngle = MyStringId.GetOrCompute("BlockPropertyTitle_MotorMinAngle");

		/// <summary>
		/// Rotor displacement
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_MotorRotorDisplacement = MyStringId.GetOrCompute("BlockPropertyTitle_MotorRotorDisplacement");

		/// <summary>
		/// Velocity
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_MotorTargetVelocity = MyStringId.GetOrCompute("BlockPropertyTitle_MotorTargetVelocity");

		/// <summary>
		/// Torque
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_MotorTorque = MyStringId.GetOrCompute("BlockPropertyTitle_MotorTorque");

		/// <summary>
		/// Uses wheel commands
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_MotorUsesWheelCommands = MyStringId.GetOrCompute("BlockPropertyTitle_MotorUsesWheelCommands");

		/// <summary>
		/// Damping
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_Motor_Damping = MyStringId.GetOrCompute("BlockPropertyTitle_Motor_Damping");

		/// <summary>
		/// Friction
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_Motor_Friction = MyStringId.GetOrCompute("BlockPropertyTitle_Motor_Friction");

		/// <summary>
		/// Height Offset
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_Motor_Height = MyStringId.GetOrCompute("BlockPropertyTitle_Motor_Height");

		/// <summary>
		/// Invert Propulsion
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_Motor_InvertPropulsion = MyStringId.GetOrCompute("BlockPropertyTitle_Motor_InvertPropulsion");

		/// <summary>
		/// Invert Steering
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_Motor_InvertSteer = MyStringId.GetOrCompute("BlockPropertyTitle_Motor_InvertSteer");

		/// <summary>
		/// Steering Angle
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_Motor_MaxSteerAngle = MyStringId.GetOrCompute("BlockPropertyTitle_Motor_MaxSteerAngle");

		/// <summary>
		/// Power
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_Motor_Power = MyStringId.GetOrCompute("BlockPropertyTitle_Motor_Power");

		/// <summary>
		/// Propulsion
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_Motor_Propulsion = MyStringId.GetOrCompute("BlockPropertyTitle_Motor_Propulsion");

		/// <summary>
		/// Propulsion override
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_Motor_PropulsionOverride = MyStringId.GetOrCompute("BlockPropertyTitle_Motor_PropulsionOverride");

		/// <summary>
		/// Steering
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_Motor_Steering = MyStringId.GetOrCompute("BlockPropertyTitle_Motor_Steering");

		/// <summary>
		/// Steer override
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_Motor_SteerOverride = MyStringId.GetOrCompute("BlockPropertyTitle_Motor_SteerOverride");

		/// <summary>
		/// Steer Return Speed
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_Motor_SteerReturnSpeed = MyStringId.GetOrCompute("BlockPropertyTitle_Motor_SteerReturnSpeed");

		/// <summary>
		/// Steering Speed
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_Motor_SteerSpeed = MyStringId.GetOrCompute("BlockPropertyTitle_Motor_SteerSpeed");

		/// <summary>
		/// Strength
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_Motor_Strength = MyStringId.GetOrCompute("BlockPropertyTitle_Motor_Strength");

		/// <summary>
		/// Speed limit
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_Motor_SuspensionSpeed = MyStringId.GetOrCompute("BlockPropertyTitle_Motor_SuspensionSpeed");

		/// <summary>
		/// Suspension Travel
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_Motor_SuspensionTravel = MyStringId.GetOrCompute("BlockPropertyTitle_Motor_SuspensionTravel");

		/// <summary>
		/// Range
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_OreDetectorRange = MyStringId.GetOrCompute("BlockPropertyTitle_OreDetectorRange");

		/// <summary>
		/// Script
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_PanelScript = MyStringId.GetOrCompute("BlockPropertyTitle_PanelScript");

		/// <summary>
		/// Horizontal offset
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_ProjectionOffsetX = MyStringId.GetOrCompute("BlockPropertyTitle_ProjectionOffsetX");

		/// <summary>
		/// Vertical offset
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_ProjectionOffsetY = MyStringId.GetOrCompute("BlockPropertyTitle_ProjectionOffsetY");

		/// <summary>
		/// Forward offset
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_ProjectionOffsetZ = MyStringId.GetOrCompute("BlockPropertyTitle_ProjectionOffsetZ");

		/// <summary>
		/// Pitch
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_ProjectionRotationX = MyStringId.GetOrCompute("BlockPropertyTitle_ProjectionRotationX");

		/// <summary>
		/// Yaw
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_ProjectionRotationY = MyStringId.GetOrCompute("BlockPropertyTitle_ProjectionRotationY");

		/// <summary>
		/// Roll
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_ProjectionRotationZ = MyStringId.GetOrCompute("BlockPropertyTitle_ProjectionRotationZ");

		/// <summary>
		/// Spawn projection
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_ProjectionSpawn = MyStringId.GetOrCompute("BlockPropertyTitle_ProjectionSpawn");

		/// <summary>
		/// Number of blocks
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_Projector_BlocksPerProjection = MyStringId.GetOrCompute("BlockPropertyTitle_Projector_BlocksPerProjection");

		/// <summary>
		/// The maximum number of blocks a projection can have when building instantly
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_Projector_BlocksPerProjection_Tooltip = MyStringId.GetOrCompute("BlockPropertyTitle_Projector_BlocksPerProjection_Tooltip");

		/// <summary>
		/// Ownership from projector
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_Projector_GetOwnership = MyStringId.GetOrCompute("BlockPropertyTitle_Projector_GetOwnership");

		/// <summary>
		/// Instant building
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_Projector_InstantBuilding = MyStringId.GetOrCompute("BlockPropertyTitle_Projector_InstantBuilding");

		/// <summary>
		/// Enable the projector to build the blueprint instantly, even in survival
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_Projector_InstantBuilding_Tooltip = MyStringId.GetOrCompute("BlockPropertyTitle_Projector_InstantBuilding_Tooltip");

		/// <summary>
		/// Number of projections
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_Projector_NumberOfProjections = MyStringId.GetOrCompute("BlockPropertyTitle_Projector_NumberOfProjections");

		/// <summary>
		/// The maximum number of projections this projector can build instantly
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_Projector_NumberOfProjections_Tooltip = MyStringId.GetOrCompute("BlockPropertyTitle_Projector_NumberOfProjections_Tooltip");

		/// <summary>
		/// Recharge
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_Recharge = MyStringId.GetOrCompute("BlockPropertyTitle_Recharge");

		/// <summary>
		/// Refill Bottles
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_Refill = MyStringId.GetOrCompute("BlockPropertyTitle_Refill");

		/// <summary>
		/// Speed limit
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_RemoteBlockSpeedLimit = MyStringId.GetOrCompute("BlockPropertyTitle_RemoteBlockSpeedLimit");

		/// <summary>
		/// Safety detach
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_SafetyDetach = MyStringId.GetOrCompute("BlockPropertyTitle_SafetyDetach");

		/// <summary>
		/// Semi-auto
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_Semiauto = MyStringId.GetOrCompute("BlockPropertyTitle_Semiauto");

		/// <summary>
		/// Detect asteroids
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_SensorDetectAsteroids = MyStringId.GetOrCompute("BlockPropertyTitle_SensorDetectAsteroids");

		/// <summary>
		/// Detect enemy
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_SensorDetectEnemy = MyStringId.GetOrCompute("BlockPropertyTitle_SensorDetectEnemy");

		/// <summary>
		/// Detect floating objects
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_SensorDetectFloatingObjects = MyStringId.GetOrCompute("BlockPropertyTitle_SensorDetectFloatingObjects");

		/// <summary>
		/// Detect friendly
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_SensorDetectFriendly = MyStringId.GetOrCompute("BlockPropertyTitle_SensorDetectFriendly");

		/// <summary>
		/// Detect large ships
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_SensorDetectLargeShips = MyStringId.GetOrCompute("BlockPropertyTitle_SensorDetectLargeShips");

		/// <summary>
		/// Detect neutral
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_SensorDetectNeutral = MyStringId.GetOrCompute("BlockPropertyTitle_SensorDetectNeutral");

		/// <summary>
		/// Detect owner
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_SensorDetectOwner = MyStringId.GetOrCompute("BlockPropertyTitle_SensorDetectOwner");

		/// <summary>
		/// Detect players
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_SensorDetectPlayers = MyStringId.GetOrCompute("BlockPropertyTitle_SensorDetectPlayers");

		/// <summary>
		/// Detect small ships
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_SensorDetectSmallShips = MyStringId.GetOrCompute("BlockPropertyTitle_SensorDetectSmallShips");

		/// <summary>
		/// Detect stations
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_SensorDetectStations = MyStringId.GetOrCompute("BlockPropertyTitle_SensorDetectStations");

		/// <summary>
		/// Detect subgrids
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_SensorDetectSubgrids = MyStringId.GetOrCompute("BlockPropertyTitle_SensorDetectSubgrids");

		/// <summary>
		/// Back extent
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_SensorFieldDepthMax = MyStringId.GetOrCompute("BlockPropertyTitle_SensorFieldDepthMax");

		/// <summary>
		/// Front extent
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_SensorFieldDepthMin = MyStringId.GetOrCompute("BlockPropertyTitle_SensorFieldDepthMin");

		/// <summary>
		/// Top extent
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_SensorFieldHeightMax = MyStringId.GetOrCompute("BlockPropertyTitle_SensorFieldHeightMax");

		/// <summary>
		/// Bottom extent
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_SensorFieldHeightMin = MyStringId.GetOrCompute("BlockPropertyTitle_SensorFieldHeightMin");

		/// <summary>
		/// Right extent
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_SensorFieldWidthMax = MyStringId.GetOrCompute("BlockPropertyTitle_SensorFieldWidthMax");

		/// <summary>
		/// Left extent
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_SensorFieldWidthMin = MyStringId.GetOrCompute("BlockPropertyTitle_SensorFieldWidthMin");

		/// <summary>
		/// Audible Proximity Alert
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_SensorPlaySound = MyStringId.GetOrCompute("BlockPropertyTitle_SensorPlaySound");

		/// <summary>
		/// Setup actions
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_SensorToolbarOpen = MyStringId.GetOrCompute("BlockPropertyTitle_SensorToolbarOpen");

		/// <summary>
		/// Share inertia tensor
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_ShareTensor = MyStringId.GetOrCompute("BlockPropertyTitle_ShareTensor");

		/// <summary>
		/// Show ship name
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_ShowShipName = MyStringId.GetOrCompute("BlockPropertyTitle_ShowShipName");

		/// <summary>
		/// Show text on screen
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_ShowTextOnScreen = MyStringId.GetOrCompute("BlockPropertyTitle_ShowTextOnScreen");

		/// <summary>
		/// Show sprites on screen
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_ShowSpritesOnScreen = MyStringId.GetOrCompute("BlockPropertyTitle_ShowSpritesOnScreen");

		/// <summary>
		/// Silent
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_Silent = MyStringId.GetOrCompute("BlockPropertyTitle_Silent");

		/// <summary>
		/// Loop time
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_SoundBlockLoopTime = MyStringId.GetOrCompute("BlockPropertyTitle_SoundBlockLoopTime");

		/// <summary>
		/// Play
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_SoundBlockPlay = MyStringId.GetOrCompute("BlockPropertyTitle_SoundBlockPlay");

		/// <summary>
		/// Range
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_SoundBlockRange = MyStringId.GetOrCompute("BlockPropertyTitle_SoundBlockRange");

		/// <summary>
		/// Sound list
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_SoundBlockSoundList = MyStringId.GetOrCompute("BlockPropertyTitle_SoundBlockSoundList");

		/// <summary>
		/// Stop
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_SoundBlockStop = MyStringId.GetOrCompute("BlockPropertyTitle_SoundBlockStop");

		/// <summary>
		/// Volume
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_SoundBlockVolume = MyStringId.GetOrCompute("BlockPropertyTitle_SoundBlockVolume");

		/// <summary>
		/// Stockpile
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_Stockpile = MyStringId.GetOrCompute("BlockPropertyTitle_Stockpile");

		/// <summary>
		/// AirShock
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_Suspension_AirShock = MyStringId.GetOrCompute("BlockPropertyTitle_Suspension_AirShock");

		/// <summary>
		/// Brake
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_Suspension_Brake = MyStringId.GetOrCompute("BlockPropertyTitle_Suspension_Brake");

		/// <summary>
		/// Allow Parking Brake
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_Suspension_EnableParking = MyStringId.GetOrCompute("BlockPropertyTitle_Suspension_EnableParking");

		/// <summary>
		/// Used for parking
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_Parking_EnableParking = MyStringId.GetOrCompute("BlockPropertyTitle_Parking_EnableParking");

		/// <summary>
		/// Is this block triggered by the parking signal?
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_Parking_EnableParkingTooltip = MyStringId.GetOrCompute("BlockPropertyTitle_Parking_EnableParkingTooltip");

		/// <summary>
		/// Access type
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_TextPanelAccessType = MyStringId.GetOrCompute("BlockPropertyTitle_TextPanelAccessType");

		/// <summary>
		/// Title
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_TextPanelPublicTitle = MyStringId.GetOrCompute("BlockPropertyTitle_TextPanelPublicTitle");

		/// <summary>
		/// Edit text
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_TextPanelShowPublicTextPanel = MyStringId.GetOrCompute("BlockPropertyTitle_TextPanelShowPublicTextPanel");

		/// <summary>
		/// Edit private text
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_TextPanelShowTextPanel = MyStringId.GetOrCompute("BlockPropertyTitle_TextPanelShowTextPanel");

		/// <summary>
		/// Private title
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_TextPanelTitle = MyStringId.GetOrCompute("BlockPropertyTitle_TextPanelTitle");

		/// <summary>
		/// Thrust override
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_ThrustOverride = MyStringId.GetOrCompute("BlockPropertyTitle_ThrustOverride");

		/// <summary>
		/// Start
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_TimerStart = MyStringId.GetOrCompute("BlockPropertyTitle_TimerStart");

		/// <summary>
		/// Stop
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_TimerStop = MyStringId.GetOrCompute("BlockPropertyTitle_TimerStop");

		/// <summary>
		/// Setup actions
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_TimerToolbarOpen = MyStringId.GetOrCompute("BlockPropertyTitle_TimerToolbarOpen");

		/// <summary>
		/// Setup Action
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_CockpitOnLockedToolbarOpen = MyStringId.GetOrCompute("BlockPropertyTitle_CockpitOnLockedToolbarOpen");

		/// <summary>
		/// Triggers when this grid has been target locked by any other
		/// </summary>
		public static readonly MyStringId BlockPropertyTooltip_CockpitOnLockedToolbarOpen = MyStringId.GetOrCompute("BlockPropertyTooltip_CockpitOnLockedToolbarOpen");

		/// <summary>
		/// Time to trigger: 
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_TimerToTrigger = MyStringId.GetOrCompute("BlockPropertyTitle_TimerToTrigger");

		/// <summary>
		/// Trigger now
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_TimerTrigger = MyStringId.GetOrCompute("BlockPropertyTitle_TimerTrigger");

		/// <summary>
		/// Velocity
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_Velocity = MyStringId.GetOrCompute("BlockPropertyTitle_Velocity");

		/// <summary>
		/// Warning: 
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_Warning = MyStringId.GetOrCompute("BlockPropertyTitle_Warning");

		/// <summary>
		/// Waypoints
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_Waypoints = MyStringId.GetOrCompute("BlockPropertyTitle_Waypoints");

<<<<<<< HEAD
		/// <summary>
		/// Available Effects
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_AvailableEffects = MyStringId.GetOrCompute("BlockPropertyTitle_AvailableEffects");

		/// <summary>
		/// Safety lock override
		/// </summary>
=======
		public static readonly MyStringId BlockPropertyTitle_AvailableEffects = MyStringId.GetOrCompute("BlockPropertyTitle_AvailableEffects");

>>>>>>> d46cf8619665219cc163a7b28984ced59ed9470d
		public static readonly MyStringId BlockPropertyTitle_WeldForce = MyStringId.GetOrCompute("BlockPropertyTitle_WeldForce");

		/// <summary>
		/// Safety lock speed
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_WeldSpeed = MyStringId.GetOrCompute("BlockPropertyTitle_WeldSpeed");

		/// <summary>
		/// Maximum force the piston is allowed to apply to  blocking obstacle along it's extending axis.  High values may result in unexpected behaviour.
		/// </summary>
		public static readonly MyStringId BlockPropertyTooltip_MaxImpulseAxis = MyStringId.GetOrCompute("BlockPropertyTooltip_MaxImpulseAxis");

		/// <summary>
		/// Maximum force the piston is allowed to apply to  blocking obstacle along it's lateral axis  High values may result in unexpected behaviour.
		/// </summary>
		public static readonly MyStringId BlockPropertyTooltip_MaxImpulseNonAxis = MyStringId.GetOrCompute("BlockPropertyTooltip_MaxImpulseNonAxis");

		/// <summary>
		/// Safety detach
		/// </summary>
		public static readonly MyStringId BlockPropertyTooltip_SafetyDetach = MyStringId.GetOrCompute("BlockPropertyTooltip_SafetyDetach");

		/// <summary>
		/// Equalizes virtual masses of connected grids to  achieve more stable behaviour
		/// </summary>
		public static readonly MyStringId BlockPropertyTooltip_ShareTensor = MyStringId.GetOrCompute("BlockPropertyTooltip_ShareTensor");

		/// <summary>
		/// Locked
		/// </summary>
		public static readonly MyStringId BlockPropertyValue_Locked = MyStringId.GetOrCompute("BlockPropertyValue_Locked");

		/// <summary>
		/// Unlimited
		/// </summary>
		public static readonly MyStringId BlockPropertyValue_MotorAngleUnlimited = MyStringId.GetOrCompute("BlockPropertyValue_MotorAngleUnlimited");

		/// <summary>
		/// Ready To Lock
		/// </summary>
		public static readonly MyStringId BlockPropertyValue_ReadyToLock = MyStringId.GetOrCompute("BlockPropertyValue_ReadyToLock");

		/// <summary>
		/// Unlocked
		/// </summary>
		public static readonly MyStringId BlockPropertyValue_Unlocked = MyStringId.GetOrCompute("BlockPropertyValue_Unlocked");

		/// <summary>
		/// No Content
		/// </summary>
		public static readonly MyStringId BlockPropertyValue_NoContent = MyStringId.GetOrCompute("BlockPropertyValue_NoContent");

		/// <summary>
		/// Text and Images
		/// </summary>
		public static readonly MyStringId BlockPropertyValue_TextAndImageContent = MyStringId.GetOrCompute("BlockPropertyValue_TextAndImageContent");

		/// <summary>
		/// Script
		/// </summary>
		public static readonly MyStringId BlockPropertyValue_ScriptContent = MyStringId.GetOrCompute("BlockPropertyValue_ScriptContent");

		/// <summary>
		/// This block is for {0} only
		/// </summary>
		public static readonly MyStringId BlockSize_NotAvailable = MyStringId.GetOrCompute("BlockSize_NotAvailable");

		/// <summary>
		/// Author: 
		/// </summary>
		public static readonly MyStringId BlueprintInfo_Author = MyStringId.GetOrCompute("BlueprintInfo_Author");

		/// <summary>
		/// Name: 
		/// </summary>
		public static readonly MyStringId BlueprintInfo_Name = MyStringId.GetOrCompute("BlueprintInfo_Name");

		/// <summary>
		/// Number of blocks: 
		/// </summary>
		public static readonly MyStringId BlueprintInfo_NumberOfBlocks = MyStringId.GetOrCompute("BlueprintInfo_NumberOfBlocks");

		/// <summary>
		/// Blueprints Screen
		/// </summary>
		public static readonly MyStringId BlueprintsScreen = MyStringId.GetOrCompute("BlueprintsScreen");

		/// <summary>
		/// Learn movement essentials, how to keep your engineer alive with life support energy and oxygen and how to use each of the character tools, the welder, grinder and hand drill.
		/// </summary>
		public static readonly MyStringId BriefingTutorial01Movements = MyStringId.GetOrCompute("BriefingTutorial01Movements");

		/// <summary>
		/// An introduction to player and cargo inventories, how to add/withdraw items and a basic initiation to control panels and terminals for controlling block functions.
		/// </summary>
		public static readonly MyStringId BriefingTutorial02Inventory = MyStringId.GetOrCompute("BriefingTutorial02Inventory");

		/// <summary>
		/// Learn how to recharge your suit energy by tackling a series of small challenges that    explain the behaviour of power within Space Engineers and the different ways you can provide it.
		/// </summary>
		public static readonly MyStringId BriefingTutorial03Energy = MyStringId.GetOrCompute("BriefingTutorial03Energy");

		/// <summary>
		/// This tutorial covers the various oxygen related blocks, oxygen farms, generators, vents, bottles, tanks and ice, including their control panel functions. The concept of creating an airtight room for pressurization is also addressed.
		/// </summary>
		public static readonly MyStringId BriefingTutorial04Oxygen = MyStringId.GetOrCompute("BriefingTutorial04Oxygen");

		/// <summary>
		/// The basics of infrastructure and industry are taught in this tutorial. You will learn how to mine ores, process them in a refinery and then commission new block components to be made in the assembler from the refined elements.
		/// </summary>
		public static readonly MyStringId BriefingTutorial05OreRefining = MyStringId.GetOrCompute("BriefingTutorial05OreRefining");

		/// <summary>
		/// Setting up a good conveyor system is very useful and can save you a lot of time. Learn how to move items through conveyors and the different ways to have separate systems interact or connect with each other.
		/// </summary>
		public static readonly MyStringId BriefingTutorial06Conveyors = MyStringId.GetOrCompute("BriefingTutorial06Conveyors");

		/// <summary>
		/// The jetpack tutorial displays the controls needed for flight which is followed by a series of assault course style sections to challenge your ability to fly quickly and accurately, you have a limited time from the moment you begin each section to reach the exit door. Watch out for hazards!
		/// </summary>
		public static readonly MyStringId BriefingTutorial07Jetpack = MyStringId.GetOrCompute("BriefingTutorial07Jetpack");

		/// <summary>
		/// The true test of any engineer is the ability to build a space-worthy ship from scratch, this tutorial will provide instruction on how to build a simple one-person transport vessel. Learn how to place blocks, weld them to completion and make a simple flight, you will also be taught essential rules of ship building that you can apply to create your own designs.
		/// </summary>
		public static readonly MyStringId BriefingTutorial08YourFirstShip = MyStringId.GetOrCompute("BriefingTutorial08YourFirstShip");

		/// <summary>
		/// This tutorial offers instruction on how to fly a ship and use the three ship tools. You must use each ship in turn to navigate through several chambers that demonstrate how to grind, weld and drill as well as how to stock a weld ships cargo and how to dock with connectors.
		/// </summary>
		public static readonly MyStringId BriefingTutorial09ShipFlight = MyStringId.GetOrCompute("BriefingTutorial09ShipFlight");

		/// <summary>
		/// This tutorial aims to illuminate the nature of small, large and station grids, the rules that govern them and how you can join them with the merge block. There is also a brief section on floating objects.
		/// </summary>
		public static readonly MyStringId BriefingTutorial10Grids = MyStringId.GetOrCompute("BriefingTutorial10Grids");

		/// <summary>
		/// Wrong ownership setting:
		/// </summary>
		public static readonly MyStringId BroadcastScreen_NoOwnership = MyStringId.GetOrCompute("BroadcastScreen_NoOwnership");

		/// <summary>
		/// Ownership correct
		/// </summary>
		public static readonly MyStringId BroadcastScreen_Ownership = MyStringId.GetOrCompute("BroadcastScreen_Ownership");

		/// <summary>
		/// Control
		/// </summary>
		public static readonly MyStringId BroadcastScreen_TakeControlButton = MyStringId.GetOrCompute("BroadcastScreen_TakeControlButton");

		/// <summary>
		/// Cannot take control of target grid. Hover over status icons for more info.
		/// </summary>
		public static readonly MyStringId BroadcastScreen_TakeControlButtonDisabled_ToolTip = MyStringId.GetOrCompute("BroadcastScreen_TakeControlButtonDisabled_ToolTip");

		/// <summary>
		/// Multiple Remote Controllers on grid. Set one as main!
		/// </summary>
		public static readonly MyStringId BroadcastScreen_TakeControlButton_NoMainRemoteControl = MyStringId.GetOrCompute("BroadcastScreen_TakeControlButton_NoMainRemoteControl");

		/// <summary>
		/// No Remote Controller on grid
		/// </summary>
		public static readonly MyStringId BroadcastScreen_TakeControlButton_NoRemoteToolTip = MyStringId.GetOrCompute("BroadcastScreen_TakeControlButton_NoRemoteToolTip");

		/// <summary>
		/// Remote Control ready
		/// </summary>
		public static readonly MyStringId BroadcastScreen_TakeControlButton_RemoteToolTip = MyStringId.GetOrCompute("BroadcastScreen_TakeControlButton_RemoteToolTip");

		/// <summary>
		/// Take control of target grid
		/// </summary>
		public static readonly MyStringId BroadcastScreen_TakeControlButton_ToolTip = MyStringId.GetOrCompute("BroadcastScreen_TakeControlButton_ToolTip");

		/// <summary>
		/// Terminal
		/// </summary>
		public static readonly MyStringId BroadcastScreen_TerminalButton = MyStringId.GetOrCompute("BroadcastScreen_TerminalButton");

		/// <summary>
		/// Cannot open terminal of target grid. Hover over status icons for more info.
		/// </summary>
		public static readonly MyStringId BroadcastScreen_TerminalButtonDisabled_ToolTip = MyStringId.GetOrCompute("BroadcastScreen_TerminalButtonDisabled_ToolTip");

		/// <summary>
		/// Cannot establish connection to grid
		/// </summary>
		public static readonly MyStringId BroadcastScreen_TerminalButton_NoStableConnectionToolTip = MyStringId.GetOrCompute("BroadcastScreen_TerminalButton_NoStableConnectionToolTip");

		/// <summary>
		/// Players antenna off
		/// </summary>
		public static readonly MyStringId BroadcastScreen_TerminalButton_PlayerBroadcastOffToolTip = MyStringId.GetOrCompute("BroadcastScreen_TerminalButton_PlayerBroadcastOffToolTip");

		/// <summary>
		/// Connection stable
		/// </summary>
		public static readonly MyStringId BroadcastScreen_TerminalButton_StableConnectionToolTip = MyStringId.GetOrCompute("BroadcastScreen_TerminalButton_StableConnectionToolTip");

		/// <summary>
		/// Open terminal of target grid.
		/// </summary>
		public static readonly MyStringId BroadcastScreen_TerminalButton_ToolTip = MyStringId.GetOrCompute("BroadcastScreen_TerminalButton_ToolTip");

		/// <summary>
		/// Unavailable
		/// </summary>
		public static readonly MyStringId BroadcastScreen_UnavailableControlButton = MyStringId.GetOrCompute("BroadcastScreen_UnavailableControlButton");

		/// <summary>
		/// Remote access
		/// </summary>
		public static readonly MyStringId BroadcastStatus_Connected = MyStringId.GetOrCompute("BroadcastStatus_Connected");

		/// <summary>
		/// Preview Grid
		/// </summary>
		public static readonly MyStringId BroadcastStatus_IsPreviewGrid = MyStringId.GetOrCompute("BroadcastStatus_IsPreviewGrid");

		/// <summary>
		/// Me
		/// </summary>
		public static readonly MyStringId BroadcastStatus_Me = MyStringId.GetOrCompute("BroadcastStatus_Me");

		/// <summary>
		/// Out of broadcasting range
		/// </summary>
		public static readonly MyStringId BroadcastStatus_OutOfBroadcastingRange = MyStringId.GetOrCompute("BroadcastStatus_OutOfBroadcastingRange");

		/// <summary>
		/// Out of receiving range
		/// </summary>
		public static readonly MyStringId BroadcastStatus_OutOfReceivingRange = MyStringId.GetOrCompute("BroadcastStatus_OutOfReceivingRange");

		/// <summary>
		/// Direct access
		/// </summary>
		public static readonly MyStringId BroadcastStatus_PhysicallyConnected = MyStringId.GetOrCompute("BroadcastStatus_PhysicallyConnected");

		/// <summary>
		/// Builder mode off
		/// </summary>
		public static readonly MyStringId BuilderModeOff = MyStringId.GetOrCompute("BuilderModeOff");

		/// <summary>
		/// Builder mode on
		/// </summary>
		public static readonly MyStringId BuilderModeOn = MyStringId.GetOrCompute("BuilderModeOn");

		/// <summary>
		/// Browse Workshop
		/// </summary>
		public static readonly MyStringId buttonBrowseWorkshop = MyStringId.GetOrCompute("buttonBrowseWorkshop");

		/// <summary>
		/// Edit
		/// </summary>
		public static readonly MyStringId buttonEdit = MyStringId.GetOrCompute("buttonEdit");

		/// <summary>
		/// Open in Workshop
		/// </summary>
		public static readonly MyStringId buttonOpenInWorkshop = MyStringId.GetOrCompute("buttonOpenInWorkshop");

		/// <summary>
		/// Publish
		/// </summary>
		public static readonly MyStringId buttonPublish = MyStringId.GetOrCompute("buttonPublish");

		/// <summary>
		/// Refresh
		/// </summary>
		public static readonly MyStringId buttonRefresh = MyStringId.GetOrCompute("buttonRefresh");

		/// <summary>
		/// Remove
		/// </summary>
		public static readonly MyStringId buttonRemove = MyStringId.GetOrCompute("buttonRemove");

		/// <summary>
		/// Cannot find the blueprint file.
		/// </summary>
		public static readonly MyStringId CannotFindBlueprint = MyStringId.GetOrCompute("CannotFindBlueprint");

		/// <summary>
		/// Couldn't load blueprints from {0} workshop
		/// </summary>
		public static readonly MyStringId CannotFindBlueprintSteam = MyStringId.GetOrCompute("CannotFindBlueprintSteam");

		/// <summary>
		/// Characters
		/// </summary>
		public static readonly MyStringId Characters = MyStringId.GetOrCompute("Characters");

		/// <summary>
		/// Send the message
		/// </summary>
		public static readonly MyStringId ChatScreen_TerminalSendMessage = MyStringId.GetOrCompute("ChatScreen_TerminalSendMessage");

		/// <summary>
		/// You cannot send an empty message
		/// </summary>
		public static readonly MyStringId ChatScreen_TerminalSendMessageDisabled = MyStringId.GetOrCompute("ChatScreen_TerminalSendMessageDisabled");

		/// <summary>
		/// Insert your message
		/// </summary>
		public static readonly MyStringId ChatScreen_TerminaMessageBox = MyStringId.GetOrCompute("ChatScreen_TerminaMessageBox");

		/// <summary>
		/// Chat screen
		/// </summary>
		public static readonly MyStringId Chat_screen = MyStringId.GetOrCompute("Chat_screen");

		/// <summary>
		/// Cobalt
		/// </summary>
		public static readonly MyStringId Cobalt = MyStringId.GetOrCompute("Cobalt");

		/// <summary>
		/// Container drop
		/// </summary>
		public static readonly MyStringId ContainerDropSystemBeaconText = MyStringId.GetOrCompute("ContainerDropSystemBeaconText");

		/// <summary>
		/// Strong unknown signal
		/// </summary>
		public static readonly MyStringId ContainerDropSystemContainerLarge = MyStringId.GetOrCompute("ContainerDropSystemContainerLarge");

		/// <summary>
		/// Unknown signal
		/// </summary>
		public static readonly MyStringId ContainerDropSystemContainerSmall = MyStringId.GetOrCompute("ContainerDropSystemContainerSmall");

		/// <summary>
		/// {0} was detected.
		/// </summary>
		public static readonly MyStringId ContainerDropSystemContainerWasDetected = MyStringId.GetOrCompute("ContainerDropSystemContainerWasDetected");

		/// <summary>
		/// Brake
		/// </summary>
		public static readonly MyStringId ControlDescBrake = MyStringId.GetOrCompute("ControlDescBrake");

		/// <summary>
		/// Camera zoom
		/// </summary>
		public static readonly MyStringId ControlDescCameraZoom = MyStringId.GetOrCompute("ControlDescCameraZoom");

		/// <summary>
		/// Color block
		/// </summary>
		public static readonly MyStringId ControlDescHoldToColor = MyStringId.GetOrCompute("ControlDescHoldToColor");

		/// <summary>
		/// Large color brush
		/// </summary>
		public static readonly MyStringId ControlDescLargeBrush = MyStringId.GetOrCompute("ControlDescLargeBrush");

		/// <summary>
		/// Color whole grid
		/// </summary>
		public static readonly MyStringId ControlDescWholeBrush = MyStringId.GetOrCompute("ControlDescWholeBrush");

		/// <summary>
		/// Loot dead body
		/// </summary>
		public static readonly MyStringId ControlDescLoot = MyStringId.GetOrCompute("ControlDescLoot");

		/// <summary>
		/// Medium color brush
		/// </summary>
		public static readonly MyStringId ControlDescMediumBrush = MyStringId.GetOrCompute("ControlDescMediumBrush");

		/// <summary>
		/// Toggle statistics
		/// </summary>
		public static readonly MyStringId ControlDescNetgraph = MyStringId.GetOrCompute("ControlDescNetgraph");

		/// <summary>
		/// Single / All weapon mode (cockpit)
		/// </summary>
		public static readonly MyStringId ControlDescSingleAllMode = MyStringId.GetOrCompute("ControlDescSingleAllMode");

		/// <summary>
		/// Changes spectator speed
		/// </summary>
		public static readonly MyStringId ControlDescSpectatorSpeed = MyStringId.GetOrCompute("ControlDescSpectatorSpeed");

		/// <summary>
		/// Zoom in third-person mode
		/// </summary>
		public static readonly MyStringId ControlDescZoom = MyStringId.GetOrCompute("ControlDescZoom");

		/// <summary>
		/// Toggle Camera Mode
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_CameraMode = MyStringId.GetOrCompute("ControlMenuItemLabel_CameraMode");

		/// <summary>
		/// FPP
		/// </summary>
		public static readonly MyStringId ControlMenuItemValue_FPP = MyStringId.GetOrCompute("ControlMenuItemValue_FPP");

		/// <summary>
		/// TPP
		/// </summary>
		public static readonly MyStringId ControlMenuItemValue_TPP = MyStringId.GetOrCompute("ControlMenuItemValue_TPP");

		/// <summary>
		/// Respawn
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_CommitSuicide = MyStringId.GetOrCompute("ControlMenuItemLabel_CommitSuicide");

		/// <summary>
		/// Quick Load / Reconnect
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_QuickLoad = MyStringId.GetOrCompute("ControlMenuItemLabel_QuickLoad");

		/// <summary>
		/// Select Color Tool
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_SelectColorTool = MyStringId.GetOrCompute("ControlMenuItemLabel_SelectColorTool");

		/// <summary>
		/// Open Color Picker
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_ShowColorPicker = MyStringId.GetOrCompute("ControlMenuItemLabel_ShowColorPicker");

		/// <summary>
		/// Show Toolbar Screen
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_ShowToolbarScreen = MyStringId.GetOrCompute("ControlMenuItemLabel_ShowToolbarScreen");

		/// <summary>
		/// Toggle HUD
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_ToggleHud = MyStringId.GetOrCompute("ControlMenuItemLabel_ToggleHud");

		/// <summary>
		/// Pause Game
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_PauseGame = MyStringId.GetOrCompute("ControlMenuItemLabel_PauseGame");

		/// <summary>
		/// Change Appearance
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_Wardrobe = MyStringId.GetOrCompute("ControlMenuItemLabel_Wardrobe");

		/// <summary>
		/// Voxel Hand
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_VoxelHand = MyStringId.GetOrCompute("ControlMenuItemLabel_VoxelHand");

		/// <summary>
		/// Toggle Broadcasting
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_Broadcasting = MyStringId.GetOrCompute("ControlMenuItemLabel_Broadcasting");

		/// <summary>
		/// Build Mode
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_BuildMode = MyStringId.GetOrCompute("ControlMenuItemLabel_BuildMode");

		/// <summary>
		/// Toggle Landing Gears / Connectors
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_Connectors = MyStringId.GetOrCompute("ControlMenuItemLabel_Connectors");

		/// <summary>
		/// Toggle Dampeners
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_Dampeners = MyStringId.GetOrCompute("ControlMenuItemLabel_Dampeners");

		/// <summary>
		/// Toggle Helmet
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_Helmet = MyStringId.GetOrCompute("ControlMenuItemLabel_Helmet");

		/// <summary>
		/// Jetpack
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_Jetpack = MyStringId.GetOrCompute("ControlMenuItemLabel_Jetpack");

		/// <summary>
		/// Landing Gears
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_LandingGear = MyStringId.GetOrCompute("ControlMenuItemLabel_LandingGear");

		/// <summary>
		/// Toggle Lights
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_Lights = MyStringId.GetOrCompute("ControlMenuItemLabel_Lights");

		/// <summary>
		/// Open Inventory
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_OpenInventory = MyStringId.GetOrCompute("ControlMenuItemLabel_OpenInventory");

		/// <summary>
		/// Toggle Local Power Switch
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_Reactors = MyStringId.GetOrCompute("ControlMenuItemLabel_Reactors");

		/// <summary>
		/// Toggle Power Switch
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_Reactors_All = MyStringId.GetOrCompute("ControlMenuItemLabel_Reactors_All");

		/// <summary>
		/// Show Scenario Briefing
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_ScenarioBriefing = MyStringId.GetOrCompute("ControlMenuItemLabel_ScenarioBriefing");

		/// <summary>
		/// Setup Buttons
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_SetupButtons = MyStringId.GetOrCompute("ControlMenuItemLabel_SetupButtons");

		/// <summary>
		/// Open Admin Menu
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_ShowAdminMenu = MyStringId.GetOrCompute("ControlMenuItemLabel_ShowAdminMenu");

		/// <summary>
		/// Open Blueprints Screen
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_ShowBlueprints = MyStringId.GetOrCompute("ControlMenuItemLabel_ShowBlueprints");

		/// <summary>
		/// Open Build Screen
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_ShowBuildScreen = MyStringId.GetOrCompute("ControlMenuItemLabel_ShowBuildScreen");

		/// <summary>
		/// Open Control Panel
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_ShowControlPanel = MyStringId.GetOrCompute("ControlMenuItemLabel_ShowControlPanel");

		/// <summary>
		/// Open Help Screen
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_ShowHelp = MyStringId.GetOrCompute("ControlMenuItemLabel_ShowHelp");

		/// <summary>
		/// Open Players Screen
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_ShowPlayers = MyStringId.GetOrCompute("ControlMenuItemLabel_ShowPlayers");

		/// <summary>
		/// Open Spawn Menu
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_ShowSpawnMenu = MyStringId.GetOrCompute("ControlMenuItemLabel_ShowSpawnMenu");

		/// <summary>
		/// Open Terminal
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_ShowTerminal = MyStringId.GetOrCompute("ControlMenuItemLabel_ShowTerminal");

		/// <summary>
		/// Open Terminal
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_Terminal = MyStringId.GetOrCompute("ControlMenuItemLabel_Terminal");

		/// <summary>
		/// Thrusters
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_Thrusts = MyStringId.GetOrCompute("ControlMenuItemLabel_Thrusts");

		/// <summary>
		/// Open Progression Tree
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_ShowProgressionTree = MyStringId.GetOrCompute("ControlMenuItemLabel_ShowProgressionTree");

		/// <summary>
		/// Open Help Screen
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_ShowHelpScreen = MyStringId.GetOrCompute("ControlMenuItemLabel_ShowHelpScreen");

		/// <summary>
		/// Open Chat
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_Chat = MyStringId.GetOrCompute("ControlMenuItemLabel_Chat");

		/// <summary>
		/// Respawn
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_Respawn = MyStringId.GetOrCompute("ControlMenuItemLabel_Respawn");

		/// <summary>
		/// Available only in online mode.
		/// </summary>
		public static readonly MyStringId RadialMenu_Label_MultiplayerOnly = MyStringId.GetOrCompute("RadialMenu_Label_MultiplayerOnly");

		/// <summary>
		/// Toggle Block Auto Rotation
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_BlockAutoRotate = MyStringId.GetOrCompute("ControlMenuItemLabel_BlockAutoRotate");

		/// <summary>
		/// Copy Grid
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_CopyGrid = MyStringId.GetOrCompute("ControlMenuItemLabel_CopyGrid");

		/// <summary>
		/// Create Blueprint
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_CreateBlueprint = MyStringId.GetOrCompute("ControlMenuItemLabel_CreateBlueprint");

		/// <summary>
		/// Cut Grid
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_CutGrid = MyStringId.GetOrCompute("ControlMenuItemLabel_CutGrid");

		/// <summary>
		/// Paste Grid
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_PasteGrid = MyStringId.GetOrCompute("ControlMenuItemLabel_PasteGrid");

		/// <summary>
		/// Toggle Placement Modes
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_PlacementMode = MyStringId.GetOrCompute("ControlMenuItemLabel_PlacementMode");

		/// <summary>
		/// Toggle Multi-block Building
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_ToggleMultiBlock = MyStringId.GetOrCompute("ControlMenuItemLabel_ToggleMultiBlock");

		/// <summary>
		/// Toggle Signal Mode
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_ToggleSignals = MyStringId.GetOrCompute("ControlMenuItemLabel_ToggleSignals");

		/// <summary>
		/// Unequip
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_Unequip = MyStringId.GetOrCompute("ControlMenuItemLabel_Unequip");

		/// <summary>
		/// Toggle Spectator Mode
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_ViewMode = MyStringId.GetOrCompute("ControlMenuItemLabel_ViewMode");

		/// <summary>
		/// Enter Symmetry Setup
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_SymmetrySetup = MyStringId.GetOrCompute("ControlMenuItemLabel_SymmetrySetup");

		/// <summary>
		/// Exit Symmetry Setup
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_ExitSymmetrySetup = MyStringId.GetOrCompute("ControlMenuItemLabel_ExitSymmetrySetup");

		/// <summary>
		/// Open Color Picker
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_ColorPicker = MyStringId.GetOrCompute("ControlMenuItemLabel_ColorPicker");

		/// <summary>
		/// Toggle Symmetry Mode On/Off:
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_UseSymmetry = MyStringId.GetOrCompute("ControlMenuItemLabel_UseSymmetry");

		/// <summary>
		/// Reload Game
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_Reload = MyStringId.GetOrCompute("ControlMenuItemLabel_Reload");

		/// <summary>
		/// Helmet
		/// </summary>
		public static readonly MyStringId ControlName_Helmet = MyStringId.GetOrCompute("ControlName_Helmet");

		/// <summary>
		/// Broadcasting
		/// </summary>
		public static readonly MyStringId ControlName_Broadcasting = MyStringId.GetOrCompute("ControlName_Broadcasting");

		/// <summary>
		/// Console
		/// </summary>
		public static readonly MyStringId ControlName_Console = MyStringId.GetOrCompute("ControlName_Console");

		/// <summary>
		/// Reset orientation
		/// </summary>
		public static readonly MyStringId ControlName_CubeDefaultMountpoint = MyStringId.GetOrCompute("ControlName_CubeDefaultMountpoint");

		/// <summary>
		/// Use tool / Fire weapon
		/// </summary>
		public static readonly MyStringId ControlName_FirePrimaryWeapon = MyStringId.GetOrCompute("ControlName_FirePrimaryWeapon");

		/// <summary>
		/// Secondary mode
		/// </summary>
		public static readonly MyStringId ControlName_FireSecondaryWeapon = MyStringId.GetOrCompute("ControlName_FireSecondaryWeapon");

		/// <summary>
		/// Inertia dampeners
		/// </summary>
		public static readonly MyStringId ControlName_InertialDampeners = MyStringId.GetOrCompute("ControlName_InertialDampeners");

		/// <summary>
		/// Inertia dampeners on / off
		/// </summary>
		public static readonly MyStringId ControlName_InertialDampenersOnOff = MyStringId.GetOrCompute("ControlName_InertialDampenersOnOff");

		/// <summary>
		/// Jetpack on / off
		/// </summary>
		public static readonly MyStringId ControlName_Jetpack = MyStringId.GetOrCompute("ControlName_Jetpack");

		/// <summary>
		/// Park
		/// </summary>
		public static readonly MyStringId ControlName_LandingGear = MyStringId.GetOrCompute("ControlName_LandingGear");

		/// <summary>
		/// Scenario settings
		/// </summary>
		public static readonly MyStringId ControlName_MissionSettings = MyStringId.GetOrCompute("ControlName_MissionSettings");

		/// <summary>
		/// Local power switch on / off
		/// </summary>
		public static readonly MyStringId ControlName_PowerSwitchOnOff = MyStringId.GetOrCompute("ControlName_PowerSwitchOnOff");

		/// <summary>
		/// Power switch on / off
		/// </summary>
		public static readonly MyStringId ControlName_PowerSwitchOnOff_All = MyStringId.GetOrCompute("ControlName_PowerSwitchOnOff_All");

		/// <summary>
		/// Roll left (ship / jetpack)
		/// </summary>
		public static readonly MyStringId ControlName_RollLeft = MyStringId.GetOrCompute("ControlName_RollLeft");

		/// <summary>
		/// Roll right (ship / jetpack)
		/// </summary>
		public static readonly MyStringId ControlName_RollRight = MyStringId.GetOrCompute("ControlName_RollRight");

		/// <summary>
		/// Rotate down
		/// </summary>
		public static readonly MyStringId ControlName_RotationDown = MyStringId.GetOrCompute("ControlName_RotationDown");

		/// <summary>
		/// Rotate left
		/// </summary>
		public static readonly MyStringId ControlName_RotationLeft = MyStringId.GetOrCompute("ControlName_RotationLeft");

		/// <summary>
		/// Rotate right
		/// </summary>
		public static readonly MyStringId ControlName_RotationRight = MyStringId.GetOrCompute("ControlName_RotationRight");

		/// <summary>
		/// Rotate up
		/// </summary>
		public static readonly MyStringId ControlName_RotationUp = MyStringId.GetOrCompute("ControlName_RotationUp");

		/// <summary>
		/// Symmetry setup
		/// </summary>
		public static readonly MyStringId ControlName_SymmetrySwitch = MyStringId.GetOrCompute("ControlName_SymmetrySwitch");

		/// <summary>
		/// Terminal / Inventory
		/// </summary>
		public static readonly MyStringId ControlName_TerminalOrInventory = MyStringId.GetOrCompute("ControlName_TerminalOrInventory");

		/// <summary>
		/// Lights on / off
		/// </summary>
		public static readonly MyStringId ControlName_ToggleHeadlights = MyStringId.GetOrCompute("ControlName_ToggleHeadlights");

		/// <summary>
		/// Toggle symmetry
		/// </summary>
		public static readonly MyStringId ControlName_UseSymmetry = MyStringId.GetOrCompute("ControlName_UseSymmetry");

		/// <summary>
		/// Control Panel
		/// </summary>
		public static readonly MyStringId ControlPanel = MyStringId.GetOrCompute("ControlPanel");

		/// <summary>
		/// Control
		/// </summary>
		public static readonly MyStringId ControlRemote = MyStringId.GetOrCompute("ControlRemote");

		/// <summary>
		/// Grid blocks:
		/// </summary>
		public static readonly MyStringId ControlScreen_GridBlocksLabel = MyStringId.GetOrCompute("ControlScreen_GridBlocksLabel");

		/// <summary>
		/// Share selected blocks with another player/faction
		/// </summary>
		public static readonly MyStringId ControlScreen_ShareCombobox = MyStringId.GetOrCompute("ControlScreen_ShareCombobox");

		/// <summary>
		/// You need to be owner of the block to access it's sharing options
		/// </summary>
		public static readonly MyStringId ControlScreen_ShareComboboxDisabled = MyStringId.GetOrCompute("ControlScreen_ShareComboboxDisabled");

		/// <summary>
		/// Share block:
		/// </summary>
		public static readonly MyStringId ControlScreen_ShareLabel = MyStringId.GetOrCompute("ControlScreen_ShareLabel");

		/// <summary>
		/// Insert name of a new block group
		/// </summary>
		public static readonly MyStringId ControlScreen_TerminalBlockGroup = MyStringId.GetOrCompute("ControlScreen_TerminalBlockGroup");

		/// <summary>
		/// Remove selected block group
		/// </summary>
		public static readonly MyStringId ControlScreen_TerminalBlockGroupDelete = MyStringId.GetOrCompute("ControlScreen_TerminalBlockGroupDelete");

		/// <summary>
		/// You need to select a block group before you can remove it
		/// </summary>
		public static readonly MyStringId ControlScreen_TerminalBlockGroupDeleteDisabled = MyStringId.GetOrCompute("ControlScreen_TerminalBlockGroupDeleteDisabled");

		/// <summary>
		/// Create a new block group from selected blocks
		/// </summary>
		public static readonly MyStringId ControlScreen_TerminalBlockGroupSave = MyStringId.GetOrCompute("ControlScreen_TerminalBlockGroupSave");

		/// <summary>
		/// You need to insert a group name   before you can create a new block group
		/// </summary>
		public static readonly MyStringId ControlScreen_TerminalBlockGroupSaveDisabled = MyStringId.GetOrCompute("ControlScreen_TerminalBlockGroupSaveDisabled");

		/// <summary>
		/// Transfer ownership of selected blocks to another player/faction
		/// </summary>
		public static readonly MyStringId ControlScreen_TransferCombobox = MyStringId.GetOrCompute("ControlScreen_TransferCombobox");

		/// <summary>
		/// Copy object
		/// </summary>
		public static readonly MyStringId CopyObject = MyStringId.GetOrCompute("CopyObject");

		/// <summary>
		/// Copy object detached
		/// </summary>
		public static readonly MyStringId CopyObjectDetached = MyStringId.GetOrCompute("CopyObjectDetached");

		/// <summary>
		/// Create from clipboard
		/// </summary>
		public static readonly MyStringId CreateFromClipboard = MyStringId.GetOrCompute("CreateFromClipboard");

		/// <summary>
		/// Create/manage blueprints
		/// </summary>
		public static readonly MyStringId CreateManageBlueprints = MyStringId.GetOrCompute("CreateManageBlueprints");

<<<<<<< HEAD
		/// <summary>
		/// Blueprint too big, preview disabled.
		/// </summary>
		public static readonly MyStringId ClipboardBlueprintIsTooBig = MyStringId.GetOrCompute("ClipboardBlueprintIsTooBig");

		/// <summary>
		/// Press {0} again{1}to change block size.
		/// </summary>
=======
		public static readonly MyStringId ClipboardBlueprintIsTooBig = MyStringId.GetOrCompute("ClipboardBlueprintIsTooBig");

>>>>>>> d46cf8619665219cc163a7b28984ced59ed9470d
		public static readonly MyStringId CubeBuilder_CubeSizeModeChange = MyStringId.GetOrCompute("CubeBuilder_CubeSizeModeChange");

		/// <summary>
		/// Large Ship
		/// </summary>
		public static readonly MyStringId CustomShipName_LargeShip = MyStringId.GetOrCompute("CustomShipName_LargeShip");

		/// <summary>
		/// Platform
		/// </summary>
		public static readonly MyStringId CustomShipName_Platform = MyStringId.GetOrCompute("CustomShipName_Platform");

		/// <summary>
		/// Small Ship
		/// </summary>
		public static readonly MyStringId CustomShipName_SmallShip = MyStringId.GetOrCompute("CustomShipName_SmallShip");

		/// <summary>
		/// Crashed Red Ship
		/// </summary>
		public static readonly MyStringId CustomWorld_CrashedRedShip = MyStringId.GetOrCompute("CustomWorld_CrashedRedShip");

		/// <summary>
		/// Dead Drop Arena
		/// </summary>
		public static readonly MyStringId CustomWorld_DeadDropArena = MyStringId.GetOrCompute("CustomWorld_DeadDropArena");

		/// <summary>
		/// Alien Planet
		/// </summary>
		public static readonly MyStringId CustomWorld_EasyStartAlien = MyStringId.GetOrCompute("CustomWorld_EasyStartAlien");

		/// <summary>
		/// Earth Planet
		/// </summary>
		public static readonly MyStringId CustomWorld_EasyStartEarth = MyStringId.GetOrCompute("CustomWorld_EasyStartEarth");

		/// <summary>
		/// Green Station
		/// </summary>
		public static readonly MyStringId CustomWorld_EasyStartGreen = MyStringId.GetOrCompute("CustomWorld_EasyStartGreen");

		/// <summary>
		/// Mars Planet
		/// </summary>
		public static readonly MyStringId CustomWorld_EasyStartMars = MyStringId.GetOrCompute("CustomWorld_EasyStartMars");

		/// <summary>
		/// Moon Base
		/// </summary>
		public static readonly MyStringId CustomWorld_EasyStartMoon = MyStringId.GetOrCompute("CustomWorld_EasyStartMoon");

		/// <summary>
		/// Red Ship
		/// </summary>
		public static readonly MyStringId CustomWorld_EasyStartSpace = MyStringId.GetOrCompute("CustomWorld_EasyStartSpace");

		/// <summary>
		/// Empty World
		/// </summary>
		public static readonly MyStringId CustomWorld_EmptyWorld = MyStringId.GetOrCompute("CustomWorld_EmptyWorld");

		/// <summary>
		/// Lone Survivor
		/// </summary>
		public static readonly MyStringId CustomWorld_LoneSurvivor = MyStringId.GetOrCompute("CustomWorld_LoneSurvivor");

		/// <summary>
		/// Rival Platforms
		/// </summary>
		public static readonly MyStringId CustomWorld_RivalPlatforms = MyStringId.GetOrCompute("CustomWorld_RivalPlatforms");

		/// <summary>
		/// Star System
		/// </summary>
		public static readonly MyStringId CustomWorld_StarSystem = MyStringId.GetOrCompute("CustomWorld_StarSystem");

<<<<<<< HEAD
		/// <summary>
		/// Home System
		/// </summary>
		public static readonly MyStringId CustomWorld_HomeSystem = MyStringId.GetOrCompute("CustomWorld_HomeSystem");

		/// <summary>
		/// Distant Worlds
		/// </summary>
		public static readonly MyStringId CustomWorld_AlienSystem = MyStringId.GetOrCompute("CustomWorld_AlienSystem");

		/// <summary>
		/// Distant Moons
		/// </summary>
		public static readonly MyStringId CustomWorld_DistantMoons = MyStringId.GetOrCompute("CustomWorld_DistantMoons");

		/// <summary>
		/// Cut object
		/// </summary>
=======
		public static readonly MyStringId CustomWorld_HomeSystem = MyStringId.GetOrCompute("CustomWorld_HomeSystem");

		public static readonly MyStringId CustomWorld_AlienSystem = MyStringId.GetOrCompute("CustomWorld_AlienSystem");

		public static readonly MyStringId CustomWorld_DistantMoons = MyStringId.GetOrCompute("CustomWorld_DistantMoons");

>>>>>>> d46cf8619665219cc163a7b28984ced59ed9470d
		public static readonly MyStringId CutObject = MyStringId.GetOrCompute("CutObject");

		/// <summary>
		/// Cutscenes tools
		/// </summary>
		public static readonly MyStringId CutsceneToolsButton = MyStringId.GetOrCompute("CutsceneToolsButton");

		/// <summary>
		/// Cycle HUD
		/// </summary>
		public static readonly MyStringId CycleHUD = MyStringId.GetOrCompute("CycleHUD");

		/// <summary>
		/// Dampeners
		/// </summary>
		public static readonly MyStringId Dampeners = MyStringId.GetOrCompute("Dampeners");

		/// <summary>
		/// Male Astronaut
		/// </summary>
		public static readonly MyStringId Default_Astronaut = MyStringId.GetOrCompute("Default_Astronaut");

		/// <summary>
		/// Female Astronaut
		/// </summary>
		public static readonly MyStringId Default_Astronaut_Female = MyStringId.GetOrCompute("Default_Astronaut_Female");

		/// <summary>
		/// Black Spider
		/// </summary>
		public static readonly MyStringId Space_spider_black = MyStringId.GetOrCompute("Space_spider_black");

		/// <summary>
		/// Brown Spider
		/// </summary>
		public static readonly MyStringId Space_spider_brown = MyStringId.GetOrCompute("Space_spider_brown");

		/// <summary>
		/// Green Spider
		/// </summary>
		public static readonly MyStringId Space_spider_green = MyStringId.GetOrCompute("Space_spider_green");

		/// <summary>
		/// Default Spider
		/// </summary>
		public static readonly MyStringId Space_spider = MyStringId.GetOrCompute("Space_spider");

		/// <summary>
		/// Wolf
		/// </summary>
		public static readonly MyStringId Space_Wolf = MyStringId.GetOrCompute("Space_Wolf");

		/// <summary>
		/// Definition for {0} contains computer, but the block's TypeId is not a terminal block. This means that the block can be owned, but the ownership cannot be changed via terminal. Hint: Try setting the TypeId to any block that is in the terminal - the simplest case being just TerminalBlock
		/// </summary>
		public static readonly MyStringId DefinitionError_BlockWithComputerNotTerminalBlock = MyStringId.GetOrCompute("DefinitionError_BlockWithComputerNotTerminalBlock");

		/// <summary>
		/// Are you sure you want to delete this blueprint?
		/// </summary>
		public static readonly MyStringId DeleteBlueprintQuestion = MyStringId.GetOrCompute("DeleteBlueprintQuestion");

		/// <summary>
		/// Delete
		/// </summary>
		public static readonly MyStringId DeleteEntity = MyStringId.GetOrCompute("DeleteEntity");

		/// <summary>
		/// Delete object
		/// </summary>
		public static readonly MyStringId DeleteObject = MyStringId.GetOrCompute("DeleteObject");

		/// <summary>
		/// Additional Artists
		/// </summary>
		public static readonly MyStringId Department_AdditionalArtists = MyStringId.GetOrCompute("Department_AdditionalArtists");

		/// <summary>
		/// Additional Designers
		/// </summary>
		public static readonly MyStringId Department_AdditionalDesigners = MyStringId.GetOrCompute("Department_AdditionalDesigners");

		/// <summary>
		/// Additional Programmers
		/// </summary>
		public static readonly MyStringId Department_AdditionalProgrammers = MyStringId.GetOrCompute("Department_AdditionalProgrammers");

		/// <summary>
		/// Additional Testers
		/// </summary>
		public static readonly MyStringId Department_AdditionalTesters = MyStringId.GetOrCompute("Department_AdditionalTesters");

		/// <summary>
		/// Artists
		/// </summary>
		public static readonly MyStringId Department_Artists = MyStringId.GetOrCompute("Department_Artists");

		/// <summary>
		/// Assistant Producer
		/// </summary>
		public static readonly MyStringId Department_AssistantProducer = MyStringId.GetOrCompute("Department_AssistantProducer");

		/// <summary>
		/// Community Managers
		/// </summary>
		public static readonly MyStringId Department_CommunityManagers = MyStringId.GetOrCompute("Department_CommunityManagers");

		/// <summary>
		/// Community &amp; PR Manager
		/// </summary>
		public static readonly MyStringId Department_CommunityPr = MyStringId.GetOrCompute("Department_CommunityPr");

		/// <summary>
		/// Executive Producer &amp; Creative Director
		/// </summary>
		public static readonly MyStringId Department_ExecutiveProducer = MyStringId.GetOrCompute("Department_ExecutiveProducer");

		/// <summary>
		/// Game Designers
		/// </summary>
		public static readonly MyStringId Department_GameDesigners = MyStringId.GetOrCompute("Department_GameDesigners");

		/// <summary>
		/// Producer
		/// </summary>
		public static readonly MyStringId Department_LeadProducer = MyStringId.GetOrCompute("Department_LeadProducer");

		/// <summary>
		/// Lead Programmers
		/// </summary>
		public static readonly MyStringId Department_LeadProgrammers = MyStringId.GetOrCompute("Department_LeadProgrammers");

		/// <summary>
		/// QA Lead
		/// </summary>
		public static readonly MyStringId Department_LeadTester = MyStringId.GetOrCompute("Department_LeadTester");

		/// <summary>
		/// Mod Contributors
		/// </summary>
		public static readonly MyStringId Department_ModContributors = MyStringId.GetOrCompute("Department_ModContributors");

		/// <summary>
		/// For more information see
		/// </summary>
		public static readonly MyStringId Department_MoreInfo = MyStringId.GetOrCompute("Department_MoreInfo");

		/// <summary>
		/// Music
		/// </summary>
		public static readonly MyStringId Department_Music = MyStringId.GetOrCompute("Department_Music");

		/// <summary>
		/// Office
		/// </summary>
		public static readonly MyStringId Department_Office = MyStringId.GetOrCompute("Department_Office");

		/// <summary>
		/// Programmers
		/// </summary>
		public static readonly MyStringId Department_Programmers = MyStringId.GetOrCompute("Department_Programmers");

		/// <summary>
		/// Sound Design
		/// </summary>
		public static readonly MyStringId Department_SoundDesign = MyStringId.GetOrCompute("Department_SoundDesign");

		/// <summary>
		/// Special Thanks (in alphabetical order)
		/// </summary>
		public static readonly MyStringId Department_SpecialThanks = MyStringId.GetOrCompute("Department_SpecialThanks");

		/// <summary>
		/// QA Testers
		/// </summary>
		public static readonly MyStringId Department_Testers = MyStringId.GetOrCompute("Department_Testers");

		/// <summary>
		/// Translators
		/// </summary>
		public static readonly MyStringId Department_Translators = MyStringId.GetOrCompute("Department_Translators");

		/// <summary>
		/// Depower
		/// </summary>
		public static readonly MyStringId Depower = MyStringId.GetOrCompute("Depower");

		/// <summary>
		/// Context help not available.
		/// </summary>
		public static readonly MyStringId Description_NotAvailable = MyStringId.GetOrCompute("Description_NotAvailable");

		/// <summary>
		/// A tool for building and repairing. Hold {CONTROL:ABASE:PRIMARY_TOOL_ACTION} to weld. Press {CONTROL:ABASE:SECONDARY_TOOL_ACTION} to put missing components to Build Planner.
		/// </summary>
		public static readonly MyStringId Description_Welder = MyStringId.GetOrCompute("Description_Welder");

		/// <summary>
		/// A tool for deconstructing and salvaging. Hold {CONTROL:ABASE:PRIMARY_TOOL_ACTION} to grind. 
		/// </summary>
		public static readonly MyStringId Description_AngleGrinder = MyStringId.GetOrCompute("Description_AngleGrinder");

		/// <summary>
		/// A tool to break down rock to collect minerals. Hold down {CONTROL:ABASE:PRIMARY_TOOL_ACTION} to drill. Hold {CONTROL:ABASE:SECONDARY_TOOL_ACTION} to quickly dig tunnels. 
		/// </summary>
		public static readonly MyStringId Description_HandDrill = MyStringId.GetOrCompute("Description_HandDrill");

		/// <summary>
		/// The MR-20 is a staple of both military and police forces. An exceptionally reliable rifle. Easy to use, easy to clean.
		/// </summary>
		public static readonly MyStringId Description_Rifle = MyStringId.GetOrCompute("Description_Rifle");

		/// <summary>
		/// Basic armor to give structure and shape to ships and stations. Not very durable but lightweight. 
		/// </summary>
		public static readonly MyStringId Description_LightArmor = MyStringId.GetOrCompute("Description_LightArmor");

		/// <summary>
		/// Heavy armor to give structure and shape to ships and stations. Durable but heavy. 
		/// </summary>
		public static readonly MyStringId Description_HeavyArmor = MyStringId.GetOrCompute("Description_HeavyArmor");

		/// <summary>
		/// Advanced rotors enable connected grids to rotate with the ability to transfer items between the grids.
		/// </summary>
		public static readonly MyStringId Description_AdvancedRotor = MyStringId.GetOrCompute("Description_AdvancedRotor");

		/// <summary>
		/// The top part of an advanced rotor can be reattached to the rotor by accessing rotor settings. 
		/// </summary>
		public static readonly MyStringId Description_AdvancedRotorPart = MyStringId.GetOrCompute("Description_AdvancedRotorPart");

		/// <summary>
		/// The Airvent can fill a sealed room with oxygen or extract oxygen from the atmosphere.  Oxygen is produced from ice in a O2/H2 generator or by oxygen farms.  Use an oxygen tank for storage and conveyors to connect the blocks. 
		/// </summary>
		public static readonly MyStringId Description_AirVent = MyStringId.GetOrCompute("Description_AirVent");

		/// <summary>
		/// Antennas can be used to broadcast positions, messages HUD markers and allows grids to be accessed or controlled from a distance.  Antennas need to be able to send and receive, so make sure two antennas always overlap each other's position. 
		/// </summary>
		public static readonly MyStringId Description_RadioAntenna = MyStringId.GetOrCompute("Description_RadioAntenna");

		/// <summary>
		/// Artificial mass or spaceballs enable grids to react to artificial gravity. 
		/// </summary>
		public static readonly MyStringId Description_VirtualMass = MyStringId.GetOrCompute("Description_VirtualMass");

		/// <summary>
		/// Assemblers are highly advanced machines capable of producing tools and components.  Requires ingots and power to produce components.
		/// </summary>
		public static readonly MyStringId Description_Assembler = MyStringId.GetOrCompute("Description_Assembler");

		/// <summary>
		/// A basic assembler to produce a limited selection of components.   Requires ingots and power to produce components.
		/// </summary>
		public static readonly MyStringId Description_AssemblerBasic = MyStringId.GetOrCompute("Description_AssemblerBasic");

		/// <summary>
		/// Atmospheric thrusters can only function in planetary atmospheres. 
		/// </summary>
		public static readonly MyStringId Description_AtmosphericThrust = MyStringId.GetOrCompute("Description_AtmosphericThrust");

		/// <summary>
		/// A battery stores power and is able to distribute a high output of energy.
		/// </summary>
		public static readonly MyStringId Description_Battery = MyStringId.GetOrCompute("Description_Battery");

		/// <summary>
		/// A beacon is used to broadcast its position.
		/// </summary>
		public static readonly MyStringId Description_Beacon = MyStringId.GetOrCompute("Description_Beacon");

		/// <summary>
		/// Button panels enable you to bind block functions to buttons that can be directly interacted with.  When highlighted, press {CONTROL:TERMINAL} to configure the buttons and {CONTROL:USE} to activate them.
		/// </summary>
		public static readonly MyStringId Description_ButtonPanel = MyStringId.GetOrCompute("Description_ButtonPanel");

		/// <summary>
		/// The camera allows you to view remote locations and zoom in on distant objects.  Set up cameras on ship toolbars so you can zoom while using weapons or look behind you while docking.
		/// </summary>
		public static readonly MyStringId Description_Camera = MyStringId.GetOrCompute("Description_Camera");

		/// <summary>
		/// Small containers can be used to store items. 
		/// </summary>
		public static readonly MyStringId Description_SmallCargoContainer = MyStringId.GetOrCompute("Description_SmallCargoContainer");

		/// <summary>
		/// Medium containers can be used to store items. 
		/// </summary>
		public static readonly MyStringId Description_MediumCargoContainer = MyStringId.GetOrCompute("Description_MediumCargoContainer");

		/// <summary>
		/// Large containers can be used to store many items. 
		/// </summary>
		public static readonly MyStringId Description_LargeCargoContainer = MyStringId.GetOrCompute("Description_LargeCargoContainer");

		/// <summary>
		/// Catwalks can be used to build walkways or function as thin walls.
		/// </summary>
		public static readonly MyStringId Description_SteelCatwalk = MyStringId.GetOrCompute("Description_SteelCatwalk");

		/// <summary>
		/// Cockpits are used to control your ship.  Connect a cockpit with oxygen tanks and O2/H2 generators to supply the cockpit with oxygen. 
		/// </summary>
		public static readonly MyStringId Description_Cockpit = MyStringId.GetOrCompute("Description_Cockpit");

		/// <summary>
		/// Fighter cockpits are used to control ships and offer a little more protection than normal cockpits.  Connect the cockpit with Oxygen tanks and O2/H2 generators to supply the cockpit with oxygen. 
		/// </summary>
		public static readonly MyStringId Description_FighterCockpit = MyStringId.GetOrCompute("Description_FighterCockpit");

		/// <summary>
		/// Collectors collects items when they get close to the collector's funnel.
		/// </summary>
		public static readonly MyStringId Description_Collector = MyStringId.GetOrCompute("Description_Collector");

		/// <summary>
		/// The connector can be magnetically locked with other connectors to allow cross grid distribution of items and power.  Toggle the magnetic lock from your toolbar or press {CONTROL:LANDING_GEAR}. Connectors will show up yellow when in range.  Unlocking it will briefly disable the magnetic function.
		/// </summary>
		public static readonly MyStringId Description_Connector = MyStringId.GetOrCompute("Description_Connector");

		/// <summary>
		/// Control panels are simple panels that allow access to grid menus.  When highlighted, press {CONTROL:TERMINAL} to interact with the panel. 
		/// </summary>
		public static readonly MyStringId Description_ControlPanel = MyStringId.GetOrCompute("Description_ControlPanel");

		/// <summary>
		/// Control stations are used to control a large ship.
		/// </summary>
		public static readonly MyStringId Description_ControlStation = MyStringId.GetOrCompute("Description_ControlStation");

		/// <summary>
		/// Use conveyor tubes and junctions to connect inventories of blocks so that items and gases can move freely from one inventory to another. 
		/// </summary>
		public static readonly MyStringId Descripton_ConveyorJunction = MyStringId.GetOrCompute("Descripton_ConveyorJunction");

		/// <summary>
		/// Conveyor sorters can be configured to only pass specific items through or stop specific items from passing through.  Sorters can be used to filter out unwanted materials or to collect specific items in a container. 
		/// </summary>
		public static readonly MyStringId Description_ConveyorSorter = MyStringId.GetOrCompute("Description_ConveyorSorter");

		/// <summary>
		/// Use conveyor tubes and junctions to connect inventories of blocks so that items can move freely from one inventory to another. 
		/// </summary>
		public static readonly MyStringId Description_ConveyorTube = MyStringId.GetOrCompute("Description_ConveyorTube");

		/// <summary>
		/// Lights are used to illuminate interiors or can be used to act as reference points on exteriors. 
		/// </summary>
		public static readonly MyStringId Description_CornerLight = MyStringId.GetOrCompute("Description_CornerLight");

		/// <summary>
		/// Cryo rooms can store players while they are disconnected from a server.  Reduced oxygen consumption for player. Stores toolbar while offline. Connect the cryo room with Oxygen tanks, O2/H2 generators or oxygen farms with conveyors to supply oxygen. 
		/// </summary>
		public static readonly MyStringId Description_CryoChamber = MyStringId.GetOrCompute("Description_CryoChamber");

		/// <summary>
		/// Decoys attract fire from enemy turrets and protect your property from lightning strikes.
		/// </summary>
		public static readonly MyStringId Description_Decoy = MyStringId.GetOrCompute("Description_Decoy");

		/// <summary>
		/// Doors can seal off interiors and make them air tight while still allowing access for the player.
		/// </summary>
		public static readonly MyStringId Description_Door = MyStringId.GetOrCompute("Description_Door");

		/// <summary>
		/// Ship drills are utility tools for mining on planets or asteroids to collect raw ores.  Can be used from a cockpit or turned on manually. Be careful not to get too close while it's active. Use conveyors to connect the drill with more storage blocks or refineries. 
		/// </summary>
		public static readonly MyStringId Description_Drill = MyStringId.GetOrCompute("Description_Drill");

		/// <summary>
		/// The ejector allows small items to be ejected from small ships. Can also be used to access inventories.  You can use the ejector together with the conveyor sorter to collect and throw out specific items. 
		/// </summary>
		public static readonly MyStringId Description_Ejector = MyStringId.GetOrCompute("Description_Ejector");

		/// <summary>
		/// Flight seats are used to control a large ship and access all of its functions. 
		/// </summary>
		public static readonly MyStringId Description_FlightSeat = MyStringId.GetOrCompute("Description_FlightSeat");

		/// <summary>
		/// Armored walls provide cover in interiors or can be used to prevent players from walking off ledges. 
		/// </summary>
		public static readonly MyStringId Description_FullCoverWall = MyStringId.GetOrCompute("Description_FullCoverWall");

		/// <summary>
		/// Fast-shooting gun that can be loaded through conveyors. Uses Gatling Ammo Boxes.  Maximum range: 800 m
		/// </summary>
		public static readonly MyStringId Description_GatlingGun = MyStringId.GetOrCompute("Description_GatlingGun");

		/// <summary>
		/// Fast-shooting turret that can be loaded through conveyors. Uses Gatling Ammo Boxes.  Maximum range: 800 m
		/// </summary>
		public static readonly MyStringId Description_GatlingTurret = MyStringId.GetOrCompute("Description_GatlingTurret");

		/// <summary>
		/// Gravity generators create configurable artificial gravity fields that affect players and items in an otherwise zero G environment. Has diminishing effects when inside a real gravity field. 
		/// </summary>
		public static readonly MyStringId Description_GravityGenerator = MyStringId.GetOrCompute("Description_GravityGenerator");

		/// <summary>
		/// Spherical gravity generators create a configurable artificial spherical gravity field that affects players and items in an otherwise zero G environment. Has diminishing effects when inside a real gravity field. 
		/// </summary>
		public static readonly MyStringId Description_GravityGeneratorSphere = MyStringId.GetOrCompute("Description_GravityGeneratorSphere");

		/// <summary>
		/// Ship grinders are utility tools for deconstructing grids. Can be used from a cockpit or turned on manually. Be careful not to get too close while it's active. 
		/// </summary>
		public static readonly MyStringId Description_ShipGrinder = MyStringId.GetOrCompute("Description_ShipGrinder");

		/// <summary>
		/// Gyroscopes allow ships to orientate using the mouse movements and stabilize rotating grids.  Build more gyroscopes to increase sensitivity and the speed that a grid can turn. 
		/// </summary>
		public static readonly MyStringId Description_Gyroscope = MyStringId.GetOrCompute("Description_Gyroscope");

		/// <summary>
		/// Hangar doors can be linked together to create large gates that can seal spaces air tight while allowing vehicles in and out.   You can build and use a button panel to open hangar doors by interacting with it or sensors to make them open and close automatically.
		/// </summary>
		public static readonly MyStringId Description_HangarDoor = MyStringId.GetOrCompute("Description_HangarDoor");

		/// <summary>
		/// Hydrogen tanks are used for storing hydrogen fuel.  Hydrogen is used for hydrogen thrusters, engines or jetpack fuel. Hydrogen can be produced from ice in a O2/H2 generator. Can store and refill hydrogen bottles. 
		/// </summary>
		public static readonly MyStringId Description_HydrogenTank = MyStringId.GetOrCompute("Description_HydrogenTank");

		/// <summary>
		/// Hydrogen thrusters are powerful thrusters that consume hydrogen and function in every environment.  Hydrogen can be produced from ice in a O2/H2 generator. Use a hydrogen tank for storage. Use Conveyors to transport the hydrogen.
		/// </summary>
		public static readonly MyStringId Description_HydrogenThrust = MyStringId.GetOrCompute("Description_HydrogenThrust");

		/// <summary>
		/// Lights are used to illuminate interiors or can be used to act as reference points on exteriors. 
		/// </summary>
		public static readonly MyStringId Description_InteriorLight = MyStringId.GetOrCompute("Description_InteriorLight");

		/// <summary>
		/// Pillars and columns can be used to reinforce structures or as decoration.
		/// </summary>
		public static readonly MyStringId Description_InteriorPillar = MyStringId.GetOrCompute("Description_InteriorPillar");

		/// <summary>
		/// Autonomous anti-personnel turret. Must be manually loaded with MR-50A magazines.  Maximum range: 600 m
		/// </summary>
		public static readonly MyStringId Description_InteriorTurret = MyStringId.GetOrCompute("Description_InteriorTurret");

		/// <summary>
		/// Interior walls are blocks with emissive lights to function as interior walls, ceilings or floors. 
		/// </summary>
		public static readonly MyStringId Description_InteriorWall = MyStringId.GetOrCompute("Description_InteriorWall");

		/// <summary>
		/// Ion thrusters are advanced thrusters that function best in zero gravity environments. 
		/// </summary>
		public static readonly MyStringId Description_IonThrust = MyStringId.GetOrCompute("Description_IonThrust");

		/// <summary>
		/// Jump drives allow ships to teleport over large distances.  They require a full charge to jump and can only be activated from the toolbar of a cockpit. 
		/// </summary>
		public static readonly MyStringId Description_JumpDrive = MyStringId.GetOrCompute("Description_JumpDrive");

		/// <summary>
		/// LCD panels display pictograms or customized text.
		/// </summary>
		public static readonly MyStringId Description_TextPanel = MyStringId.GetOrCompute("Description_TextPanel");

		/// <summary>
		/// Landing gears and Magnetic Plates are capable of magnetically locking to any surface.  They can be locked and unlocked by pressing {CONTROL:SPACESHIP:LANDING_GEAR} when inside a cockpit. They will show up yellow when in range of a surface that they can lock onto. 
		/// </summary>
		public static readonly MyStringId Description_LandingGear = MyStringId.GetOrCompute("Description_LandingGear");

		/// <summary>
		/// Laser antennas do not broadcast a signal that other players can see but instead require direct line of sight to function.  This antenna is connected by using GPS coordinates. 
		/// </summary>
		public static readonly MyStringId Description_LaserAntenna = MyStringId.GetOrCompute("Description_LaserAntenna");

		/// <summary>
		/// The Medical room enables you to respawn, change your appearance and recharge your health and energy much faster than the survival kit. 
		/// </summary>
		public static readonly MyStringId Description_MedicalRoom = MyStringId.GetOrCompute("Description_MedicalRoom");

		/// <summary>
		/// Merge blocks can be used to permanently or temporarily connect two grids together and function as one grid.  Merge blocks will show up yellow when in range of another merge block.
		/// </summary>
		public static readonly MyStringId Description_MergeBlock = MyStringId.GetOrCompute("Description_MergeBlock");

		/// <summary>
		/// Slow-shooting, explosive damage dealing, missile launcher that can be loaded through conveyors. Uses Missiles.  Maximum range: 800 m
		/// </summary>
		public static readonly MyStringId Description_MissileTurret = MyStringId.GetOrCompute("Description_MissileTurret");

		/// <summary>
		/// Speed modules increase the production speed of refineries or assemblers when connected.
		/// </summary>
		public static readonly MyStringId Description_ProductivityModule = MyStringId.GetOrCompute("Description_ProductivityModule");

		/// <summary>
		/// Yield modules increase production yield of refineries when connected. 
		/// </summary>
		public static readonly MyStringId Description_EffectivenessModule = MyStringId.GetOrCompute("Description_EffectivenessModule");

		/// <summary>
		/// Power modules decrease power consumption of refineries or assemblers when connected.
		/// </summary>
		public static readonly MyStringId Description_PowerEfficiencyModule = MyStringId.GetOrCompute("Description_PowerEfficiencyModule");

		/// <summary>
		/// Ore detectors detect ores within a limited radius and makes them show up on your HUD. 
		/// </summary>
		public static readonly MyStringId Description_OreDetector = MyStringId.GetOrCompute("Description_OreDetector");

		/// <summary>
		/// Hydroponics farms produce small amounts of oxygen when in contact with sunlight.  Use an oxygen tank to store oxygen. 
		/// </summary>
		public static readonly MyStringId Description_OxygenFarm = MyStringId.GetOrCompute("Description_OxygenFarm");

		/// <summary>
		/// O2/H2 generators produce oxygen and hydrogen from ice.  Use oxygen and hydrogen tanks for storage. Will refill bottles automatically. 
		/// </summary>
		public static readonly MyStringId Description_OxygenGenerator = MyStringId.GetOrCompute("Description_OxygenGenerator");

		/// <summary>
		/// Oxygen tank store oxygen.  Able to store and refill oxygen bottles. Use O2/H2 generator to produce oxygen. 
		/// </summary>
		public static readonly MyStringId Description_OxygenTank = MyStringId.GetOrCompute("Description_OxygenTank");

		/// <summary>
		/// Parachute hatches deploy parachutes to slow down the descent of ships when inside the atmosphere.  Can be configured to open automatically or used manually from the toolbar or settings. 
		/// </summary>
		public static readonly MyStringId Description_ParachuteHatch = MyStringId.GetOrCompute("Description_ParachuteHatch");

		/// <summary>
		/// Passages allow passage either vertically or horizontally. 
		/// </summary>
		public static readonly MyStringId Description_Passage = MyStringId.GetOrCompute("Description_Passage");

		/// <summary>
		/// A passenger seat can be used to transport other players.
		/// </summary>
		public static readonly MyStringId Description_PassengerSeat = MyStringId.GetOrCompute("Description_PassengerSeat");

		/// <summary>
		/// The piston is an expandable block that allows the transfer of power and items.
		/// </summary>
		public static readonly MyStringId Description_Piston = MyStringId.GetOrCompute("Description_Piston");

		/// <summary>
		/// This piston part is the top section of the piston. It has no function of its own, but can be used decoratively.
		/// </summary>
		public static readonly MyStringId Description_PistonTop = MyStringId.GetOrCompute("Description_PistonTop");

		/// <summary>
		/// A Programmable Block is a computer that runs scripts to manage ship systems.  Scripts can be found on the Workshop or written manually. 
		/// </summary>
		public static readonly MyStringId Description_ProgrammableBlock = MyStringId.GetOrCompute("Description_ProgrammableBlock");

		/// <summary>
		/// The projector block projects saved blueprints of ships so that they can be built easily.  Projection requires a connection with a grid from a projector in order to start construction. 
		/// </summary>
		public static readonly MyStringId Description_Projector = MyStringId.GetOrCompute("Description_Projector");

		/// <summary>
		/// The ramp block can be used to traverse heights or simply used for aesthetics.
		/// </summary>
		public static readonly MyStringId Description_Ramp = MyStringId.GetOrCompute("Description_Ramp");

		/// <summary>
		/// Reactors generate high amounts of power at the cost of refined uranium ingots.     Uranium is one of the rarest elements and cannot be found on planets. Uranium can be found in asteroids, and in some craters left by meteorite impacts. 
		/// </summary>
		public static readonly MyStringId Description_Reactor = MyStringId.GetOrCompute("Description_Reactor");

		/// <summary>
		/// Advanced refineries refine all ores into ingots.  They can be upgraded with upgrade modules. 
		/// </summary>
		public static readonly MyStringId Description_Refinery = MyStringId.GetOrCompute("Description_Refinery");

		/// <summary>
		/// Basic refineries refines limited types of ores into ingots. 
		/// </summary>
		public static readonly MyStringId Description_RefineryBasic = MyStringId.GetOrCompute("Description_RefineryBasic");

		/// <summary>
		/// An advanced version of the rocket launcher, capable of using the conveyor system to automatically reload. Uses Missiles.  Maximum range: 800 m
		/// </summary>
		public static readonly MyStringId Description_RocketLauncherReload = MyStringId.GetOrCompute("Description_RocketLauncherReload");

		/// <summary>
		/// Remote controls allow ships to be controlled from a distance when combined with an antenna or commands ships to fly automatically to waypoints.
		/// </summary>
		public static readonly MyStringId Description_RemoteControl = MyStringId.GetOrCompute("Description_RemoteControl");

		/// <summary>
		/// Slow-shooting, explosive damage dealing, rocket launcher that must be loaded manually. Uses Missiles.  Maximum range: 800 m
		/// </summary>
		public static readonly MyStringId Description_RocketLauncher = MyStringId.GetOrCompute("Description_RocketLauncher");

		/// <summary>
		/// Rotors allows connected grids to rotate. 
		/// </summary>
		public static readonly MyStringId Description_Rotor = MyStringId.GetOrCompute("Description_Rotor");

		/// <summary>
		/// The rotor part is the top section of the rotor.  It can be reattached with a rotor within rotor settings. 
		/// </summary>
		public static readonly MyStringId Description_RotorPart = MyStringId.GetOrCompute("Description_RotorPart");

		/// <summary>
		/// Sensors can be set up to activate ship systems when they detects players, ships or asteroids within a limited range. 
		/// </summary>
		public static readonly MyStringId Description_Sensor = MyStringId.GetOrCompute("Description_Sensor");

		/// <summary>
		/// Solar panels generate power when exposed to sunlight.  Point solar panels directly at the sun to improve the amount of power generated. 
		/// </summary>
		public static readonly MyStringId Description_SolarPanel = MyStringId.GetOrCompute("Description_SolarPanel");

		/// <summary>
		/// Sound blocks emit sounds when activated. 
		/// </summary>
		public static readonly MyStringId Description_Sound = MyStringId.GetOrCompute("Description_Sound");

		/// <summary>
		/// A spherical block that reacts to gravity.
		/// </summary>
		public static readonly MyStringId Description_SpaceBall = MyStringId.GetOrCompute("Description_SpaceBall");

		/// <summary>
		/// Spotlights are powerful lights used to illuminate dark areas.
		/// </summary>
		public static readonly MyStringId Description_ReflectorLight = MyStringId.GetOrCompute("Description_ReflectorLight");

		/// <summary>
		/// Stairs can be used to traverse heights. 
		/// </summary>
		public static readonly MyStringId Description_Stairs = MyStringId.GetOrCompute("Description_Stairs");

		/// <summary>
		/// Timer blocks can be used to activate configured ship systems after a set amount of time.  Use multiple timer blocks to build sequences. Can be used to automate systems. 
		/// </summary>
		public static readonly MyStringId Description_Timer = MyStringId.GetOrCompute("Description_Timer");

		/// <summary>
		/// Warheads are powerful explosives that can be used to destroy asteroids, enemy ships and stations.  Safe when unarmed. They can be detonated manually, by taking damage or set to detonate after a configurable amount of time. 
		/// </summary>
		public static readonly MyStringId Description_Warhead = MyStringId.GetOrCompute("Description_Warhead");

		/// <summary>
		/// A Ship welder is a utility tool that can construct blueprints and blocks using components from its inventory.  Can be used from a cockpit or turned on manually. Be careful not to get too close while it's active.  Press RMB to put missing components to Build Planner.
		/// </summary>
		public static readonly MyStringId Description_ShipWelder = MyStringId.GetOrCompute("Description_ShipWelder");

		/// <summary>
		/// Wheels can be used to traverse terrain in environments with gravity. 
		/// </summary>
		public static readonly MyStringId Description_Wheel = MyStringId.GetOrCompute("Description_Wheel");

		/// <summary>
		/// Suspensions are highly durable and enable vehicles to drive over most terrains. 
		/// </summary>
		public static readonly MyStringId Description_Suspension = MyStringId.GetOrCompute("Description_Suspension");

		/// <summary>
		/// Transparent windows will keep the air in and space out while you enjoy the view. 
		/// </summary>
		public static readonly MyStringId Description_Window = MyStringId.GetOrCompute("Description_Window");

		/// <summary>
		/// Vertical windows can be used to funnel air through and keep engineers out.
		/// </summary>
		public static readonly MyStringId Description_VerticalWindow = MyStringId.GetOrCompute("Description_VerticalWindow");

		/// <summary>
		/// Diagonal window shutters can be used as stairs. 
		/// </summary>
		public static readonly MyStringId Description_DiagonalWindow = MyStringId.GetOrCompute("Description_DiagonalWindow");

		/// <summary>
		/// All in one factory to get a space engineer started, but it has limited refining and assembling capabilities. Allows the player to recharge. 
		/// </summary>
		public static readonly MyStringId Description_SurvivalKit = MyStringId.GetOrCompute("Description_SurvivalKit");

		/// <summary>
		/// The Wind turbine generates low amounts of power when exposed to open areas. Only works on planets with atmosphere. 
		/// </summary>
		public static readonly MyStringId Description_WindTurbine = MyStringId.GetOrCompute("Description_WindTurbine");

		/// <summary>
		/// The hydrogen engine converts hydrogen into power and has its own internal hydrogen tank. 
		/// </summary>
		public static readonly MyStringId Description_PowerGenerator = MyStringId.GetOrCompute("Description_PowerGenerator");

		/// <summary>
		/// The ladder enables you to traverse vertical spaces. 
		/// </summary>
		public static readonly MyStringId Description_Ladder = MyStringId.GetOrCompute("Description_Ladder");

		/// <summary>
		/// A desk for decorating interiors. Can be used as a seat.
		/// </summary>
		public static readonly MyStringId Description_Desk = MyStringId.GetOrCompute("Description_Desk");

		/// <summary>
		/// A desk for decorating interiors. Can be used as a seat.
		/// </summary>
		public static readonly MyStringId Description_DeskCorner = MyStringId.GetOrCompute("Description_DeskCorner");

		/// <summary>
		/// A desk for decorating interiors.
		/// </summary>
		public static readonly MyStringId Description_DeskChairless = MyStringId.GetOrCompute("Description_DeskChairless");

		/// <summary>
		/// A desk for decorating interiors.
		/// </summary>
		public static readonly MyStringId Description_DeskChairlessCorner = MyStringId.GetOrCompute("Description_DeskChairlessCorner");

		/// <summary>
		/// A vending machine used to distract engineers from the hazards of space and boost morale.
		/// </summary>
		public static readonly MyStringId Description_FoodDispenser = MyStringId.GetOrCompute("Description_FoodDispenser");

		/// <summary>
		/// A device that plays music. Great for hosting dance parties or winding down after a hard day’s work.
		/// </summary>
		public static readonly MyStringId Description_Jukebox = MyStringId.GetOrCompute("Description_Jukebox");

		/// <summary>
		/// Seat in between lots of consoles. More like a bridge seat.
		/// </summary>
		public static readonly MyStringId Description_OpenCockpitLarge = MyStringId.GetOrCompute("Description_OpenCockpitLarge");

		/// <summary>
		/// This control seat can be used to pilot anything from modest rovers to small-scale ships; they're also exceptionally comfortable.
		/// </summary>
		public static readonly MyStringId Description_OpenCockpitSmall = MyStringId.GetOrCompute("Description_OpenCockpitSmall");

		/// <summary>
		/// Whether you’re conducting experiments or you simply want to look smart, lab equipment is perfect for decorating interiors.
		/// </summary>
		public static readonly MyStringId Description_LabEquipment = MyStringId.GetOrCompute("Description_LabEquipment");

		/// <summary>
		/// A shower for decorating interiors and an ideal place to practice singing. Show everyone you care about hygiene.
		/// </summary>
		public static readonly MyStringId Description_Shower = MyStringId.GetOrCompute("Description_Shower");

		/// <summary>
		/// Transparent windows will keep the air inside and space outside while you enjoy the view in style.
		/// </summary>
		public static readonly MyStringId Description_WindowWall = MyStringId.GetOrCompute("Description_WindowWall");

		/// <summary>
		/// Transparent windows will keep the air inside and space outside while you enjoy the view in style.
		/// </summary>
		public static readonly MyStringId Description_WindowWallLeft = MyStringId.GetOrCompute("Description_WindowWallLeft");

		/// <summary>
		/// Transparent windows will keep the air inside and space outside while you enjoy the view in style.
		/// </summary>
		public static readonly MyStringId Description_WindowWallRight = MyStringId.GetOrCompute("Description_WindowWallRight");

		/// <summary>
		/// A decorative station that allows engineers to examine their injuries.
		/// </summary>
		public static readonly MyStringId Description_MedicalStation = MyStringId.GetOrCompute("Description_MedicalStation");

		/// <summary>
		/// Transparent LCD panels display pictograms, scripts or customized text.
		/// </summary>
		public static readonly MyStringId Description_TransparentLCD = MyStringId.GetOrCompute("Description_TransparentLCD");

		/// <summary>
		/// Railings stop engineers from falling off dangerous ledges. Safety first!
		/// </summary>
		public static readonly MyStringId Description_RailingStraight = MyStringId.GetOrCompute("Description_RailingStraight");

		/// <summary>
		/// Railings stop engineers from falling off dangerous ledges. Safety first!
		/// </summary>
		public static readonly MyStringId Description_RailingDouble = MyStringId.GetOrCompute("Description_RailingDouble");

		/// <summary>
		/// Railings stop engineers from falling off dangerous ledges. Safety first!
		/// </summary>
		public static readonly MyStringId Description_RailingCorner = MyStringId.GetOrCompute("Description_RailingCorner");

		/// <summary>
		/// Railings stop engineers from falling off dangerous ledges. Safety first!
		/// </summary>
		public static readonly MyStringId Description_RailingDiagonal = MyStringId.GetOrCompute("Description_RailingDiagonal");

		/// <summary>
		/// Catwalks can be used to create safe walkways throughout your creations.
		/// </summary>
		public static readonly MyStringId Description_GratedCatwalk = MyStringId.GetOrCompute("Description_GratedCatwalk");

		/// <summary>
		/// Catwalks can be used to create safe walkways throughout your creations.
		/// </summary>
		public static readonly MyStringId Description_GratedCatwalkCorner = MyStringId.GetOrCompute("Description_GratedCatwalkCorner");

		/// <summary>
		/// Catwalks can be used to create safe walkways throughout your creations.
		/// </summary>
		public static readonly MyStringId Description_GratedCatwalkStraight = MyStringId.GetOrCompute("Description_GratedCatwalkStraight");

		/// <summary>
		/// Catwalks can be used to create safe walkways throughout your creations.
		/// </summary>
		public static readonly MyStringId Description_GratedCatwalkWall = MyStringId.GetOrCompute("Description_GratedCatwalkWall");

		/// <summary>
		/// Stairs can be used to create safe walkways throughout your creations.
		/// </summary>
		public static readonly MyStringId Description_GratedStairs = MyStringId.GetOrCompute("Description_GratedStairs");

		/// <summary>
		/// Stairs can be used to create safe walkways throughout your creations.
		/// </summary>
		public static readonly MyStringId Description_GratedHalfStairs = MyStringId.GetOrCompute("Description_GratedHalfStairs");

		/// <summary>
		/// A rotating light to alert engineers of hazardous situations.
		/// </summary>
		public static readonly MyStringId Description_RotatingLight = MyStringId.GetOrCompute("Description_RotatingLight");

		/// <summary>
		/// Crates left scattered around, indicating hard working engineers have been working in the area.
		/// </summary>
		public static readonly MyStringId Description_Freight = MyStringId.GetOrCompute("Description_Freight");

		/// <summary>
		/// A kitchen for decorating interiors.
		/// </summary>
		public static readonly MyStringId Description_Kitchen = MyStringId.GetOrCompute("Description_Kitchen");

		/// <summary>
		/// A planter for decorating interiors. 
		/// </summary>
		public static readonly MyStringId Description_Planters = MyStringId.GetOrCompute("Description_Planters");

		/// <summary>
		/// Personalized lockers for decorating interiors and store your essentials. 
		/// </summary>
		public static readonly MyStringId Description_Lockers = MyStringId.GetOrCompute("Description_Lockers");

		/// <summary>
		/// A locker to store tools, weapons, ammunition and bottles. 
		/// </summary>
		public static readonly MyStringId Description_LockerRoom = MyStringId.GetOrCompute("Description_LockerRoom");

		/// <summary>
		/// A locker to store tools, weapons, ammunition and bottles. 
		/// </summary>
		public static readonly MyStringId Description_LockerRoomCorner = MyStringId.GetOrCompute("Description_LockerRoomCorner");

		/// <summary>
		/// A couch for decorating interiors. Can be used as a seat.
		/// </summary>
		public static readonly MyStringId Description_Couch = MyStringId.GetOrCompute("Description_Couch");

		/// <summary>
		/// A couch for decorating interior corners. Can be used as a seat.
		/// </summary>
		public static readonly MyStringId Description_CornerCouch = MyStringId.GetOrCompute("Description_CornerCouch");

		/// <summary>
		/// A toilet for decorating interiors. Can be used as a seat.
		/// </summary>
		public static readonly MyStringId Description_Bathroom = MyStringId.GetOrCompute("Description_Bathroom");

		/// <summary>
		/// A toilet for decorating interiors. Can be used as a seat.
		/// </summary>
		public static readonly MyStringId Description_BathroomOpen = MyStringId.GetOrCompute("Description_BathroomOpen");

		/// <summary>
		/// A toilet for decorating interiors. Can be used as a seat.
		/// </summary>
		public static readonly MyStringId Description_ToiletSeat = MyStringId.GetOrCompute("Description_ToiletSeat");

		/// <summary>
		/// A console table for decorating interiors, projecting ships and stations in custom scale, as well as displaying pictograms or customized text on its displays.
		/// </summary>
		public static readonly MyStringId Description_Console = MyStringId.GetOrCompute("Description_Console");

		/// <summary>
		/// Cockpits are used to control your ship.  Connect a cockpit with oxygen tanks and O2/H2 generators to supply the cockpit with oxygen. 
		/// </summary>
		public static readonly MyStringId Description_CockpitIndustrial = MyStringId.GetOrCompute("Description_CockpitIndustrial");

		/// <summary>
		/// A bed for decorating interiors. Can preserve the players' inventory and toolbar while they're offline and keeps them alive as long as there is oxygen available in environment.
		/// </summary>
		public static readonly MyStringId Description_Bed = MyStringId.GetOrCompute("Description_Bed");

		/// <summary>
		/// Close
		/// </summary>
		public static readonly MyStringId DetailScreen_Button_Close = MyStringId.GetOrCompute("DetailScreen_Button_Close");

		/// <summary>
		/// Delete
		/// </summary>
		public static readonly MyStringId DetailScreen_Button_Delete = MyStringId.GetOrCompute("DetailScreen_Button_Delete");

		/// <summary>
		/// Open In Workshop
		/// </summary>
		public static readonly MyStringId DetailScreen_Button_OpenInWorkshop = MyStringId.GetOrCompute("DetailScreen_Button_OpenInWorkshop");

		/// <summary>
		/// Open Workshop
		/// </summary>
		public static readonly MyStringId DetailScreen_Button_OpenWorkshop = MyStringId.GetOrCompute("DetailScreen_Button_OpenWorkshop");

		/// <summary>
		/// Publish
		/// </summary>
		public static readonly MyStringId DetailScreen_Button_Publish = MyStringId.GetOrCompute("DetailScreen_Button_Publish");

		/// <summary>
		/// Rename
		/// </summary>
		public static readonly MyStringId DetailScreen_Button_Rename = MyStringId.GetOrCompute("DetailScreen_Button_Rename");

		/// <summary>
		/// Send to Player:
		/// </summary>
		public static readonly MyStringId DetailScreen_Button_SendToPlayer = MyStringId.GetOrCompute("DetailScreen_Button_SendToPlayer");

		/// <summary>
		/// Asteroid
		/// </summary>
		public static readonly MyStringId DetectedEntity_Asteroid = MyStringId.GetOrCompute("DetectedEntity_Asteroid");

		/// <summary>
		/// Human
		/// </summary>
		public static readonly MyStringId DetectedEntity_CharacterHuman = MyStringId.GetOrCompute("DetectedEntity_CharacterHuman");

		/// <summary>
		/// Animal
		/// </summary>
		public static readonly MyStringId DetectedEntity_CharacterOther = MyStringId.GetOrCompute("DetectedEntity_CharacterOther");

		/// <summary>
		/// Large Grid
		/// </summary>
		public static readonly MyStringId DetectedEntity_LargeGrid = MyStringId.GetOrCompute("DetectedEntity_LargeGrid");

		/// <summary>
		/// Meteor
		/// </summary>
		public static readonly MyStringId DetectedEntity_Meteor = MyStringId.GetOrCompute("DetectedEntity_Meteor");

		/// <summary>
		/// Planet
		/// </summary>
		public static readonly MyStringId DetectedEntity_Planet = MyStringId.GetOrCompute("DetectedEntity_Planet");

		/// <summary>
		/// Small Grid
		/// </summary>
		public static readonly MyStringId DetectedEntity_SmallGrid = MyStringId.GetOrCompute("DetectedEntity_SmallGrid");

		/// <summary>
		/// Unknown
		/// </summary>
		public static readonly MyStringId DetectedEntity_Unknown = MyStringId.GetOrCompute("DetectedEntity_Unknown");

		/// <summary>
		/// Joining battle failed, reason: {0}
		/// </summary>
		public static readonly MyStringId DialogTextJoinBattleFailed = MyStringId.GetOrCompute("DialogTextJoinBattleFailed");

		/// <summary>
		/// Joining battle
		/// </summary>
		public static readonly MyStringId DialogTextJoiningBattle = MyStringId.GetOrCompute("DialogTextJoiningBattle");

		/// <summary>
		/// Joining scenario
		/// </summary>
		public static readonly MyStringId DialogTextJoiningScenario = MyStringId.GetOrCompute("DialogTextJoiningScenario");

		/// <summary>
		/// Argument
		/// </summary>
		public static readonly MyStringId DialogText_RunArgument = MyStringId.GetOrCompute("DialogText_RunArgument");

		/// <summary>
		/// Difficulty
		/// </summary>
		public static readonly MyStringId Difficulty = MyStringId.GetOrCompute("Difficulty");

		/// <summary>
		/// Easy
		/// </summary>
		public static readonly MyStringId DifficultyEasy = MyStringId.GetOrCompute("DifficultyEasy");

		/// <summary>
		/// Hard
		/// </summary>
		public static readonly MyStringId DifficultyHard = MyStringId.GetOrCompute("DifficultyHard");

		/// <summary>
		/// Normal
		/// </summary>
		public static readonly MyStringId DifficultyNormal = MyStringId.GetOrCompute("DifficultyNormal");

		/// <summary>
		/// Disable Transformation
		/// </summary>
		public static readonly MyStringId DisableTransformation = MyStringId.GetOrCompute("DisableTransformation");

		/// <summary>
		/// DisplayName
		/// </summary>
		public static readonly MyStringId DisplayName = MyStringId.GetOrCompute("DisplayName");

		/// <summary>
		/// Alien Planet Landing
		/// </summary>
		public static readonly MyStringId DisplayName_AlienLander = MyStringId.GetOrCompute("DisplayName_AlienLander");

		/// <summary>
		/// Bite attack
		/// </summary>
		public static readonly MyStringId DisplayName_Animation_SpiderAttackBite = MyStringId.GetOrCompute("DisplayName_Animation_SpiderAttackBite");

		/// <summary>
		/// Leg attack
		/// </summary>
		public static readonly MyStringId DisplayName_Animation_SpiderAttackLegs = MyStringId.GetOrCompute("DisplayName_Animation_SpiderAttackLegs");

		/// <summary>
		/// Stinger attack
		/// </summary>
		public static readonly MyStringId DisplayName_Animation_SpiderAttackStinger = MyStringId.GetOrCompute("DisplayName_Animation_SpiderAttackStinger");

		/// <summary>
		/// Burrow
		/// </summary>
		public static readonly MyStringId DisplayName_Animation_SpiderBurrow = MyStringId.GetOrCompute("DisplayName_Animation_SpiderBurrow");

		/// <summary>
		/// Deburrow
		/// </summary>
		public static readonly MyStringId DisplayName_Animation_SpiderDeburrow = MyStringId.GetOrCompute("DisplayName_Animation_SpiderDeburrow");

		/// <summary>
		/// Thumb-Up
		/// </summary>
		public static readonly MyStringId DisplayName_Animation_ThumbUp = MyStringId.GetOrCompute("DisplayName_Animation_ThumbUp");

		/// <summary>
		/// Victory
		/// </summary>
		public static readonly MyStringId DisplayName_Animation_Victory = MyStringId.GetOrCompute("DisplayName_Animation_Victory");

		/// <summary>
		/// Wave Animation
		/// </summary>
		public static readonly MyStringId DisplayName_Animation_Wave = MyStringId.GetOrCompute("DisplayName_Animation_Wave");

		/// <summary>
		/// Backpack
		/// </summary>
		public static readonly MyStringId DisplayName_AstronautBackpack = MyStringId.GetOrCompute("DisplayName_AstronautBackpack");

		/// <summary>
		/// Advanced Rotor
		/// </summary>
		public static readonly MyStringId DisplayName_Block_AdvancedRotor = MyStringId.GetOrCompute("DisplayName_Block_AdvancedRotor");

		/// <summary>
		/// Advanced Rotor Part
		/// </summary>
		public static readonly MyStringId DisplayName_Block_AdvancedRotorPart = MyStringId.GetOrCompute("DisplayName_Block_AdvancedRotorPart");

		/// <summary>
		/// Airtight Hangar Door
		/// </summary>
		public static readonly MyStringId DisplayName_Block_AirtightHangarDoor = MyStringId.GetOrCompute("DisplayName_Block_AirtightHangarDoor");

		/// <summary>
		/// Sliding Door
		/// </summary>
		public static readonly MyStringId DisplayName_Block_AirtightSlideDoor = MyStringId.GetOrCompute("DisplayName_Block_AirtightSlideDoor");

		/// <summary>
		/// Air Vent
		/// </summary>
		public static readonly MyStringId DisplayName_Block_AirVent = MyStringId.GetOrCompute("DisplayName_Block_AirVent");

		/// <summary>
		/// Ammo Assembler
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Ammo_Assembler = MyStringId.GetOrCompute("DisplayName_Block_Ammo_Assembler");

		/// <summary>
		/// Antenna
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Antenna = MyStringId.GetOrCompute("DisplayName_Block_Antenna");

		/// <summary>
		/// Basic Refinery
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Arc_Furnace = MyStringId.GetOrCompute("DisplayName_Block_Arc_Furnace");

		/// <summary>
		/// Blast Doors
		/// </summary>
		public static readonly MyStringId DisplayName_Block_ArmorCenter = MyStringId.GetOrCompute("DisplayName_Block_ArmorCenter");

		/// <summary>
		/// Blast Door Corner
		/// </summary>
		public static readonly MyStringId DisplayName_Block_ArmorCorner = MyStringId.GetOrCompute("DisplayName_Block_ArmorCorner");

		/// <summary>
		/// Blast Door Corner Inverted
		/// </summary>
		public static readonly MyStringId DisplayName_Block_ArmorInvCorner = MyStringId.GetOrCompute("DisplayName_Block_ArmorInvCorner");

		/// <summary>
		/// Blast Door Edge
		/// </summary>
		public static readonly MyStringId DisplayName_Block_ArmorSide = MyStringId.GetOrCompute("DisplayName_Block_ArmorSide");

		/// <summary>
		/// Basic Assembler
		/// </summary>
		public static readonly MyStringId DisplayName_Block_BasicAssembler = MyStringId.GetOrCompute("DisplayName_Block_BasicAssembler");

		/// <summary>
		/// Assembler
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Assembler = MyStringId.GetOrCompute("DisplayName_Block_Assembler");

		/// <summary>
		/// Base Assembler Comp.
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Base_Components_Assembler = MyStringId.GetOrCompute("DisplayName_Block_Base_Components_Assembler");

		/// <summary>
		/// Battery
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Battery = MyStringId.GetOrCompute("DisplayName_Block_Battery");

		/// <summary>
		/// Beacon
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Beacon = MyStringId.GetOrCompute("DisplayName_Block_Beacon");

		/// <summary>
		/// Big Arc Furnace
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Big_Arc_Furnace = MyStringId.GetOrCompute("DisplayName_Block_Big_Arc_Furnace");

		/// <summary>
		/// Big Gas Centrifugal Refinery
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Big_Gas_Centrifugal_Refinery = MyStringId.GetOrCompute("DisplayName_Block_Big_Gas_Centrifugal_Refinery");

		/// <summary>
		/// Big Noble Metals Furnace
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Big_Precious_Furnace = MyStringId.GetOrCompute("DisplayName_Block_Big_Precious_Furnace");

		/// <summary>
		/// Big Solids Refinery
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Big_Solids_Refinery = MyStringId.GetOrCompute("DisplayName_Block_Big_Solids_Refinery");

		/// <summary>
		/// Button Panel
		/// </summary>
		public static readonly MyStringId DisplayName_Block_ButtonPanel = MyStringId.GetOrCompute("DisplayName_Block_ButtonPanel");

		/// <summary>
		/// Camera
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Camera = MyStringId.GetOrCompute("DisplayName_Block_Camera");

		/// <summary>
		/// Cockpit
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Cockpit1 = MyStringId.GetOrCompute("DisplayName_Block_Cockpit1");

		/// <summary>
		/// Control Station
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Cockpit2 = MyStringId.GetOrCompute("DisplayName_Block_Cockpit2");

		/// <summary>
		/// Flight Seat
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Cockpit3 = MyStringId.GetOrCompute("DisplayName_Block_Cockpit3");

		/// <summary>
		/// Collector
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Collector = MyStringId.GetOrCompute("DisplayName_Block_Collector");

		/// <summary>
		/// Connector
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Connector = MyStringId.GetOrCompute("DisplayName_Block_Connector");

		/// <summary>
		/// Ejector
		/// </summary>
		public static readonly MyStringId DisplayName_Block_ConnectorSmall = MyStringId.GetOrCompute("DisplayName_Block_ConnectorSmall");

		/// <summary>
		/// Construction Assembler Comp.
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Construction_Components_Assembler = MyStringId.GetOrCompute("DisplayName_Block_Construction_Components_Assembler");

		/// <summary>
		/// Control Panel
		/// </summary>
		public static readonly MyStringId DisplayName_Block_ControlPanel = MyStringId.GetOrCompute("DisplayName_Block_ControlPanel");

		/// <summary>
		/// Conveyor Junction
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Conveyor = MyStringId.GetOrCompute("DisplayName_Block_Conveyor");

		/// <summary>
		/// Conveyor Frame
		/// </summary>
		public static readonly MyStringId DisplayName_Block_ConveyorFrame = MyStringId.GetOrCompute("DisplayName_Block_ConveyorFrame");

		/// <summary>
		/// Small Conveyor
		/// </summary>
		public static readonly MyStringId DisplayName_Block_ConveyorSmall = MyStringId.GetOrCompute("DisplayName_Block_ConveyorSmall");

		/// <summary>
		/// Conveyor Sorter
		/// </summary>
		public static readonly MyStringId DisplayName_Block_ConveyorSorter = MyStringId.GetOrCompute("DisplayName_Block_ConveyorSorter");

		/// <summary>
		/// Conveyor Tube
		/// </summary>
		public static readonly MyStringId DisplayName_Block_ConveyorTube = MyStringId.GetOrCompute("DisplayName_Block_ConveyorTube");

		/// <summary>
		/// Curved Conveyor Tube
		/// </summary>
		public static readonly MyStringId DisplayName_Block_ConveyorTubeCurved = MyStringId.GetOrCompute("DisplayName_Block_ConveyorTubeCurved");

		/// <summary>
		/// Small Curved Conveyor Tube
		/// </summary>
		public static readonly MyStringId DisplayName_Block_ConveyorTubeCurvedSmall = MyStringId.GetOrCompute("DisplayName_Block_ConveyorTubeCurvedSmall");

		/// <summary>
		/// Medium Conveyor Tube
		/// </summary>
		public static readonly MyStringId DisplayName_Block_ConveyorTubeMedium = MyStringId.GetOrCompute("DisplayName_Block_ConveyorTubeMedium");

		/// <summary>
		/// Small Conveyor Tube
		/// </summary>
		public static readonly MyStringId DisplayName_Block_ConveyorTubeSmall = MyStringId.GetOrCompute("DisplayName_Block_ConveyorTubeSmall");

		/// <summary>
		/// Corner LCD Top
		/// </summary>
		public static readonly MyStringId DisplayName_Block_CornerLCD = MyStringId.GetOrCompute("DisplayName_Block_CornerLCD");

		/// <summary>
		/// Corner LCD Bottom
		/// </summary>
		public static readonly MyStringId DisplayName_Block_CornerLCD2 = MyStringId.GetOrCompute("DisplayName_Block_CornerLCD2");

		/// <summary>
		/// Corner LCD Flat Bottom
		/// </summary>
		public static readonly MyStringId DisplayName_Block_CornerLCDFlatBottom = MyStringId.GetOrCompute("DisplayName_Block_CornerLCDFlatBottom");

		/// <summary>
		/// Corner LCD Flat Top
		/// </summary>
		public static readonly MyStringId DisplayName_Block_CornerLCDFlatTop = MyStringId.GetOrCompute("DisplayName_Block_CornerLCDFlatTop");

		/// <summary>
		/// Corner Light
		/// </summary>
		public static readonly MyStringId DisplayName_Block_CornerLight = MyStringId.GetOrCompute("DisplayName_Block_CornerLight");

		/// <summary>
		/// Corner Light - Double
		/// </summary>
		public static readonly MyStringId DisplayName_Block_CornerLightDouble = MyStringId.GetOrCompute("DisplayName_Block_CornerLightDouble");

		/// <summary>
		/// Cryo Chamber
		/// </summary>
		public static readonly MyStringId DisplayName_Block_CryoChamber = MyStringId.GetOrCompute("DisplayName_Block_CryoChamber");

		/// <summary>
		/// Debug spheres 1
		/// </summary>
		public static readonly MyStringId DisplayName_Block_DebugSphere1 = MyStringId.GetOrCompute("DisplayName_Block_DebugSphere1");

		/// <summary>
		/// Debug spheres 2 (no metal)
		/// </summary>
		public static readonly MyStringId DisplayName_Block_DebugSphere2 = MyStringId.GetOrCompute("DisplayName_Block_DebugSphere2");

		/// <summary>
		/// Debug spheres 3 (fixed gloss)
		/// </summary>
		public static readonly MyStringId DisplayName_Block_DebugSphere3 = MyStringId.GetOrCompute("DisplayName_Block_DebugSphere3");

		/// <summary>
		/// Decoy
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Decoy = MyStringId.GetOrCompute("DisplayName_Block_Decoy");

		/// <summary>
		/// Diagonal Window
		/// </summary>
		public static readonly MyStringId DisplayName_Block_DiagonalWindow = MyStringId.GetOrCompute("DisplayName_Block_DiagonalWindow");

		/// <summary>
		/// Door
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Door = MyStringId.GetOrCompute("DisplayName_Block_Door");

		/// <summary>
		/// Drill
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Drill = MyStringId.GetOrCompute("DisplayName_Block_Drill");

		/// <summary>
		/// Yield Module
		/// </summary>
		public static readonly MyStringId DisplayName_Block_EffectivenessModule = MyStringId.GetOrCompute("DisplayName_Block_EffectivenessModule");

		/// <summary>
		/// Electronics Assembler
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Electronics_Assembler = MyStringId.GetOrCompute("DisplayName_Block_Electronics_Assembler");

		/// <summary>
		/// Fighter Cockpit
		/// </summary>
		public static readonly MyStringId DisplayName_Block_FighterCockpit = MyStringId.GetOrCompute("DisplayName_Block_FighterCockpit");

		/// <summary>
		/// Dispenser
		/// </summary>
		public static readonly MyStringId DisplayName_Block_FoodDispenser = MyStringId.GetOrCompute("DisplayName_Block_FoodDispenser");

		/// <summary>
		/// Lab Equipment
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LabEquipment = MyStringId.GetOrCompute("DisplayName_Block_LabEquipment");

		/// <summary>
		/// Shower
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Shower = MyStringId.GetOrCompute("DisplayName_Block_Shower");

		/// <summary>
		/// Jukebox
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Jukebox = MyStringId.GetOrCompute("DisplayName_Block_Jukebox");

		/// <summary>
		/// Window Wall
		/// </summary>
		public static readonly MyStringId DisplayName_Block_WindowWall = MyStringId.GetOrCompute("DisplayName_Block_WindowWall");

		/// <summary>
		/// Window Wall Left
		/// </summary>
		public static readonly MyStringId DisplayName_Block_WindowWallLeft = MyStringId.GetOrCompute("DisplayName_Block_WindowWallLeft");

		/// <summary>
		/// Window Wall Right
		/// </summary>
		public static readonly MyStringId DisplayName_Block_WindowWallRight = MyStringId.GetOrCompute("DisplayName_Block_WindowWallRight");

		/// <summary>
		/// Medical Station
		/// </summary>
		public static readonly MyStringId DisplayName_Block_MedicalStation = MyStringId.GetOrCompute("DisplayName_Block_MedicalStation");

		/// <summary>
		/// Transparent LCD
		/// </summary>
		public static readonly MyStringId DisplayName_Block_TransparentLCD = MyStringId.GetOrCompute("DisplayName_Block_TransparentLCD");

		/// <summary>
		/// Railing Straight
		/// </summary>
		public static readonly MyStringId DisplayName_Block_RailingStraight = MyStringId.GetOrCompute("DisplayName_Block_RailingStraight");

		/// <summary>
		/// Railing Double
		/// </summary>
		public static readonly MyStringId DisplayName_Block_RailingDouble = MyStringId.GetOrCompute("DisplayName_Block_RailingDouble");

		/// <summary>
		/// Railing Corner
		/// </summary>
		public static readonly MyStringId DisplayName_Block_RailingCorner = MyStringId.GetOrCompute("DisplayName_Block_RailingCorner");

		/// <summary>
		/// Railing Diagonal
		/// </summary>
		public static readonly MyStringId DisplayName_Block_RailingDiagonal = MyStringId.GetOrCompute("DisplayName_Block_RailingDiagonal");

		/// <summary>
		/// Grated Catwalk
		/// </summary>
		public static readonly MyStringId DisplayName_Block_GratedCatwalk = MyStringId.GetOrCompute("DisplayName_Block_GratedCatwalk");

		/// <summary>
		/// Grated Catwalk Corner
		/// </summary>
		public static readonly MyStringId DisplayName_Block_GratedCatwalkCorner = MyStringId.GetOrCompute("DisplayName_Block_GratedCatwalkCorner");

		/// <summary>
		/// Grated Catwalk Straight
		/// </summary>
		public static readonly MyStringId DisplayName_Block_GratedCatwalkStraight = MyStringId.GetOrCompute("DisplayName_Block_GratedCatwalkStraight");

		/// <summary>
		/// Grated Catwalk Wall
		/// </summary>
		public static readonly MyStringId DisplayName_Block_GratedCatwalkWall = MyStringId.GetOrCompute("DisplayName_Block_GratedCatwalkWall");

		/// <summary>
		/// Grated Stairs
		/// </summary>
		public static readonly MyStringId DisplayName_Block_GratedStairs = MyStringId.GetOrCompute("DisplayName_Block_GratedStairs");

		/// <summary>
		/// Grated Half Stairs
		/// </summary>
		public static readonly MyStringId DisplayName_Block_GratedHalfStairs = MyStringId.GetOrCompute("DisplayName_Block_GratedHalfStairs");

		/// <summary>
		/// Rotating Light
		/// </summary>
		public static readonly MyStringId DisplayName_Block_RotatingLight = MyStringId.GetOrCompute("DisplayName_Block_RotatingLight");

		/// <summary>
		/// Freight 1
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Freight1 = MyStringId.GetOrCompute("DisplayName_Block_Freight1");

		/// <summary>
		/// Freight 2
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Freight2 = MyStringId.GetOrCompute("DisplayName_Block_Freight2");

		/// <summary>
		/// Freight 3
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Freight3 = MyStringId.GetOrCompute("DisplayName_Block_Freight3");

		/// <summary>
		/// Cover Walls
		/// </summary>
		public static readonly MyStringId DisplayName_Block_FullCoverWall = MyStringId.GetOrCompute("DisplayName_Block_FullCoverWall");

		/// <summary>
		/// Gatling Gun
		/// </summary>
		public static readonly MyStringId DisplayName_Block_GatlingGun = MyStringId.GetOrCompute("DisplayName_Block_GatlingGun");

		/// <summary>
		/// Gatling Turret
		/// </summary>
		public static readonly MyStringId DisplayName_Block_GatlingTurret = MyStringId.GetOrCompute("DisplayName_Block_GatlingTurret");

		/// <summary>
		/// Gravity Generator
		/// </summary>
		public static readonly MyStringId DisplayName_Block_GravityGenerator = MyStringId.GetOrCompute("DisplayName_Block_GravityGenerator");

		/// <summary>
		/// Spherical Gravity Generator
		/// </summary>
		public static readonly MyStringId DisplayName_Block_GravityGeneratorSphere = MyStringId.GetOrCompute("DisplayName_Block_GravityGeneratorSphere");

		/// <summary>
		/// Gyroscope
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Gyroscope = MyStringId.GetOrCompute("DisplayName_Block_Gyroscope");

		/// <summary>
		/// Half Cover Wall
		/// </summary>
		public static readonly MyStringId DisplayName_Block_HalfCoverWall = MyStringId.GetOrCompute("DisplayName_Block_HalfCoverWall");

		/// <summary>
		/// Half Heavy Armor Block
		/// </summary>
		public static readonly MyStringId DisplayName_Block_HalfHeavyArmorBlock = MyStringId.GetOrCompute("DisplayName_Block_HalfHeavyArmorBlock");

		/// <summary>
		/// Half Light Armor Block
		/// </summary>
		public static readonly MyStringId DisplayName_Block_HalfLightArmorBlock = MyStringId.GetOrCompute("DisplayName_Block_HalfLightArmorBlock");

		/// <summary>
		/// Half Slope Heavy Armor Block
		/// </summary>
		public static readonly MyStringId DisplayName_Block_HalfSlopeHeavyArmorBlock = MyStringId.GetOrCompute("DisplayName_Block_HalfSlopeHeavyArmorBlock");

		/// <summary>
		/// Half Slope Light Armor Block
		/// </summary>
		public static readonly MyStringId DisplayName_Block_HalfSlopeLightArmorBlock = MyStringId.GetOrCompute("DisplayName_Block_HalfSlopeLightArmorBlock");

		/// <summary>
		/// Angled Heavy Armor Corner
		/// </summary>
		public static readonly MyStringId DisplayName_Block_HeavyAngledArmorCorner = MyStringId.GetOrCompute("DisplayName_Block_HeavyAngledArmorCorner");

		/// <summary>
		/// Angled Heavy Armor Slope
		/// </summary>
		public static readonly MyStringId DisplayName_Block_HeavyAngledArmorSlope = MyStringId.GetOrCompute("DisplayName_Block_HeavyAngledArmorSlope");

		/// <summary>
		/// Heavy Armor Block
		/// </summary>
		public static readonly MyStringId DisplayName_Block_HeavyArmorBlock = MyStringId.GetOrCompute("DisplayName_Block_HeavyArmorBlock");

		/// <summary>
		/// Heavy Armor Corner
		/// </summary>
		public static readonly MyStringId DisplayName_Block_HeavyArmorCorner = MyStringId.GetOrCompute("DisplayName_Block_HeavyArmorCorner");

		/// <summary>
		/// Heavy Armor Corner 2x1x1
		/// </summary>
		public static readonly MyStringId DisplayName_Block_HeavyArmorCorner2 = MyStringId.GetOrCompute("DisplayName_Block_HeavyArmorCorner2");

		/// <summary>
		/// Heavy Armor Corner 2x1x1 Base
		/// </summary>
		public static readonly MyStringId DisplayName_Block_HeavyArmorCorner2Base = MyStringId.GetOrCompute("DisplayName_Block_HeavyArmorCorner2Base");

		/// <summary>
		/// Heavy Armor Corner 2x1x1 Base Smooth
		/// </summary>
		public static readonly MyStringId DisplayName_Block_HeavyArmorCorner2BaseSmooth = MyStringId.GetOrCompute("DisplayName_Block_HeavyArmorCorner2BaseSmooth");

		/// <summary>
		/// Heavy Armor Corner 2x1x1 Smooth
		/// </summary>
		public static readonly MyStringId DisplayName_Block_HeavyArmorCorner2Smooth = MyStringId.GetOrCompute("DisplayName_Block_HeavyArmorCorner2Smooth");

		/// <summary>
		/// Heavy Armor Corner 2x1x1 Tip
		/// </summary>
		public static readonly MyStringId DisplayName_Block_HeavyArmorCorner2Tip = MyStringId.GetOrCompute("DisplayName_Block_HeavyArmorCorner2Tip");

		/// <summary>
		/// Heavy Armor Corner 2x1x1 Tip Smooth
		/// </summary>
		public static readonly MyStringId DisplayName_Block_HeavyArmorCorner2TipSmooth = MyStringId.GetOrCompute("DisplayName_Block_HeavyArmorCorner2TipSmooth");

		/// <summary>
		/// Heavy Armor Inv. Corner
		/// </summary>
		public static readonly MyStringId DisplayName_Block_HeavyArmorInvCorner = MyStringId.GetOrCompute("DisplayName_Block_HeavyArmorInvCorner");

		/// <summary>
		/// Heavy Armor Inv. Corner 2x1x1
		/// </summary>
		public static readonly MyStringId DisplayName_Block_HeavyArmorInvCorner2 = MyStringId.GetOrCompute("DisplayName_Block_HeavyArmorInvCorner2");

		/// <summary>
		/// Heavy Armor Inv. Corner 2x1x1 Base
		/// </summary>
		public static readonly MyStringId DisplayName_Block_HeavyArmorInvCorner2Base = MyStringId.GetOrCompute("DisplayName_Block_HeavyArmorInvCorner2Base");

		/// <summary>
		/// Heavy Armor Inv. Corner 2x1x1 Base Smooth
		/// </summary>
		public static readonly MyStringId DisplayName_Block_HeavyArmorInvCorner2BaseSmooth = MyStringId.GetOrCompute("DisplayName_Block_HeavyArmorInvCorner2BaseSmooth");

		/// <summary>
		/// Heavy Armor Inv. Corner 2x1x1 Smooth
		/// </summary>
		public static readonly MyStringId DisplayName_Block_HeavyArmorInvCorner2Smooth = MyStringId.GetOrCompute("DisplayName_Block_HeavyArmorInvCorner2Smooth");

		/// <summary>
		/// Heavy Armor Inv. Corner 2x1x1 Tip
		/// </summary>
		public static readonly MyStringId DisplayName_Block_HeavyArmorInvCorner2Tip = MyStringId.GetOrCompute("DisplayName_Block_HeavyArmorInvCorner2Tip");

		/// <summary>
		/// Heavy Armor Inv. Corner 2x1x1 Tip Smooth
		/// </summary>
		public static readonly MyStringId DisplayName_Block_HeavyArmorInvCorner2TipSmooth = MyStringId.GetOrCompute("DisplayName_Block_HeavyArmorInvCorner2TipSmooth");

		/// <summary>
		/// Heavy Armor Slope
		/// </summary>
		public static readonly MyStringId DisplayName_Block_HeavyArmorSlope = MyStringId.GetOrCompute("DisplayName_Block_HeavyArmorSlope");

		/// <summary>
		/// Heavy Armor Slope 2x1x1
		/// </summary>
		public static readonly MyStringId DisplayName_Block_HeavyArmorSlope2 = MyStringId.GetOrCompute("DisplayName_Block_HeavyArmorSlope2");

		/// <summary>
		/// Heavy Armor Slope 2x1x1 Base
		/// </summary>
		public static readonly MyStringId DisplayName_Block_HeavyArmorSlope2Base = MyStringId.GetOrCompute("DisplayName_Block_HeavyArmorSlope2Base");

		/// <summary>
		/// Heavy Armor Slope 2x1x1 Base Smooth
		/// </summary>
		public static readonly MyStringId DisplayName_Block_HeavyArmorSlope2BaseSmooth = MyStringId.GetOrCompute("DisplayName_Block_HeavyArmorSlope2BaseSmooth");

		/// <summary>
		/// Heavy Armor Slope 2x1x1 Smooth
		/// </summary>
		public static readonly MyStringId DisplayName_Block_HeavyArmorSlope2Smooth = MyStringId.GetOrCompute("DisplayName_Block_HeavyArmorSlope2Smooth");

		/// <summary>
		/// Heavy Armor Slope 2x1x1 Tip
		/// </summary>
		public static readonly MyStringId DisplayName_Block_HeavyArmorSlope2Tip = MyStringId.GetOrCompute("DisplayName_Block_HeavyArmorSlope2Tip");

		/// <summary>
		/// Heavy Armor Slope 2x1x1 Tip Smooth
		/// </summary>
		public static readonly MyStringId DisplayName_Block_HeavyArmorSlope2TipSmooth = MyStringId.GetOrCompute("DisplayName_Block_HeavyArmorSlope2TipSmooth");

		/// <summary>
		/// Heavy Armor Round Corner
		/// </summary>
		public static readonly MyStringId DisplayName_Block_HeavyRoundArmorCorner = MyStringId.GetOrCompute("DisplayName_Block_HeavyRoundArmorCorner");

		/// <summary>
		/// Heavy Armor Round Inv. Corner
		/// </summary>
		public static readonly MyStringId DisplayName_Block_HeavyRoundArmorInvCorner = MyStringId.GetOrCompute("DisplayName_Block_HeavyRoundArmorInvCorner");

		/// <summary>
		/// Heavy Armor Round Slope
		/// </summary>
		public static readonly MyStringId DisplayName_Block_HeavyRoundArmorSlope = MyStringId.GetOrCompute("DisplayName_Block_HeavyRoundArmorSlope");

		/// <summary>
		/// Rounded Heavy Armor Corner
		/// </summary>
		public static readonly MyStringId DisplayName_Block_HeavyRoundedArmorCorner = MyStringId.GetOrCompute("DisplayName_Block_HeavyRoundedArmorCorner");

		/// <summary>
		/// Rounded Heavy Armor Slope
		/// </summary>
		public static readonly MyStringId DisplayName_Block_HeavyRoundedArmorSlope = MyStringId.GetOrCompute("DisplayName_Block_HeavyRoundedArmorSlope");

<<<<<<< HEAD
		/// <summary>
		/// Half Slope Inv. Light Armor
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LightArmorHalfSlopeInverted = MyStringId.GetOrCompute("DisplayName_Block_LightArmorHalfSlopeInverted");

		/// <summary>
		/// Half Slope Inv. Heavy Armor
		/// </summary>
		public static readonly MyStringId DisplayName_Block_HeavyArmorHalfSlopeInverted = MyStringId.GetOrCompute("DisplayName_Block_HeavyArmorHalfSlopeInverted");

		/// <summary>
		/// Half Slope Corner Light Armor
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LightArmorHalfSlopeCorner = MyStringId.GetOrCompute("DisplayName_Block_LightArmorHalfSlopeCorner");

		/// <summary>
		/// Half Slope Corner Heavy Armor
		/// </summary>
		public static readonly MyStringId DisplayName_Block_HeavyArmorHalfSlopeCorner = MyStringId.GetOrCompute("DisplayName_Block_HeavyArmorHalfSlopeCorner");

		/// <summary>
		/// Half Slope Corner Inv. Light Armor
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LightArmorHalfSlopeCornerInverted = MyStringId.GetOrCompute("DisplayName_Block_LightArmorHalfSlopeCornerInverted");

		/// <summary>
		/// Half Slope Corner Inv. Heavy Armor
		/// </summary>
		public static readonly MyStringId DisplayName_Block_HeavyArmorHalfSlopeCornerInverted = MyStringId.GetOrCompute("DisplayName_Block_HeavyArmorHalfSlopeCornerInverted");

		/// <summary>
		/// Sloped Corner Light Armor Tip
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LightArmorSlopedCornerTip = MyStringId.GetOrCompute("DisplayName_Block_LightArmorSlopedCornerTip");

		/// <summary>
		/// Sloped Corner Heavy Armor Tip
		/// </summary>
		public static readonly MyStringId DisplayName_Block_HeavyArmorSlopedCornerTip = MyStringId.GetOrCompute("DisplayName_Block_HeavyArmorSlopedCornerTip");

		/// <summary>
		/// Light Armor Sloped Corner Base
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LightArmorSlopedCornerBase = MyStringId.GetOrCompute("DisplayName_Block_LightArmorSlopedCornerBase");

		/// <summary>
		/// Heavy Armor Sloped Corner Base
		/// </summary>
		public static readonly MyStringId DisplayName_Block_HeavyArmorSlopedCornerBase = MyStringId.GetOrCompute("DisplayName_Block_HeavyArmorSlopedCornerBase");

		/// <summary>
		/// Light Armor Sloped Corner
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LightArmorSlopedCorner = MyStringId.GetOrCompute("DisplayName_Block_LightArmorSlopedCorner");

		/// <summary>
		/// Heavy Armor Sloped Corner
		/// </summary>
		public static readonly MyStringId DisplayName_Block_HeavyArmorSlopedCorner = MyStringId.GetOrCompute("DisplayName_Block_HeavyArmorSlopedCorner");

		/// <summary>
		/// Light Armor Half Sloped Corner Base
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LightArmorHalfSlopedCornerBase = MyStringId.GetOrCompute("DisplayName_Block_LightArmorHalfSlopedCornerBase");

		/// <summary>
		/// Heavy Armor Half Sloped Corner Base
		/// </summary>
		public static readonly MyStringId DisplayName_Block_HeavyArmorHalfSlopedCornerBase = MyStringId.GetOrCompute("DisplayName_Block_HeavyArmorHalfSlopedCornerBase");

		/// <summary>
		/// Light Armor Half Corner Block
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LightArmorHalfCorner = MyStringId.GetOrCompute("DisplayName_Block_LightArmorHalfCorner");

		/// <summary>
		/// Heavy Armor Half Corner Block
		/// </summary>
		public static readonly MyStringId DisplayName_Block_HeavyArmorHalfCorner = MyStringId.GetOrCompute("DisplayName_Block_HeavyArmorHalfCorner");

		/// <summary>
		/// Light Armor Corner Square Block
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LightArmorCornerSquare = MyStringId.GetOrCompute("DisplayName_Block_LightArmorCornerSquare");

		/// <summary>
		/// Heavy Armor Corner Square Block
		/// </summary>
		public static readonly MyStringId DisplayName_Block_HeavyArmorCornerSquare = MyStringId.GetOrCompute("DisplayName_Block_HeavyArmorCornerSquare");

		/// <summary>
		/// Light Armor Corner Square Inv. Block
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LightArmorCornerSquareInverted = MyStringId.GetOrCompute("DisplayName_Block_LightArmorCornerSquareInverted");

		/// <summary>
		/// Heavy Armor Corner Square Inv. Block
		/// </summary>
		public static readonly MyStringId DisplayName_Block_HeavyArmorCornerSquareInverted = MyStringId.GetOrCompute("DisplayName_Block_HeavyArmorCornerSquareInverted");

		/// <summary>
		/// Light Armor Half Sloped Corner
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LightArmorHalfSlopedCorner = MyStringId.GetOrCompute("DisplayName_Block_LightArmorHalfSlopedCorner");

		/// <summary>
		/// Heavy Armor Half Sloped Corner
		/// </summary>
		public static readonly MyStringId DisplayName_Block_HeavyArmorHalfSlopedCorner = MyStringId.GetOrCompute("DisplayName_Block_HeavyArmorHalfSlopedCorner");

		/// <summary>
		/// Hydrogen Tank
		/// </summary>
=======
		public static readonly MyStringId DisplayName_Block_LightArmorHalfSlopeInverted = MyStringId.GetOrCompute("DisplayName_Block_LightArmorHalfSlopeInverted");

		public static readonly MyStringId DisplayName_Block_HeavyArmorHalfSlopeInverted = MyStringId.GetOrCompute("DisplayName_Block_HeavyArmorHalfSlopeInverted");

		public static readonly MyStringId DisplayName_Block_LightArmorHalfSlopeCorner = MyStringId.GetOrCompute("DisplayName_Block_LightArmorHalfSlopeCorner");

		public static readonly MyStringId DisplayName_Block_HeavyArmorHalfSlopeCorner = MyStringId.GetOrCompute("DisplayName_Block_HeavyArmorHalfSlopeCorner");

		public static readonly MyStringId DisplayName_Block_LightArmorHalfSlopeCornerInverted = MyStringId.GetOrCompute("DisplayName_Block_LightArmorHalfSlopeCornerInverted");

		public static readonly MyStringId DisplayName_Block_HeavyArmorHalfSlopeCornerInverted = MyStringId.GetOrCompute("DisplayName_Block_HeavyArmorHalfSlopeCornerInverted");

		public static readonly MyStringId DisplayName_Block_LightArmorSlopedCornerTip = MyStringId.GetOrCompute("DisplayName_Block_LightArmorSlopedCornerTip");

		public static readonly MyStringId DisplayName_Block_HeavyArmorSlopedCornerTip = MyStringId.GetOrCompute("DisplayName_Block_HeavyArmorSlopedCornerTip");

		public static readonly MyStringId DisplayName_Block_LightArmorSlopedCornerBase = MyStringId.GetOrCompute("DisplayName_Block_LightArmorSlopedCornerBase");

		public static readonly MyStringId DisplayName_Block_HeavyArmorSlopedCornerBase = MyStringId.GetOrCompute("DisplayName_Block_HeavyArmorSlopedCornerBase");

		public static readonly MyStringId DisplayName_Block_LightArmorSlopedCorner = MyStringId.GetOrCompute("DisplayName_Block_LightArmorSlopedCorner");

		public static readonly MyStringId DisplayName_Block_HeavyArmorSlopedCorner = MyStringId.GetOrCompute("DisplayName_Block_HeavyArmorSlopedCorner");

		public static readonly MyStringId DisplayName_Block_LightArmorHalfSlopedCornerBase = MyStringId.GetOrCompute("DisplayName_Block_LightArmorHalfSlopedCornerBase");

		public static readonly MyStringId DisplayName_Block_HeavyArmorHalfSlopedCornerBase = MyStringId.GetOrCompute("DisplayName_Block_HeavyArmorHalfSlopedCornerBase");

		public static readonly MyStringId DisplayName_Block_LightArmorHalfCorner = MyStringId.GetOrCompute("DisplayName_Block_LightArmorHalfCorner");

		public static readonly MyStringId DisplayName_Block_HeavyArmorHalfCorner = MyStringId.GetOrCompute("DisplayName_Block_HeavyArmorHalfCorner");

		public static readonly MyStringId DisplayName_Block_LightArmorCornerSquare = MyStringId.GetOrCompute("DisplayName_Block_LightArmorCornerSquare");

		public static readonly MyStringId DisplayName_Block_HeavyArmorCornerSquare = MyStringId.GetOrCompute("DisplayName_Block_HeavyArmorCornerSquare");

		public static readonly MyStringId DisplayName_Block_LightArmorCornerSquareInverted = MyStringId.GetOrCompute("DisplayName_Block_LightArmorCornerSquareInverted");

		public static readonly MyStringId DisplayName_Block_HeavyArmorCornerSquareInverted = MyStringId.GetOrCompute("DisplayName_Block_HeavyArmorCornerSquareInverted");

		public static readonly MyStringId DisplayName_Block_LightArmorHalfSlopedCorner = MyStringId.GetOrCompute("DisplayName_Block_LightArmorHalfSlopedCorner");

		public static readonly MyStringId DisplayName_Block_HeavyArmorHalfSlopedCorner = MyStringId.GetOrCompute("DisplayName_Block_HeavyArmorHalfSlopedCorner");

>>>>>>> d46cf8619665219cc163a7b28984ced59ed9470d
		public static readonly MyStringId DisplayName_Block_HydrogenTank = MyStringId.GetOrCompute("DisplayName_Block_HydrogenTank");

		/// <summary>
		/// Small Hydrogen Tank
		/// </summary>
		public static readonly MyStringId DisplayName_Block_HydrogenTankSmall = MyStringId.GetOrCompute("DisplayName_Block_HydrogenTankSmall");

		/// <summary>
		/// Interior Light
		/// </summary>
		public static readonly MyStringId DisplayName_Block_InteriorLight = MyStringId.GetOrCompute("DisplayName_Block_InteriorLight");

		/// <summary>
		/// Interior Pillar
		/// </summary>
		public static readonly MyStringId DisplayName_Block_InteriorPillar = MyStringId.GetOrCompute("DisplayName_Block_InteriorPillar");

		/// <summary>
		/// Interior Turret
		/// </summary>
		public static readonly MyStringId DisplayName_Block_InteriorTurret = MyStringId.GetOrCompute("DisplayName_Block_InteriorTurret");

		/// <summary>
		/// Interior Wall
		/// </summary>
		public static readonly MyStringId DisplayName_Block_InteriorWall = MyStringId.GetOrCompute("DisplayName_Block_InteriorWall");

		/// <summary>
		/// Jump Drive
		/// </summary>
		public static readonly MyStringId DisplayName_Block_JumpDrive = MyStringId.GetOrCompute("DisplayName_Block_JumpDrive");

		/// <summary>
		/// Landing Gear
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LandingGear = MyStringId.GetOrCompute("DisplayName_Block_LandingGear");

		/// <summary>
		/// Large Atmospheric Thruster
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LargeAtmoThrust = MyStringId.GetOrCompute("DisplayName_Block_LargeAtmoThrust");

<<<<<<< HEAD
		/// <summary>
		/// Sci-Fi Large Atmospheric Thruster
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LargeAtmoThrustSciFi = MyStringId.GetOrCompute("DisplayName_Block_LargeAtmoThrustSciFi");

		/// <summary>
		/// Sci-Fi Atmospheric Thruster
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SmallAtmoThrustSciFi = MyStringId.GetOrCompute("DisplayName_Block_SmallAtmoThrustSciFi");

		/// <summary>
		/// Large Cargo Container
		/// </summary>
=======
		public static readonly MyStringId DisplayName_Block_LargeAtmoThrustSciFi = MyStringId.GetOrCompute("DisplayName_Block_LargeAtmoThrustSciFi");

		public static readonly MyStringId DisplayName_Block_SmallAtmoThrustSciFi = MyStringId.GetOrCompute("DisplayName_Block_SmallAtmoThrustSciFi");

>>>>>>> d46cf8619665219cc163a7b28984ced59ed9470d
		public static readonly MyStringId DisplayName_Block_LargeCargoContainer = MyStringId.GetOrCompute("DisplayName_Block_LargeCargoContainer");

		/// <summary>
		/// Large Hydrogen Thruster
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LargeHydrogenThrust = MyStringId.GetOrCompute("DisplayName_Block_LargeHydrogenThrust");

		/// <summary>
		/// Large Reactor
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LargeReactor = MyStringId.GetOrCompute("DisplayName_Block_LargeReactor");

		/// <summary>
		/// Large Ion Thruster
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LargeThrust = MyStringId.GetOrCompute("DisplayName_Block_LargeThrust");

		/// <summary>
		/// Laser Antenna
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LaserAntenna = MyStringId.GetOrCompute("DisplayName_Block_LaserAntenna");

		/// <summary>
		/// Angled Armor Corner
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LightAngledArmorCorner = MyStringId.GetOrCompute("DisplayName_Block_LightAngledArmorCorner");

		/// <summary>
		/// Angled Armor Slope
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LightAngledArmorSlope = MyStringId.GetOrCompute("DisplayName_Block_LightAngledArmorSlope");

		/// <summary>
		/// Light Armor Block
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LightArmorBlock = MyStringId.GetOrCompute("DisplayName_Block_LightArmorBlock");

		/// <summary>
		/// Light Armor Corner
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LightArmorCorner = MyStringId.GetOrCompute("DisplayName_Block_LightArmorCorner");

		/// <summary>
		/// Light Armor Corner 2x1x1
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LightArmorCorner2 = MyStringId.GetOrCompute("DisplayName_Block_LightArmorCorner2");

		/// <summary>
		/// Light Armor Corner 2x1x1 Base
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LightArmorCorner2Base = MyStringId.GetOrCompute("DisplayName_Block_LightArmorCorner2Base");

		/// <summary>
		/// Light Armor Corner 2x1x1 Base Smooth
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LightArmorCorner2BaseSmooth = MyStringId.GetOrCompute("DisplayName_Block_LightArmorCorner2BaseSmooth");

		/// <summary>
		/// Light Armor Corner 2x1x1 Smooth
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LightArmorCorner2Smooth = MyStringId.GetOrCompute("DisplayName_Block_LightArmorCorner2Smooth");

		/// <summary>
		/// Light Armor Corner 2x1x1 Tip
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LightArmorCorner2Tip = MyStringId.GetOrCompute("DisplayName_Block_LightArmorCorner2Tip");

		/// <summary>
		/// Light Armor Corner 2x1x1 Tip Smooth
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LightArmorCorner2TipSmooth = MyStringId.GetOrCompute("DisplayName_Block_LightArmorCorner2TipSmooth");

		/// <summary>
		/// Light Armor Corner 3x1x1
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LightArmorCorner3 = MyStringId.GetOrCompute("DisplayName_Block_LightArmorCorner3");

		/// <summary>
		/// Light Armor Corner 3x1x1 Smooth
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LightArmorCorner3Smooth = MyStringId.GetOrCompute("DisplayName_Block_LightArmorCorner3Smooth");

		/// <summary>
		/// Light Armor Inv. Corner
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LightArmorInvCorner = MyStringId.GetOrCompute("DisplayName_Block_LightArmorInvCorner");

		/// <summary>
		/// Light Armor Inv. Corner 2x1x1
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LightArmorInvCorner2 = MyStringId.GetOrCompute("DisplayName_Block_LightArmorInvCorner2");

		/// <summary>
		/// Light Armor Inv. Corner 2x1x1 Base
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LightArmorInvCorner2Base = MyStringId.GetOrCompute("DisplayName_Block_LightArmorInvCorner2Base");

		/// <summary>
		/// Light Armor Inv. Corner 2x1x1 Base Smooth
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LightArmorInvCorner2BaseSmooth = MyStringId.GetOrCompute("DisplayName_Block_LightArmorInvCorner2BaseSmooth");

		/// <summary>
		/// Light Armor Inv. Corner 2x1x1 Smooth
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LightArmorInvCorner2Smooth = MyStringId.GetOrCompute("DisplayName_Block_LightArmorInvCorner2Smooth");

		/// <summary>
		/// Light Armor Inv. Corner 2x1x1 Tip
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LightArmorInvCorner2Tip = MyStringId.GetOrCompute("DisplayName_Block_LightArmorInvCorner2Tip");

		/// <summary>
		/// Light Armor Inv. Corner 2x1x1 Tip Smooth
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LightArmorInvCorner2TipSmooth = MyStringId.GetOrCompute("DisplayName_Block_LightArmorInvCorner2TipSmooth");

		/// <summary>
		/// Light Armor Inv. Corner 3x1x1
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LightArmorInvCorner3 = MyStringId.GetOrCompute("DisplayName_Block_LightArmorInvCorner3");

		/// <summary>
		/// Light Armor Inv. Corner 3x1x1 Smooth
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LightArmorInvCorner3Smooth = MyStringId.GetOrCompute("DisplayName_Block_LightArmorInvCorner3Smooth");

		/// <summary>
		/// Light Armor Slope
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LightArmorSlope = MyStringId.GetOrCompute("DisplayName_Block_LightArmorSlope");

		/// <summary>
		/// Light Armor Slope 2x1x1
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LightArmorSlope2 = MyStringId.GetOrCompute("DisplayName_Block_LightArmorSlope2");

		/// <summary>
		/// Light Armor Slope 2x1x1 Base
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LightArmorSlope2Base = MyStringId.GetOrCompute("DisplayName_Block_LightArmorSlope2Base");

		/// <summary>
		/// Light Armor Slope 2x1x1 Base Smooth
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LightArmorSlope2BaseSmooth = MyStringId.GetOrCompute("DisplayName_Block_LightArmorSlope2BaseSmooth");

		/// <summary>
		/// Light Armor Slope 2x1x1 Smooth
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LightArmorSlope2Smooth = MyStringId.GetOrCompute("DisplayName_Block_LightArmorSlope2Smooth");

		/// <summary>
		/// Light Armor Slope 2x1x1 Tip
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LightArmorSlope2Tip = MyStringId.GetOrCompute("DisplayName_Block_LightArmorSlope2Tip");

		/// <summary>
		/// Light Armor Slope 2x1x1 Tip Smooth
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LightArmorSlope2TipSmooth = MyStringId.GetOrCompute("DisplayName_Block_LightArmorSlope2TipSmooth");

		/// <summary>
		/// Light Armor Slope 3x1x1
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LightArmorSlope3 = MyStringId.GetOrCompute("DisplayName_Block_LightArmorSlope3");

		/// <summary>
		/// Light Armor Slope 3x1x1 Smooth
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LightArmorSlope3Smooth = MyStringId.GetOrCompute("DisplayName_Block_LightArmorSlope3Smooth");

		/// <summary>
		/// Round Armor Corner
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LightRoundArmorCorner = MyStringId.GetOrCompute("DisplayName_Block_LightRoundArmorCorner");

		/// <summary>
		/// Round Armor Inv. Corner
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LightRoundArmorInvCorner = MyStringId.GetOrCompute("DisplayName_Block_LightRoundArmorInvCorner");

		/// <summary>
		/// Round Armor Slope
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LightRoundArmorSlope = MyStringId.GetOrCompute("DisplayName_Block_LightRoundArmorSlope");

		/// <summary>
		/// Rounded Armor Corner
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LightRoundedArmorCorner = MyStringId.GetOrCompute("DisplayName_Block_LightRoundedArmorCorner");

		/// <summary>
		/// Rounded Armor Slope
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LightRoundedArmorSlope = MyStringId.GetOrCompute("DisplayName_Block_LightRoundedArmorSlope");

		/// <summary>
		/// Medical Room
		/// </summary>
		public static readonly MyStringId DisplayName_Block_MedicalRoom = MyStringId.GetOrCompute("DisplayName_Block_MedicalRoom");

		/// <summary>
		/// Medium Cargo Container
		/// </summary>
		public static readonly MyStringId DisplayName_Block_MediumCargoContainer = MyStringId.GetOrCompute("DisplayName_Block_MediumCargoContainer");

		/// <summary>
		/// Merge Block
		/// </summary>
		public static readonly MyStringId DisplayName_Block_MergeBlock = MyStringId.GetOrCompute("DisplayName_Block_MergeBlock");

		/// <summary>
		/// Missile Turret
		/// </summary>
		public static readonly MyStringId DisplayName_Block_MissileTurret = MyStringId.GetOrCompute("DisplayName_Block_MissileTurret");

		/// <summary>
		/// Control Seat
		/// </summary>
		public static readonly MyStringId DisplayName_Block_OpenCockpitLarge = MyStringId.GetOrCompute("DisplayName_Block_OpenCockpitLarge");

		/// <summary>
		/// Control Seat
		/// </summary>
		public static readonly MyStringId DisplayName_Block_OpenCockpitSmall = MyStringId.GetOrCompute("DisplayName_Block_OpenCockpitSmall");

		/// <summary>
		/// Ore Detector
		/// </summary>
		public static readonly MyStringId DisplayName_Block_OreDetector = MyStringId.GetOrCompute("DisplayName_Block_OreDetector");

		/// <summary>
		/// Oxygen Farm
		/// </summary>
		public static readonly MyStringId DisplayName_Block_OxygenFarm = MyStringId.GetOrCompute("DisplayName_Block_OxygenFarm");

		/// <summary>
		/// O2/H2 Generator
		/// </summary>
		public static readonly MyStringId DisplayName_Block_OxygenGenerator = MyStringId.GetOrCompute("DisplayName_Block_OxygenGenerator");

		/// <summary>
		/// Oxygen Tank
		/// </summary>
		public static readonly MyStringId DisplayName_Block_OxygenTank = MyStringId.GetOrCompute("DisplayName_Block_OxygenTank");

		/// <summary>
		/// Parachute Hatch
		/// </summary>
		public static readonly MyStringId DisplayName_Block_ParachuteHatch = MyStringId.GetOrCompute("DisplayName_Block_ParachuteHatch");

		/// <summary>
		/// Passage
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Passage = MyStringId.GetOrCompute("DisplayName_Block_Passage");

		/// <summary>
		/// Passenger Seat
		/// </summary>
		public static readonly MyStringId DisplayName_Block_PassengerSeat = MyStringId.GetOrCompute("DisplayName_Block_PassengerSeat");

		/// <summary>
		/// Piston
		/// </summary>
		public static readonly MyStringId DisplayName_Block_PistonBase = MyStringId.GetOrCompute("DisplayName_Block_PistonBase");

		/// <summary>
		/// Top Piston Part
		/// </summary>
		public static readonly MyStringId DisplayName_Block_PistonTop = MyStringId.GetOrCompute("DisplayName_Block_PistonTop");

		/// <summary>
		/// Power Efficiency Module
		/// </summary>
		public static readonly MyStringId DisplayName_Block_PowerEfficiencyModule = MyStringId.GetOrCompute("DisplayName_Block_PowerEfficiencyModule");

		/// <summary>
		/// Speed Module
		/// </summary>
		public static readonly MyStringId DisplayName_Block_ProductivityModule = MyStringId.GetOrCompute("DisplayName_Block_ProductivityModule");

		/// <summary>
		/// Projector
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Projector = MyStringId.GetOrCompute("DisplayName_Block_Projector");

		/// <summary>
		/// Ramp
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Ramp = MyStringId.GetOrCompute("DisplayName_Block_Ramp");

		/// <summary>
		/// Refinery
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Refinery = MyStringId.GetOrCompute("DisplayName_Block_Refinery");

		/// <summary>
		/// Spotlight
		/// </summary>
		public static readonly MyStringId DisplayName_Block_ReflectorLight = MyStringId.GetOrCompute("DisplayName_Block_ReflectorLight");

		/// <summary>
		/// Remote Control
		/// </summary>
		public static readonly MyStringId DisplayName_Block_RemoteControl = MyStringId.GetOrCompute("DisplayName_Block_RemoteControl");

		/// <summary>
		/// Rocket Launcher
		/// </summary>
		public static readonly MyStringId DisplayName_Block_RocketLauncher = MyStringId.GetOrCompute("DisplayName_Block_RocketLauncher");

		/// <summary>
		/// Rotor
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Rotor = MyStringId.GetOrCompute("DisplayName_Block_Rotor");

		/// <summary>
		/// Rotor Part
		/// </summary>
		public static readonly MyStringId DisplayName_Block_RotorPart = MyStringId.GetOrCompute("DisplayName_Block_RotorPart");

		/// <summary>
		/// Sensor
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Sensor = MyStringId.GetOrCompute("DisplayName_Block_Sensor");

		/// <summary>
		/// Grinder
		/// </summary>
		public static readonly MyStringId DisplayName_Block_ShipGrinder = MyStringId.GetOrCompute("DisplayName_Block_ShipGrinder");

		/// <summary>
		/// Welder
		/// </summary>
		public static readonly MyStringId DisplayName_Block_ShipWelder = MyStringId.GetOrCompute("DisplayName_Block_ShipWelder");

		/// <summary>
		/// Atmospheric Thruster
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SmallAtmoThrust = MyStringId.GetOrCompute("DisplayName_Block_SmallAtmoThrust");

		/// <summary>
		/// Small Cargo Container
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SmallCargoContainer = MyStringId.GetOrCompute("DisplayName_Block_SmallCargoContainer");

		/// <summary>
		/// Small Conveyor Sorter
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SmallConveyorSorter = MyStringId.GetOrCompute("DisplayName_Block_SmallConveyorSorter");

		/// <summary>
		/// Hydrogen Thruster
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SmallHydrogenThrust = MyStringId.GetOrCompute("DisplayName_Block_SmallHydrogenThrust");

		/// <summary>
		/// Small Reactor
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SmallReactor = MyStringId.GetOrCompute("DisplayName_Block_SmallReactor");

		/// <summary>
		/// Reloadable Rocket Launcher
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SmallRocketLauncherReload = MyStringId.GetOrCompute("DisplayName_Block_SmallRocketLauncherReload");

		/// <summary>
		/// Ion Thruster
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SmallThrust = MyStringId.GetOrCompute("DisplayName_Block_SmallThrust");

		/// <summary>
		/// Solar Panel
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SolarPanel = MyStringId.GetOrCompute("DisplayName_Block_SolarPanel");

		/// <summary>
		/// Sound Block
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SoundBlock = MyStringId.GetOrCompute("DisplayName_Block_SoundBlock");

		/// <summary>
		/// Space Ball
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SpaceBall = MyStringId.GetOrCompute("DisplayName_Block_SpaceBall");

		/// <summary>
		/// Stairs
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Stairs = MyStringId.GetOrCompute("DisplayName_Block_Stairs");

		/// <summary>
		/// Steel Catwalk
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SteelCatwalk = MyStringId.GetOrCompute("DisplayName_Block_SteelCatwalk");

		/// <summary>
		/// Steel Catwalk Corner
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SteelCatwalkCorner = MyStringId.GetOrCompute("DisplayName_Block_SteelCatwalkCorner");

		/// <summary>
		/// Steel Catwalk Plate
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SteelCatwalkPlate = MyStringId.GetOrCompute("DisplayName_Block_SteelCatwalkPlate");

		/// <summary>
		/// Steel Catwalk Two Sides
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SteelCatwalkTwoSides = MyStringId.GetOrCompute("DisplayName_Block_SteelCatwalkTwoSides");

		/// <summary>
		/// Wheel Suspension 1x1 Right
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Suspension1x1 = MyStringId.GetOrCompute("DisplayName_Block_Suspension1x1");

		/// <summary>
		/// Wheel Suspension 1x1 Left
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Suspension1x1mirrored = MyStringId.GetOrCompute("DisplayName_Block_Suspension1x1mirrored");

		/// <summary>
		/// Wheel Suspension 3x3 Right
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Suspension3x3 = MyStringId.GetOrCompute("DisplayName_Block_Suspension3x3");

		/// <summary>
		/// Wheel Suspension 3x3 Left
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Suspension3x3mirrored = MyStringId.GetOrCompute("DisplayName_Block_Suspension3x3mirrored");

		/// <summary>
		/// Wheel Suspension 5x5 Right
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Suspension5x5 = MyStringId.GetOrCompute("DisplayName_Block_Suspension5x5");

		/// <summary>
		/// Wheel Suspension 5x5 Left
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Suspension5x5mirrored = MyStringId.GetOrCompute("DisplayName_Block_Suspension5x5mirrored");

		/// <summary>
		/// Text Panel
		/// </summary>
		public static readonly MyStringId DisplayName_Block_TextPanel = MyStringId.GetOrCompute("DisplayName_Block_TextPanel");

		/// <summary>
		/// Timer Block
		/// </summary>
		public static readonly MyStringId DisplayName_Block_TimerBlock = MyStringId.GetOrCompute("DisplayName_Block_TimerBlock");

		/// <summary>
		/// Centered Window
		/// </summary>
		public static readonly MyStringId DisplayName_Block_VerticalCen = MyStringId.GetOrCompute("DisplayName_Block_VerticalCen");

		/// <summary>
		/// Vertical Window
		/// </summary>
		public static readonly MyStringId DisplayName_Block_VerticalWindow = MyStringId.GetOrCompute("DisplayName_Block_VerticalWindow");

		/// <summary>
		/// Artificial Mass
		/// </summary>
		public static readonly MyStringId DisplayName_Block_VirtualMass = MyStringId.GetOrCompute("DisplayName_Block_VirtualMass");

		/// <summary>
		/// Warhead
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Warhead = MyStringId.GetOrCompute("DisplayName_Block_Warhead");

		/// <summary>
		/// Wheel 1x1
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Wheel1x1 = MyStringId.GetOrCompute("DisplayName_Block_Wheel1x1");

		/// <summary>
		/// Wheel 1x1
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Wheel1x1mirrored = MyStringId.GetOrCompute("DisplayName_Block_Wheel1x1mirrored");

		/// <summary>
		/// Wheel 3x3
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Wheel3x3 = MyStringId.GetOrCompute("DisplayName_Block_Wheel3x3");

		/// <summary>
		/// Wheel 3x3
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Wheel3x3mirrored = MyStringId.GetOrCompute("DisplayName_Block_Wheel3x3mirrored");

		/// <summary>
		/// Wheel 5x5
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Wheel5x5 = MyStringId.GetOrCompute("DisplayName_Block_Wheel5x5");

		/// <summary>
		/// Wheel 5x5
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Wheel5x5mirrored = MyStringId.GetOrCompute("DisplayName_Block_Wheel5x5mirrored");

		/// <summary>
		/// Window 1x1 Face
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Window1x1Face = MyStringId.GetOrCompute("DisplayName_Block_Window1x1Face");

		/// <summary>
		/// Window 1x1 Flat
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Window1x1Flat = MyStringId.GetOrCompute("DisplayName_Block_Window1x1Flat");

		/// <summary>
		/// Window 1x1 Flat Inv.
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Window1x1FlatInv = MyStringId.GetOrCompute("DisplayName_Block_Window1x1FlatInv");

		/// <summary>
		/// Window 1x1 Face Inv.
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Window1x1FaceInv = MyStringId.GetOrCompute("DisplayName_Block_Window1x1FaceInv");

		/// <summary>
		/// Window 1x1 Side
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Window1x1Side = MyStringId.GetOrCompute("DisplayName_Block_Window1x1Side");

		/// <summary>
		/// Window 1x1 Side Inv
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Window1x1SideInv = MyStringId.GetOrCompute("DisplayName_Block_Window1x1SideInv");

		/// <summary>
		/// Window 1x1 Slope
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Window1x1Slope = MyStringId.GetOrCompute("DisplayName_Block_Window1x1Slope");

		/// <summary>
		/// Window 1x2 Face
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Window1x2Face = MyStringId.GetOrCompute("DisplayName_Block_Window1x2Face");

		/// <summary>
		/// Window 1x2 Flat
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Window1x2Flat = MyStringId.GetOrCompute("DisplayName_Block_Window1x2Flat");

		/// <summary>
		/// Window 1x2 Flat Inv.
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Window1x2FlatInv = MyStringId.GetOrCompute("DisplayName_Block_Window1x2FlatInv");

		/// <summary>
		/// Window 1x2 Face Inv.
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Window1x2FaceInv = MyStringId.GetOrCompute("DisplayName_Block_Window1x2FaceInv");

		/// <summary>
		/// Window 1x2 Side Left
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Window1x2SideLeft = MyStringId.GetOrCompute("DisplayName_Block_Window1x2SideLeft");

		/// <summary>
		/// Window 1x2 Side Left Inv
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Window1x2SideLeftInv = MyStringId.GetOrCompute("DisplayName_Block_Window1x2SideLeftInv");

		/// <summary>
		/// Window 1x2 Side Right
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Window1x2SideRight = MyStringId.GetOrCompute("DisplayName_Block_Window1x2SideRight");

		/// <summary>
		/// Window 1x2 Side Right Inv
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Window1x2SideRightInv = MyStringId.GetOrCompute("DisplayName_Block_Window1x2SideRightInv");

		/// <summary>
		/// Window 1x2 Slope
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Window1x2Slope = MyStringId.GetOrCompute("DisplayName_Block_Window1x2Slope");

		/// <summary>
		/// Window 2x3 Flat
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Window2x3Flat = MyStringId.GetOrCompute("DisplayName_Block_Window2x3Flat");

		/// <summary>
		/// Window 2x3 Flat Inv.
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Window2x3FlatInv = MyStringId.GetOrCompute("DisplayName_Block_Window2x3FlatInv");

		/// <summary>
		/// Window 3x3 Flat
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Window3x3Flat = MyStringId.GetOrCompute("DisplayName_Block_Window3x3Flat");

		/// <summary>
		/// Window 3x3 Flat Inv.
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Window3x3FlatInv = MyStringId.GetOrCompute("DisplayName_Block_Window3x3FlatInv");

		/// <summary>
		/// Ammo
		/// </summary>
		public static readonly MyStringId DisplayName_BlueprintClass_Ammo = MyStringId.GetOrCompute("DisplayName_BlueprintClass_Ammo");

		/// <summary>
		/// Base Comp.
		/// </summary>
		public static readonly MyStringId DisplayName_BlueprintClass_Base_Components = MyStringId.GetOrCompute("DisplayName_BlueprintClass_Base_Components");

		/// <summary>
		/// Common Metals
		/// </summary>
		public static readonly MyStringId DisplayName_BlueprintClass_CommonMetals = MyStringId.GetOrCompute("DisplayName_BlueprintClass_CommonMetals");

		/// <summary>
		/// Components
		/// </summary>
		public static readonly MyStringId DisplayName_BlueprintClass_Components = MyStringId.GetOrCompute("DisplayName_BlueprintClass_Components");

		/// <summary>
		/// Basic Ingots and Components
		/// </summary>
		public static readonly MyStringId DisplayName_BlueprintClass_BasicComponents = MyStringId.GetOrCompute("DisplayName_BlueprintClass_BasicComponents");

		/// <summary>
		/// Construction Comp.
		/// </summary>
		public static readonly MyStringId DisplayName_BlueprintClass_Construction_Components = MyStringId.GetOrCompute("DisplayName_BlueprintClass_Construction_Components");

		/// <summary>
		/// Electronics
		/// </summary>
		public static readonly MyStringId DisplayName_BlueprintClass_Electronics = MyStringId.GetOrCompute("DisplayName_BlueprintClass_Electronics");

		/// <summary>
		/// Energetic Ingots
		/// </summary>
		public static readonly MyStringId DisplayName_BlueprintClass_EnergeticIngots = MyStringId.GetOrCompute("DisplayName_BlueprintClass_EnergeticIngots");

		/// <summary>
		/// Hydrogen Bottles
		/// </summary>
		public static readonly MyStringId DisplayName_BlueprintClass_HydrogenBottles = MyStringId.GetOrCompute("DisplayName_BlueprintClass_HydrogenBottles");

		/// <summary>
		/// Ice
		/// </summary>
		public static readonly MyStringId DisplayName_BlueprintClass_Ice = MyStringId.GetOrCompute("DisplayName_BlueprintClass_Ice");

		/// <summary>
		/// Ingots
		/// </summary>
		public static readonly MyStringId DisplayName_BlueprintClass_Ingots = MyStringId.GetOrCompute("DisplayName_BlueprintClass_Ingots");

		/// <summary>
		/// Large Blocks
		/// </summary>
		public static readonly MyStringId DisplayName_BlueprintClass_LargeBlocks = MyStringId.GetOrCompute("DisplayName_BlueprintClass_LargeBlocks");

		/// <summary>
		/// Basic Large Blocks - Click on any Large Block to assemble all components necessary for it's construction.
		/// </summary>
		public static readonly MyStringId DisplayName_BlueprintClass_BasicLargeBlocks = MyStringId.GetOrCompute("DisplayName_BlueprintClass_BasicLargeBlocks");

		/// <summary>
		/// Oxygen Bottles
		/// </summary>
		public static readonly MyStringId DisplayName_BlueprintClass_OxygenBottles = MyStringId.GetOrCompute("DisplayName_BlueprintClass_OxygenBottles");

		/// <summary>
		/// Noble Metals
		/// </summary>
		public static readonly MyStringId DisplayName_BlueprintClass_PreciousMetals = MyStringId.GetOrCompute("DisplayName_BlueprintClass_PreciousMetals");

		/// <summary>
		/// Small Blocks
		/// </summary>
		public static readonly MyStringId DisplayName_BlueprintClass_SmallBlocks = MyStringId.GetOrCompute("DisplayName_BlueprintClass_SmallBlocks");

		/// <summary>
		/// Basic Small Blocks - Click on any Small Block to assemble all components necessary for it's construction.
		/// </summary>
		public static readonly MyStringId DisplayName_BlueprintClass_BasicSmallBlocks = MyStringId.GetOrCompute("DisplayName_BlueprintClass_BasicSmallBlocks");

		/// <summary>
		/// Solids
		/// </summary>
		public static readonly MyStringId DisplayName_BlueprintClass_Solids = MyStringId.GetOrCompute("DisplayName_BlueprintClass_Solids");

		/// <summary>
		/// All Blocks
		/// </summary>
		public static readonly MyStringId DisplayName_Category_AllBlocks = MyStringId.GetOrCompute("DisplayName_Category_AllBlocks");

		/// <summary>
		/// Armor Blocks
		/// </summary>
		public static readonly MyStringId DisplayName_Category_ArmorBlocks = MyStringId.GetOrCompute("DisplayName_Category_ArmorBlocks");

		/// <summary>
		/// Emotes
		/// </summary>
		public static readonly MyStringId DisplayName_Category_CharacterAnimations = MyStringId.GetOrCompute("DisplayName_Category_CharacterAnimations");

		/// <summary>
		/// Character Tools
		/// </summary>
		public static readonly MyStringId DisplayName_Category_CharacterTools = MyStringId.GetOrCompute("DisplayName_Category_CharacterTools");

		/// <summary>
		/// Character Weapons
		/// </summary>
		public static readonly MyStringId DisplayName_Category_CharacterWeapons = MyStringId.GetOrCompute("DisplayName_Category_CharacterWeapons");

		/// <summary>
		/// Cockpit Blocks
		/// </summary>
		public static readonly MyStringId DisplayName_Category_Cockpit = MyStringId.GetOrCompute("DisplayName_Category_Cockpit");

		/// <summary>
		/// Conv./Cargo Blocks
		/// </summary>
		public static readonly MyStringId DisplayName_Category_ConveyorBlocks = MyStringId.GetOrCompute("DisplayName_Category_ConveyorBlocks");

		/// <summary>
		/// Generated Blocks
		/// </summary>
		public static readonly MyStringId DisplayName_Category_GeneratedBlocks = MyStringId.GetOrCompute("DisplayName_Category_GeneratedBlocks");

		/// <summary>
		/// Large Blocks
		/// </summary>
		public static readonly MyStringId DisplayName_Category_LargeBlocks = MyStringId.GetOrCompute("DisplayName_Category_LargeBlocks");

		/// <summary>
		/// Power Blocks
		/// </summary>
		public static readonly MyStringId DisplayName_Category_Power = MyStringId.GetOrCompute("DisplayName_Category_Power");

		/// <summary>
		/// Production Blocks
		/// </summary>
		public static readonly MyStringId DisplayName_Category_Production = MyStringId.GetOrCompute("DisplayName_Category_Production");

		/// <summary>
		/// Groups
		/// </summary>
		public static readonly MyStringId DisplayName_Category_ShipGroups = MyStringId.GetOrCompute("DisplayName_Category_ShipGroups");

		/// <summary>
		/// Lights
		/// </summary>
		public static readonly MyStringId DisplayName_Category_ShipLights = MyStringId.GetOrCompute("DisplayName_Category_ShipLights");

		/// <summary>
		/// Thrusters
		/// </summary>
		public static readonly MyStringId DisplayName_Category_ShipThrusters = MyStringId.GetOrCompute("DisplayName_Category_ShipThrusters");

		/// <summary>
		/// Block Weapons
		/// </summary>
		public static readonly MyStringId DisplayName_Category_ShipWeapons = MyStringId.GetOrCompute("DisplayName_Category_ShipWeapons");

		/// <summary>
		/// Block Tools
		/// </summary>
		public static readonly MyStringId DisplayName_Category_ShipTools = MyStringId.GetOrCompute("DisplayName_Category_ShipTools");

		/// <summary>
		/// Small Blocks
		/// </summary>
		public static readonly MyStringId DisplayName_Category_SmallBlocks = MyStringId.GetOrCompute("DisplayName_Category_SmallBlocks");

		/// <summary>
		/// Voxel Hands
		/// </summary>
		public static readonly MyStringId DisplayName_Category_VoxelHands = MyStringId.GetOrCompute("DisplayName_Category_VoxelHands");

		/// <summary>
		/// Window Blocks
		/// </summary>
		public static readonly MyStringId DisplayName_Category_WindowBlocks = MyStringId.GetOrCompute("DisplayName_Category_WindowBlocks");

		/// <summary>
		/// Close Helmet
		/// </summary>
		public static readonly MyStringId DisplayName_CloseHelmet = MyStringId.GetOrCompute("DisplayName_CloseHelmet");

		/// <summary>
		/// *ammo*
		/// </summary>
		public static readonly MyStringId DisplayName_ConvSorterTypes_Ammo = MyStringId.GetOrCompute("DisplayName_ConvSorterTypes_Ammo");

		/// <summary>
		/// *components*
		/// </summary>
		public static readonly MyStringId DisplayName_ConvSorterTypes_Component = MyStringId.GetOrCompute("DisplayName_ConvSorterTypes_Component");

		/// <summary>
		/// *hand tools*
		/// </summary>
		public static readonly MyStringId DisplayName_ConvSorterTypes_HandTool = MyStringId.GetOrCompute("DisplayName_ConvSorterTypes_HandTool");

		/// <summary>
		/// *ingots*
		/// </summary>
		public static readonly MyStringId DisplayName_ConvSorterTypes_Ingot = MyStringId.GetOrCompute("DisplayName_ConvSorterTypes_Ingot");

		/// <summary>
		/// *ore*
		/// </summary>
		public static readonly MyStringId DisplayName_ConvSorterTypes_Ore = MyStringId.GetOrCompute("DisplayName_ConvSorterTypes_Ore");

		/// <summary>
		/// Dead Astronaut
		/// </summary>
		public static readonly MyStringId DisplayName_Dead_Astronaut = MyStringId.GetOrCompute("DisplayName_Dead_Astronaut");

		/// <summary>
		/// {LOCG:DisplayName_Faction_FirstColonyFaction_Translation}
		/// </summary>
		public static readonly MyStringId DisplayName_Faction_FirstColonyFaction = MyStringId.GetOrCompute("DisplayName_Faction_FirstColonyFaction");

		/// <summary>
		/// First Colony
		/// </summary>
		public static readonly MyStringId DisplayName_Faction_FirstColonyFaction_Translation = MyStringId.GetOrCompute("DisplayName_Faction_FirstColonyFaction_Translation");

		/// <summary>
		/// {LOCG:DisplayName_Faction_SpacePirates_Translation}
		/// </summary>
		public static readonly MyStringId DisplayName_Faction_SpacePirates = MyStringId.GetOrCompute("DisplayName_Faction_SpacePirates");

		/// <summary>
		/// Space Pirates
		/// </summary>
		public static readonly MyStringId DisplayName_Faction_SpacePirates_Translation = MyStringId.GetOrCompute("DisplayName_Faction_SpacePirates_Translation");

		/// <summary>
		/// {LOCG:DisplayName_Faction_SpaceSpiders_Translation}
		/// </summary>
		public static readonly MyStringId DisplayName_Faction_SpaceSpiders = MyStringId.GetOrCompute("DisplayName_Faction_SpaceSpiders");

		/// <summary>
		/// Space spiders
		/// </summary>
		public static readonly MyStringId DisplayName_Faction_SpaceSpiders_Translation = MyStringId.GetOrCompute("DisplayName_Faction_SpaceSpiders_Translation");

		/// <summary>
		/// Create New Large Ship
		/// </summary>
		public static readonly MyStringId DisplayName_GridCreateTool_CreateLargeShip = MyStringId.GetOrCompute("DisplayName_GridCreateTool_CreateLargeShip");

		/// <summary>
		/// Create New Small Ship
		/// </summary>
		public static readonly MyStringId DisplayName_GridCreateTool_CreateSmallShip = MyStringId.GetOrCompute("DisplayName_GridCreateTool_CreateSmallShip");

		/// <summary>
		/// Create New Station
		/// </summary>
		public static readonly MyStringId DisplayName_GridCreateTool_CreateStation = MyStringId.GetOrCompute("DisplayName_GridCreateTool_CreateStation");

		/// <summary>
		/// Grinder
		/// </summary>
		public static readonly MyStringId DisplayName_Item_AngleGrinder = MyStringId.GetOrCompute("DisplayName_Item_AngleGrinder");

		/// <summary>
		/// Enhanced Grinder
		/// </summary>
		public static readonly MyStringId DisplayName_Item_AngleGrinder2 = MyStringId.GetOrCompute("DisplayName_Item_AngleGrinder2");

		/// <summary>
		/// Proficient Grinder
		/// </summary>
		public static readonly MyStringId DisplayName_Item_AngleGrinder3 = MyStringId.GetOrCompute("DisplayName_Item_AngleGrinder3");

		/// <summary>
		/// Elite Grinder
		/// </summary>
		public static readonly MyStringId DisplayName_Item_AngleGrinder4 = MyStringId.GetOrCompute("DisplayName_Item_AngleGrinder4");

		/// <summary>
		/// MR-20
		/// </summary>
		public static readonly MyStringId DisplayName_Item_AutomaticRifle = MyStringId.GetOrCompute("DisplayName_Item_AutomaticRifle");

		/// <summary>
		/// Bulletproof Glass
		/// </summary>
		public static readonly MyStringId DisplayName_Item_BulletproofGlass = MyStringId.GetOrCompute("DisplayName_Item_BulletproofGlass");

		/// <summary>
		/// Canvas
		/// </summary>
		public static readonly MyStringId DisplayName_Item_CanvasCartridge = MyStringId.GetOrCompute("DisplayName_Item_CanvasCartridge");

		/// <summary>
		/// Cobalt Ingot
		/// </summary>
		public static readonly MyStringId DisplayName_Item_CobaltIngot = MyStringId.GetOrCompute("DisplayName_Item_CobaltIngot");

		/// <summary>
		/// Cobalt Ore
		/// </summary>
		public static readonly MyStringId DisplayName_Item_CobaltOre = MyStringId.GetOrCompute("DisplayName_Item_CobaltOre");

		/// <summary>
		/// Computer
		/// </summary>
		public static readonly MyStringId DisplayName_Item_Computer = MyStringId.GetOrCompute("DisplayName_Item_Computer");

		/// <summary>
		/// Construction Comp.
		/// </summary>
		public static readonly MyStringId DisplayName_Item_ConstructionComponent = MyStringId.GetOrCompute("DisplayName_Item_ConstructionComponent");

		/// <summary>
		/// Detector Comp.
		/// </summary>
		public static readonly MyStringId DisplayName_Item_DetectorComponents = MyStringId.GetOrCompute("DisplayName_Item_DetectorComponents");

		/// <summary>
		/// Display
		/// </summary>
		public static readonly MyStringId DisplayName_Item_Display = MyStringId.GetOrCompute("DisplayName_Item_Display");

		/// <summary>
		/// MR-30E
		/// </summary>
		public static readonly MyStringId DisplayName_Item_EliteAutomaticRifle = MyStringId.GetOrCompute("DisplayName_Item_EliteAutomaticRifle");

		/// <summary>
		/// Explosives
		/// </summary>
		public static readonly MyStringId DisplayName_Item_Explosives = MyStringId.GetOrCompute("DisplayName_Item_Explosives");

		/// <summary>
		/// Girder
		/// </summary>
		public static readonly MyStringId DisplayName_Item_Girder = MyStringId.GetOrCompute("DisplayName_Item_Girder");

		/// <summary>
		/// Gold Ingot
		/// </summary>
		public static readonly MyStringId DisplayName_Item_GoldIngot = MyStringId.GetOrCompute("DisplayName_Item_GoldIngot");

		/// <summary>
		/// Gold Ore
		/// </summary>
		public static readonly MyStringId DisplayName_Item_GoldOre = MyStringId.GetOrCompute("DisplayName_Item_GoldOre");

		/// <summary>
		/// Gravel
		/// </summary>
		public static readonly MyStringId DisplayName_Item_Gravel = MyStringId.GetOrCompute("DisplayName_Item_Gravel");

		/// <summary>
		/// Gravity Comp.
		/// </summary>
		public static readonly MyStringId DisplayName_Item_GravityGeneratorComponents = MyStringId.GetOrCompute("DisplayName_Item_GravityGeneratorComponents");

		/// <summary>
		/// Hand Drill
		/// </summary>
		public static readonly MyStringId DisplayName_Item_HandDrill = MyStringId.GetOrCompute("DisplayName_Item_HandDrill");

		/// <summary>
		/// Enhanced Hand Drill
		/// </summary>
		public static readonly MyStringId DisplayName_Item_HandDrill2 = MyStringId.GetOrCompute("DisplayName_Item_HandDrill2");

		/// <summary>
		/// Proficient Hand Drill
		/// </summary>
		public static readonly MyStringId DisplayName_Item_HandDrill3 = MyStringId.GetOrCompute("DisplayName_Item_HandDrill3");

		/// <summary>
		/// Elite Hand Drill
		/// </summary>
		public static readonly MyStringId DisplayName_Item_HandDrill4 = MyStringId.GetOrCompute("DisplayName_Item_HandDrill4");

		/// <summary>
		/// Hydrogen
		/// </summary>
		public static readonly MyStringId DisplayName_Item_Hydrogen = MyStringId.GetOrCompute("DisplayName_Item_Hydrogen");

		/// <summary>
		/// Hydrogen Bottle
		/// </summary>
		public static readonly MyStringId DisplayName_Item_HydrogenBottle = MyStringId.GetOrCompute("DisplayName_Item_HydrogenBottle");

		/// <summary>
		/// Hydrogen Bottles
		/// </summary>
		public static readonly MyStringId DisplayName_Item_HydrogenBottles = MyStringId.GetOrCompute("DisplayName_Item_HydrogenBottles");

		/// <summary>
		/// Ice
		/// </summary>
		public static readonly MyStringId DisplayName_Item_Ice = MyStringId.GetOrCompute("DisplayName_Item_Ice");

		/// <summary>
		/// Interior Plate
		/// </summary>
		public static readonly MyStringId DisplayName_Item_InteriorPlate = MyStringId.GetOrCompute("DisplayName_Item_InteriorPlate");

		/// <summary>
		/// Iron Ingot
		/// </summary>
		public static readonly MyStringId DisplayName_Item_IronIngot = MyStringId.GetOrCompute("DisplayName_Item_IronIngot");

		/// <summary>
		/// Iron Ore
		/// </summary>
		public static readonly MyStringId DisplayName_Item_IronOre = MyStringId.GetOrCompute("DisplayName_Item_IronOre");

		/// <summary>
		/// Large Steel Tube
		/// </summary>
		public static readonly MyStringId DisplayName_Item_LargeSteelTube = MyStringId.GetOrCompute("DisplayName_Item_LargeSteelTube");

		/// <summary>
		/// Magnesium Ore
		/// </summary>
		public static readonly MyStringId DisplayName_Item_MagnesiumOre = MyStringId.GetOrCompute("DisplayName_Item_MagnesiumOre");

		/// <summary>
		/// Magnesium Powder
		/// </summary>
		public static readonly MyStringId DisplayName_Item_MagnesiumPowder = MyStringId.GetOrCompute("DisplayName_Item_MagnesiumPowder");

		/// <summary>
		/// Medical Comp.
		/// </summary>
		public static readonly MyStringId DisplayName_Item_MedicalComponents = MyStringId.GetOrCompute("DisplayName_Item_MedicalComponents");

		/// <summary>
		/// Metal Grid
		/// </summary>
		public static readonly MyStringId DisplayName_Item_MetalGrid = MyStringId.GetOrCompute("DisplayName_Item_MetalGrid");

		/// <summary>
		/// Missile
		/// </summary>
		public static readonly MyStringId DisplayName_Item_Missile200mm = MyStringId.GetOrCompute("DisplayName_Item_Missile200mm");

		/// <summary>
		/// Motor
		/// </summary>
		public static readonly MyStringId DisplayName_Item_Motor = MyStringId.GetOrCompute("DisplayName_Item_Motor");

		/// <summary>
		/// Gatling Ammo Box
		/// </summary>
		public static readonly MyStringId DisplayName_Item_NATO_25x184mm = MyStringId.GetOrCompute("DisplayName_Item_NATO_25x184mm");

		/// <summary>
		/// 5.56x45mm NATO magazine
		/// </summary>
		public static readonly MyStringId DisplayName_Item_NATO_5p56x45mm = MyStringId.GetOrCompute("DisplayName_Item_NATO_5p56x45mm");

		/// <summary>
		/// Nickel Ingot
		/// </summary>
		public static readonly MyStringId DisplayName_Item_NickelIngot = MyStringId.GetOrCompute("DisplayName_Item_NickelIngot");

		/// <summary>
		/// Nickel Ore
		/// </summary>
		public static readonly MyStringId DisplayName_Item_NickelOre = MyStringId.GetOrCompute("DisplayName_Item_NickelOre");

		/// <summary>
		/// Organic
		/// </summary>
		public static readonly MyStringId DisplayName_Item_Organic = MyStringId.GetOrCompute("DisplayName_Item_Organic");

		/// <summary>
		/// Oxygen
		/// </summary>
		public static readonly MyStringId DisplayName_Item_Oxygen = MyStringId.GetOrCompute("DisplayName_Item_Oxygen");

		/// <summary>
		/// Oxygen Bottle
		/// </summary>
		public static readonly MyStringId DisplayName_Item_OxygenBottle = MyStringId.GetOrCompute("DisplayName_Item_OxygenBottle");

		/// <summary>
		/// Oxygen Bottles
		/// </summary>
		public static readonly MyStringId DisplayName_Item_OxygenBottles = MyStringId.GetOrCompute("DisplayName_Item_OxygenBottles");

		/// <summary>
		/// Platinum Ingot
		/// </summary>
		public static readonly MyStringId DisplayName_Item_PlatinumIngot = MyStringId.GetOrCompute("DisplayName_Item_PlatinumIngot");

		/// <summary>
		/// Platinum Ore
		/// </summary>
		public static readonly MyStringId DisplayName_Item_PlatinumOre = MyStringId.GetOrCompute("DisplayName_Item_PlatinumOre");

		/// <summary>
		/// Potassium
		/// </summary>
		public static readonly MyStringId DisplayName_Item_Potassium = MyStringId.GetOrCompute("DisplayName_Item_Potassium");

		/// <summary>
		/// Power Cell
		/// </summary>
		public static readonly MyStringId DisplayName_Item_PowerCell = MyStringId.GetOrCompute("DisplayName_Item_PowerCell");

		/// <summary>
		/// MR-8P
		/// </summary>
		public static readonly MyStringId DisplayName_Item_PreciseAutomaticRifle = MyStringId.GetOrCompute("DisplayName_Item_PreciseAutomaticRifle");

		/// <summary>
		/// Radio-comm Comp.
		/// </summary>
		public static readonly MyStringId DisplayName_Item_RadioCommunicationComponents = MyStringId.GetOrCompute("DisplayName_Item_RadioCommunicationComponents");

		/// <summary>
		/// MR-50A
		/// </summary>
		public static readonly MyStringId DisplayName_Item_RapidFireAutomaticRifle = MyStringId.GetOrCompute("DisplayName_Item_RapidFireAutomaticRifle");

		/// <summary>
		/// Reactor Comp.
		/// </summary>
		public static readonly MyStringId DisplayName_Item_ReactorComponents = MyStringId.GetOrCompute("DisplayName_Item_ReactorComponents");

		/// <summary>
		/// Scrap Metal
		/// </summary>
		public static readonly MyStringId DisplayName_Item_Scrap = MyStringId.GetOrCompute("DisplayName_Item_Scrap");

		/// <summary>
		/// Old Scrap Metal
		/// </summary>
		public static readonly MyStringId DisplayName_Item_ScrapIngot = MyStringId.GetOrCompute("DisplayName_Item_ScrapIngot");

		/// <summary>
		/// Silicon Ore
		/// </summary>
		public static readonly MyStringId DisplayName_Item_SiliconOre = MyStringId.GetOrCompute("DisplayName_Item_SiliconOre");

		/// <summary>
		/// Silicon Wafer
		/// </summary>
		public static readonly MyStringId DisplayName_Item_SiliconWafer = MyStringId.GetOrCompute("DisplayName_Item_SiliconWafer");

		/// <summary>
		/// Silver Ingot
		/// </summary>
		public static readonly MyStringId DisplayName_Item_SilverIngot = MyStringId.GetOrCompute("DisplayName_Item_SilverIngot");

		/// <summary>
		/// Silver Ore
		/// </summary>
		public static readonly MyStringId DisplayName_Item_SilverOre = MyStringId.GetOrCompute("DisplayName_Item_SilverOre");

		/// <summary>
		/// Small Steel Tube
		/// </summary>
		public static readonly MyStringId DisplayName_Item_SmallSteelTube = MyStringId.GetOrCompute("DisplayName_Item_SmallSteelTube");

		/// <summary>
		/// Solar Cell
		/// </summary>
		public static readonly MyStringId DisplayName_Item_SolarCell = MyStringId.GetOrCompute("DisplayName_Item_SolarCell");

		/// <summary>
		/// Steel Plate
		/// </summary>
		public static readonly MyStringId DisplayName_Item_SteelPlate = MyStringId.GetOrCompute("DisplayName_Item_SteelPlate");

		/// <summary>
		/// Stone
		/// </summary>
		public static readonly MyStringId DisplayName_Item_StoneOre = MyStringId.GetOrCompute("DisplayName_Item_StoneOre");

		/// <summary>
		/// Superconductor
		/// </summary>
		public static readonly MyStringId DisplayName_Item_Superconductor = MyStringId.GetOrCompute("DisplayName_Item_Superconductor");

		/// <summary>
		/// Thruster Comp.
		/// </summary>
		public static readonly MyStringId DisplayName_Item_ThrustComponents = MyStringId.GetOrCompute("DisplayName_Item_ThrustComponents");

		/// <summary>
		/// Uranium Ingot
		/// </summary>
		public static readonly MyStringId DisplayName_Item_UraniumIngot = MyStringId.GetOrCompute("DisplayName_Item_UraniumIngot");

		/// <summary>
		/// Uranium Ore
		/// </summary>
		public static readonly MyStringId DisplayName_Item_UraniumOre = MyStringId.GetOrCompute("DisplayName_Item_UraniumOre");

		/// <summary>
		/// Welder
		/// </summary>
		public static readonly MyStringId DisplayName_Item_Welder = MyStringId.GetOrCompute("DisplayName_Item_Welder");

		/// <summary>
		/// Enhanced Welder
		/// </summary>
		public static readonly MyStringId DisplayName_Item_Welder2 = MyStringId.GetOrCompute("DisplayName_Item_Welder2");

		/// <summary>
		/// Proficient Welder
		/// </summary>
		public static readonly MyStringId DisplayName_Item_Welder3 = MyStringId.GetOrCompute("DisplayName_Item_Welder3");

		/// <summary>
		/// Elite Welder
		/// </summary>
		public static readonly MyStringId DisplayName_Item_Welder4 = MyStringId.GetOrCompute("DisplayName_Item_Welder4");

		/// <summary>
		/// LCD Panel
		/// </summary>
		public static readonly MyStringId DisplayName_LCD_Panel = MyStringId.GetOrCompute("DisplayName_LCD_Panel");

		/// <summary>
		/// Wide LCD Panel
		/// </summary>
		public static readonly MyStringId DisplayName_LCD_PanelWide = MyStringId.GetOrCompute("DisplayName_LCD_PanelWide");

		/// <summary>
		/// Mars Planet Landing
		/// </summary>
		public static readonly MyStringId DisplayName_MarsLander = MyStringId.GetOrCompute("DisplayName_MarsLander");

		/// <summary>
		/// Open Helmet
		/// </summary>
		public static readonly MyStringId DisplayName_OpenHelmet = MyStringId.GetOrCompute("DisplayName_OpenHelmet");

		/// <summary>
		/// PlanetaryLander
		/// </summary>
		public static readonly MyStringId DisplayName_PlanetaryLander = MyStringId.GetOrCompute("DisplayName_PlanetaryLander");

		/// <summary>
		/// Programmable Block
		/// </summary>
		public static readonly MyStringId DisplayName_Programmable_Block = MyStringId.GetOrCompute("DisplayName_Programmable_Block");

		/// <summary>
		/// Respawn Ship 2
		/// </summary>
		public static readonly MyStringId DisplayName_RespawnShip_Assembler = MyStringId.GetOrCompute("DisplayName_RespawnShip_Assembler");

		/// <summary>
		/// Escape Pod
		/// </summary>
		public static readonly MyStringId DisplayName_RespawnShip_EscapePod = MyStringId.GetOrCompute("DisplayName_RespawnShip_EscapePod");

		/// <summary>
		/// Respawn Ship 3
		/// </summary>
		public static readonly MyStringId DisplayName_RespawnShip_RefineryAssembler = MyStringId.GetOrCompute("DisplayName_RespawnShip_RefineryAssembler");

		/// <summary>
		/// Small Drill Ship
		/// </summary>
		public static readonly MyStringId DisplayName_RespawnShip_ShipDrill = MyStringId.GetOrCompute("DisplayName_RespawnShip_ShipDrill");

		/// <summary>
		/// Space Pod
		/// </summary>
		public static readonly MyStringId DisplayName_RespawnPodSpace = MyStringId.GetOrCompute("DisplayName_RespawnPodSpace");

		/// <summary>
		/// GoodAI Bot Feedback
		/// </summary>
		public static readonly MyStringId DisplayName_RewardPunishmentTool = MyStringId.GetOrCompute("DisplayName_RewardPunishmentTool");

		/// <summary>
		/// MR-20
		/// </summary>
		public static readonly MyStringId DisplayName_Rifle = MyStringId.GetOrCompute("DisplayName_Rifle");

		/// <summary>
		/// 2 planets
		/// </summary>
		public static readonly MyStringId DisplayName_Scenario_2Planets = MyStringId.GetOrCompute("DisplayName_Scenario_2Planets");

		/// <summary>
		/// Easy Start Alien
		/// </summary>
		public static readonly MyStringId DisplayName_Scenario_AlienEasyStart = MyStringId.GetOrCompute("DisplayName_Scenario_AlienEasyStart");

		/// <summary>
		/// Asteroids
		/// </summary>
		public static readonly MyStringId DisplayName_Scenario_Asteroids = MyStringId.GetOrCompute("DisplayName_Scenario_Asteroids");

		/// <summary>
		/// Big and small planet
		/// </summary>
		public static readonly MyStringId DisplayName_Scenario_BigSmall = MyStringId.GetOrCompute("DisplayName_Scenario_BigSmall");

		/// <summary>
		/// Crashed Red Ship
		/// </summary>
		public static readonly MyStringId DisplayName_Scenario_CrashedRedShip = MyStringId.GetOrCompute("DisplayName_Scenario_CrashedRedShip");

		/// <summary>
		/// Debug fast start
		/// </summary>
		public static readonly MyStringId DisplayName_Scenario_DebugStart = MyStringId.GetOrCompute("DisplayName_Scenario_DebugStart");

		/// <summary>
		/// Easy Start Earth
		/// </summary>
		public static readonly MyStringId DisplayName_Scenario_EarthEasyStart = MyStringId.GetOrCompute("DisplayName_Scenario_EarthEasyStart");

		/// <summary>
		/// Easy Start 1
		/// </summary>
		public static readonly MyStringId DisplayName_Scenario_EasyStart1 = MyStringId.GetOrCompute("DisplayName_Scenario_EasyStart1");

		/// <summary>
		/// Easy Start 2
		/// </summary>
		public static readonly MyStringId DisplayName_Scenario_EasyStart2 = MyStringId.GetOrCompute("DisplayName_Scenario_EasyStart2");

		/// <summary>
		/// Easy Start 3 (64-bit only)
		/// </summary>
		public static readonly MyStringId DisplayName_Scenario_EasyStart3 = MyStringId.GetOrCompute("DisplayName_Scenario_EasyStart3");

		/// <summary>
		/// Empty World
		/// </summary>
		public static readonly MyStringId DisplayName_Scenario_EmptyWorld = MyStringId.GetOrCompute("DisplayName_Scenario_EmptyWorld");

		/// <summary>
		/// Easy Start Mars
		/// </summary>
		public static readonly MyStringId DisplayName_Scenario_MarsEasyStart = MyStringId.GetOrCompute("DisplayName_Scenario_MarsEasyStart");

		/// <summary>
		/// Easy Start Moon
		/// </summary>
		public static readonly MyStringId DisplayName_Scenario_MoonEasyStart = MyStringId.GetOrCompute("DisplayName_Scenario_MoonEasyStart");

		/// <summary>
		/// Habitable planet
		/// </summary>
		public static readonly MyStringId DisplayName_Scenario_Planet = MyStringId.GetOrCompute("DisplayName_Scenario_Planet");

		/// <summary>
		/// Scale test
		/// </summary>
		public static readonly MyStringId DisplayName_Scenario_ScaleTest = MyStringId.GetOrCompute("DisplayName_Scenario_ScaleTest");

		/// <summary>
		/// Star System
		/// </summary>
		public static readonly MyStringId DisplayName_Scenario_StarSystem = MyStringId.GetOrCompute("DisplayName_Scenario_StarSystem");

		/// <summary>
		/// Star System Aligned
		/// </summary>
		public static readonly MyStringId DisplayName_Scenario_StarSystemAligned = MyStringId.GetOrCompute("DisplayName_Scenario_StarSystemAligned");

		/// <summary>
		/// Lone Survivor
		/// </summary>
		public static readonly MyStringId DisplayName_Scenario_Survival = MyStringId.GetOrCompute("DisplayName_Scenario_Survival");

		/// <summary>
		/// Test Star System
		/// </summary>
		public static readonly MyStringId DisplayName_Scenario_TestStarSystem = MyStringId.GetOrCompute("DisplayName_Scenario_TestStarSystem");

		/// <summary>
		/// Two platforms
		/// </summary>
		public static readonly MyStringId DisplayName_Scenario_TwoPlatforms = MyStringId.GetOrCompute("DisplayName_Scenario_TwoPlatforms");

		/// <summary>
		/// Terrain Auto Level
		/// </summary>
		public static readonly MyStringId DisplayName_VoxelHand_AutoLevel = MyStringId.GetOrCompute("DisplayName_VoxelHand_AutoLevel");

		/// <summary>
		/// Box
		/// </summary>
		public static readonly MyStringId DisplayName_VoxelHand_Box = MyStringId.GetOrCompute("DisplayName_VoxelHand_Box");

		/// <summary>
		/// Capsule
		/// </summary>
		public static readonly MyStringId DisplayName_VoxelHand_Capsule = MyStringId.GetOrCompute("DisplayName_VoxelHand_Capsule");

		/// <summary>
		/// Ramp
		/// </summary>
		public static readonly MyStringId DisplayName_VoxelHand_Ramp = MyStringId.GetOrCompute("DisplayName_VoxelHand_Ramp");

		/// <summary>
		/// Sphere
		/// </summary>
		public static readonly MyStringId DisplayName_VoxelHand_Sphere = MyStringId.GetOrCompute("DisplayName_VoxelHand_Sphere");

		/// <summary>
		/// Display settings
		/// </summary>
		public static readonly MyStringId DisplaySettings = MyStringId.GetOrCompute("DisplaySettings");

		/// <summary>
		/// DistanceFromCenter
		/// </summary>
		public static readonly MyStringId DistanceFromCenter = MyStringId.GetOrCompute("DistanceFromCenter");

		/// <summary>
		/// DistanceFromPlayers
		/// </summary>
		public static readonly MyStringId DistanceFromPlayers = MyStringId.GetOrCompute("DistanceFromPlayers");

		/// <summary>
		/// Enable damage effects
		/// </summary>
		public static readonly MyStringId EnableDamageEffects = MyStringId.GetOrCompute("EnableDamageEffects");

		/// <summary>
		/// Entity Rename
		/// </summary>
		public static readonly MyStringId EntityRename = MyStringId.GetOrCompute("EntityRename");

		/// <summary>
		/// Entity Spawn on
		/// </summary>
		public static readonly MyStringId EntitySpawnOn = MyStringId.GetOrCompute("EntitySpawnOn");

		/// <summary>
		/// Enemy faction
		/// </summary>
		public static readonly MyStringId Factions_EnemyFaction = MyStringId.GetOrCompute("Factions_EnemyFaction");

		/// <summary>
		/// Neutral faction
		/// </summary>
		public static readonly MyStringId Factions_NeutralFaction = MyStringId.GetOrCompute("Factions_NeutralFaction");

		/// <summary>
		/// Your block (no faction)
		/// </summary>
		public static readonly MyStringId Factions_YourBlock = MyStringId.GetOrCompute("Factions_YourBlock");

		/// <summary>
		/// Your faction
		/// </summary>
		public static readonly MyStringId Factions_YourFaction = MyStringId.GetOrCompute("Factions_YourFaction");

		/// <summary>
		/// Fastest
		/// </summary>
		public static readonly MyStringId Fastest = MyStringId.GetOrCompute("Fastest");

		/// <summary>
		/// 1st April! Don't tell anyone!
		/// </summary>
		public static readonly MyStringId FirstApril2014 = MyStringId.GetOrCompute("FirstApril2014");

		/// <summary>
		/// Flares intensity
		/// </summary>
		public static readonly MyStringId FlaresIntensity = MyStringId.GetOrCompute("FlaresIntensity");

		/// <summary>
		/// Floating Objects
		/// </summary>
		public static readonly MyStringId FloatingObjects = MyStringId.GetOrCompute("FloatingObjects");

		/// <summary>
		/// Gold
		/// </summary>
		public static readonly MyStringId Gold = MyStringId.GetOrCompute("Gold");

		/// <summary>
		/// GPS
		/// </summary>
		public static readonly MyStringId Gps = MyStringId.GetOrCompute("Gps");

		/// <summary>
		/// GPS list:
		/// </summary>
		public static readonly MyStringId GpsScreen_GpsListLabel = MyStringId.GetOrCompute("GpsScreen_GpsListLabel");

		/// <summary>
		/// Last known body location
		/// </summary>
		public static readonly MyStringId GPS_Body_Location_Desc = MyStringId.GetOrCompute("GPS_Body_Location_Desc");

		/// <summary>
		/// Body Location
		/// </summary>
		public static readonly MyStringId GPS_Body_Location_Name = MyStringId.GetOrCompute("GPS_Body_Location_Name");

		/// <summary>
		/// Respawn Pod
		/// </summary>
		public static readonly MyStringId GPS_Respawn_Location_Name = MyStringId.GetOrCompute("GPS_Respawn_Location_Name");

		/// <summary>
		/// Location of your respawn pod
		/// </summary>
		public static readonly MyStringId GPS_Respawn_Location_Desc = MyStringId.GetOrCompute("GPS_Respawn_Location_Desc");

		/// <summary>
		/// Grids
		/// </summary>
		public static readonly MyStringId Grids = MyStringId.GetOrCompute("Grids");

		/// <summary>
		/// Video on start:
		/// </summary>
		public static readonly MyStringId GuiLabelVideoOnStart = MyStringId.GetOrCompute("GuiLabelVideoOnStart");

		/// <summary>
		/// Lost condition:
		/// </summary>
		public static readonly MyStringId GuiMissionTriggersLostCondition = MyStringId.GetOrCompute("GuiMissionTriggersLostCondition");

		/// <summary>
		/// Win condition:
		/// </summary>
		public static readonly MyStringId GuiMissionTriggersWinCondition = MyStringId.GetOrCompute("GuiMissionTriggersWinCondition");

		/// <summary>
		/// Scenario is already running, cannot join game.
		/// </summary>
		public static readonly MyStringId GuiScenarioCannotJoin = MyStringId.GetOrCompute("GuiScenarioCannotJoin");

		/// <summary>
		/// CANNOT JOIN
		/// </summary>
		public static readonly MyStringId GuiScenarioCannotJoinCaption = MyStringId.GetOrCompute("GuiScenarioCannotJoinCaption");

		/// <summary>
		/// Scenario description
		/// </summary>
		public static readonly MyStringId GuiScenarioDescription = MyStringId.GetOrCompute("GuiScenarioDescription");

		/// <summary>
		/// Copy block IDs
		/// </summary>
		public static readonly MyStringId GuiScenarioEdit_CopyIds = MyStringId.GetOrCompute("GuiScenarioEdit_CopyIds");

		/// <summary>
		/// You can then paste them into "Block destroyed" trigger
		/// </summary>
		public static readonly MyStringId GuiScenarioEdit_CopyIdsTooltip = MyStringId.GetOrCompute("GuiScenarioEdit_CopyIdsTooltip");

		/// <summary>
		/// Player name
		/// </summary>
		public static readonly MyStringId GuiScenarioPlayerName = MyStringId.GetOrCompute("GuiScenarioPlayerName");

		/// <summary>
		/// Status
		/// </summary>
		public static readonly MyStringId GuiScenarioPlayerStatus = MyStringId.GetOrCompute("GuiScenarioPlayerStatus");

		/// <summary>
		/// Send
		/// </summary>
		public static readonly MyStringId GuiScenarioSend = MyStringId.GetOrCompute("GuiScenarioSend");

		/// <summary>
		/// Start
		/// </summary>
		public static readonly MyStringId GuiScenarioStart = MyStringId.GetOrCompute("GuiScenarioStart");

		/// <summary>
		/// Connection timeout:
		/// </summary>
		public static readonly MyStringId GuiScenarioTimeout = MyStringId.GetOrCompute("GuiScenarioTimeout");

		/// <summary>
		/// 10 min
		/// </summary>
		public static readonly MyStringId GuiScenarioTimeout10min = MyStringId.GetOrCompute("GuiScenarioTimeout10min");

		/// <summary>
		/// 3 min
		/// </summary>
		public static readonly MyStringId GuiScenarioTimeout3min = MyStringId.GetOrCompute("GuiScenarioTimeout3min");

		/// <summary>
		/// 5 min
		/// </summary>
		public static readonly MyStringId GuiScenarioTimeout5min = MyStringId.GetOrCompute("GuiScenarioTimeout5min");

		/// <summary>
		/// Unlimited
		/// </summary>
		public static readonly MyStringId GuiScenarioTimeoutUnlimited = MyStringId.GetOrCompute("GuiScenarioTimeoutUnlimited");

		/// <summary>
		/// Message after each block is destroyed
		/// </summary>
		public static readonly MyStringId GuiTriggerBlockDestroyedSingleMessage = MyStringId.GetOrCompute("GuiTriggerBlockDestroyedSingleMessage");

		/// <summary>
		/// Block name
		/// </summary>
		public static readonly MyStringId GuiTriggerBlockDestroyed_ColumnName = MyStringId.GetOrCompute("GuiTriggerBlockDestroyed_ColumnName");

		/// <summary>
		/// All others lost
		/// </summary>
		public static readonly MyStringId GuiTriggerCaptionAllOthersLost = MyStringId.GetOrCompute("GuiTriggerCaptionAllOthersLost");

		/// <summary>
		/// Block destroyed
		/// </summary>
		public static readonly MyStringId GuiTriggerCaptionBlockDestroyed = MyStringId.GetOrCompute("GuiTriggerCaptionBlockDestroyed");

		/// <summary>
		/// Limited lives
		/// </summary>
		public static readonly MyStringId GuiTriggerCaptionLives = MyStringId.GetOrCompute("GuiTriggerCaptionLives");

		/// <summary>
		/// Spawn screen time limit
		/// </summary>
		public static readonly MyStringId GuiTriggerCaptionNoSpawn = MyStringId.GetOrCompute("GuiTriggerCaptionNoSpawn");

		/// <summary>
		/// Leave game area
		/// </summary>
		public static readonly MyStringId GuiTriggerCaptionPositionLeft = MyStringId.GetOrCompute("GuiTriggerCaptionPositionLeft");

		/// <summary>
		/// Reach GPS position
		/// </summary>
		public static readonly MyStringId GuiTriggerCaptionPositionReached = MyStringId.GetOrCompute("GuiTriggerCaptionPositionReached");

		/// <summary>
		/// Someone Won
		/// </summary>
		public static readonly MyStringId GuiTriggerCaptionSomeoneWon = MyStringId.GetOrCompute("GuiTriggerCaptionSomeoneWon");

		/// <summary>
		/// Scenario time limit
		/// </summary>
		public static readonly MyStringId GuiTriggerCaptionTimeLimit = MyStringId.GetOrCompute("GuiTriggerCaptionTimeLimit");

		/// <summary>
		/// Delete
		/// </summary>
		public static readonly MyStringId GuiTriggerDeleteBlocks = MyStringId.GetOrCompute("GuiTriggerDeleteBlocks");

		/// <summary>
		/// Message
		/// </summary>
		public static readonly MyStringId GuiTriggerMessage = MyStringId.GetOrCompute("GuiTriggerMessage");

		/// <summary>
		/// Next mission
		/// </summary>
		public static readonly MyStringId GuiTriggerNextMission = MyStringId.GetOrCompute("GuiTriggerNextMission");

		/// <summary>
		/// You can put a scenario name here (must already exist on local computer to be loaded)  or workshop ID number (user does *not* have to have it subscribed in that case). Workshop ID can be seen in the URL link of scenario in question on {0} workshop web.
		/// </summary>
		public static readonly MyStringId GuiTriggerNextMissionTooltip = MyStringId.GetOrCompute("GuiTriggerNextMissionTooltip");

		/// <summary>
		/// Time limit (sec):
		/// </summary>
		public static readonly MyStringId GuiTriggerNoSpawnTimeLimit = MyStringId.GetOrCompute("GuiTriggerNoSpawnTimeLimit");

		/// <summary>
		/// Add blocks
		/// </summary>
		public static readonly MyStringId GuiTriggerPasteBlocks = MyStringId.GetOrCompute("GuiTriggerPasteBlocks");

		/// <summary>
		/// Adds blocks copied through button at the end of block terminal screen.
		/// </summary>
		public static readonly MyStringId GuiTriggerPasteBlocksTooltip = MyStringId.GetOrCompute("GuiTriggerPasteBlocksTooltip");

		/// <summary>
		/// Paste GPS
		/// </summary>
		public static readonly MyStringId GuiTriggerPasteGps = MyStringId.GetOrCompute("GuiTriggerPasteGps");

		/// <summary>
		/// Radius
		/// </summary>
		public static readonly MyStringId GuiTriggerPositionRadius = MyStringId.GetOrCompute("GuiTriggerPositionRadius");

		/// <summary>
		/// Lives
		/// </summary>
		public static readonly MyStringId GuiTriggersLives = MyStringId.GetOrCompute("GuiTriggersLives");

		/// <summary>
		/// Limit (in minutes)
		/// </summary>
		public static readonly MyStringId GuiTriggerTimeLimit = MyStringId.GetOrCompute("GuiTriggerTimeLimit");

		/// <summary>
		/// WWW link
		/// </summary>
		public static readonly MyStringId GuiTriggerWwwLink = MyStringId.GetOrCompute("GuiTriggerWwwLink");

		/// <summary>
		/// Blue
		/// </summary>
		public static readonly MyStringId HelpScreen_FactionColor_Blue = MyStringId.GetOrCompute("HelpScreen_FactionColor_Blue");

		/// <summary>
		/// Green
		/// </summary>
		public static readonly MyStringId HelpScreen_FactionColor_Green = MyStringId.GetOrCompute("HelpScreen_FactionColor_Green");

		/// <summary>
		/// Red
		/// </summary>
		public static readonly MyStringId HelpScreen_FactionColor_Red = MyStringId.GetOrCompute("HelpScreen_FactionColor_Red");

		/// <summary>
		/// White
		/// </summary>
		public static readonly MyStringId HelpScreen_FactionColor_White = MyStringId.GetOrCompute("HelpScreen_FactionColor_White");

		/// <summary>
		/// Primary Action
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerPrimaryAction = MyStringId.GetOrCompute("HelpScreen_ControllerPrimaryAction");

		/// <summary>
		/// Secondary Action
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerSecondaryAction = MyStringId.GetOrCompute("HelpScreen_ControllerSecondaryAction");

		/// <summary>
		/// Modifier
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerModifier = MyStringId.GetOrCompute("HelpScreen_ControllerModifier");

		/// <summary>
		/// Hor. Movement
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerHorizontalMover = MyStringId.GetOrCompute("HelpScreen_ControllerHorizontalMover");

		/// <summary>
		/// Ship Actions
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerShipActions = MyStringId.GetOrCompute("HelpScreen_ControllerShipActions");

		/// <summary>
		/// Fly Up
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerFlyUp = MyStringId.GetOrCompute("HelpScreen_ControllerFlyUp");

		/// <summary>
		/// Fly Down
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerFlyDown = MyStringId.GetOrCompute("HelpScreen_ControllerFlyDown");

		/// <summary>
		/// Leave Control
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerLeaveControl = MyStringId.GetOrCompute("HelpScreen_ControllerLeaveControl");

		/// <summary>
		/// System Menu
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerSystemMenu = MyStringId.GetOrCompute("HelpScreen_ControllerSystemMenu");

		/// <summary>
		/// Rotation
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerRotation = MyStringId.GetOrCompute("HelpScreen_ControllerRotation");

		/// <summary>
		/// Ship Control
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerShipControl = MyStringId.GetOrCompute("HelpScreen_ControllerShipControl");

		/// <summary>
		/// Character Control
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerCharacterControl = MyStringId.GetOrCompute("HelpScreen_ControllerCharacterControl");

		/// <summary>
		/// Build Menu
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerBuildMenu = MyStringId.GetOrCompute("HelpScreen_ControllerBuildMenu");

		/// <summary>
		/// Select Tool
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerTools = MyStringId.GetOrCompute("HelpScreen_ControllerTools");

		/// <summary>
		/// Cycle Ship Toolbar
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerCycleShipToolbar = MyStringId.GetOrCompute("HelpScreen_ControllerCycleShipToolbar");

		/// <summary>
		/// Cycle Emote Toolbar
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerCycleEmoteToolbar = MyStringId.GetOrCompute("HelpScreen_ControllerCycleEmoteToolbar");

		/// <summary>
		/// Emote Toolbar Actions
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerEmoteToolbarActions = MyStringId.GetOrCompute("HelpScreen_ControllerEmoteToolbarActions");

		/// <summary>
		/// Turret Control
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerTurretControl = MyStringId.GetOrCompute("HelpScreen_ControllerTurretControl");

		/// <summary>
		/// Look Around
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerLookAround = MyStringId.GetOrCompute("HelpScreen_ControllerLookAround");

<<<<<<< HEAD
		/// <summary>
		/// Look Around in passenger seat
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerLookAround_PassengerSeat = MyStringId.GetOrCompute("HelpScreen_ControllerLookAround_PassengerSeat");

		/// <summary>
		/// Color Tool
		/// </summary>
=======
		public static readonly MyStringId HelpScreen_ControllerLookAround_PassengerSeat = MyStringId.GetOrCompute("HelpScreen_ControllerLookAround_PassengerSeat");

>>>>>>> d46cf8619665219cc163a7b28984ced59ed9470d
		public static readonly MyStringId HelpScreen_ControllerColorTool = MyStringId.GetOrCompute("HelpScreen_ControllerColorTool");

		/// <summary>
		/// Survival Only Character
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerCharacterSurvival = MyStringId.GetOrCompute("HelpScreen_ControllerCharacterSurvival");

		/// <summary>
		/// Creative Only Character
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerCharacterCreative = MyStringId.GetOrCompute("HelpScreen_ControllerCharacterCreative");

		/// <summary>
		/// Building
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerBuilding = MyStringId.GetOrCompute("HelpScreen_ControllerBuilding");

		/// <summary>
		/// Roll
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerRoll = MyStringId.GetOrCompute("HelpScreen_ControllerRoll");

		/// <summary>
		/// Survival Only Building
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerBuildingSurvival = MyStringId.GetOrCompute("HelpScreen_ControllerBuildingSurvival");

		/// <summary>
		/// Creative Only Building
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerBuildingCreative = MyStringId.GetOrCompute("HelpScreen_ControllerBuildingCreative");

		/// <summary>
		/// Switch between Grinder / Building
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerSecondaryBuildSurvival = MyStringId.GetOrCompute("HelpScreen_ControllerSecondaryBuildSurvival");

		/// <summary>
		/// Remove Block
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerSecondayBuildCreative = MyStringId.GetOrCompute("HelpScreen_ControllerSecondayBuildCreative");

		/// <summary>
		/// Placing Blocks and Blueprints
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerPlacing = MyStringId.GetOrCompute("HelpScreen_ControllerPlacing");

		/// <summary>
		/// Place
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerPlace = MyStringId.GetOrCompute("HelpScreen_ControllerPlace");

		/// <summary>
		/// Rotate Clockwise
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerRotateCw = MyStringId.GetOrCompute("HelpScreen_ControllerRotateCw");

		/// <summary>
		/// Rotate Counter-Clockwise
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerRotateCcw = MyStringId.GetOrCompute("HelpScreen_ControllerRotateCcw");

		/// <summary>
		/// Change Rotation Axis
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerChangeRotationAxis = MyStringId.GetOrCompute("HelpScreen_ControllerChangeRotationAxis");

		/// <summary>
		/// Move Item Further
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerFurther = MyStringId.GetOrCompute("HelpScreen_ControllerFurther");

		/// <summary>
		/// Paint
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerPaint = MyStringId.GetOrCompute("HelpScreen_ControllerPaint");

		/// <summary>
		/// Scale Up
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerScaleUp = MyStringId.GetOrCompute("HelpScreen_ControllerScaleUp");

		/// <summary>
		/// Scale Down
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerScaleDown = MyStringId.GetOrCompute("HelpScreen_ControllerScaleDown");

		/// <summary>
		/// Move Item Closer
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerCloser = MyStringId.GetOrCompute("HelpScreen_ControllerCloser");

		/// <summary>
		/// Revert
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerRevert = MyStringId.GetOrCompute("HelpScreen_ControllerRevert");

		/// <summary>
		/// You can change "brush" size while recoloring with {GAMEPAD_CONTROL:COLOR_PICKER:MEDIUM_COLOR_BRUSH} and {GAMEPAD_CONTROL:COLOR_PICKER:LARGE_COLOR_BRUSH}
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerHint1 = MyStringId.GetOrCompute("HelpScreen_ControllerHint1");

		/// <summary>
		/// You can change Saturation and Value of the selected color with {GAMEPAD:AXIS_DPAD} while recoloring.
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerHint2 = MyStringId.GetOrCompute("HelpScreen_ControllerHint2");

		/// <summary>
		/// If you make mistake while placing blocks in survival mode you can press {GAMEPAD_CONTROL:BUILD:SECONDARY_TOOL_ACTION} to switch to Grinder tool. When you have Grinder equipped you can press {GAMEPAD_CONTROL:BUILD:SECONDARY_TOOL_ACTION} again to switch to the last equipped block.
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerHint3 = MyStringId.GetOrCompute("HelpScreen_ControllerHint3");

		/// <summary>
		/// You can move through complicated windows more easily with Right Stick.
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerHint4 = MyStringId.GetOrCompute("HelpScreen_ControllerHint4");

		/// <summary>
		/// If you are building a symmetrical ship, you can activate Symmetry Building Mode through Systems Radial Menu.
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerHint5 = MyStringId.GetOrCompute("HelpScreen_ControllerHint5");

		/// <summary>
		/// You can modify voxels with Voxel Hand Tool, which can be accesed from System Radial Menu in Creative Mode. You can then place, remove, revert and paint voxels with {GAMEPAD_CONTROL:VOXEL:PRIMARY_TOOL_ACTION} , {GAMEPAD_CONTROL:VOXEL:SECONDARY_TOOL_ACTION} , {GAMEPAD_CONTROL:VOXEL:VOXEL_REVERT} and {GAMEPAD_CONTROL:VOXEL:VOXEL_PAINT} respectively.
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerHint6 = MyStringId.GetOrCompute("HelpScreen_ControllerHint6");

		/// <summary>
		/// Emotes toolbar is predefined and cannot be changed.
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerHint7 = MyStringId.GetOrCompute("HelpScreen_ControllerHint7");

		/// <summary>
		/// Most common actions on Systems Menu have shortcuts. Pros use shortcuts!
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerHint8 = MyStringId.GetOrCompute("HelpScreen_ControllerHint8");

		/// <summary>
		/// When firing a block weapon in ship that has multiple weapons of the same type you can toggle firing a single weapon or all at once with LB+LT
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerHint9 = MyStringId.GetOrCompute("HelpScreen_ControllerHint9");

		/// <summary>
		/// When looking at inventory port with blocks in Build Planner queue, you can add components for queued blocks into production by pressing {GAMEPAD_CONTROL:CHARACTER:BUILD_PLANNER_ADD_COMPONNETS}.
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerHint10 = MyStringId.GetOrCompute("HelpScreen_ControllerHint10");

		/// <summary>
		/// Material Radial Menu
		/// </summary>
		public static readonly MyStringId RadialMenu_Materials = MyStringId.GetOrCompute("RadialMenu_Materials");

		/// <summary>
		/// Hide empty
		/// </summary>
		public static readonly MyStringId HideEmpty = MyStringId.GetOrCompute("HideEmpty");

		/// <summary>
		/// Did you know?            You can build blocks from any cockpit by pressing Ctrl-G.
		/// </summary>
		public static readonly MyStringId Hint00Text = MyStringId.GetOrCompute("Hint00Text");

		/// <summary>
		/// CUBE_DEFAULT_MOUNTPOINT
		/// </summary>
		public static readonly MyStringId HintKeyboardOnly01Control0 = MyStringId.GetOrCompute("HintKeyboardOnly01Control0");

		/// <summary>
		/// Did you know?            You can toggle off the block auto rotation function with {0}.
		/// </summary>
		public static readonly MyStringId HintKeyboardOnly01Text = MyStringId.GetOrCompute("HintKeyboardOnly01Text");

		/// <summary>
		/// TERMINAL
		/// </summary>
		public static readonly MyStringId HintKeyboardOnly02Control0 = MyStringId.GetOrCompute("HintKeyboardOnly02Control0");

		/// <summary>
		/// Did you know?            Shift-{0} will directly bring you to the antenna menu.
		/// </summary>
		public static readonly MyStringId HintKeyboardOnly02Text = MyStringId.GetOrCompute("HintKeyboardOnly02Text");

		/// <summary>
		/// You can steer vehicles from a turret if the cockpit is set to main cockpit. Hold Alt to enable mouse control.
		/// </summary>
		public static readonly MyStringId Hint03Text = MyStringId.GetOrCompute("Hint03Text");

		/// <summary>
		/// SUICIDE
		/// </summary>
		public static readonly MyStringId Hint04Control0 = MyStringId.GetOrCompute("Hint04Control0");

		/// <summary>
		/// Stuck?            Pressing {0} enables you to respawn.
		/// </summary>
		public static readonly MyStringId Hint04Text = MyStringId.GetOrCompute("Hint04Text");

		/// <summary>
		/// Did you know?            You can dig tunnels quickly without producing ore by using right mouse function with your drill.
		/// </summary>
		public static readonly MyStringId HintKeyboardOnly05Text = MyStringId.GetOrCompute("HintKeyboardOnly05Text");

		/// <summary>
		/// A few well placed decoy blocks can make the difference between a victory and a loss.
		/// </summary>
		public static readonly MyStringId Hint06Text = MyStringId.GetOrCompute("Hint06Text");

		/// <summary>
		/// Did you know?            Meteor impact craters can leave valuable resources.
		/// </summary>
		public static readonly MyStringId Hint07Text = MyStringId.GetOrCompute("Hint07Text");

		/// <summary>
		/// Did you know?            Dark spots on planets indicate ore deposits.
		/// </summary>
		public static readonly MyStringId Hint08Text = MyStringId.GetOrCompute("Hint08Text");

		/// <summary>
		/// Did you know?            Rocks on the surface of planets often contain valuable resources.
		/// </summary>
		public static readonly MyStringId Hint09Text = MyStringId.GetOrCompute("Hint09Text");

		/// <summary>
		/// JUMP
		/// </summary>
		public static readonly MyStringId Hint10Control0 = MyStringId.GetOrCompute("Hint10Control0");

		/// <summary>
		/// Did you know?            While driving a rover, Hold {0} to brake.
		/// </summary>
		public static readonly MyStringId Hint10Text = MyStringId.GetOrCompute("Hint10Text");

		/// <summary>
		/// Be careful using your jetpack on planets.  Your hydrogen fuel will run out quickly. 
		/// </summary>
		public static readonly MyStringId Hint11Text = MyStringId.GetOrCompute("Hint11Text");

		/// <summary>
		/// LANDING_GEAR
		/// </summary>
		public static readonly MyStringId Hint12Control0 = MyStringId.GetOrCompute("Hint12Control0");

		/// <summary>
		/// Did you know?           you can open the color picker by pressing {0}.
		/// </summary>
		public static readonly MyStringId Hint12Text = MyStringId.GetOrCompute("Hint12Text");

		/// <summary>
		/// Batteries will automatically charge and distribute power when necessary according to their settings.
		/// </summary>
		public static readonly MyStringId Hint13Text = MyStringId.GetOrCompute("Hint13Text");

		/// <summary>
		/// Upgrade modules will improve the performance of your refineries and assemblers.
		/// </summary>
		public static readonly MyStringId Hint14Text = MyStringId.GetOrCompute("Hint14Text");

		/// <summary>
		/// You can save Creations by pressing CTRL-B. Open the blueprint menu with F10.
		/// </summary>
		public static readonly MyStringId HintKeyboardOnly09Text = MyStringId.GetOrCompute("HintKeyboardOnly09Text");

		/// <summary>
		/// While holding a blueprint in creative mode, you can use B to align them to a planet's Gravity.
		/// </summary>
		public static readonly MyStringId HintKeyboardOnly08Text = MyStringId.GetOrCompute("HintKeyboardOnly08Text");

		/// <summary>
		/// Using a ship to grind down a container will also pick up whatever was inside of the container.
		/// </summary>
		public static readonly MyStringId Hint17Text = MyStringId.GetOrCompute("Hint17Text");

		/// <summary>
		/// Double clicking items will automatically transfer the whole stack between inventories. 
		/// </summary>
		public static readonly MyStringId HintKeyboardOnly07Text = MyStringId.GetOrCompute("HintKeyboardOnly07Text");

		/// <summary>
		/// Holding Ctrl, Shift or Ctrl-Shift enables you to move stacks of items by 10, 100 and 1000 at the time.
		/// </summary>
		public static readonly MyStringId HintKeyboardOnly06Text = MyStringId.GetOrCompute("HintKeyboardOnly06Text");

		/// <summary>
		/// Did you know?            Scrolling while using a camera or turret enables you to zoom in and out.
		/// </summary>
		public static readonly MyStringId HintKeyboardOnly04Text = MyStringId.GetOrCompute("HintKeyboardOnly04Text");

		/// <summary>
		/// Did you know?            You can manually control turrets to carefully pick off targets.
		/// </summary>
		public static readonly MyStringId Hint21Text = MyStringId.GetOrCompute("Hint21Text");

		/// <summary>
		/// Did you know?            Your magnetic boots only work when there is no gravity around.
		/// </summary>
		public static readonly MyStringId Hint22Text = MyStringId.GetOrCompute("Hint22Text");

		/// <summary>
		/// Did you know?            Double click while wielding a tool will keep it continuously working.
		/// </summary>
		public static readonly MyStringId HintKeyboardOnly03Text = MyStringId.GetOrCompute("HintKeyboardOnly03Text");

		/// <summary>
		/// Did you know?            Warheads are perfectly safe until you arm them.
		/// </summary>
		public static readonly MyStringId Hint24Text = MyStringId.GetOrCompute("Hint24Text");

		/// <summary>
		/// Did you know?            O2/H2 generator can produce small amounts of hydrogen for thrusters without having a hydrogen tank involved.
		/// </summary>
		public static readonly MyStringId Hint25Text = MyStringId.GetOrCompute("Hint25Text");

		/// <summary>
		/// TOGGLE_SIGNALS
		/// </summary>
		public static readonly MyStringId HintKeyboardOnly00Control0 = MyStringId.GetOrCompute("HintKeyboardOnly00Control0");

		/// <summary>
		/// Did you know?           Press {0} to change the way GPS coordinates and Antennas are displayed on your HUD.
		/// </summary>
		public static readonly MyStringId HintKeyboardOnly00Text = MyStringId.GetOrCompute("HintKeyboardOnly00Text");

		/// <summary>
		/// Did you know?           Blocks that are destroyed during collisions or combat can cause damage around them.
		/// </summary>
		public static readonly MyStringId Hint27Text = MyStringId.GetOrCompute("Hint27Text");

		/// <summary>
		/// Did you know?           Pressurized environments will maintain optimal temperatures and recharge your health and oxygen.
		/// </summary>
		public static readonly MyStringId Hint26Text = MyStringId.GetOrCompute("Hint26Text");

		/// <summary>
		/// Did you know?           Your suit's power drains faster when residing in cold or warm temperatures.
		/// </summary>
		public static readonly MyStringId Hint23Text = MyStringId.GetOrCompute("Hint23Text");

		/// <summary>
		/// Did you know?           The medical room recharges your energy and health five times as fast as the survival kit.
		/// </summary>
		public static readonly MyStringId Hint20Text = MyStringId.GetOrCompute("Hint20Text");

		/// <summary>
		/// Did you know?           You can use sensors to detect enemies located underground who are attempting to infiltrate your base.
		/// </summary>
		public static readonly MyStringId Hint19Text = MyStringId.GetOrCompute("Hint19Text");

		/// <summary>
		/// Did you know?           Wind turbines are more efficient when placed in high and open spaces.
		/// </summary>
		public static readonly MyStringId Hint18Text = MyStringId.GetOrCompute("Hint18Text");

		/// <summary>
		/// Did you know?           Rovers can use their wheel suspensions to jump out of tight situations.
		/// </summary>
		public static readonly MyStringId Hint16Text = MyStringId.GetOrCompute("Hint16Text");

		/// <summary>
		/// Did you know?           Advanced refineries give better yield when refining minerals.
		/// </summary>
		public static readonly MyStringId Hint15Text = MyStringId.GetOrCompute("Hint15Text");

		/// <summary>
		/// Did you know?           Your jet pack can match the velocity of nearby grids using relative dampeners.
		/// </summary>
		public static readonly MyStringId Hint05Text = MyStringId.GetOrCompute("Hint05Text");

		/// <summary>
		/// Did you know?           Wheel suspensions use power based on their power setting.
		/// </summary>
		public static readonly MyStringId Hint02Text = MyStringId.GetOrCompute("Hint02Text");

		/// <summary>
		/// Did you know?           You can use /f to chat with your faction only or /g for global.
		/// </summary>
		public static readonly MyStringId Hint01Text = MyStringId.GetOrCompute("Hint01Text");

		/// <summary>
		/// Components
		/// </summary>
		public static readonly MyStringId HudBlockInfo_Components = MyStringId.GetOrCompute("HudBlockInfo_Components");

		/// <summary>
		/// Installed / Required
		/// </summary>
		public static readonly MyStringId HudBlockInfo_Installed_Required = MyStringId.GetOrCompute("HudBlockInfo_Installed_Required");

		/// <summary>
		/// Large Ship / Station
		/// </summary>
		public static readonly MyStringId HudBlockInfo_LargeShip_Station = MyStringId.GetOrCompute("HudBlockInfo_LargeShip_Station");

		/// <summary>
		/// Small Ship
		/// </summary>
		public static readonly MyStringId HudBlockInfo_SmallShip = MyStringId.GetOrCompute("HudBlockInfo_SmallShip");

		/// <summary>
		/// Batteries
		/// </summary>
		public static readonly MyStringId HudEnergyGroupBatteries = MyStringId.GetOrCompute("HudEnergyGroupBatteries");

		/// <summary>
		/// Charging
		/// </summary>
		public static readonly MyStringId HudEnergyGroupCharging = MyStringId.GetOrCompute("HudEnergyGroupCharging");

		/// <summary>
		/// Conveyors
		/// </summary>
		public static readonly MyStringId HudEnergyGroupConveyors = MyStringId.GetOrCompute("HudEnergyGroupConveyors");

		/// <summary>
		/// Defense
		/// </summary>
		public static readonly MyStringId HudEnergyGroupDefense = MyStringId.GetOrCompute("HudEnergyGroupDefense");

		/// <summary>
		/// Doors
		/// </summary>
		public static readonly MyStringId HudEnergyGroupDoors = MyStringId.GetOrCompute("HudEnergyGroupDoors");

		/// <summary>
		/// Factory
		/// </summary>
		public static readonly MyStringId HudEnergyGroupFactory = MyStringId.GetOrCompute("HudEnergyGroupFactory");

		/// <summary>
		/// Gyroscope
		/// </summary>
		public static readonly MyStringId HudEnergyGroupGyroscope = MyStringId.GetOrCompute("HudEnergyGroupGyroscope");

		/// <summary>
		/// Thrusters
		/// </summary>
		public static readonly MyStringId HudEnergyGroupThrust = MyStringId.GetOrCompute("HudEnergyGroupThrust");

		/// <summary>
		/// Utility
		/// </summary>
		public static readonly MyStringId HudEnergyGroupUtility = MyStringId.GetOrCompute("HudEnergyGroupUtility");

		/// <summary>
		/// MISSING TOTAL
		/// </summary>
		public static readonly MyStringId HudEnergyMissingTotal = MyStringId.GetOrCompute("HudEnergyMissingTotal");

		/// <summary>
		/// Broadcasting
		/// </summary>
		public static readonly MyStringId HudInfoBroadcasting = MyStringId.GetOrCompute("HudInfoBroadcasting");

		/// <summary>
		/// Controlling Station
		/// </summary>
		public static readonly MyStringId HudInfoControllingStation = MyStringId.GetOrCompute("HudInfoControllingStation");

		/// <summary>
		/// Crouching
		/// </summary>
		public static readonly MyStringId HudInfoCrouching = MyStringId.GetOrCompute("HudInfoCrouching");

		/// <summary>
		/// Falling
		/// </summary>
		public static readonly MyStringId HudInfoFalling = MyStringId.GetOrCompute("HudInfoFalling");

		/// <summary>
		/// Flying
		/// </summary>
		public static readonly MyStringId HudInfoFlying = MyStringId.GetOrCompute("HudInfoFlying");

		/// <summary>
		/// Actual Gravity:
		/// </summary>
		public static readonly MyStringId HudInfoGravity = MyStringId.GetOrCompute("HudInfoGravity");

		/// <summary>
		/// Artif. Gravity:
		/// </summary>
		public static readonly MyStringId HudInfoGravityArtificial = MyStringId.GetOrCompute("HudInfoGravityArtificial");

		/// <summary>
		/// Planet Gravity:
		/// </summary>
		public static readonly MyStringId HudInfoGravityNatural = MyStringId.GetOrCompute("HudInfoGravityNatural");

		/// <summary>
		/// Helmet
		/// </summary>
		public static readonly MyStringId HudInfoHelmet = MyStringId.GetOrCompute("HudInfoHelmet");

		/// <summary>
		/// Volume:
		/// </summary>
		public static readonly MyStringId HudInfoInventoryVolume = MyStringId.GetOrCompute("HudInfoInventoryVolume");

		/// <summary>
		/// Magnetic
		/// </summary>
		public static readonly MyStringId HudInfoMagnetic = MyStringId.GetOrCompute("HudInfoMagnetic");

		/// <summary>
		/// Radio:
		/// </summary>
		public static readonly MyStringId HudInfoNameBroadcastRange = MyStringId.GetOrCompute("HudInfoNameBroadcastRange");

		/// <summary>
		/// Dampeners:
		/// </summary>
		public static readonly MyStringId HudInfoNameDampeners = MyStringId.GetOrCompute("HudInfoNameDampeners");

		/// <summary>
		/// Energy:
		/// </summary>
		public static readonly MyStringId HudInfoNameEnergy = MyStringId.GetOrCompute("HudInfoNameEnergy");

		/// <summary>
		/// Fuel Time:
		/// </summary>
		public static readonly MyStringId HudInfoNameFuelTime = MyStringId.GetOrCompute("HudInfoNameFuelTime");

		/// <summary>
		/// Gyroscopes:
		/// </summary>
		public static readonly MyStringId HudInfoNameGyroscopes = MyStringId.GetOrCompute("HudInfoNameGyroscopes");

		/// <summary>
		/// Health:
		/// </summary>
		public static readonly MyStringId HudInfoNameHealth = MyStringId.GetOrCompute("HudInfoNameHealth");

		/// <summary>
		/// In proximity:
		/// </summary>
		public static readonly MyStringId HudInfoNameInProximity = MyStringId.GetOrCompute("HudInfoNameInProximity");

		/// <summary>
		/// Jetpack
		/// </summary>
		public static readonly MyStringId HudInfoNameJetpack = MyStringId.GetOrCompute("HudInfoNameJetpack");

		/// <summary>
		/// Landing gears:
		/// </summary>
		public static readonly MyStringId HudInfoNameLandingGear = MyStringId.GetOrCompute("HudInfoNameLandingGear");

		/// <summary>
		/// Lights:
		/// </summary>
		public static readonly MyStringId HudInfoNameLights = MyStringId.GetOrCompute("HudInfoNameLights");

		/// <summary>
		/// Locked:
		/// </summary>
		public static readonly MyStringId HudInfoNameLocked = MyStringId.GetOrCompute("HudInfoNameLocked");

		/// <summary>
		/// Mass:
		/// </summary>
		public static readonly MyStringId HudInfoNameMass = MyStringId.GetOrCompute("HudInfoNameMass");

		/// <summary>
		/// Number of batteries in use:
		/// </summary>
		public static readonly MyStringId HudInfoNameNumberOfBatteries = MyStringId.GetOrCompute("HudInfoNameNumberOfBatteries");

		/// <summary>
		/// Power Usage:
		/// </summary>
		public static readonly MyStringId HudInfoNamePowerUsage = MyStringId.GetOrCompute("HudInfoNamePowerUsage");

		/// <summary>
		/// Reactors:
		/// </summary>
		public static readonly MyStringId HudInfoNameReactors = MyStringId.GetOrCompute("HudInfoNameReactors");

		/// <summary>
		/// Speed:
		/// </summary>
		public static readonly MyStringId HudInfoNameSpeed = MyStringId.GetOrCompute("HudInfoNameSpeed");

		/// <summary>
		/// Thrusters:
		/// </summary>
		public static readonly MyStringId HudInfoNameThrusts = MyStringId.GetOrCompute("HudInfoNameThrusts");

		/// <summary>
		/// No gravity
		/// </summary>
		public static readonly MyStringId HudInfoNoGravity = MyStringId.GetOrCompute("HudInfoNoGravity");

		/// <summary>
		/// No Power
		/// </summary>
		public static readonly MyStringId HudInfoNoPower = MyStringId.GetOrCompute("HudInfoNoPower");

		/// <summary>
		/// No Spotlights
		/// </summary>
		public static readonly MyStringId HudInfoNoReflectors = MyStringId.GetOrCompute("HudInfoNoReflectors");

		/// <summary>
		/// Off
		/// </summary>
		public static readonly MyStringId HudInfoOff = MyStringId.GetOrCompute("HudInfoOff");

		/// <summary>
		/// On
		/// </summary>
		public static readonly MyStringId HudInfoOn = MyStringId.GetOrCompute("HudInfoOn");

		/// <summary>
		/// Oxygen: 
		/// </summary>
		public static readonly MyStringId HudInfoOxygen = MyStringId.GetOrCompute("HudInfoOxygen");

		/// <summary>
		/// Piloting Large Ship
		/// </summary>
		public static readonly MyStringId HudInfoPilotingLargeShip = MyStringId.GetOrCompute("HudInfoPilotingLargeShip");

		/// <summary>
		/// Piloting Small Ship
		/// </summary>
		public static readonly MyStringId HudInfoPilotingSmallShip = MyStringId.GetOrCompute("HudInfoPilotingSmallShip");

		/// <summary>
		/// Overload
		/// </summary>
		public static readonly MyStringId HudInfoPowerOverload = MyStringId.GetOrCompute("HudInfoPowerOverload");

		/// <summary>
		/// Spotlights Off
		/// </summary>
		public static readonly MyStringId HudInfoReflectorsOff = MyStringId.GetOrCompute("HudInfoReflectorsOff");

		/// <summary>
		/// Spotlights On
		/// </summary>
		public static readonly MyStringId HudInfoReflectorsOn = MyStringId.GetOrCompute("HudInfoReflectorsOn");

		/// <summary>
		/// Standing
		/// </summary>
		public static readonly MyStringId HudInfoStanding = MyStringId.GetOrCompute("HudInfoStanding");

		/// <summary>
		/// State
		/// </summary>
		public static readonly MyStringId HudInfoState = MyStringId.GetOrCompute("HudInfoState");

		/// <summary>
		/// Lives:
		/// </summary>
		public static readonly MyStringId HudScenarioInfoLivesLeft = MyStringId.GetOrCompute("HudScenarioInfoLivesLeft");

		/// <summary>
		/// Time left:
		/// </summary>
		public static readonly MyStringId HudScenarioInfoTimeLeft = MyStringId.GetOrCompute("HudScenarioInfoTimeLeft");

		/// <summary>
		/// Ice
		/// </summary>
		public static readonly MyStringId Ice = MyStringId.GetOrCompute("Ice");

		/// <summary>
		/// Ag
		/// </summary>
		public static readonly MyStringId IconSymbol_Ag = MyStringId.GetOrCompute("IconSymbol_Ag");

		/// <summary>
		/// Au
		/// </summary>
		public static readonly MyStringId IconSymbol_Au = MyStringId.GetOrCompute("IconSymbol_Au");

		/// <summary>
		/// Co
		/// </summary>
		public static readonly MyStringId IconSymbol_Co = MyStringId.GetOrCompute("IconSymbol_Co");

		/// <summary>
		/// Fe
		/// </summary>
		public static readonly MyStringId IconSymbol_Fe = MyStringId.GetOrCompute("IconSymbol_Fe");

		/// <summary>
		/// Gravel
		/// </summary>
		public static readonly MyStringId IconSymbol_Gravel = MyStringId.GetOrCompute("IconSymbol_Gravel");

		/// <summary>
		/// Ice
		/// </summary>
		public static readonly MyStringId IconSymbol_Ice = MyStringId.GetOrCompute("IconSymbol_Ice");

		/// <summary>
		/// K
		/// </summary>
		public static readonly MyStringId IconSymbol_K = MyStringId.GetOrCompute("IconSymbol_K");

		/// <summary>
		/// Mg
		/// </summary>
		public static readonly MyStringId IconSymbol_Mg = MyStringId.GetOrCompute("IconSymbol_Mg");

		/// <summary>
		/// Ni
		/// </summary>
		public static readonly MyStringId IconSymbol_Ni = MyStringId.GetOrCompute("IconSymbol_Ni");

		/// <summary>
		/// Organic
		/// </summary>
		public static readonly MyStringId IconSymbol_Organic = MyStringId.GetOrCompute("IconSymbol_Organic");

		/// <summary>
		/// Pt
		/// </summary>
		public static readonly MyStringId IconSymbol_Pt = MyStringId.GetOrCompute("IconSymbol_Pt");

		/// <summary>
		/// Si
		/// </summary>
		public static readonly MyStringId IconSymbol_Si = MyStringId.GetOrCompute("IconSymbol_Si");

		/// <summary>
		/// Stone
		/// </summary>
		public static readonly MyStringId IconSymbol_Stone = MyStringId.GetOrCompute("IconSymbol_Stone");

		/// <summary>
		/// U
		/// </summary>
		public static readonly MyStringId IconSymbol_U = MyStringId.GetOrCompute("IconSymbol_U");

		/// <summary>
		/// Hello, Engineer! My name is Good.bot. I am an AI teacher that helps you by offering directions. Let's get you started! You can access useful information in the help screen.
		/// </summary>
		public static readonly MyStringId IngameHelp_Intro_Detail1 = MyStringId.GetOrCompute("IngameHelp_Intro_Detail1");

		/// <summary>
		/// Press {CONTROL:HELP_SCREEN} to open help screen.
		/// </summary>
		public static readonly MyStringId IngameHelp_Intro_Detail2 = MyStringId.GetOrCompute("IngameHelp_Intro_Detail2");

		/// <summary>
		/// Good.bot: Introduction
		/// </summary>
		public static readonly MyStringId IngameHelp_Intro_Title = MyStringId.GetOrCompute("IngameHelp_Intro_Title");

		/// <summary>
		/// Good.bot: Jetpack
		/// </summary>
		public static readonly MyStringId IngameHelp_Jetpack_Title = MyStringId.GetOrCompute("IngameHelp_Jetpack_Title");

		/// <summary>
		/// Your jetpack runs on hydrogen fuel. Be careful not to run out of it while flying.
		/// </summary>
		public static readonly MyStringId IngameHelp_Jetpack_Detail1 = MyStringId.GetOrCompute("IngameHelp_Jetpack_Detail1");

		/// <summary>
		/// Toggle jetpack with {CONTROL:THRUSTS}.
		/// </summary>
		public static readonly MyStringId IngameHelp_Jetpack_Detail2 = MyStringId.GetOrCompute("IngameHelp_Jetpack_Detail2");

		/// <summary>
		/// {CONTROL:JUMP} and {CONTROL:CROUCH} to fly up and down.
		/// </summary>
		public static readonly MyStringId IngameHelp_Jetpack_Detail3 = MyStringId.GetOrCompute("IngameHelp_Jetpack_Detail3");

		/// <summary>
		/// Use {CONTROL:FORWARD} {CONTROL:BACKWARD} {CONTROL:STRAFE_LEFT} {CONTROL:STRAFE_RIGHT} keys to move and strafe.
		/// </summary>
		public static readonly MyStringId IngameHelp_Jetpack_Detail4 = MyStringId.GetOrCompute("IngameHelp_Jetpack_Detail4");

		/// <summary>
		/// Press {CONTROL:ROLL_LEFT} and {CONTROL:ROLL_RIGHT} to roll.
		/// </summary>
		public static readonly MyStringId IngameHelp_Jetpack_Detail5 = MyStringId.GetOrCompute("IngameHelp_Jetpack_Detail5");

		/// <summary>
		/// Let's get you started on the basics of movement. Don't forget to stay on the ground.
		/// </summary>
		public static readonly MyStringId IngameHelp_Movement_Detail1 = MyStringId.GetOrCompute("IngameHelp_Movement_Detail1");

		/// <summary>
		/// Use {CONTROL:FORWARD} {CONTROL:BACKWARD} {CONTROL:STRAFE_LEFT} {CONTROL:STRAFE_RIGHT} keys to walk and strafe.
		/// </summary>
		public static readonly MyStringId IngameHelp_Movement_Detail2 = MyStringId.GetOrCompute("IngameHelp_Movement_Detail2");

		/// <summary>
		/// Hold {CONTROL:SPRINT}+{CONTROL:FORWARD} to sprint.
		/// </summary>
		public static readonly MyStringId IngameHelp_Movement_Detail3 = MyStringId.GetOrCompute("IngameHelp_Movement_Detail3");

		/// <summary>
		/// Use {CONTROL:JUMP} to jump.
		/// </summary>
		public static readonly MyStringId IngameHelp_Movement_Detail4 = MyStringId.GetOrCompute("IngameHelp_Movement_Detail4");

		/// <summary>
		/// Toggle {CONTROL:CROUCH} to crouch.
		/// </summary>
		public static readonly MyStringId IngameHelp_Movement_Detail5 = MyStringId.GetOrCompute("IngameHelp_Movement_Detail5");

		/// <summary>
		/// Changing your point of view can be useful in many situations.
		/// </summary>
		public static readonly MyStringId IngameHelp_Camera_Detail1 = MyStringId.GetOrCompute("IngameHelp_Camera_Detail1");

		/// <summary>
		/// Toggle {CONTROL:CAMERA_MODE} to switch between first and third person view.
		/// </summary>
		public static readonly MyStringId IngameHelp_Camera_Detail2 = MyStringId.GetOrCompute("IngameHelp_Camera_Detail2");

		/// <summary>
		/// Use [ALT + Mouse Wheel] to adjust the distance of third person view.
		/// </summary>
		public static readonly MyStringId IngameHelp_Camera_Detail3 = MyStringId.GetOrCompute("IngameHelp_Camera_Detail3");

		/// <summary>
		/// Good.bot: Movement
		/// </summary>
		public static readonly MyStringId IngameHelp_Movement_Title = MyStringId.GetOrCompute("IngameHelp_Movement_Title");

		/// <summary>
		/// INVALID TEXT WRAPPER ENUM
		/// </summary>
		public static readonly MyStringId INVALID = MyStringId.GetOrCompute("INVALID");

		/// <summary>
		/// Inventory
		/// </summary>
		public static readonly MyStringId Inventory = MyStringId.GetOrCompute("Inventory");

		/// <summary>
		/// Iron
		/// </summary>
		public static readonly MyStringId Iron = MyStringId.GetOrCompute("Iron");

		/// <summary>
		/// Achievable percentage of the jump 
		/// </summary>
		public static readonly MyStringId Jump_Achievable = MyStringId.GetOrCompute("Jump_Achievable");

		/// <summary>
		/// Blind Jump
		/// </summary>
		public static readonly MyStringId Jump_Blind = MyStringId.GetOrCompute("Jump_Blind");

		/// <summary>
		/// Seated crew on board: 
		/// </summary>
		public static readonly MyStringId Jump_CrewCount = MyStringId.GetOrCompute("Jump_CrewCount");

		/// <summary>
		/// Jump destination: 
		/// </summary>
		public static readonly MyStringId Jump_Destination = MyStringId.GetOrCompute("Jump_Destination");

		/// <summary>
		/// Distance to the proximity of coordinate: 
		/// </summary>
		public static readonly MyStringId Jump_Distance = MyStringId.GetOrCompute("Jump_Distance");

		/// <summary>
		/// Distance to destination: 
		/// </summary>
		public static readonly MyStringId Jump_DistanceToDest = MyStringId.GetOrCompute("Jump_DistanceToDest");

		/// <summary>
		/// Operational jump drives: 
		/// </summary>
		public static readonly MyStringId Jump_DriveCount = MyStringId.GetOrCompute("Jump_DriveCount");

		/// <summary>
		/// Minimum jump distance: 
		/// </summary>
		public static readonly MyStringId Jump_MinDistance = MyStringId.GetOrCompute("Jump_MinDistance");

		/// <summary>
		/// (Obstacle Detected)
		/// </summary>
		public static readonly MyStringId Jump_Obstacle = MyStringId.GetOrCompute("Jump_Obstacle");

		/// <summary>
		/// Obstacle Detected! Jump Distance will be truncated.
		/// </summary>
		public static readonly MyStringId Jump_ObstacleTruncation = MyStringId.GetOrCompute("Jump_ObstacleTruncation");

		/// <summary>
		/// Weight of transported mass: 
		/// </summary>
		public static readonly MyStringId Jump_Weight = MyStringId.GetOrCompute("Jump_Weight");

		/// <summary>
		/// Keep Projection
		/// </summary>
		public static readonly MyStringId KeepProjectionToggle = MyStringId.GetOrCompute("KeepProjectionToggle");

		/// <summary>
		/// Keep projection after building is complete. Useful for automated building, but can degrade performance.
		/// </summary>
		public static readonly MyStringId KeepProjectionTooltip = MyStringId.GetOrCompute("KeepProjectionTooltip");

		/// <summary>
		/// LargeGrids
		/// </summary>
		public static readonly MyStringId LargeGrids = MyStringId.GetOrCompute("LargeGrids");

		/// <summary>
		/// Reloading
		/// </summary>
		public static readonly MyStringId LargeMissileTurretReloadingNotification = MyStringId.GetOrCompute("LargeMissileTurretReloadingNotification");

		/// <summary>
		/// Connect to receiver
		/// </summary>
		public static readonly MyStringId LaserAntennaConnectButton = MyStringId.GetOrCompute("LaserAntennaConnectButton");

		/// <summary>
		/// Connect to coords
		/// </summary>
		public static readonly MyStringId LaserAntennaConnectGPS = MyStringId.GetOrCompute("LaserAntennaConnectGPS");

		/// <summary>
		/// Copy my coords
		/// </summary>
		public static readonly MyStringId LaserAntennaCopyCoords = MyStringId.GetOrCompute("LaserAntennaCopyCoords");

		/// <summary>
		/// Copy this antenna's position into clipboard
		/// </summary>
		public static readonly MyStringId LaserAntennaCopyCoordsHelp = MyStringId.GetOrCompute("LaserAntennaCopyCoordsHelp");

		/// <summary>
		/// Copy target coords
		/// </summary>
		public static readonly MyStringId LaserAntennaCopyTargetCoords = MyStringId.GetOrCompute("LaserAntennaCopyTargetCoords");

		/// <summary>
		/// Copy target's current or last known position into clipboard
		/// </summary>
		public static readonly MyStringId LaserAntennaCopyTargetCoordsHelp = MyStringId.GetOrCompute("LaserAntennaCopyTargetCoordsHelp");

		/// <summary>
		/// Idle
		/// </summary>
		public static readonly MyStringId LaserAntennaIdleButton = MyStringId.GetOrCompute("LaserAntennaIdleButton");

		/// <summary>
		/// Connected to 
		/// </summary>
		public static readonly MyStringId LaserAntennaModeConnectedTo = MyStringId.GetOrCompute("LaserAntennaModeConnectedTo");

		/// <summary>
		/// Trying to establish connection to 
		/// </summary>
		public static readonly MyStringId LaserAntennaModeContactRec = MyStringId.GetOrCompute("LaserAntennaModeContactRec");

		/// <summary>
		/// Idle
		/// </summary>
		public static readonly MyStringId LaserAntennaModeIdle = MyStringId.GetOrCompute("LaserAntennaModeIdle");

		/// <summary>
		/// Rotating towards GPS coordinates 
		/// </summary>
		public static readonly MyStringId LaserAntennaModeRotGPS = MyStringId.GetOrCompute("LaserAntennaModeRotGPS");

		/// <summary>
		/// Rotating towards 
		/// </summary>
		public static readonly MyStringId LaserAntennaModeRotRec = MyStringId.GetOrCompute("LaserAntennaModeRotRec");

		/// <summary>
		/// Searching for a laser at GPS coordinates 
		/// </summary>
		public static readonly MyStringId LaserAntennaModeSearchGPS = MyStringId.GetOrCompute("LaserAntennaModeSearchGPS");

		/// <summary>
		/// Only receivers set to permanent connection found
		/// </summary>
		public static readonly MyStringId LaserAntennaOnlyPerm = MyStringId.GetOrCompute("LaserAntennaOnlyPerm");

		/// <summary>
		/// Target outside movement range
		/// </summary>
		public static readonly MyStringId LaserAntennaOutsideLimits = MyStringId.GetOrCompute("LaserAntennaOutsideLimits");

		/// <summary>
		/// Paste coords
		/// </summary>
		public static readonly MyStringId LaserAntennaPasteGPS = MyStringId.GetOrCompute("LaserAntennaPasteGPS");

		/// <summary>
		/// Permanent connection
		/// </summary>
		public static readonly MyStringId LaserAntennaPermanentCheckbox = MyStringId.GetOrCompute("LaserAntennaPermanentCheckbox");

		/// <summary>
		/// Known receivers
		/// </summary>
		public static readonly MyStringId LaserAntennaReceiversList = MyStringId.GetOrCompute("LaserAntennaReceiversList");

		/// <summary>
		/// These receivers are in radio range and can report their position. Their current state and target is in parenthesis: idle   laser is idling &gt;&gt; laser is rotating towards other receiver or GPS coordinates ?&gt;  searching for other laser at requested GPS coordinates ~&gt; contacting other side of link (this includes waiting for other laser        to turn its face to me or futile effort to contact receiver        which is turned off or is not there any more) =&gt; connection is established To connect to lasers not listed here you can connect to coordinates.
		/// </summary>
		public static readonly MyStringId LaserAntennaReceiversListHelp = MyStringId.GetOrCompute("LaserAntennaReceiversListHelp");

		/// <summary>
		/// Selected GPS coordinates
		/// </summary>
		public static readonly MyStringId LaserAntennaSelectedCoords = MyStringId.GetOrCompute("LaserAntennaSelectedCoords");

		/// <summary>
		/// Arrow
		/// </summary>
		public static readonly MyStringId LCD_Arrow = MyStringId.GetOrCompute("LCD_Arrow");

		/// <summary>
		/// Construction
		/// </summary>
		public static readonly MyStringId LCD_Construction = MyStringId.GetOrCompute("LCD_Construction");

		/// <summary>
		/// Cross
		/// </summary>
		public static readonly MyStringId LCD_Cross = MyStringId.GetOrCompute("LCD_Cross");

		/// <summary>
		/// Danger
		/// </summary>
		public static readonly MyStringId LCD_Danger = MyStringId.GetOrCompute("LCD_Danger");

		/// <summary>
		/// No Entry
		/// </summary>
		public static readonly MyStringId LCD_NoEntry = MyStringId.GetOrCompute("LCD_NoEntry");

		/// <summary>
		/// Offline
		/// </summary>
		public static readonly MyStringId LCD_Offline = MyStringId.GetOrCompute("LCD_Offline");

		/// <summary>
		/// Online
		/// </summary>
		public static readonly MyStringId LCD_Online = MyStringId.GetOrCompute("LCD_Online");

		/// <summary>
		/// White screen
		/// </summary>
		public static readonly MyStringId LCD_WhiteScreen = MyStringId.GetOrCompute("LCD_WhiteScreen");

		/// <summary>
		/// Grid
		/// </summary>
		public static readonly MyStringId LCD_Grid = MyStringId.GetOrCompute("LCD_Grid");

		/// <summary>
		/// Error loading original game content, cannot load file: {0}  Original game content has been probably modified, revert any modification and try again. Best way to do it is to delete folder 'SpaceEngineers\Content\Data' and then select in {0} 'Verify local game cache'.  Reinstalling the game is not enough, because {0} does not delete unknown files!
		/// </summary>
		public static readonly MyStringId LoadingError_ModifiedOriginalContent = MyStringId.GetOrCompute("LoadingError_ModifiedOriginalContent");

		/// <summary>
		/// Streaming
		/// </summary>
		public static readonly MyStringId LoadingWheel_Streaming = MyStringId.GetOrCompute("LoadingWheel_Streaming");

		/// <summary>
		/// Your game has ran out of memory last time. Do you want to switch to LOW preset and restart game to apply changes?
		/// </summary>
		public static readonly MyStringId LowMemSwitchToLowQuestion = MyStringId.GetOrCompute("LowMemSwitchToLowQuestion");

		/// <summary>
		/// Magnesium
		/// </summary>
		public static readonly MyStringId Magnesium = MyStringId.GetOrCompute("Magnesium");

		/// <summary>
		/// Mass
		/// </summary>
		public static readonly MyStringId Mass = MyStringId.GetOrCompute("Mass");

		/// <summary>
		/// Max backup saves
		/// </summary>
		public static readonly MyStringId MaxBackupSaves = MyStringId.GetOrCompute("MaxBackupSaves");

		/// <summary>
		/// Max objects
		/// </summary>
		public static readonly MyStringId MaxFloatingObjects = MyStringId.GetOrCompute("MaxFloatingObjects");

		/// <summary>
		/// Animal NPC limit
		/// </summary>
		public static readonly MyStringId TotalBotLimit = MyStringId.GetOrCompute("TotalBotLimit");

		/// <summary>
		/// Assign player to faction
		/// </summary>
		public static readonly MyStringId MedicalRoom_factionAssignmentLabel = MyStringId.GetOrCompute("MedicalRoom_factionAssignmentLabel");

		/// <summary>
		/// Respawned player will be assigned to this medical room's faction
		/// </summary>
		public static readonly MyStringId MedicalRoom_factionAssignmentTooltip = MyStringId.GetOrCompute("MedicalRoom_factionAssignmentTooltip");

		/// <summary>
		/// Ownership Assignment
		/// </summary>
		public static readonly MyStringId MedicalRoom_ownershipAssignmentLabel = MyStringId.GetOrCompute("MedicalRoom_ownershipAssignmentLabel");

		/// <summary>
		/// Medical room's owner will be set to anyone who spawns in it as long as former ownership is set to nobody
		/// </summary>
		public static readonly MyStringId MedicalRoom_ownershipAssignmentTooltip = MyStringId.GetOrCompute("MedicalRoom_ownershipAssignmentTooltip");

		/// <summary>
		/// PUBLISH SCENARIO
		/// </summary>
		public static readonly MyStringId MessageBoxCaptionDoYouWishToPublishScenario = MyStringId.GetOrCompute("MessageBoxCaptionDoYouWishToPublishScenario");

		/// <summary>
		/// UPDATE SCENARIO
		/// </summary>
		public static readonly MyStringId MessageBoxCaptionDoYouWishToUpdateScenario = MyStringId.GetOrCompute("MessageBoxCaptionDoYouWishToUpdateScenario");

		/// <summary>
		/// Recommend Space Engineers
		/// </summary>
		public static readonly MyStringId MessageBoxCaptionRecommend = MyStringId.GetOrCompute("MessageBoxCaptionRecommend");

		/// <summary>
		/// You will lose all ownership and spawn as new player! Respawn?
		/// </summary>
		public static readonly MyStringId MessageBoxCaptionRespawn = MyStringId.GetOrCompute("MessageBoxCaptionRespawn");

		/// <summary>
		/// SCENARIO PUBLISHED
		/// </summary>
		public static readonly MyStringId MessageBoxCaptionScenarioPublished = MyStringId.GetOrCompute("MessageBoxCaptionScenarioPublished");

		/// <summary>
		/// PUBLISH FAILED
		/// </summary>
		public static readonly MyStringId MessageBoxCaptionScenarioPublishFailed = MyStringId.GetOrCompute("MessageBoxCaptionScenarioPublishFailed");

		/// <summary>
		/// Tutorial
		/// </summary>
		public static readonly MyStringId MessageBoxCaptionTutorial = MyStringId.GetOrCompute("MessageBoxCaptionTutorial");

		/// <summary>
		/// Video
		/// </summary>
		public static readonly MyStringId MessageBoxCaptionVideo = MyStringId.GetOrCompute("MessageBoxCaptionVideo");

		/// <summary>
		/// Are you sure you want to enable oxygen? Doing so will cause materials on untouched asteroids to change. This is irreversible.
		/// </summary>
		public static readonly MyStringId MessageBoxTextAreYouSureEnableOxygen = MyStringId.GetOrCompute("MessageBoxTextAreYouSureEnableOxygen");

		/// <summary>
		/// Are you sure you want to enable airtightness? This can have negative influence to performance.
		/// </summary>
		public static readonly MyStringId MessageBoxTextAreYouSureEnableOxygenPressurization = MyStringId.GetOrCompute("MessageBoxTextAreYouSureEnableOxygenPressurization");

		/// <summary>
		/// Are you sure you want to delete selected asteroid? (this can not be undone!)
		/// </summary>
		public static readonly MyStringId MessageBoxTextAreYouSureToRemoveAsteroid = MyStringId.GetOrCompute("MessageBoxTextAreYouSureToRemoveAsteroid");

		/// <summary>
		/// Are you sure you want to upload and publish selected scenario on {0} Workshop? Note that by submitting this item, you agree to the workshop terms of service (see {1}).
		/// </summary>
		public static readonly MyStringId MessageBoxTextDoYouWishToPublishScenario = MyStringId.GetOrCompute("MessageBoxTextDoYouWishToPublishScenario");

		/// <summary>
		/// Are you sure you want to upload and overwrite selected scenario on {0} Workshop?
		/// </summary>
		public static readonly MyStringId MessageBoxTextDoYouWishToUpdateScenario = MyStringId.GetOrCompute("MessageBoxTextDoYouWishToUpdateScenario");

		/// <summary>
		/// If you like Space Engineers, you can recommend it to your {0} friends on the following page. Recommendations help to grow the community. Thank you!
		/// </summary>
		public static readonly MyStringId MessageBoxTextRecommend = MyStringId.GetOrCompute("MessageBoxTextRecommend");

		/// <summary>
		/// Some texts might need game restart to be reloaded.
		/// </summary>
		public static readonly MyStringId MessageBoxTextRestartNeededAfterLanguageSwitch = MyStringId.GetOrCompute("MessageBoxTextRestartNeededAfterLanguageSwitch");

		/// <summary>
		/// Applied changes will be visible after restarting the game
		/// </summary>
		public static readonly MyStringId MessageBoxTextRestartNeededAfterRendererSwitch = MyStringId.GetOrCompute("MessageBoxTextRestartNeededAfterRendererSwitch");

		/// <summary>
		/// Next scenario was not found and cannot be loaded. Both {0} and {1} does not exist or contain invalid data. Please contact scenario author to fix it.
		/// </summary>
		public static readonly MyStringId MessageBoxTextScenarioNotFound = MyStringId.GetOrCompute("MessageBoxTextScenarioNotFound");

<<<<<<< HEAD
		/// <summary>
		/// Failed to publish on {0} Workshop
		/// </summary>
=======
>>>>>>> d46cf8619665219cc163a7b28984ced59ed9470d
		public static readonly MyStringId MessageBoxTextScenarioPublishFailed = MyStringId.GetOrCompute("MessageBoxTextScenarioPublishFailed");

		/// <summary>
		/// Do you want to see basic tutorial video?
		/// </summary>
		public static readonly MyStringId MessageBoxTextTutorialQuestion = MyStringId.GetOrCompute("MessageBoxTextTutorialQuestion");

		/// <summary>
		/// Would you like to watch video before tutorial starts?
		/// </summary>
		public static readonly MyStringId MessageBoxTextWatchVideo = MyStringId.GetOrCompute("MessageBoxTextWatchVideo");

		/// <summary>
		/// Download failed, please try again later.
		/// </summary>
		public static readonly MyStringId MessageBoxTextWorkshopDownloadFailed = MyStringId.GetOrCompute("MessageBoxTextWorkshopDownloadFailed");

		/// <summary>
		/// Thumbnail is too big. Maximum allowed size is 1MB. Re-create the blueprint and try again.
		/// </summary>
		public static readonly MyStringId MessageBoxTextThumbnailTooBig = MyStringId.GetOrCompute("MessageBoxTextThumbnailTooBig");

		/// <summary>
		/// Reloading
		/// </summary>
		public static readonly MyStringId MissileLauncherReloadingNotification = MyStringId.GetOrCompute("MissileLauncherReloadingNotification");

		/// <summary>
		/// Scenario Settings
		/// </summary>
		public static readonly MyStringId MissionScreenCaption = MyStringId.GetOrCompute("MissionScreenCaption");

		/// <summary>
		/// Other side won
		/// </summary>
		public static readonly MyStringId MissionTriggerOtherWon = MyStringId.GetOrCompute("MissionTriggerOtherWon");

		/// <summary>
		/// Reach GPS position
		/// </summary>
		public static readonly MyStringId MissionTriggerReachPosition = MyStringId.GetOrCompute("MissionTriggerReachPosition");

		/// <summary>
		/// MostActiveDrills
		/// </summary>
		public static readonly MyStringId MostActiveDrills = MyStringId.GetOrCompute("MostActiveDrills");

		/// <summary>
		/// MostActiveProductionBuildings
		/// </summary>
		public static readonly MyStringId MostActiveProductionBuildings = MyStringId.GetOrCompute("MostActiveProductionBuildings");

		/// <summary>
		/// MostActiveReactors
		/// </summary>
		public static readonly MyStringId MostActiveReactors = MyStringId.GetOrCompute("MostActiveReactors");

		/// <summary>
		/// MostActiveSensors
		/// </summary>
		public static readonly MyStringId MostActiveSensors = MyStringId.GetOrCompute("MostActiveSensors");

		/// <summary>
		/// MostActiveThrusters
		/// </summary>
		public static readonly MyStringId MostActiveThrusters = MyStringId.GetOrCompute("MostActiveThrusters");

		/// <summary>
		/// MostWheels
		/// </summary>
		public static readonly MyStringId MostWheels = MyStringId.GetOrCompute("MostWheels");

		/// <summary>
		/// Production multipliers
		/// </summary>
		public static readonly MyStringId MultiplayerJoinProductionMultipliers = MyStringId.GetOrCompute("MultiplayerJoinProductionMultipliers");

		/// <summary>
		/// Block destroyed
		/// </summary>
		public static readonly MyStringId MyGuiScreenTriggerBlockDestroyed = MyStringId.GetOrCompute("MyGuiScreenTriggerBlockDestroyed");

		/// <summary>
		/// No spawn place
		/// </summary>
		public static readonly MyStringId MyGuiScreenTriggerNoSpawn = MyStringId.GetOrCompute("MyGuiScreenTriggerNoSpawn");

		/// <summary>
		/// Time limit
		/// </summary>
		public static readonly MyStringId MyGuiScreenTriggerTimeLimit = MyStringId.GetOrCompute("MyGuiScreenTriggerTimeLimit");

		/// <summary>
		/// New version of Space Engineers is available!
		/// </summary>
		public static readonly MyStringId NewVersionAvailable = MyStringId.GetOrCompute("NewVersionAvailable");

		/// <summary>
		/// Nickel
		/// </summary>
		public static readonly MyStringId Nickel = MyStringId.GetOrCompute("Nickel");

		/// <summary>
		/// None
		/// </summary>
		public static readonly MyStringId None = MyStringId.GetOrCompute("None");

		/// <summary>
		/// Not Available
		/// </summary>
		public static readonly MyStringId NotAvailable = MyStringId.GetOrCompute("NotAvailable");

		/// <summary>
		/// Not enough materials to create a new block. At least one steel plate is required.
		/// </summary>
		public static readonly MyStringId NotEnoughMaterial = MyStringId.GetOrCompute("NotEnoughMaterial");

		/// <summary>
		/// Powered by VRAGE 2.0
		/// </summary>
		public static readonly MyStringId NoticeLine_01 = MyStringId.GetOrCompute("NoticeLine_01");

		/// <summary>
		/// Copyright © 2013-2019 KEEN SWH LTD.
		/// </summary>
		public static readonly MyStringId NoticeLine_02 = MyStringId.GetOrCompute("NoticeLine_02");

		/// <summary>
		/// Space Engineers® and VRAGE™ are trademarks of KEEN SWH LTD.
		/// </summary>
		public static readonly MyStringId NoticeLine_03 = MyStringId.GetOrCompute("NoticeLine_03");

		/// <summary>
		/// www.keenswh.com
		/// </summary>
		public static readonly MyStringId NoticeLine_04 = MyStringId.GetOrCompute("NoticeLine_04");

		/// <summary>
		/// “Space Engineers” uses Havok®.
		/// </summary>
		public static readonly MyStringId NoticeLine_05 = MyStringId.GetOrCompute("NoticeLine_05");

		/// <summary>
		/// ©Copyright 1999-2008 Havok.com, Inc (and its Licensors). All Rights Reserved.
		/// </summary>
		public static readonly MyStringId NoticeLine_06 = MyStringId.GetOrCompute("NoticeLine_06");

		/// <summary>
		/// See www.havok.com for details.
		/// </summary>
		public static readonly MyStringId NoticeLine_07 = MyStringId.GetOrCompute("NoticeLine_07");

<<<<<<< HEAD
		/// <summary>
		/// 3rd Party Software
		/// </summary>
		public static readonly MyStringId Department_Licenses = MyStringId.GetOrCompute("Department_Licenses");

		/// <summary>
		/// Angle grinder
		/// </summary>
=======
		public static readonly MyStringId Department_Licenses = MyStringId.GetOrCompute("Department_Licenses");

>>>>>>> d46cf8619665219cc163a7b28984ced59ed9470d
		public static readonly MyStringId NotificationArgAngleGrinder = MyStringId.GetOrCompute("NotificationArgAngleGrinder");

		/// <summary>
		/// Drill
		/// </summary>
		public static readonly MyStringId NotificationArgDrill = MyStringId.GetOrCompute("NotificationArgDrill");

		/// <summary>
		/// large ship
		/// </summary>
		public static readonly MyStringId NotificationArgLargeShip = MyStringId.GetOrCompute("NotificationArgLargeShip");

		/// <summary>
		/// Missile
		/// </summary>
		public static readonly MyStringId NotificationArgMissile = MyStringId.GetOrCompute("NotificationArgMissile");

		/// <summary>
		/// Projectile
		/// </summary>
		public static readonly MyStringId NotificationArgProjectile = MyStringId.GetOrCompute("NotificationArgProjectile");

		/// <summary>
		/// small ship
		/// </summary>
		public static readonly MyStringId NotificationArgSmallShip = MyStringId.GetOrCompute("NotificationArgSmallShip");

		/// <summary>
		/// station
		/// </summary>
		public static readonly MyStringId NotificationArgStation = MyStringId.GetOrCompute("NotificationArgStation");

		/// <summary>
		/// Welder
		/// </summary>
		public static readonly MyStringId NotificationArgWelder = MyStringId.GetOrCompute("NotificationArgWelder");

		/// <summary>
		/// {0} {1} is not available for a {2}
		/// </summary>
		public static readonly MyStringId NotificationBlockNotAvailableFor = MyStringId.GetOrCompute("NotificationBlockNotAvailableFor");

		/// <summary>
		/// Oxygen refilled from bottles.
		/// </summary>
		public static readonly MyStringId NotificationBottleRefill = MyStringId.GetOrCompute("NotificationBottleRefill");

		/// <summary>
		/// Jump drives cannot be used in natural gravity.
		/// </summary>
		public static readonly MyStringId NotificationCannotJumpFromGravity = MyStringId.GetOrCompute("NotificationCannotJumpFromGravity");

		/// <summary>
		/// Jump drives cannot be used to jump into natural gravity field.
		/// </summary>
		public static readonly MyStringId NotificationCannotJumpIntoGravity = MyStringId.GetOrCompute("NotificationCannotJumpIntoGravity");

		/// <summary>
		/// Jump drives cannot be used to jump outside world limits.
		/// </summary>
		public static readonly MyStringId NotificationCannotJumpOutsideWorld = MyStringId.GetOrCompute("NotificationCannotJumpOutsideWorld");

		/// <summary>
		/// Broadcasting Off
		/// </summary>
		public static readonly MyStringId NotificationCharacterBroadcastingOff = MyStringId.GetOrCompute("NotificationCharacterBroadcastingOff");

		/// <summary>
		/// Broadcasting On
		/// </summary>
		public static readonly MyStringId NotificationCharacterBroadcastingOn = MyStringId.GetOrCompute("NotificationCharacterBroadcastingOn");

		/// <summary>
		/// Connectors Disabled
		/// </summary>
		public static readonly MyStringId NotificationConnectorsDisabled = MyStringId.GetOrCompute("NotificationConnectorsDisabled");

		/// <summary>
		/// Connectors Enabled
		/// </summary>
		public static readonly MyStringId NotificationConnectorsEnabled = MyStringId.GetOrCompute("NotificationConnectorsEnabled");

		/// <summary>
		/// Parking engaged
		/// </summary>
		public static readonly MyStringId NotificationParkingSuccessful = MyStringId.GetOrCompute("NotificationParkingSuccessful");

		/// <summary>
		/// Unable to park
		/// </summary>
		public static readonly MyStringId NotificationParkingFailed = MyStringId.GetOrCompute("NotificationParkingFailed");

		/// <summary>
		/// You are not allowed to paint this grid
		/// </summary>
		public static readonly MyStringId NotificationCannotPaint = MyStringId.GetOrCompute("NotificationCannotPaint");

		/// <summary>
		/// Parking released
		/// </summary>
		public static readonly MyStringId NotificationParkingReleased = MyStringId.GetOrCompute("NotificationParkingReleased");

		/// <summary>
		/// Can not place asteroids/voxels over ships(except stations), players, or out of world bounds
		/// </summary>
		public static readonly MyStringId NotificationCopyPasteAsteroidObstructed = MyStringId.GetOrCompute("NotificationCopyPasteAsteroidObstructed");

		/// <summary>
		/// Energy is critical.
		/// </summary>
		public static readonly MyStringId NotificationEnergyCritical = MyStringId.GetOrCompute("NotificationEnergyCritical");

		/// <summary>
		/// Energy is low.
		/// </summary>
		public static readonly MyStringId NotificationEnergyLow = MyStringId.GetOrCompute("NotificationEnergyLow");

		/// <summary>
		/// No Energy
		/// </summary>
		public static readonly MyStringId NotificationEnergyNo = MyStringId.GetOrCompute("NotificationEnergyNo");

		/// <summary>
		/// Fuel is critical.
		/// </summary>
		public static readonly MyStringId NotificationFuelCritical = MyStringId.GetOrCompute("NotificationFuelCritical");

		/// <summary>
		/// Fuel is low.
		/// </summary>
		public static readonly MyStringId NotificationFuelLow = MyStringId.GetOrCompute("NotificationFuelLow");

		/// <summary>
		/// No Fuel
		/// </summary>
		public static readonly MyStringId NotificationFuelNo = MyStringId.GetOrCompute("NotificationFuelNo");

		/// <summary>
		/// Gas refilled from bottles.
		/// </summary>
		public static readonly MyStringId NotificationGasBottleRefill = MyStringId.GetOrCompute("NotificationGasBottleRefill");

		/// <summary>
		/// Warning! Grid's number of physical shapes is approaching limit. Further modifications may cause issues with physics.
		/// </summary>
		public static readonly MyStringId NotificationGridReachedPhysicalLimit = MyStringId.GetOrCompute("NotificationGridReachedPhysicalLimit");

		/// <summary>
		/// Handbrake off
		/// </summary>
		public static readonly MyStringId NotificationHandbrakeOff = MyStringId.GetOrCompute("NotificationHandbrakeOff");

		/// <summary>
		/// Handbrake on
		/// </summary>
		public static readonly MyStringId NotificationHandbrakeOn = MyStringId.GetOrCompute("NotificationHandbrakeOn");

		/// <summary>
		/// Cannot engage handbrake
		/// </summary>
		public static readonly MyStringId NotificationHandbrakeFailedToEngage = MyStringId.GetOrCompute("NotificationHandbrakeFailedToEngage");

		/// <summary>
		/// Warning: Your health is critically low.
		/// </summary>
		public static readonly MyStringId NotificationHealthCritical = MyStringId.GetOrCompute("NotificationHealthCritical");

		/// <summary>
		/// Warning: Your health is low.
		/// </summary>
		public static readonly MyStringId NotificationHealthLow = MyStringId.GetOrCompute("NotificationHealthLow");

		/// <summary>
		/// Helmet Off
		/// </summary>
		public static readonly MyStringId NotificationHelmetOff = MyStringId.GetOrCompute("NotificationHelmetOff");

		/// <summary>
		/// Helmet On
		/// </summary>
		public static readonly MyStringId NotificationHelmetOn = MyStringId.GetOrCompute("NotificationHelmetOn");

		/// <summary>
		/// Access control menu to setup panel's buttons
		/// </summary>
		public static readonly MyStringId NotificationHintJoystickPressToOpenButtonPanel = MyStringId.GetOrCompute("NotificationHintJoystickPressToOpenButtonPanel");

		/// <summary>
		/// Access control menu to open control panel of {0}
		/// </summary>
		public static readonly MyStringId NotificationHintJoystickPressToOpenControlPanel = MyStringId.GetOrCompute("NotificationHintJoystickPressToOpenControlPanel");

		/// <summary>
		/// Access control menu to open inventory of {0}
		/// </summary>
		public static readonly MyStringId NotificationHintJoystickPressToOpenInventory = MyStringId.GetOrCompute("NotificationHintJoystickPressToOpenInventory");

		/// <summary>
		/// Access control menu to open terminal
		/// </summary>
		public static readonly MyStringId NotificationHintJoystickPressToOpenTerminal = MyStringId.GetOrCompute("NotificationHintJoystickPressToOpenTerminal");

		/// <summary>
		/// Press {0} to leave {1}
		/// </summary>
		public static readonly MyStringId NotificationHintLeaveCockpit = MyStringId.GetOrCompute("NotificationHintLeaveCockpit");

		/// <summary>
		/// Press {0} to leave cryo chamber
		/// </summary>
		public static readonly MyStringId NotificationHintLeaveCryoChamber = MyStringId.GetOrCompute("NotificationHintLeaveCryoChamber");

		/// <summary>
		/// Empty
		/// </summary>
		public static readonly MyStringId NotificationHintNoAction = MyStringId.GetOrCompute("NotificationHintNoAction");

		/// <summary>
		/// Press {0} to open ship control panel
		/// </summary>
		public static readonly MyStringId NotificationHintOpenShipControlPanel = MyStringId.GetOrCompute("NotificationHintOpenShipControlPanel");

		/// <summary>
		/// Press {0} or {1} to climb up and down
		/// </summary>
		public static readonly MyStringId NotificationHintPressToClimbUpDown = MyStringId.GetOrCompute("NotificationHintPressToClimbUpDown");

		/// <summary>
		/// Press {0} to enter {1}
		/// </summary>
		public static readonly MyStringId NotificationHintPressToEnterCockpit = MyStringId.GetOrCompute("NotificationHintPressToEnterCockpit");

		/// <summary>
		/// Press {0} to enter {1}
		/// </summary>
		public static readonly MyStringId NotificationHintPressToEnterCryochamber = MyStringId.GetOrCompute("NotificationHintPressToEnterCryochamber");

		/// <summary>
		/// Press {0} to exit camera view
		/// </summary>
		public static readonly MyStringId NotificationHintPressToExitCamera = MyStringId.GetOrCompute("NotificationHintPressToExitCamera");

		/// <summary>
		/// Press {0} to get down from ladder
		/// </summary>
		public static readonly MyStringId NotificationHintPressToGetDownFromLadder = MyStringId.GetOrCompute("NotificationHintPressToGetDownFromLadder");

		/// <summary>
		/// Ladder area is blocked
		/// </summary>
		public static readonly MyStringId NotificationHintLadderBlocked = MyStringId.GetOrCompute("NotificationHintLadderBlocked");

		/// <summary>
		/// Press {0} to get on ladder
		/// </summary>
		public static readonly MyStringId NotificationHintPressToGetOnLadder = MyStringId.GetOrCompute("NotificationHintPressToGetOnLadder");

		/// <summary>
		/// Press {0} to jump off from ladder
		/// </summary>
		public static readonly MyStringId NotificationHintPressToJumpOffLadder = MyStringId.GetOrCompute("NotificationHintPressToJumpOffLadder");

		/// <summary>
		/// Press {0} to setup panel's buttons
		/// </summary>
		public static readonly MyStringId NotificationHintPressToOpenButtonPanel = MyStringId.GetOrCompute("NotificationHintPressToOpenButtonPanel");

		/// <summary>
		/// Press {0} to open control panel of {1}
		/// </summary>
		public static readonly MyStringId NotificationHintPressToOpenControlPanel = MyStringId.GetOrCompute("NotificationHintPressToOpenControlPanel");

		/// <summary>
		/// Press {0} to open/close {1}
		/// </summary>
		public static readonly MyStringId NotificationHintPressToOpenDoor = MyStringId.GetOrCompute("NotificationHintPressToOpenDoor");

		/// <summary>
		/// Press {0} to open inventory of {1}
		/// </summary>
		public static readonly MyStringId NotificationHintPressToOpenInventory = MyStringId.GetOrCompute("NotificationHintPressToOpenInventory");

		/// <summary>
		/// Press {0} to open inventory
		/// </summary>
		public static readonly MyStringId NotificationHintPressToOpenInventoryConnector = MyStringId.GetOrCompute("NotificationHintPressToOpenInventoryConnector");

		/// <summary>
		/// Press {0} to open terminal
		/// </summary>
		public static readonly MyStringId NotificationHintPressToOpenTerminal = MyStringId.GetOrCompute("NotificationHintPressToOpenTerminal");

		/// <summary>
		/// Hold {0} to recharge and heal
		/// </summary>
		public static readonly MyStringId NotificationHintPressToRechargeInMedicalRoom = MyStringId.GetOrCompute("NotificationHintPressToRechargeInMedicalRoom");

		/// <summary>
		/// Press {0} to show screen
		/// </summary>
		public static readonly MyStringId NotificationHintPressToShowScreen = MyStringId.GetOrCompute("NotificationHintPressToShowScreen");

		/// <summary>
		/// Press {0} to switch between single/all weapon mode.
		/// </summary>
		public static readonly MyStringId NotificationHintSwitchWeaponMode = MyStringId.GetOrCompute("NotificationHintSwitchWeaponMode");

		/// <summary>
		/// Press {0} to turn power off
		/// </summary>
		public static readonly MyStringId NotificationHintTurnPowerOff = MyStringId.GetOrCompute("NotificationHintTurnPowerOff");

		/// <summary>
		/// Press {0} to turn power on
		/// </summary>
		public static readonly MyStringId NotificationHintTurnPowerOn = MyStringId.GetOrCompute("NotificationHintTurnPowerOn");

		/// <summary>
		/// Press {0} to toggle auto orientation
		/// </summary>
		public static readonly MyStringId NotificationHint_CubeDefaultMountpoint = MyStringId.GetOrCompute("NotificationHint_CubeDefaultMountpoint");

		/// <summary>
		/// Jetpack Off
		/// </summary>
		public static readonly MyStringId NotificationJetpackOff = MyStringId.GetOrCompute("NotificationJetpackOff");

		/// <summary>
		/// Jetpack Off (no hydrogen)
		/// </summary>
		public static readonly MyStringId NotificationJetpackOffNoHydrogen = MyStringId.GetOrCompute("NotificationJetpackOffNoHydrogen");

		/// <summary>
		/// Jetpack On
		/// </summary>
		public static readonly MyStringId NotificationJetpackOn = MyStringId.GetOrCompute("NotificationJetpackOn");

		/// <summary>
		/// Press {0} to apply color, access control menu to change color
		/// </summary>
		public static readonly MyStringId NotificationJoystickColorFormat = MyStringId.GetOrCompute("NotificationJoystickColorFormat");

		/// <summary>
		/// Weapon is only {0} charged!
		/// </summary>
		public static readonly MyStringId NotificationWeaponNotFullyCharged = MyStringId.GetOrCompute("NotificationWeaponNotFullyCharged");

		/// <summary>
		/// Jump was aborted!
		/// </summary>
		public static readonly MyStringId NotificationJumpAborted = MyStringId.GetOrCompute("NotificationJumpAborted");

		/// <summary>
		/// Jump drive is only {0} charged!
		/// </summary>
		public static readonly MyStringId NotificationJumpDriveNotFullyCharged = MyStringId.GetOrCompute("NotificationJumpDriveNotFullyCharged");

		/// <summary>
		/// Ship will jump in {0} seconds.
		/// </summary>
		public static readonly MyStringId NotificationJumpWarmupTime = MyStringId.GetOrCompute("NotificationJumpWarmupTime");

		/// <summary>
		/// Landing gears Locked
		/// </summary>
		public static readonly MyStringId NotificationLandingGearSwitchLocked = MyStringId.GetOrCompute("NotificationLandingGearSwitchLocked");

		/// <summary>
		/// Landing gears Unlocked
		/// </summary>
		public static readonly MyStringId NotificationLandingGearSwitchUnlocked = MyStringId.GetOrCompute("NotificationLandingGearSwitchUnlocked");

		/// <summary>
		/// Maximum grid size limit reached.
		/// </summary>
		public static readonly MyStringId NotificationLimitsGridSize = MyStringId.GetOrCompute("NotificationLimitsGridSize");

		/// <summary>
		/// Player without faction can not build. Press {0} to join a faction.
		/// </summary>
		public static readonly MyStringId NotificationLimitsNoFaction = MyStringId.GetOrCompute("NotificationLimitsNoFaction");

		/// <summary>
		/// PCU limit reached.
		/// </summary>
		public static readonly MyStringId NotificationLimitsPCU = MyStringId.GetOrCompute("NotificationLimitsPCU");

		/// <summary>
		/// Maximum blocks of specific type limit reached.
		/// </summary>
		public static readonly MyStringId NotificationLimitsPerBlockType = MyStringId.GetOrCompute("NotificationLimitsPerBlockType");

		/// <summary>
		/// Player block limit reached.
		/// </summary>
		public static readonly MyStringId NotificationLimitsPlayer = MyStringId.GetOrCompute("NotificationLimitsPlayer");

		/// <summary>
		/// Meteor storm inbound.
		/// </summary>
		public static readonly MyStringId NotificationMeteorInbound = MyStringId.GetOrCompute("NotificationMeteorInbound");

		/// <summary>
		/// Prepare for next scenario ...
		/// </summary>
		public static readonly MyStringId NotificationNextScenarioWillLoad = MyStringId.GetOrCompute("NotificationNextScenarioWillLoad");

		/// <summary>
		/// Cannot remove helmet on this suit.
		/// </summary>
		public static readonly MyStringId NotificationNoHelmetVariation = MyStringId.GetOrCompute("NotificationNoHelmetVariation");

		/// <summary>
		/// Cannot merge ships! Some blocks would occupy the same space after the merge!
		/// </summary>
		public static readonly MyStringId NotificationObstructingBlockDuringMerge = MyStringId.GetOrCompute("NotificationObstructingBlockDuringMerge");

		/// <summary>
		/// Oxygen is critical.
		/// </summary>
		public static readonly MyStringId NotificationOxygenCritical = MyStringId.GetOrCompute("NotificationOxygenCritical");

		/// <summary>
		/// Oxygen is low.
		/// </summary>
		public static readonly MyStringId NotificationOxygenLow = MyStringId.GetOrCompute("NotificationOxygenLow");

		/// <summary>
		/// You have heen demoted to Observer
		/// </summary>
		public static readonly MyStringId NotificationPlayerDemoted_Moderator = MyStringId.GetOrCompute("NotificationPlayerDemoted_Moderator");

		/// <summary>
		/// You have been demoted to Player
		/// </summary>
		public static readonly MyStringId NotificationPlayerDemoted_None = MyStringId.GetOrCompute("NotificationPlayerDemoted_None");

		/// <summary>
		/// You have been demoted to Scripter
		/// </summary>
		public static readonly MyStringId NotificationPlayerDemoted_Scripter = MyStringId.GetOrCompute("NotificationPlayerDemoted_Scripter");

		/// <summary>
		/// You have been demoted to Space Master
		/// </summary>
		public static readonly MyStringId NotificationPlayerDemoted_SpaceMaster = MyStringId.GetOrCompute("NotificationPlayerDemoted_SpaceMaster");

		/// <summary>
		/// You have been promoted to Administrator
		/// </summary>
		public static readonly MyStringId NotificationPlayerPromoted_Admin = MyStringId.GetOrCompute("NotificationPlayerPromoted_Admin");

		/// <summary>
		/// You have been promoted to Observer
		/// </summary>
		public static readonly MyStringId NotificationPlayerPromoted_Moderator = MyStringId.GetOrCompute("NotificationPlayerPromoted_Moderator");

		/// <summary>
		/// You have been promoted to Scripter
		/// </summary>
		public static readonly MyStringId NotificationPlayerPromoted_Scripter = MyStringId.GetOrCompute("NotificationPlayerPromoted_Scripter");

		/// <summary>
		/// You have been promoted to Space Master
		/// </summary>
		public static readonly MyStringId NotificationPlayerPromoted_SpaceMaster = MyStringId.GetOrCompute("NotificationPlayerPromoted_SpaceMaster");

		/// <summary>
		/// Incorrect grid size. Blueprint size must match that of the projector.
		/// </summary>
		public static readonly MyStringId NotificationProjectorGridSize = MyStringId.GetOrCompute("NotificationProjectorGridSize");

		/// <summary>
		/// Multiple grids are not supported. Only the largest grid will be used.
		/// </summary>
		public static readonly MyStringId NotificationProjectorMultipleGrids = MyStringId.GetOrCompute("NotificationProjectorMultipleGrids");

		/// <summary>
		/// Temporary ship. It will get removed after you leave the game or spawn in a new one.
		/// </summary>
		public static readonly MyStringId NotificationRespawnShipDelete = MyStringId.GetOrCompute("NotificationRespawnShipDelete");

		/// <summary>
		/// Respawn ship. It will get removed if you spawn a new one.
		/// </summary>
		public static readonly MyStringId NotificationBuildingOnRespawnShip = MyStringId.GetOrCompute("NotificationBuildingOnRespawnShip");

		/// <summary>
		/// Warning: Ship fuel is critically low. Life support failure imminent.
		/// </summary>
		public static readonly MyStringId NotificationShipEnergyCritical = MyStringId.GetOrCompute("NotificationShipEnergyCritical");

		/// <summary>
		/// Warning: Ship fuel is critically low.
		/// </summary>
		public static readonly MyStringId NotificationShipEnergyCriticalNoDamage = MyStringId.GetOrCompute("NotificationShipEnergyCriticalNoDamage");

		/// <summary>
		/// Warning: Ship fuel is low. Life support systems may fail.
		/// </summary>
		public static readonly MyStringId NotificationShipEnergyLow = MyStringId.GetOrCompute("NotificationShipEnergyLow");

		/// <summary>
		/// Warning: Ship fuel is low.
		/// </summary>
		public static readonly MyStringId NotificationShipEnergyLowNoDamage = MyStringId.GetOrCompute("NotificationShipEnergyLowNoDamage");

		/// <summary>
		/// Station rotation mode, press {0} to switch off
		/// </summary>
		public static readonly MyStringId NotificationStationRotation = MyStringId.GetOrCompute("NotificationStationRotation");

		/// <summary>
		/// Press {0} for station rotation mode
		/// </summary>
		public static readonly MyStringId NotificationStationRotationOff = MyStringId.GetOrCompute("NotificationStationRotationOff");

		/// <summary>
		/// Warning: Suit energy is critically low. Life support failure imminent.
		/// </summary>
		public static readonly MyStringId NotificationSuitEnergyCritical = MyStringId.GetOrCompute("NotificationSuitEnergyCritical");

		/// <summary>
		/// Warning: Suit energy is critically low.
		/// </summary>
		public static readonly MyStringId NotificationSuitEnergyCriticalNoDamage = MyStringId.GetOrCompute("NotificationSuitEnergyCriticalNoDamage");

		/// <summary>
		/// Warning: Suit energy is low. Life support systems may fail.
		/// </summary>
		public static readonly MyStringId NotificationSuitEnergyLow = MyStringId.GetOrCompute("NotificationSuitEnergyLow");

		/// <summary>
		/// Warning: Suit energy is low.
		/// </summary>
		public static readonly MyStringId NotificationSuitEnergyLowNoDamage = MyStringId.GetOrCompute("NotificationSuitEnergyLowNoDamage");

		/// <summary>
		/// Jetpack fuel is critical
		/// </summary>
		public static readonly MyStringId NotificationSuitFuelCritical = MyStringId.GetOrCompute("NotificationSuitFuelCritical");

		/// <summary>
		/// Jetpack fuel is low
		/// </summary>
		public static readonly MyStringId NotificationSuitFuelLow = MyStringId.GetOrCompute("NotificationSuitFuelLow");

		/// <summary>
		/// Using {0}
		/// </summary>
		public static readonly MyStringId NotificationUsingWeaponType = MyStringId.GetOrCompute("NotificationUsingWeaponType");

		/// <summary>
		/// Wheel could not be placed.
		/// </summary>
		public static readonly MyStringId NotificationWheelNotPlaced = MyStringId.GetOrCompute("NotificationWheelNotPlaced");

		/// <summary>
		/// Some scripts were removed from this blueprint because you do not have Scripter permissions
		/// </summary>
		public static readonly MyStringId Notification_BlueprintScriptRemoved = MyStringId.GetOrCompute("Notification_BlueprintScriptRemoved");

		/// <summary>
		/// {0} is damaged!
		/// </summary>
		public static readonly MyStringId Notification_ControllableBlockIsDamaged = MyStringId.GetOrCompute("Notification_ControllableBlockIsDamaged");

		/// <summary>
		/// Someone else is using this ship!
		/// </summary>
		public static readonly MyStringId Notification_NoControl = MyStringId.GetOrCompute("Notification_NoControl");

		/// <summary>
		/// Autopilot enabled
		/// </summary>
		public static readonly MyStringId Notification_NoControlAutoPilot = MyStringId.GetOrCompute("Notification_NoControlAutoPilot");

		/// <summary>
		/// Grid control forbidden. Seat/Remote with higher priority is already occupied.
		/// </summary>
		public static readonly MyStringId Notification_NoControlLowerPriority = MyStringId.GetOrCompute("Notification_NoControlLowerPriority");

		/// <summary>
		/// This is not main cockpit!
		/// </summary>
		public static readonly MyStringId Notification_NoControlNotMain = MyStringId.GetOrCompute("Notification_NoControlNotMain");

		/// <summary>
		/// A connected ship has taken control
		/// </summary>
		public static readonly MyStringId Notification_NoControlOtherShip = MyStringId.GetOrCompute("Notification_NoControlOtherShip");

		/// <summary>
		/// Someone else is using this station!
		/// </summary>
		public static readonly MyStringId Notification_NoControlStation = MyStringId.GetOrCompute("Notification_NoControlStation");

		/// <summary>
		/// Piston head already exists.
		/// </summary>
		public static readonly MyStringId Notification_PistonHeadAlreadyExists = MyStringId.GetOrCompute("Notification_PistonHeadAlreadyExists");

		/// <summary>
		/// Piston head could not be placed.
		/// </summary>
		public static readonly MyStringId Notification_PistonHeadNotPlaced = MyStringId.GetOrCompute("Notification_PistonHeadNotPlaced");

		/// <summary>
		/// Wheel could not be placed. Try to remove any obstacles first.
		/// </summary>
		public static readonly MyStringId Notification_WheelNotPlaced = MyStringId.GetOrCompute("Notification_WheelNotPlaced");

		/// <summary>
		/// Number
		/// </summary>
		public static readonly MyStringId Number = MyStringId.GetOrCompute("Number");

		/// <summary>
		/// High
		/// </summary>
		public static readonly MyStringId O2High = MyStringId.GetOrCompute("O2High");

		/// <summary>
		/// Low
		/// </summary>
		public static readonly MyStringId O2Low = MyStringId.GetOrCompute("O2Low");

		/// <summary>
		/// None
		/// </summary>
		public static readonly MyStringId O2None = MyStringId.GetOrCompute("O2None");

		/// <summary>
		/// Freeze
		/// </summary>
		public static readonly MyStringId TemperatureFreeze = MyStringId.GetOrCompute("TemperatureFreeze");

		/// <summary>
		/// Cold
		/// </summary>
		public static readonly MyStringId TemperatureCold = MyStringId.GetOrCompute("TemperatureCold");

		/// <summary>
		/// Warm
		/// </summary>
		public static readonly MyStringId TemperatureWarm = MyStringId.GetOrCompute("TemperatureWarm");

		/// <summary>
		/// Hot
		/// </summary>
		public static readonly MyStringId TemperatureHot = MyStringId.GetOrCompute("TemperatureHot");

		/// <summary>
		/// Inferno
		/// </summary>
		public static readonly MyStringId TemperatureInferno = MyStringId.GetOrCompute("TemperatureInferno");

		/// <summary>
		/// OFF
		/// </summary>
		public static readonly MyStringId OFF = MyStringId.GetOrCompute("OFF");

		/// <summary>
		/// ON
		/// </summary>
		public static readonly MyStringId ON = MyStringId.GetOrCompute("ON");

		/// <summary>
		/// Open admin screen
		/// </summary>
		public static readonly MyStringId OpenAdminScreen = MyStringId.GetOrCompute("OpenAdminScreen");

		/// <summary>
		/// Open blueprint screen
		/// </summary>
		public static readonly MyStringId OpenBlueprints = MyStringId.GetOrCompute("OpenBlueprints");

		/// <summary>
		/// Open spawn screen
		/// </summary>
		public static readonly MyStringId OpenSpawnScreen = MyStringId.GetOrCompute("OpenSpawnScreen");

		/// <summary>
		/// OwnerLastLogin
		/// </summary>
		public static readonly MyStringId OwnerLastLogin = MyStringId.GetOrCompute("OwnerLastLogin");

		/// <summary>
		/// OwnerLoginTime
		/// </summary>
		public static readonly MyStringId OwnerLoginTime = MyStringId.GetOrCompute("OwnerLoginTime");

		/// <summary>
		/// OwnerName
		/// </summary>
		public static readonly MyStringId OwnerName = MyStringId.GetOrCompute("OwnerName");

		/// <summary>
		/// Oxygen or Airtightness disabled in world settings!
		/// </summary>
		public static readonly MyStringId Oxygen_Disabled = MyStringId.GetOrCompute("Oxygen_Disabled");

		/// <summary>
		/// Filled: {0}% ({1}L/{2}L)
		/// </summary>
		public static readonly MyStringId Oxygen_Filled = MyStringId.GetOrCompute("Oxygen_Filled");

		/// <summary>
		/// Room pressure: Not pressurized
		/// </summary>
		public static readonly MyStringId Oxygen_NotPressurized = MyStringId.GetOrCompute("Oxygen_NotPressurized");

		/// <summary>
		/// Room pressure:
		/// </summary>
		public static readonly MyStringId Oxygen_Pressure = MyStringId.GetOrCompute("Oxygen_Pressure");

		/// <summary>
		/// Wind Clearance: {0}
		/// </summary>
		public static readonly MyStringId Turbine_WindClearance = MyStringId.GetOrCompute("Turbine_WindClearance");

		/// <summary>
		/// Optimal
		/// </summary>
		public static readonly MyStringId Turbine_WindClearanceOptimal = MyStringId.GetOrCompute("Turbine_WindClearanceOptimal");

		/// <summary>
		/// Good
		/// </summary>
		public static readonly MyStringId Turbine_WindClearanceGood = MyStringId.GetOrCompute("Turbine_WindClearanceGood");

		/// <summary>
		/// Poor
		/// </summary>
		public static readonly MyStringId Turbine_WindClearancePoor = MyStringId.GetOrCompute("Turbine_WindClearancePoor");

		/// <summary>
		/// None
		/// </summary>
		public static readonly MyStringId Turbine_WindClearanceNone = MyStringId.GetOrCompute("Turbine_WindClearanceNone");

		/// <summary>
		/// Auto deploy
		/// </summary>
		public static readonly MyStringId Parachute_AutoDeploy = MyStringId.GetOrCompute("Parachute_AutoDeploy");

		/// <summary>
		/// Auto deploy off
		/// </summary>
		public static readonly MyStringId Parachute_AutoDeployOff = MyStringId.GetOrCompute("Parachute_AutoDeployOff");

		/// <summary>
		/// Auto deploy on
		/// </summary>
		public static readonly MyStringId Parachute_AutoDeployOn = MyStringId.GetOrCompute("Parachute_AutoDeployOn");

		/// <summary>
		/// Parachute will auto deploy at auto deploy height if descending to the ground
		/// </summary>
		public static readonly MyStringId Parachute_AutoDeployTooltip = MyStringId.GetOrCompute("Parachute_AutoDeployTooltip");

		/// <summary>
		/// Parachute Material
		/// </summary>
		public static readonly MyStringId Parachute_ConstraintItem = MyStringId.GetOrCompute("Parachute_ConstraintItem");

		/// <summary>
		/// Auto deploy height
		/// </summary>
		public static readonly MyStringId Parachute_DeployHeightTitle = MyStringId.GetOrCompute("Parachute_DeployHeightTitle");

		/// <summary>
		/// Height that the parachute will automatically deploy if auto deploy is On
		/// </summary>
		public static readonly MyStringId Parachute_DeployHeightTooltip = MyStringId.GetOrCompute("Parachute_DeployHeightTooltip");

		/// <summary>
		/// Paste object
		/// </summary>
		public static readonly MyStringId PasteObject = MyStringId.GetOrCompute("PasteObject");

		/// <summary>
		/// Like us on Facebook: www.facebook.com/SpaceEngineers
		/// </summary>
		public static readonly MyStringId Person_FB = MyStringId.GetOrCompute("Person_FB");

		/// <summary>
		/// Follow us on Twitter: twitter.com/SpaceEngineersG
		/// </summary>
		public static readonly MyStringId Person_Twitter = MyStringId.GetOrCompute("Person_Twitter");

		/// <summary>
		/// www.SpaceEngineersGame.com
		/// </summary>
		public static readonly MyStringId Person_Web = MyStringId.GetOrCompute("Person_Web");

		/// <summary>
		/// P-Gravity
		/// </summary>
		public static readonly MyStringId PGravity = MyStringId.GetOrCompute("PGravity");

		/// <summary>
		/// Pick color from cube into slot
		/// </summary>
		public static readonly MyStringId PickColorFromCube = MyStringId.GetOrCompute("PickColorFromCube");

		/// <summary>
		/// Planets
		/// </summary>
		public static readonly MyStringId Planets = MyStringId.GetOrCompute("Planets");

		/// <summary>
		/// Platinum
		/// </summary>
		public static readonly MyStringId Platinum = MyStringId.GetOrCompute("Platinum");

		/// <summary>
		/// Black
		/// </summary>
		public static readonly MyStringId PlayerCharacterColorBlack = MyStringId.GetOrCompute("PlayerCharacterColorBlack");

		/// <summary>
		/// Blue
		/// </summary>
		public static readonly MyStringId PlayerCharacterColorBlue = MyStringId.GetOrCompute("PlayerCharacterColorBlue");

		/// <summary>
		/// Shadow
		/// </summary>
		public static readonly MyStringId PlayerCharacterColorDefault = MyStringId.GetOrCompute("PlayerCharacterColorDefault");

		/// <summary>
		/// Green
		/// </summary>
		public static readonly MyStringId PlayerCharacterColorGreen = MyStringId.GetOrCompute("PlayerCharacterColorGreen");

		/// <summary>
		/// Red
		/// </summary>
		public static readonly MyStringId PlayerCharacterColorRed = MyStringId.GetOrCompute("PlayerCharacterColorRed");

		/// <summary>
		/// White
		/// </summary>
		public static readonly MyStringId PlayerCharacterColorWhite = MyStringId.GetOrCompute("PlayerCharacterColorWhite");

		/// <summary>
		/// Yellow
		/// </summary>
		public static readonly MyStringId PlayerCharacterColorYellow = MyStringId.GetOrCompute("PlayerCharacterColorYellow");

		/// <summary>
		/// Press number again to switch size
		/// </summary>
		public static readonly MyStringId PressNumberAgain = MyStringId.GetOrCompute("PressNumberAgain");

		/// <summary>
		/// List of available assemblers
		/// </summary>
		public static readonly MyStringId ProductionScreen_AssemblerList = MyStringId.GetOrCompute("ProductionScreen_AssemblerList");

		/// <summary>
		/// Show this assembler in the control panel
		/// </summary>
		public static readonly MyStringId ProductionScreen_TerminalControlScreen = MyStringId.GetOrCompute("ProductionScreen_TerminalControlScreen");

		/// <summary>
		/// Show this assembler in the inventory screen
		/// </summary>
		public static readonly MyStringId ProductionScreen_TerminalInventoryScreen = MyStringId.GetOrCompute("ProductionScreen_TerminalInventoryScreen");

		/// <summary>
		/// Create from Editor
		/// </summary>
		public static readonly MyStringId ProgrammableBlock_ButtonCreateFromEditor = MyStringId.GetOrCompute("ProgrammableBlock_ButtonCreateFromEditor");

		/// <summary>
		/// Details
		/// </summary>
		public static readonly MyStringId ProgrammableBlock_ButtonDetails = MyStringId.GetOrCompute("ProgrammableBlock_ButtonDetails");

		/// <summary>
		/// Refresh Scripts
		/// </summary>
		public static readonly MyStringId ProgrammableBlock_ButtonRefreshScripts = MyStringId.GetOrCompute("ProgrammableBlock_ButtonRefreshScripts");

		/// <summary>
		/// Rename
		/// </summary>
		public static readonly MyStringId ProgrammableBlock_ButtonRename = MyStringId.GetOrCompute("ProgrammableBlock_ButtonRename");

		/// <summary>
		/// Replace from Editor
		/// </summary>
		public static readonly MyStringId ProgrammableBlock_ButtonReplaceFromEditor = MyStringId.GetOrCompute("ProgrammableBlock_ButtonReplaceFromEditor");

		/// <summary>
		/// Code changed
		/// </summary>
		public static readonly MyStringId ProgrammableBlock_CodeChanged = MyStringId.GetOrCompute("ProgrammableBlock_CodeChanged");

		/// <summary>
		/// Remember &amp; Exit
		/// </summary>
		public static readonly MyStringId ProgrammableBlock_CodeEditor_SaveExit = MyStringId.GetOrCompute("ProgrammableBlock_CodeEditor_SaveExit");

		/// <summary>
		/// Remembers code inside editor and returns to terminal panel
		/// </summary>
		public static readonly MyStringId ProgrammableBlock_CodeEditor_SaveExit_Tooltip = MyStringId.GetOrCompute("ProgrammableBlock_CodeEditor_SaveExit_Tooltip");

		/// <summary>
		/// Code Editor
		/// </summary>
		public static readonly MyStringId ProgrammableBlock_CodeEditor_Title = MyStringId.GetOrCompute("ProgrammableBlock_CodeEditor_Title");

		/// <summary>
		/// The constructor, called only once every session and always before any other method is called. Use it to initialize your script.       The constructor is optional and can be removed if not needed.  It's recommended to set RuntimeInfo.UpdateFrequency  here, which will allow your script to run itself without a  timer block.
		/// </summary>
		public static readonly MyStringId ProgrammableBlock_DefaultScript_Constructor = MyStringId.GetOrCompute("ProgrammableBlock_DefaultScript_Constructor");

		/// <summary>
		/// The main entry point of the script, invoked every time one of the programmable block's Run actions are invoked, or the script updates itself. The updateSource argument describes where the update came from.  The method itself is required, but the arguments above can be removed if not needed.
		/// </summary>
		public static readonly MyStringId ProgrammableBlock_DefaultScript_Main = MyStringId.GetOrCompute("ProgrammableBlock_DefaultScript_Main");

		/// <summary>
		/// Called when the program needs to save its state. Use this method to save your state to the Storage field or some other means.   This method is optional and can be removed if not needed.
		/// </summary>
		public static readonly MyStringId ProgrammableBlock_DefaultScript_Save = MyStringId.GetOrCompute("ProgrammableBlock_DefaultScript_Save");

		/// <summary>
		/// Are you sure you want to delete this script ?
		/// </summary>
		public static readonly MyStringId ProgrammableBlock_DeleteScriptDialogText = MyStringId.GetOrCompute("ProgrammableBlock_DeleteScriptDialogText");

		/// <summary>
		/// Open screen with list of available scripts
		/// </summary>
		public static readonly MyStringId ProgrammableBlock_Editor_BrowseWorkshop_Tooltip = MyStringId.GetOrCompute("ProgrammableBlock_Editor_BrowseWorkshop_Tooltip");

		/// <summary>
		/// Character Limit :
		/// </summary>
		public static readonly MyStringId ProgrammableBlock_Editor_CharacterLimit = MyStringId.GetOrCompute("ProgrammableBlock_Editor_CharacterLimit");

		/// <summary>
		/// Check Code
		/// </summary>
		public static readonly MyStringId ProgrammableBlock_Editor_CheckCode = MyStringId.GetOrCompute("ProgrammableBlock_Editor_CheckCode");

<<<<<<< HEAD
		/// <summary>
		/// Checking Code
		/// </summary>
		public static readonly MyStringId ProgrammableBlock_Editor_CheckingCode = MyStringId.GetOrCompute("ProgrammableBlock_Editor_CheckingCode");

		/// <summary>
		/// Checks code inside editor for errors
		/// </summary>
=======
		public static readonly MyStringId ProgrammableBlock_Editor_CheckingCode = MyStringId.GetOrCompute("ProgrammableBlock_Editor_CheckingCode");

>>>>>>> d46cf8619665219cc163a7b28984ced59ed9470d
		public static readonly MyStringId ProgrammableBlock_Editor_CheckCode_Tooltip = MyStringId.GetOrCompute("ProgrammableBlock_Editor_CheckCode_Tooltip");

		/// <summary>
		/// Compilation failed
		/// </summary>
		public static readonly MyStringId ProgrammableBlock_Editor_CompilationFailed = MyStringId.GetOrCompute("ProgrammableBlock_Editor_CompilationFailed");

<<<<<<< HEAD
		/// <summary>
		/// Script compilation and execution is not supported.
		/// </summary>
		public static readonly MyStringId ProgrammableBlock_Editor_NotSupported = MyStringId.GetOrCompute("ProgrammableBlock_Editor_NotSupported");

		/// <summary>
		/// Line {0} : {1}
		/// </summary>
=======
		public static readonly MyStringId ProgrammableBlock_Editor_NotSupported = MyStringId.GetOrCompute("ProgrammableBlock_Editor_NotSupported");

>>>>>>> d46cf8619665219cc163a7b28984ced59ed9470d
		public static readonly MyStringId ProgrammableBlock_Editor_CompilationFailedErrorFormat = MyStringId.GetOrCompute("ProgrammableBlock_Editor_CompilationFailedErrorFormat");

		/// <summary>
		/// Error list
		/// </summary>
		public static readonly MyStringId ProgrammableBlock_Editor_CompilationFailedErrorList = MyStringId.GetOrCompute("ProgrammableBlock_Editor_CompilationFailedErrorList");

		/// <summary>
		/// Compilation successful.
		/// </summary>
		public static readonly MyStringId ProgrammableBlock_Editor_CompilationOk = MyStringId.GetOrCompute("ProgrammableBlock_Editor_CompilationOk");

		/// <summary>
		/// Warning list
		/// </summary>
		public static readonly MyStringId ProgrammableBlock_Editor_CompilationOkWarningList = MyStringId.GetOrCompute("ProgrammableBlock_Editor_CompilationOkWarningList");

		/// <summary>
		/// Help
		/// </summary>
		public static readonly MyStringId ProgrammableBlock_Editor_Help = MyStringId.GetOrCompute("ProgrammableBlock_Editor_Help");

		/// <summary>
		/// Opens workshop page with description about in-game programming
		/// </summary>
		public static readonly MyStringId ProgrammableBlock_Editor_HelpTooltip = MyStringId.GetOrCompute("ProgrammableBlock_Editor_HelpTooltip");

		/// <summary>
		/// Line : {0} / {1}
		/// </summary>
		public static readonly MyStringId ProgrammableBlock_Editor_LineNo = MyStringId.GetOrCompute("ProgrammableBlock_Editor_LineNo");

		/// <summary>
		/// Remember code
		/// </summary>
		public static readonly MyStringId ProgrammableBlock_Editor_RememberCode = MyStringId.GetOrCompute("ProgrammableBlock_Editor_RememberCode");

		/// <summary>
		/// Remember current script and leave editor window open
		/// </summary>
		public static readonly MyStringId ProgrammableBlock_Editor_RememberCode_Tooltip = MyStringId.GetOrCompute("ProgrammableBlock_Editor_RememberCode_Tooltip");

		/// <summary>
		/// Text is too long. It won't be saved.
		/// </summary>
		public static readonly MyStringId ProgrammableBlock_Editor_TextTooLong = MyStringId.GetOrCompute("ProgrammableBlock_Editor_TextTooLong");

		/// <summary>
		/// Error: This world is not in experimental mode.
		/// </summary>
		public static readonly MyStringId ProgrammableBlock_Error_NotExperimental = MyStringId.GetOrCompute("ProgrammableBlock_Error_NotExperimental");

		/// <summary>
		/// Error: This world has disabled scripts.
		/// </summary>
		public static readonly MyStringId ProgrammableBlock_Error_ScriptsDisabled = MyStringId.GetOrCompute("ProgrammableBlock_Error_ScriptsDisabled");

		/// <summary>
		/// Program is already running.
		/// </summary>
		public static readonly MyStringId ProgrammableBlock_Exception_AllreadyRunning = MyStringId.GetOrCompute("ProgrammableBlock_Exception_AllreadyRunning");

		/// <summary>
		/// Caught exception during execution of script:
		/// </summary>
		public static readonly MyStringId ProgrammableBlock_Exception_ExceptionCaught = MyStringId.GetOrCompute("ProgrammableBlock_Exception_ExceptionCaught");

		/// <summary>
		/// Script execution halted temporarily. The combined execution between a calling programmable block and this script became too complex. This script has not been terminated, but the calling script has.
		/// </summary>
		public static readonly MyStringId ProgrammableBlock_Exception_NestedTooComplex = MyStringId.GetOrCompute("ProgrammableBlock_Exception_NestedTooComplex");

		/// <summary>
		/// Assembly not found. Please compile script.
		/// </summary>
		public static readonly MyStringId ProgrammableBlock_Exception_NoAssembly = MyStringId.GetOrCompute("ProgrammableBlock_Exception_NoAssembly");

		/// <summary>
		/// Main method not found. Please add Main method into script.
		/// </summary>
		public static readonly MyStringId ProgrammableBlock_Exception_NoMain = MyStringId.GetOrCompute("ProgrammableBlock_Exception_NoMain");

		/// <summary>
		/// In-game scripts are disabled for this world
		/// </summary>
		public static readonly MyStringId ProgrammableBlock_Exception_NotAllowed = MyStringId.GetOrCompute("ProgrammableBlock_Exception_NotAllowed");

		/// <summary>
		/// This program has no valid constructor.
		/// </summary>
		public static readonly MyStringId ProgrammableBlock_Exception_NoValidConstructor = MyStringId.GetOrCompute("ProgrammableBlock_Exception_NoValidConstructor");

		/// <summary>
		/// Ownership of programmable block changed. Please recompile program.
		/// </summary>
		public static readonly MyStringId ProgrammableBlock_Exception_Ownershipchanged = MyStringId.GetOrCompute("ProgrammableBlock_Exception_Ownershipchanged");

		/// <summary>
		/// Script execution terminated, script is too complex. Please edit and rebuild script.
		/// </summary>
		public static readonly MyStringId ProgrammableBlock_Exception_TooComplex = MyStringId.GetOrCompute("ProgrammableBlock_Exception_TooComplex");

		/// <summary>
		/// Enter new name
		/// </summary>
		public static readonly MyStringId ProgrammableBlock_NewScriptName = MyStringId.GetOrCompute("ProgrammableBlock_NewScriptName");

		/// <summary>
		///
		/// </summary>
		public static readonly MyStringId ProgrammableBlock_OpenInWorkshop = MyStringId.GetOrCompute("ProgrammableBlock_OpenInWorkshop");

		/// <summary>
		/// Do you want to publish this script?
		/// </summary>
		public static readonly MyStringId ProgrammableBlock_PublishScriptDialogText = MyStringId.GetOrCompute("ProgrammableBlock_PublishScriptDialogText");

<<<<<<< HEAD
		/// <summary>
		/// PUBLISHED
		/// </summary>
		public static readonly MyStringId WorkshopItemPublished = MyStringId.GetOrCompute("WorkshopItemPublished");

		/// <summary>
		/// SCRIPT PUBLISHED
		/// </summary>
=======
		public static readonly MyStringId WorkshopItemPublished = MyStringId.GetOrCompute("WorkshopItemPublished");

>>>>>>> d46cf8619665219cc163a7b28984ced59ed9470d
		public static readonly MyStringId ProgrammableBlock_PublishScriptPublished = MyStringId.GetOrCompute("ProgrammableBlock_PublishScriptPublished");

		/// <summary>
		/// Are you sure to replace existing script with new one from editor ?
		/// </summary>
		public static readonly MyStringId ProgrammableBlock_ReplaceScriptDialogText = MyStringId.GetOrCompute("ProgrammableBlock_ReplaceScriptDialogText");

		/// <summary>
		/// Script with the name  {0} already exists. Do you want to replace it?
		/// </summary>
		public static readonly MyStringId ProgrammableBlock_ReplaceScriptNameDialogText = MyStringId.GetOrCompute("ProgrammableBlock_ReplaceScriptNameDialogText");

		/// <summary>
		/// Replace
		/// </summary>
		public static readonly MyStringId ProgrammableBlock_ReplaceScriptNameDialogTitle = MyStringId.GetOrCompute("ProgrammableBlock_ReplaceScriptNameDialogTitle");

		/// <summary>
		/// Cannot rename script because it is used by another process.
		/// </summary>
		public static readonly MyStringId ProgrammableBlock_ReplaceScriptNameUsed = MyStringId.GetOrCompute("ProgrammableBlock_ReplaceScriptNameUsed");

		/// <summary>
		/// Do you want to remember changes ?
		/// </summary>
		public static readonly MyStringId ProgrammableBlock_SaveChanges = MyStringId.GetOrCompute("ProgrammableBlock_SaveChanges");

		/// <summary>
		/// Cannot find the script file
		/// </summary>
		public static readonly MyStringId ProgrammableBlock_ScriptNotFound = MyStringId.GetOrCompute("ProgrammableBlock_ScriptNotFound");

		/// <summary>
		/// Scripts Screen
		/// </summary>
		public static readonly MyStringId ProgrammableBlock_ScriptsScreenTitle = MyStringId.GetOrCompute("ProgrammableBlock_ScriptsScreenTitle");

		/// <summary>
		/// It seems that your system does not support DirectX 11, game will load scenario with no planets
		/// </summary>
		public static readonly MyStringId QuickstartDX11NotAvailable = MyStringId.GetOrCompute("QuickstartDX11NotAvailable");

		/// <summary>
		/// Please restart the game to finish switching to DX11
		/// </summary>
		public static readonly MyStringId QuickstartDX11PleaseRestartGame = MyStringId.GetOrCompute("QuickstartDX11PleaseRestartGame");

		/// <summary>
		/// Please switch to DirectX 11 to play a planet scenario
		/// </summary>
		public static readonly MyStringId QuickstartDX11SwitchQuestion = MyStringId.GetOrCompute("QuickstartDX11SwitchQuestion");

		/// <summary>
		/// It seems that your system does not support DirectX 11, please select scenario with no planets
		/// </summary>
		public static readonly MyStringId QuickstartNoDx9SelectDifferent = MyStringId.GetOrCompute("QuickstartNoDx9SelectDifferent");

		/// <summary>
		/// Game will load scenario with no planets
		/// </summary>
		public static readonly MyStringId QuickstartNoPlanets = MyStringId.GetOrCompute("QuickstartNoPlanets");

		/// <summary>
		/// Please select scenario with no planets
		/// </summary>
		public static readonly MyStringId QuickstartSelectDifferent = MyStringId.GetOrCompute("QuickstartSelectDifferent");

		/// <summary>
		/// Theodore Von Karman
		/// </summary>
		public static readonly MyStringId Quote00Author = MyStringId.GetOrCompute("Quote00Author");

		/// <summary>
		/// Scientists discover the world that exists; Engineers create the world that never was.
		/// </summary>
		public static readonly MyStringId Quote00Text = MyStringId.GetOrCompute("Quote00Text");

		/// <summary>
		/// Max Planck
		/// </summary>
		public static readonly MyStringId Quote01Author = MyStringId.GetOrCompute("Quote01Author");

		/// <summary>
		/// Scientific discovery and scientific knowledge have been achieved only by those who have gone in pursuit of it without any practical purpose whatsoever in view.
		/// </summary>
		public static readonly MyStringId Quote01Text = MyStringId.GetOrCompute("Quote01Text");

		/// <summary>
		/// Archimedes
		/// </summary>
		public static readonly MyStringId Quote02Author = MyStringId.GetOrCompute("Quote02Author");

		/// <summary>
		/// Give me a lever long enough and a fulcrum on which to place it, and I shall move the world.
		/// </summary>
		public static readonly MyStringId Quote02Text = MyStringId.GetOrCompute("Quote02Text");

		/// <summary>
		/// Arthur C. Clarke
		/// </summary>
		public static readonly MyStringId Quote03Author = MyStringId.GetOrCompute("Quote03Author");

		/// <summary>
		/// When a distinguished but elderly scientist states that something is possible, he is almost certainly right. When he states that something is impossible, he is very probably wrong.
		/// </summary>
		public static readonly MyStringId Quote03Text = MyStringId.GetOrCompute("Quote03Text");

		/// <summary>
		/// Bertrand Russell
		/// </summary>
		public static readonly MyStringId Quote04Author = MyStringId.GetOrCompute("Quote04Author");

		/// <summary>
		/// Science may set limits to knowledge, but should not set limits to imagination.
		/// </summary>
		public static readonly MyStringId Quote04Text = MyStringId.GetOrCompute("Quote04Text");

		/// <summary>
		/// Indiana Jones
		/// </summary>
		public static readonly MyStringId Quote05Author = MyStringId.GetOrCompute("Quote05Author");

		/// <summary>
		/// Nothing shocks me. I'm a scientist.
		/// </summary>
		public static readonly MyStringId Quote05Text = MyStringId.GetOrCompute("Quote05Text");

		/// <summary>
		/// Immanuel Kant
		/// </summary>
		public static readonly MyStringId Quote06Author = MyStringId.GetOrCompute("Quote06Author");

		/// <summary>
		/// Science is organized knowledge. Wisdom is organized life.
		/// </summary>
		public static readonly MyStringId Quote06Text = MyStringId.GetOrCompute("Quote06Text");

		/// <summary>
		/// Max Planck
		/// </summary>
		public static readonly MyStringId Quote07Author = MyStringId.GetOrCompute("Quote07Author");

		/// <summary>
		/// A new scientific truth does not triumph by convincing its opponents and making them see the light, but rather because its opponents eventually die, and a new generation grows up that is familiar with it.
		/// </summary>
		public static readonly MyStringId Quote07Text = MyStringId.GetOrCompute("Quote07Text");

		/// <summary>
		/// Benjamin Franklin
		/// </summary>
		public static readonly MyStringId Quote08Author = MyStringId.GetOrCompute("Quote08Author");

		/// <summary>
		/// An investment in knowledge pays the best interest.
		/// </summary>
		public static readonly MyStringId Quote08Text = MyStringId.GetOrCompute("Quote08Text");

		/// <summary>
		/// Albert Einstein
		/// </summary>
		public static readonly MyStringId Quote09Author = MyStringId.GetOrCompute("Quote09Author");

		/// <summary>
		/// Anyone who has never made a mistake has never tried anything new.
		/// </summary>
		public static readonly MyStringId Quote09Text = MyStringId.GetOrCompute("Quote09Text");

		/// <summary>
		/// Leonardo da Vinci
		/// </summary>
		public static readonly MyStringId Quote10Author = MyStringId.GetOrCompute("Quote10Author");

		/// <summary>
		/// Nature never breaks her own laws.
		/// </summary>
		public static readonly MyStringId Quote10Text = MyStringId.GetOrCompute("Quote10Text");

		/// <summary>
		/// Leonardo da Vinci
		/// </summary>
		public static readonly MyStringId Quote11Author = MyStringId.GetOrCompute("Quote11Author");

		/// <summary>
		/// Simplicity is the ultimate sophistication.
		/// </summary>
		public static readonly MyStringId Quote11Text = MyStringId.GetOrCompute("Quote11Text");

		/// <summary>
		/// Leonardo da Vinci
		/// </summary>
		public static readonly MyStringId Quote12Author = MyStringId.GetOrCompute("Quote12Author");

		/// <summary>
		/// Where there is shouting, there is no true knowledge.
		/// </summary>
		public static readonly MyStringId Quote12Text = MyStringId.GetOrCompute("Quote12Text");

		/// <summary>
		/// Leonardo da Vinci
		/// </summary>
		public static readonly MyStringId Quote13Author = MyStringId.GetOrCompute("Quote13Author");

		/// <summary>
		/// I have offended God and mankind because my work didn't reach the quality it should have.
		/// </summary>
		public static readonly MyStringId Quote13Text = MyStringId.GetOrCompute("Quote13Text");

		/// <summary>
		/// Leonardo da Vinci
		/// </summary>
		public static readonly MyStringId Quote14Author = MyStringId.GetOrCompute("Quote14Author");

		/// <summary>
		/// All our knowledge has its origins in our perceptions.
		/// </summary>
		public static readonly MyStringId Quote14Text = MyStringId.GetOrCompute("Quote14Text");

		/// <summary>
		/// Galileo Galilei
		/// </summary>
		public static readonly MyStringId Quote15Author = MyStringId.GetOrCompute("Quote15Author");

		/// <summary>
		/// By denying scientific principles, one may maintain any paradox.
		/// </summary>
		public static readonly MyStringId Quote15Text = MyStringId.GetOrCompute("Quote15Text");

		/// <summary>
		/// Galileo Galilei
		/// </summary>
		public static readonly MyStringId Quote16Author = MyStringId.GetOrCompute("Quote16Author");

		/// <summary>
		/// Mathematics is the language in which God has written the universe.
		/// </summary>
		public static readonly MyStringId Quote16Text = MyStringId.GetOrCompute("Quote16Text");

		/// <summary>
		/// Galileo Galilei
		/// </summary>
		public static readonly MyStringId Quote17Author = MyStringId.GetOrCompute("Quote17Author");

		/// <summary>
		/// If I were again beginning my studies, I would follow the advice of Plato and start with mathematics.
		/// </summary>
		public static readonly MyStringId Quote17Text = MyStringId.GetOrCompute("Quote17Text");

		/// <summary>
		/// Johann W. Goethe
		/// </summary>
		public static readonly MyStringId Quote18Author = MyStringId.GetOrCompute("Quote18Author");

		/// <summary>
		/// We see only what we know.
		/// </summary>
		public static readonly MyStringId Quote18Text = MyStringId.GetOrCompute("Quote18Text");

		/// <summary>
		/// Niels H. D. Bohr
		/// </summary>
		public static readonly MyStringId Quote19Author = MyStringId.GetOrCompute("Quote19Author");

		/// <summary>
		/// If anybody says he can think about quantum problems without getting giddy, that only shows he has not understood the first thing about them.
		/// </summary>
		public static readonly MyStringId Quote19Text = MyStringId.GetOrCompute("Quote19Text");

		/// <summary>
		/// Ancient paradox
		/// </summary>
		public static readonly MyStringId Quote20Author = MyStringId.GetOrCompute("Quote20Author");

		/// <summary>
		/// Only one thing is certain - that is, nothing is certain. If this statement is true, it is also false.
		/// </summary>
		public static readonly MyStringId Quote20Text = MyStringId.GetOrCompute("Quote20Text");

		/// <summary>
		/// Richard Feynman
		/// </summary>
		public static readonly MyStringId Quote21Author = MyStringId.GetOrCompute("Quote21Author");

		/// <summary>
		/// Scientists are explorers. Philosophers are tourists.
		/// </summary>
		public static readonly MyStringId Quote21Text = MyStringId.GetOrCompute("Quote21Text");

		/// <summary>
		/// Walter Bagehot
		/// </summary>
		public static readonly MyStringId Quote22Author = MyStringId.GetOrCompute("Quote22Author");

		/// <summary>
		/// A great pleasure in life is doing what people say you cannot do.
		/// </summary>
		public static readonly MyStringId Quote22Text = MyStringId.GetOrCompute("Quote22Text");

		/// <summary>
		/// Thomas A. Edison
		/// </summary>
		public static readonly MyStringId Quote23Author = MyStringId.GetOrCompute("Quote23Author");

		/// <summary>
		/// Genius is one percent inspiration and ninety-nine percent perspiration.
		/// </summary>
		public static readonly MyStringId Quote23Text = MyStringId.GetOrCompute("Quote23Text");

		/// <summary>
		/// Socrates
		/// </summary>
		public static readonly MyStringId Quote24Author = MyStringId.GetOrCompute("Quote24Author");

		/// <summary>
		/// I know one thing: that I know nothing.
		/// </summary>
		public static readonly MyStringId Quote24Text = MyStringId.GetOrCompute("Quote24Text");

		/// <summary>
		/// Arthur C. Clarke
		/// </summary>
		public static readonly MyStringId Quote25Author = MyStringId.GetOrCompute("Quote25Author");

		/// <summary>
		/// Any sufficiently advanced technology is indistinguishable from magic.
		/// </summary>
		public static readonly MyStringId Quote25Text = MyStringId.GetOrCompute("Quote25Text");

		/// <summary>
		/// William Gibson
		/// </summary>
		public static readonly MyStringId Quote26Author = MyStringId.GetOrCompute("Quote26Author");

		/// <summary>
		/// When you want to know how things really work, study them when they're coming apart.
		/// </summary>
		public static readonly MyStringId Quote26Text = MyStringId.GetOrCompute("Quote26Text");

		/// <summary>
		/// Scott Adams
		/// </summary>
		public static readonly MyStringId Quote27Author = MyStringId.GetOrCompute("Quote27Author");

		/// <summary>
		/// Engineers like to solve problems. If there are no problems handily available, they will create their own problems.
		/// </summary>
		public static readonly MyStringId Quote27Text = MyStringId.GetOrCompute("Quote27Text");

		/// <summary>
		/// Robert A. Heinlein
		/// </summary>
		public static readonly MyStringId Quote28Author = MyStringId.GetOrCompute("Quote28Author");

		/// <summary>
		/// One man's "magic" is another man's engineering. "Supernatural" is a null word.
		/// </summary>
		public static readonly MyStringId Quote28Text = MyStringId.GetOrCompute("Quote28Text");

		/// <summary>
		/// Freeman Dyson
		/// </summary>
		public static readonly MyStringId Quote29Author = MyStringId.GetOrCompute("Quote29Author");

		/// <summary>
		/// A good scientist is a person with original ideas. A good engineer is a person who makes a design that works with as few original ideas as possible. There are no prima donnas in engineering.
		/// </summary>
		public static readonly MyStringId Quote29Text = MyStringId.GetOrCompute("Quote29Text");

		/// <summary>
		/// Freeman Dyson
		/// </summary>
		public static readonly MyStringId Quote30Author = MyStringId.GetOrCompute("Quote30Author");

		/// <summary>
		/// Aviation is the branch of engineering that is least forgiving of mistakes.
		/// </summary>
		public static readonly MyStringId Quote30Text = MyStringId.GetOrCompute("Quote30Text");

		/// <summary>
		/// Wikipedia, 2077
		/// </summary>
		public static readonly MyStringId Quote31Author = MyStringId.GetOrCompute("Quote31Author");

		/// <summary>
		/// A space engineer is a professional practitioner who uses scientific knowledge, mathematics, physics, astronomy, propulsion technology, materials science, structural analysis, manufacturing and ingenuity to solve practical problems in space.
		/// </summary>
		public static readonly MyStringId Quote31Text = MyStringId.GetOrCompute("Quote31Text");

		/// <summary>
		/// Wikipedia, 2077
		/// </summary>
		public static readonly MyStringId Quote32Author = MyStringId.GetOrCompute("Quote32Author");

		/// <summary>
		/// Space engineers design materials, structures, and systems while considering the limitations imposed by practicality, regulation, safety, ethicality and cost.
		/// </summary>
		public static readonly MyStringId Quote32Text = MyStringId.GetOrCompute("Quote32Text");

		/// <summary>
		/// Wikipedia, 2077
		/// </summary>
		public static readonly MyStringId Quote33Author = MyStringId.GetOrCompute("Quote33Author");

		/// <summary>
		/// Space engineers are grounded in applied sciences, and their work in research and development is distinct from the basic research focus of space scientists.
		/// </summary>
		public static readonly MyStringId Quote33Text = MyStringId.GetOrCompute("Quote33Text");

		/// <summary>
		/// Wikipedia, 2077
		/// </summary>
		public static readonly MyStringId Quote34Author = MyStringId.GetOrCompute("Quote34Author");

		/// <summary>
		/// In war times, space engineering involves military engineering as well. Such tasks typically include construction and demolition tasks under combat conditions.
		/// </summary>
		public static readonly MyStringId Quote34Text = MyStringId.GetOrCompute("Quote34Text");

		/// <summary>
		/// Wikipedia, 2077
		/// </summary>
		public static readonly MyStringId Quote35Author = MyStringId.GetOrCompute("Quote35Author");

		/// <summary>
		/// Space engineers are in a high demand, especially since the Second Space Race of 2029.
		/// </summary>
		public static readonly MyStringId Quote35Text = MyStringId.GetOrCompute("Quote35Text");

		/// <summary>
		/// Wikipedia, 2077
		/// </summary>
		public static readonly MyStringId Quote36Author = MyStringId.GetOrCompute("Quote36Author");

		/// <summary>
		/// Space engineers take pride for their ability to get the job done right - no matter how big, how complex, or how remote.
		/// </summary>
		public static readonly MyStringId Quote36Text = MyStringId.GetOrCompute("Quote36Text");

		/// <summary>
		/// Wikipedia, 2077
		/// </summary>
		public static readonly MyStringId Quote37Author = MyStringId.GetOrCompute("Quote37Author");

		/// <summary>
		/// The word engineer is derived from the Latin roots 'ingeniare' ("to contrive, devise") and 'ingenium' ("cleverness").
		/// </summary>
		public static readonly MyStringId Quote37Text = MyStringId.GetOrCompute("Quote37Text");

		/// <summary>
		/// Anonym
		/// </summary>
		public static readonly MyStringId Quote38Author = MyStringId.GetOrCompute("Quote38Author");

		/// <summary>
		/// To the optimist, the glass is half full. To the pessimist, the glass is half empty. To the engineer, the glass is twice as big as it needs to be.
		/// </summary>
		public static readonly MyStringId Quote38Text = MyStringId.GetOrCompute("Quote38Text");

		/// <summary>
		/// Albert Einstein
		/// </summary>
		public static readonly MyStringId Quote39Author = MyStringId.GetOrCompute("Quote39Author");

		/// <summary>
		/// Scientists investigate that which already is; engineers create that which has never been.
		/// </summary>
		public static readonly MyStringId Quote39Text = MyStringId.GetOrCompute("Quote39Text");

		/// <summary>
		/// U.S. Army Ordnance
		/// </summary>
		public static readonly MyStringId Quote40Author = MyStringId.GetOrCompute("Quote40Author");

		/// <summary>
		/// Tracers work both ways.
		/// </summary>
		public static readonly MyStringId Quote40Text = MyStringId.GetOrCompute("Quote40Text");

		/// <summary>
		/// USAF Ammo Troop
		/// </summary>
		public static readonly MyStringId Quote41Author = MyStringId.GetOrCompute("Quote41Author");

		/// <summary>
		/// If you see a bomb technician running, follow him.
		/// </summary>
		public static readonly MyStringId Quote41Text = MyStringId.GetOrCompute("Quote41Text");

		/// <summary>
		/// Anonym
		/// </summary>
		public static readonly MyStringId Quote42Author = MyStringId.GetOrCompute("Quote42Author");

		/// <summary>
		/// The only time you have too much fuel is when you're on fire.
		/// </summary>
		public static readonly MyStringId Quote42Text = MyStringId.GetOrCompute("Quote42Text");

		/// <summary>
		/// Anonym
		/// </summary>
		public static readonly MyStringId Quote43Author = MyStringId.GetOrCompute("Quote43Author");

		/// <summary>
		/// Never trade luck for skill.
		/// </summary>
		public static readonly MyStringId Quote43Text = MyStringId.GetOrCompute("Quote43Text");

		/// <summary>
		/// Jon McBride
		/// </summary>
		public static readonly MyStringId Quote44Author = MyStringId.GetOrCompute("Quote44Author");

		/// <summary>
		/// A pilot who doesn't have any fear probably isn't flying his plane to its maximum.
		/// </summary>
		public static readonly MyStringId Quote44Text = MyStringId.GetOrCompute("Quote44Text");

		/// <summary>
		/// Alexander Calder
		/// </summary>
		public static readonly MyStringId Quote45Author = MyStringId.GetOrCompute("Quote45Author");

		/// <summary>
		/// To an engineer, good enough means perfect. With an artist, there's no such thing as perfect.
		/// </summary>
		public static readonly MyStringId Quote45Text = MyStringId.GetOrCompute("Quote45Text");

		/// <summary>
		/// Buzz Aldrin
		/// </summary>
		public static readonly MyStringId Quote46Author = MyStringId.GetOrCompute("Quote46Author");

		/// <summary>
		/// Mars is there, waiting to be reached.
		/// </summary>
		public static readonly MyStringId Quote46Text = MyStringId.GetOrCompute("Quote46Text");

		/// <summary>
		/// Neil Armstrong
		/// </summary>
		public static readonly MyStringId Quote47Author = MyStringId.GetOrCompute("Quote47Author");

		/// <summary>
		/// This is one small step for a man, one giant leap for mankind.
		/// </summary>
		public static readonly MyStringId Quote47Text = MyStringId.GetOrCompute("Quote47Text");

		/// <summary>
		/// Yuri Gagarin
		/// </summary>
		public static readonly MyStringId Quote48Author = MyStringId.GetOrCompute("Quote48Author");

		/// <summary>
		/// I see Earth! It is so beautiful!
		/// </summary>
		public static readonly MyStringId Quote48Text = MyStringId.GetOrCompute("Quote48Text");

		/// <summary>
		/// Yuri Gagarin
		/// </summary>
		public static readonly MyStringId Quote49Author = MyStringId.GetOrCompute("Quote49Author");

		/// <summary>
		/// I could have gone on flying through space forever.
		/// </summary>
		public static readonly MyStringId Quote49Text = MyStringId.GetOrCompute("Quote49Text");

		/// <summary>
		/// Michael Collins
		/// </summary>
		public static readonly MyStringId Quote50Author = MyStringId.GetOrCompute("Quote50Author");

		/// <summary>
		/// To go places and do things that have never been done before - that's what living is all about.
		/// </summary>
		public static readonly MyStringId Quote50Text = MyStringId.GetOrCompute("Quote50Text");

		/// <summary>
		/// Ralph W. Emerson
		/// </summary>
		public static readonly MyStringId Quote51Author = MyStringId.GetOrCompute("Quote51Author");

		/// <summary>
		/// Do not go where the path may lead, go instead where there is no path and leave a trail.
		/// </summary>
		public static readonly MyStringId Quote51Text = MyStringId.GetOrCompute("Quote51Text");

		/// <summary>
		/// Yuri Gagarin
		/// </summary>
		public static readonly MyStringId Quote52Author = MyStringId.GetOrCompute("Quote52Author");

		/// <summary>
		/// To be the first to enter the cosmos, to engage, single-handed, in an unprecedented duel with nature - could one dream of anything more?
		/// </summary>
		public static readonly MyStringId Quote52Text = MyStringId.GetOrCompute("Quote52Text");

		/// <summary>
		/// Yuri Gagarin
		/// </summary>
		public static readonly MyStringId Quote53Author = MyStringId.GetOrCompute("Quote53Author");

		/// <summary>
		/// The path of a cosmonaut is not an easy, triumphant march to glory. You have to get to know the meaning not just of joy but also of grief, before being allowed in the spacecraft cabin.
		/// </summary>
		public static readonly MyStringId Quote53Text = MyStringId.GetOrCompute("Quote53Text");

		/// <summary>
		/// Robert H. Goddard
		/// </summary>
		public static readonly MyStringId Quote54Author = MyStringId.GetOrCompute("Quote54Author");

		/// <summary>
		/// The dreams of yesterday are the hopes of today and the reality of tomorrow.
		/// </summary>
		public static readonly MyStringId Quote54Text = MyStringId.GetOrCompute("Quote54Text");

		/// <summary>
		/// Gene Kranz
		/// </summary>
		public static readonly MyStringId Quote55Author = MyStringId.GetOrCompute("Quote55Author");

		/// <summary>
		/// Failure is not an option.
		/// </summary>
		public static readonly MyStringId Quote55Text = MyStringId.GetOrCompute("Quote55Text");

		/// <summary>
		/// Albert Einstein
		/// </summary>
		public static readonly MyStringId Quote56Author = MyStringId.GetOrCompute("Quote56Author");

		/// <summary>
		/// No amount of experimentation can ever prove me right; a single experiment can prove me wrong.
		/// </summary>
		public static readonly MyStringId Quote56Text = MyStringId.GetOrCompute("Quote56Text");

		/// <summary>
		/// George B. Shaw
		/// </summary>
		public static readonly MyStringId Quote57Author = MyStringId.GetOrCompute("Quote57Author");

		/// <summary>
		/// Science never solves a problem without creating ten more.
		/// </summary>
		public static readonly MyStringId Quote57Text = MyStringId.GetOrCompute("Quote57Text");

		/// <summary>
		/// The first law of thermodynamics
		/// </summary>
		public static readonly MyStringId Quote58Author = MyStringId.GetOrCompute("Quote58Author");

		/// <summary>
		/// The law of conservation of energy states that energy can be neither created nor destroyed. However, energy can change forms, and energy can flow from one place to another. The total energy of an isolated system remains the same.
		/// </summary>
		public static readonly MyStringId Quote58Text = MyStringId.GetOrCompute("Quote58Text");

		/// <summary>
		/// The first law of thermodynamics
		/// </summary>
		public static readonly MyStringId Quote59Author = MyStringId.GetOrCompute("Quote59Author");

		/// <summary>
		/// The flow of heat is a form of energy transfer. In other words, a quantity of heat that flows from a hot body to a cold one can be expressed as an amount of energy being transferred from the hot body to the cold one.
		/// </summary>
		public static readonly MyStringId Quote59Text = MyStringId.GetOrCompute("Quote59Text");

		/// <summary>
		/// Newton's first law
		/// </summary>
		public static readonly MyStringId Quote60Author = MyStringId.GetOrCompute("Quote60Author");

		/// <summary>
		/// Every body persists in its state of being at rest or of moving uniformly straight forward, except insofar as it is compelled to change its state by force impressed.
		/// </summary>
		public static readonly MyStringId Quote60Text = MyStringId.GetOrCompute("Quote60Text");

		/// <summary>
		/// Newton's first law
		/// </summary>
		public static readonly MyStringId Quote61Author = MyStringId.GetOrCompute("Quote61Author");

		/// <summary>
		/// An object that is at rest will stay at rest unless an external force acts upon it.
		/// </summary>
		public static readonly MyStringId Quote61Text = MyStringId.GetOrCompute("Quote61Text");

		/// <summary>
		/// Newton's first law
		/// </summary>
		public static readonly MyStringId Quote62Author = MyStringId.GetOrCompute("Quote62Author");

		/// <summary>
		/// An object that is in motion will not change its velocity unless an external force acts upon it.
		/// </summary>
		public static readonly MyStringId Quote62Text = MyStringId.GetOrCompute("Quote62Text");

		/// <summary>
		/// Newton's second law
		/// </summary>
		public static readonly MyStringId Quote63Author = MyStringId.GetOrCompute("Quote63Author");

		/// <summary>
		/// The acceleration of a body is directly proportional to, and in the same direction as, the net force acting on the body, and inversely proportional to its mass.
		/// </summary>
		public static readonly MyStringId Quote63Text = MyStringId.GetOrCompute("Quote63Text");

		/// <summary>
		/// Newton's third law
		/// </summary>
		public static readonly MyStringId Quote64Author = MyStringId.GetOrCompute("Quote64Author");

		/// <summary>
		/// To every action there is always an equal and opposite reaction: or the forces of two bodies on each other are always equal and are directed in opposite directions.
		/// </summary>
		public static readonly MyStringId Quote64Text = MyStringId.GetOrCompute("Quote64Text");

		/// <summary>
		/// Wikipedia, 2077
		/// </summary>
		public static readonly MyStringId Quote65Author = MyStringId.GetOrCompute("Quote65Author");

		/// <summary>
		/// SCIENTIFIC METHOD: principles and procedures for the systematic pursuit of knowledge involving the recognition and formulation of a problem, the collection of data through observation and experiment, and the formulation and testing of hypotheses.
		/// </summary>
		public static readonly MyStringId Quote65Text = MyStringId.GetOrCompute("Quote65Text");

		/// <summary>
		/// Wikipedia, 2077
		/// </summary>
		public static readonly MyStringId Quote66Author = MyStringId.GetOrCompute("Quote66Author");

		/// <summary>
		/// To be termed scientific, a method of inquiry must be based on empirical and measurable evidence subject to specific principles of reasoning.
		/// </summary>
		public static readonly MyStringId Quote66Text = MyStringId.GetOrCompute("Quote66Text");

		/// <summary>
		/// Wikipedia, 2077
		/// </summary>
		public static readonly MyStringId Quote67Author = MyStringId.GetOrCompute("Quote67Author");

		/// <summary>
		/// The laws of science or scientific laws are statements that describe, predict, and perhaps explain why, a range of phenomena behave as they appear to in nature.
		/// </summary>
		public static readonly MyStringId Quote67Text = MyStringId.GetOrCompute("Quote67Text");

		/// <summary>
		/// Wikipedia, 2077
		/// </summary>
		public static readonly MyStringId Quote68Author = MyStringId.GetOrCompute("Quote68Author");

		/// <summary>
		/// Scientific laws are strongly supported by empirical evidence - they are scientific knowledge that experiments have repeatedly verified (and never falsified).
		/// </summary>
		public static readonly MyStringId Quote68Text = MyStringId.GetOrCompute("Quote68Text");

		/// <summary>
		/// Newton's law of universal gravitation
		/// </summary>
		public static readonly MyStringId Quote69Author = MyStringId.GetOrCompute("Quote69Author");

		/// <summary>
		/// Every point mass in the universe attracts every other point mass with a force that is directly proportional to the product of their masses and inversely proportional to the square of the distance between them.
		/// </summary>
		public static readonly MyStringId Quote69Text = MyStringId.GetOrCompute("Quote69Text");

		/// <summary>
		/// Albert Einstein
		/// </summary>
		public static readonly MyStringId Quote70Author = MyStringId.GetOrCompute("Quote70Author");

		/// <summary>
		/// Creativity is intelligence having fun.
		/// </summary>
		public static readonly MyStringId Quote70Text = MyStringId.GetOrCompute("Quote70Text");

		/// <summary>
		/// Reactor
		/// </summary>
		public static readonly MyStringId Reactor = MyStringId.GetOrCompute("Reactor");

		/// <summary>
		/// Refresh blueprints
		/// </summary>
		public static readonly MyStringId RefreshBlueprints = MyStringId.GetOrCompute("RefreshBlueprints");

		/// <summary>
		/// You can remotely access grids in the world using the antenna in your suit. Make sure your antenna is enabled. (Check the antenna symbol in the bottom left corner of the in-game HUD)  To access a grid, it must be powered and have an antenna. You also need to stay within the antenna broadcast range to be able to access it.  You can control grids from a distance by equipping them with a remote control block.
		/// </summary>
		public static readonly MyStringId RemoteAccess_Description = MyStringId.GetOrCompute("RemoteAccess_Description");

		/// <summary>
		/// Coords:
		/// </summary>
		public static readonly MyStringId RemoteControlCoord = MyStringId.GetOrCompute("RemoteControlCoord");

		/// <summary>
		/// Controlled by another player: 
		/// </summary>
		public static readonly MyStringId RemoteControlUsedBy = MyStringId.GetOrCompute("RemoteControlUsedBy");

		/// <summary>
		/// Current waypoint:
		/// </summary>
		public static readonly MyStringId RemoteControlWaypoint = MyStringId.GetOrCompute("RemoteControlWaypoint");

		/// <summary>
		/// Remove
		/// </summary>
		public static readonly MyStringId Remove = MyStringId.GetOrCompute("Remove");

		/// <summary>
		/// Remove all
		/// </summary>
		public static readonly MyStringId RemoveAll = MyStringId.GetOrCompute("RemoveAll");

		/// <summary>
		/// Remove
		/// </summary>
		public static readonly MyStringId RemoveProjectionButton = MyStringId.GetOrCompute("RemoveProjectionButton");

		/// <summary>
		/// Render quality
		/// </summary>
		public static readonly MyStringId RenderQuality = MyStringId.GetOrCompute("RenderQuality");

		/// <summary>
		/// Extreme
		/// </summary>
		public static readonly MyStringId RenderQualityExtreme = MyStringId.GetOrCompute("RenderQualityExtreme");

		/// <summary>
		/// High
		/// </summary>
		public static readonly MyStringId RenderQualityHigh = MyStringId.GetOrCompute("RenderQualityHigh");

		/// <summary>
		/// Normal
		/// </summary>
		public static readonly MyStringId RenderQualityNormal = MyStringId.GetOrCompute("RenderQualityNormal");

		/// <summary>
		/// Replace with clipboard
		/// </summary>
		public static readonly MyStringId ReplaceWithClipboard = MyStringId.GetOrCompute("ReplaceWithClipboard");

		/// <summary>
		/// Respawn Ship
		/// </summary>
		public static readonly MyStringId RespawnShip = MyStringId.GetOrCompute("RespawnShip");

		/// <summary>
		/// {0} Drop Pod
		/// </summary>
		public static readonly MyStringId PlanetRespawnPod = MyStringId.GetOrCompute("PlanetRespawnPod");

		/// <summary>
		/// Running Mission Scripts
		/// </summary>
		public static readonly MyStringId RunningLevelScripts = MyStringId.GetOrCompute("RunningLevelScripts");

		/// <summary>
		/// Running State Machines
		/// </summary>
		public static readonly MyStringId RunningStateMachines = MyStringId.GetOrCompute("RunningStateMachines");

		/// <summary>
		/// Cube Axis:
		/// </summary>
		public static readonly MyStringId SafeZone_CubeAxis = MyStringId.GetOrCompute("SafeZone_CubeAxis");

		/// <summary>
		/// Cubical
		/// </summary>
		public static readonly MyStringId SafeZone_Cubical = MyStringId.GetOrCompute("SafeZone_Cubical");

		/// <summary>
		/// List of Entities:
		/// </summary>
		public static readonly MyStringId SafeZone_ListOfEntities = MyStringId.GetOrCompute("SafeZone_ListOfEntities");

		/// <summary>
		/// Mode:
		/// </summary>
		public static readonly MyStringId SafeZone_Mode = MyStringId.GetOrCompute("SafeZone_Mode");

		/// <summary>
		/// Safe Zone Filter:
		/// </summary>
		public static readonly MyStringId SafeZone_SafeZoneFilter = MyStringId.GetOrCompute("SafeZone_SafeZoneFilter");

		/// <summary>
		/// Select Zone Shape:
		/// </summary>
		public static readonly MyStringId SafeZone_SelectZoneShape = MyStringId.GetOrCompute("SafeZone_SelectZoneShape");

		/// <summary>
		/// Spherical
		/// </summary>
		public static readonly MyStringId SafeZone_Spherical = MyStringId.GetOrCompute("SafeZone_Spherical");

		/// <summary>
		/// Destroy blocks:
		/// </summary>
		public static readonly MyStringId ScenarioProgressDestroyBlocks = MyStringId.GetOrCompute("ScenarioProgressDestroyBlocks");

		/// <summary>
		/// Limited lives: {0} left
		/// </summary>
		public static readonly MyStringId ScenarioProgressLimitedLives = MyStringId.GetOrCompute("ScenarioProgressLimitedLives");

		/// <summary>
		/// Lose conditions
		/// </summary>
		public static readonly MyStringId ScenarioProgressLoseConditions = MyStringId.GetOrCompute("ScenarioProgressLoseConditions");

		/// <summary>
		/// Spend more than {0} seconds in respawn screen.
		/// </summary>
		public static readonly MyStringId ScenarioProgressNoSpawn = MyStringId.GetOrCompute("ScenarioProgressNoSpawn");

		/// <summary>
		/// All others lost. Players pending:
		/// </summary>
		public static readonly MyStringId ScenarioProgressOthersLost = MyStringId.GetOrCompute("ScenarioProgressOthersLost");

		/// <summary>
		/// Leave sphere [{0:0},{1:0},{2:0}], radius {3:0} meters
		/// </summary>
		public static readonly MyStringId ScenarioProgressPositionLeft = MyStringId.GetOrCompute("ScenarioProgressPositionLeft");

		/// <summary>
		/// Get closer than {3:0} meters to [{0:0},{1:0},{2:0}]
		/// </summary>
		public static readonly MyStringId ScenarioProgressPositionReached = MyStringId.GetOrCompute("ScenarioProgressPositionReached");

		/// <summary>
		/// Somebody else wins the scenario. Possible winners:
		/// </summary>
		public static readonly MyStringId ScenarioProgressSomeoneWon = MyStringId.GetOrCompute("ScenarioProgressSomeoneWon");

		/// <summary>
		/// Scenario time limit {0} minutes
		/// </summary>
		public static readonly MyStringId ScenarioProgressTimeLimit = MyStringId.GetOrCompute("ScenarioProgressTimeLimit");

		/// <summary>
		/// Win conditions
		/// </summary>
		public static readonly MyStringId ScenarioProgressWinConditions = MyStringId.GetOrCompute("ScenarioProgressWinConditions");

		/// <summary>
		/// Players can join when game is already running
		/// </summary>
		public static readonly MyStringId ScenarioSettings_CanJoinRunning = MyStringId.GetOrCompute("ScenarioSettings_CanJoinRunning");

		/// <summary>
		/// Players can join running game
		/// </summary>
		public static readonly MyStringId ScenarioSettings_CanJoinRunningShort = MyStringId.GetOrCompute("ScenarioSettings_CanJoinRunningShort");

		/// <summary>
		/// Battle
		/// </summary>
		public static readonly MyStringId ScreenButtonBattle = MyStringId.GetOrCompute("ScreenButtonBattle");

		/// <summary>
		/// AI School Scenario
		/// </summary>
		public static readonly MyStringId ScreenCaptionAISchool = MyStringId.GetOrCompute("ScreenCaptionAISchool");

		/// <summary>
		/// Scenario
		/// </summary>
		public static readonly MyStringId ScreenCaptionScenario = MyStringId.GetOrCompute("ScreenCaptionScenario");

		/// <summary>
		/// Tutorials
		/// </summary>
		public static readonly MyStringId ScreenCaptionTutorials = MyStringId.GetOrCompute("ScreenCaptionTutorials");

		/// <summary>
		/// Video options
		/// </summary>
		public static readonly MyStringId ScreenCaptionVideoOptions = MyStringId.GetOrCompute("ScreenCaptionVideoOptions");

		/// <summary>
		/// World generator settings
		/// </summary>
		public static readonly MyStringId ScreenCaptionWorldGeneratorSettings = MyStringId.GetOrCompute("ScreenCaptionWorldGeneratorSettings");

		/// <summary>
		/// Add GoodAI bot
		/// </summary>
		public static readonly MyStringId ScreenCubeBuilderAddGoodAiBot = MyStringId.GetOrCompute("ScreenCubeBuilderAddGoodAiBot");

		/// <summary>
		/// New Large Ship
		/// </summary>
		public static readonly MyStringId ScreenCubeBuilderNewLargeShip = MyStringId.GetOrCompute("ScreenCubeBuilderNewLargeShip");

		/// <summary>
		/// New Small Ship
		/// </summary>
		public static readonly MyStringId ScreenCubeBuilderNewSmallShip = MyStringId.GetOrCompute("ScreenCubeBuilderNewSmallShip");

		/// <summary>
		/// New Station
		/// </summary>
		public static readonly MyStringId ScreenCubeBuilderNewStation = MyStringId.GetOrCompute("ScreenCubeBuilderNewStation");

		/// <summary>
		/// Admin Tools
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_AdminTools = MyStringId.GetOrCompute("ScreenDebugAdminMenu_AdminTools");

		/// <summary>
		/// Space Master
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_Caption = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Caption");

		/// <summary>
		/// Trash Removal
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_Cleanup = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Cleanup");

		/// <summary>
		/// Controlled
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_Controlled = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Controlled");

		/// <summary>
		/// Depower
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_Depower = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Depower");

		/// <summary>
		/// Depower trash
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_DepowerTrash = MyStringId.GetOrCompute("ScreenDebugAdminMenu_DepowerTrash");

		/// <summary>
		/// Entity List
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_EntityList = MyStringId.GetOrCompute("ScreenDebugAdminMenu_EntityList");

		/// <summary>
		/// Global Permissions
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_GlobalSafeZone = MyStringId.GetOrCompute("ScreenDebugAdminMenu_GlobalSafeZone");

		/// <summary>
		/// Invulnerable
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_Invulnerable = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Invulnerable");

		/// <summary>
		/// Makes you invulnerable to all damage.
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_InvulnerableToolTip = MyStringId.GetOrCompute("ScreenDebugAdminMenu_InvulnerableToolTip");

		/// <summary>
		/// Removing ships or stations with Respawn point can be dangerous, because you can remove players' only respawn points, be careful
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_MedbayNotification = MyStringId.GetOrCompute("ScreenDebugAdminMenu_MedbayNotification");

		/// <summary>
		/// Admin Screen
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_ModeSelect = MyStringId.GetOrCompute("ScreenDebugAdminMenu_ModeSelect");

		/// <summary>
		/// Powered
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_Powered = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Powered");

		/// <summary>
		/// Cannot remove online player!
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_RemoveCharacterNotification = MyStringId.GetOrCompute("ScreenDebugAdminMenu_RemoveCharacterNotification");

		/// <summary>
		/// Cannot remove seated player!
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_RemoveSeatedCharacterNotification = MyStringId.GetOrCompute("ScreenDebugAdminMenu_RemoveSeatedCharacterNotification");

		/// <summary>
		/// Remove floating obj.
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_RemoveFloating = MyStringId.GetOrCompute("ScreenDebugAdminMenu_RemoveFloating");

		/// <summary>
		/// Remove inactive owner and his grids
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_RemoveOwner = MyStringId.GetOrCompute("ScreenDebugAdminMenu_RemoveOwner");

		/// <summary>
		/// Remove inactive owner and all his grids, remove him from checkpoint too. Owner must be offline, or kicked/banned first
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_RemoveOwnerToolTip = MyStringId.GetOrCompute("ScreenDebugAdminMenu_RemoveOwnerToolTip");

		/// <summary>
		/// You are on server and allready have all objects
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_ReplicateEverythingServer_Tooltip = MyStringId.GetOrCompute("ScreenDebugAdminMenu_ReplicateEverythingServer_Tooltip");

		/// <summary>
		/// Safe Zones
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_SafeZones = MyStringId.GetOrCompute("ScreenDebugAdminMenu_SafeZones");

		/// <summary>
		/// Allow Building
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_SafeZones_AllowBuilding = MyStringId.GetOrCompute("ScreenDebugAdminMenu_SafeZones_AllowBuilding");

<<<<<<< HEAD
		/// <summary>
		/// Allow Building Projections
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_SafeZones_AllowBuildingProjections = MyStringId.GetOrCompute("ScreenDebugAdminMenu_SafeZones_AllowBuildingProjections");

		/// <summary>
		/// Allow Damage
		/// </summary>
=======
		public static readonly MyStringId ScreenDebugAdminMenu_SafeZones_AllowBuildingProjections = MyStringId.GetOrCompute("ScreenDebugAdminMenu_SafeZones_AllowBuildingProjections");

>>>>>>> d46cf8619665219cc163a7b28984ced59ed9470d
		public static readonly MyStringId ScreenDebugAdminMenu_SafeZones_AllowDamage = MyStringId.GetOrCompute("ScreenDebugAdminMenu_SafeZones_AllowDamage");

		/// <summary>
		/// Allow Drilling
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_SafeZones_AllowDrilling = MyStringId.GetOrCompute("ScreenDebugAdminMenu_SafeZones_AllowDrilling");

		/// <summary>
		/// Allow Grinding
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_SafeZones_AllowGrinding = MyStringId.GetOrCompute("ScreenDebugAdminMenu_SafeZones_AllowGrinding");

		/// <summary>
		/// Allow Shooting
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_SafeZones_AllowShooting = MyStringId.GetOrCompute("ScreenDebugAdminMenu_SafeZones_AllowShooting");

		/// <summary>
		/// Allow Voxel Hands
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_SafeZones_AllowVoxelHands = MyStringId.GetOrCompute("ScreenDebugAdminMenu_SafeZones_AllowVoxelHands");

		/// <summary>
		/// Allow Welding
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_SafeZones_AllowWelding = MyStringId.GetOrCompute("ScreenDebugAdminMenu_SafeZones_AllowWelding");

		/// <summary>
		/// Change Position
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_SafeZones_ChangePosition = MyStringId.GetOrCompute("ScreenDebugAdminMenu_SafeZones_ChangePosition");

		/// <summary>
		/// Configure Filter
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_SafeZones_ConfigureFilter = MyStringId.GetOrCompute("ScreenDebugAdminMenu_SafeZones_ConfigureFilter");

		/// <summary>
		/// Add Contained
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_SafeZones_FilterContained = MyStringId.GetOrCompute("ScreenDebugAdminMenu_SafeZones_FilterContained");

		/// <summary>
		/// Move To Safe Zone
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_SafeZones_MoveToSafeZone = MyStringId.GetOrCompute("ScreenDebugAdminMenu_SafeZones_MoveToSafeZone");

		/// <summary>
		/// New Safe Zone
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_SafeZones_NewSafeZone = MyStringId.GetOrCompute("ScreenDebugAdminMenu_SafeZones_NewSafeZone");

		/// <summary>
		/// Select Safe Zone:
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_SafeZones_SelectSafeZone = MyStringId.GetOrCompute("ScreenDebugAdminMenu_SafeZones_SelectSafeZone");

		/// <summary>
		/// Zone Enabled
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_SafeZones_ZoneEnabled = MyStringId.GetOrCompute("ScreenDebugAdminMenu_SafeZones_ZoneEnabled");

		/// <summary>
		/// Zone Radius:
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_SafeZones_ZoneRadius = MyStringId.GetOrCompute("ScreenDebugAdminMenu_SafeZones_ZoneRadius");

		/// <summary>
		/// Show All Players
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_ShowPlayers = MyStringId.GetOrCompute("ScreenDebugAdminMenu_ShowPlayers");

		/// <summary>
		/// Shows all player names on HUD, even when broadcast is off.
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_ShowPlayersToolTip = MyStringId.GetOrCompute("ScreenDebugAdminMenu_ShowPlayersToolTip");

		/// <summary>
		/// Sort by
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_SortBy = MyStringId.GetOrCompute("ScreenDebugAdminMenu_SortBy");

		/// <summary>
		/// Sort Options
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_SortOptions = MyStringId.GetOrCompute("ScreenDebugAdminMenu_SortOptions");

		/// <summary>
		/// Stationary
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_Stationary = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Stationary");

		/// <summary>
		/// Fixed (stations)
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_Stations = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Stations");

		/// <summary>
		/// Stop All Entities
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_StopAll = MyStringId.GetOrCompute("ScreenDebugAdminMenu_StopAll");

		/// <summary>
		/// Teleport Here
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_TeleportHere = MyStringId.GetOrCompute("ScreenDebugAdminMenu_TeleportHere");

		/// <summary>
		/// Teleports your character to the spectator camera.
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_TeleportHereToolTip = MyStringId.GetOrCompute("ScreenDebugAdminMenu_TeleportHereToolTip");

		/// <summary>
		/// Time of day offset:
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_TimeOfDay = MyStringId.GetOrCompute("ScreenDebugAdminMenu_TimeOfDay");

		/// <summary>
		/// Untargetable
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_Untargetable = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Untargetable");

		/// <summary>
		/// Makes you invisible to all turrets.
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_UntargetableToolTip = MyStringId.GetOrCompute("ScreenDebugAdminMenu_UntargetableToolTip");

		/// <summary>
		/// Can Use All Terminals
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_UseTerminals = MyStringId.GetOrCompute("ScreenDebugAdminMenu_UseTerminals");

		/// <summary>
		/// Allows you to use any terminal, regardless of ownership.
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_UseTerminalsToolTip = MyStringId.GetOrCompute("ScreenDebugAdminMenu_UseTerminalsToolTip");

		/// <summary>
		/// With respawn point
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_WithMedBay = MyStringId.GetOrCompute("ScreenDebugAdminMenu_WithMedBay");

<<<<<<< HEAD
		/// <summary>
		/// Revert close to NPC grids
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_RevertCloseToNPCGrids = MyStringId.GetOrCompute("ScreenDebugAdminMenu_RevertCloseToNPCGrids");

		/// <summary>
		/// With production
		/// </summary>
=======
		public static readonly MyStringId ScreenDebugAdminMenu_RevertCloseToNPCGrids = MyStringId.GetOrCompute("ScreenDebugAdminMenu_RevertCloseToNPCGrids");

>>>>>>> d46cf8619665219cc163a7b28984ced59ed9470d
		public static readonly MyStringId ScreenDebugAdminMenu_WithProduction = MyStringId.GetOrCompute("ScreenDebugAdminMenu_WithProduction");

		/// <summary>
		/// Select Type :
		/// </summary>
		public static readonly MyStringId ScreenDebugSpawnMenu_Asteroid = MyStringId.GetOrCompute("ScreenDebugSpawnMenu_Asteroid");

		/// <summary>
		/// Add Random Materials
		/// </summary>
		public static readonly MyStringId ScreenDebugSpawnMenu_AsteroidAddRandomMaterials = MyStringId.GetOrCompute("ScreenDebugSpawnMenu_AsteroidAddRandomMaterials");

		/// <summary>
		/// Core Material
		/// </summary>
		public static readonly MyStringId ScreenDebugSpawnMenu_AsteroidCoreMaterial = MyStringId.GetOrCompute("ScreenDebugSpawnMenu_AsteroidCoreMaterial");

		/// <summary>
		/// Generating asteroids can take a long time!
		/// </summary>
		public static readonly MyStringId ScreenDebugSpawnMenu_AsteroidGenerationCanTakeLong = MyStringId.GetOrCompute("ScreenDebugSpawnMenu_AsteroidGenerationCanTakeLong");

		/// <summary>
		/// Asteroids
		/// </summary>
		public static readonly MyStringId ScreenDebugSpawnMenu_Asteroids = MyStringId.GetOrCompute("ScreenDebugSpawnMenu_Asteroids");

		/// <summary>
		/// Surface Material
		/// </summary>
		public static readonly MyStringId ScreenDebugSpawnMenu_AsteroidSurfaceMaterial = MyStringId.GetOrCompute("ScreenDebugSpawnMenu_AsteroidSurfaceMaterial");

		/// <summary>
		/// Spawn Menu
		/// </summary>
		public static readonly MyStringId ScreenDebugSpawnMenu_Caption = MyStringId.GetOrCompute("ScreenDebugSpawnMenu_Caption");

		/// <summary>
		/// Create layer
		/// </summary>
		public static readonly MyStringId ScreenDebugSpawnMenu_CreateLayer = MyStringId.GetOrCompute("ScreenDebugSpawnMenu_CreateLayer");

		/// <summary>
		/// Current target: 
		/// </summary>
		public static readonly MyStringId ScreenDebugSpawnMenu_CurrentTarget = MyStringId.GetOrCompute("ScreenDebugSpawnMenu_CurrentTarget");

		/// <summary>
		/// Empty Voxel Map
		/// </summary>
		public static readonly MyStringId ScreenDebugSpawnMenu_EmptyVoxelMap = MyStringId.GetOrCompute("ScreenDebugSpawnMenu_EmptyVoxelMap");

		/// <summary>
		/// Generate seed
		/// </summary>
		public static readonly MyStringId ScreenDebugSpawnMenu_GenerateSeed = MyStringId.GetOrCompute("ScreenDebugSpawnMenu_GenerateSeed");

		/// <summary>
		/// Invalid amount
		/// </summary>
		public static readonly MyStringId ScreenDebugSpawnMenu_InvalidAmount = MyStringId.GetOrCompute("ScreenDebugSpawnMenu_InvalidAmount");

		/// <summary>
		/// Amount :
		/// </summary>
		public static readonly MyStringId ScreenDebugSpawnMenu_ItemAmount = MyStringId.GetOrCompute("ScreenDebugSpawnMenu_ItemAmount");

		/// <summary>
		/// Items
		/// </summary>
		public static readonly MyStringId ScreenDebugSpawnMenu_Items = MyStringId.GetOrCompute("ScreenDebugSpawnMenu_Items");

		/// <summary>
		/// Item type
		/// </summary>
		public static readonly MyStringId ScreenDebugSpawnMenu_ItemType = MyStringId.GetOrCompute("ScreenDebugSpawnMenu_ItemType");

		/// <summary>
		/// Pick planet to edit
		/// </summary>
		public static readonly MyStringId ScreenDebugSpawnMenu_PickPlanet = MyStringId.GetOrCompute("ScreenDebugSpawnMenu_PickPlanet");

		/// <summary>
		/// Planets
		/// </summary>
		public static readonly MyStringId ScreenDebugSpawnMenu_Planets = MyStringId.GetOrCompute("ScreenDebugSpawnMenu_Planets");

		/// <summary>
		/// Predefined Asteroids
		/// </summary>
		public static readonly MyStringId ScreenDebugSpawnMenu_PredefinedAsteroids = MyStringId.GetOrCompute("ScreenDebugSpawnMenu_PredefinedAsteroids");

		/// <summary>
		/// Procedural Asteroids
		/// </summary>
		public static readonly MyStringId ScreenDebugSpawnMenu_ProceduralAsteroids = MyStringId.GetOrCompute("ScreenDebugSpawnMenu_ProceduralAsteroids");

		/// <summary>
		/// Generation Seed :
		/// </summary>
		public static readonly MyStringId ScreenDebugSpawnMenu_ProceduralSeed = MyStringId.GetOrCompute("ScreenDebugSpawnMenu_ProceduralSeed");

		/// <summary>
		/// Select Size :
		/// </summary>
		public static readonly MyStringId ScreenDebugSpawnMenu_ProceduralSize = MyStringId.GetOrCompute("ScreenDebugSpawnMenu_ProceduralSize");

		/// <summary>
		/// Remove layer
		/// </summary>
		public static readonly MyStringId ScreenDebugSpawnMenu_RemoveLayer = MyStringId.GetOrCompute("ScreenDebugSpawnMenu_RemoveLayer");

		/// <summary>
		/// Select Asteroid Type
		/// </summary>
		public static readonly MyStringId ScreenDebugSpawnMenu_SelectAsteroidType = MyStringId.GetOrCompute("ScreenDebugSpawnMenu_SelectAsteroidType");

		/// <summary>
		/// Spawn
		/// </summary>
		public static readonly MyStringId ScreenDebugSpawnMenu_SpawnAsteroid = MyStringId.GetOrCompute("ScreenDebugSpawnMenu_SpawnAsteroid");

		/// <summary>
		/// Spawn flora
		/// </summary>
		public static readonly MyStringId ScreenDebugSpawnMenu_SpawnFlora = MyStringId.GetOrCompute("ScreenDebugSpawnMenu_SpawnFlora");

		/// <summary>
		/// Spawn Object
		/// </summary>
		public static readonly MyStringId ScreenDebugSpawnMenu_SpawnObject = MyStringId.GetOrCompute("ScreenDebugSpawnMenu_SpawnObject");

		/// <summary>
		/// Spawn into targeted container
		/// </summary>
		public static readonly MyStringId ScreenDebugSpawnMenu_SpawnTargeted = MyStringId.GetOrCompute("ScreenDebugSpawnMenu_SpawnTargeted");

		/// <summary>
		/// Update planet
		/// </summary>
		public static readonly MyStringId ScreenDebugSpawnMenu_UpdatePlanet = MyStringId.GetOrCompute("ScreenDebugSpawnMenu_UpdatePlanet");

		/// <summary>
		/// Renderer
		/// </summary>
		public static readonly MyStringId ScreenGraphicsOptions_Renderer = MyStringId.GetOrCompute("ScreenGraphicsOptions_Renderer");

		/// <summary>
		/// Shader quality
		/// </summary>
		public static readonly MyStringId ScreenGraphicsOptions_ShaderQuality = MyStringId.GetOrCompute("ScreenGraphicsOptions_ShaderQuality");

		/// <summary>
		/// Shadow quality
		/// </summary>
		public static readonly MyStringId ScreenGraphicsOptions_ShadowMapResolution = MyStringId.GetOrCompute("ScreenGraphicsOptions_ShadowMapResolution");

		/// <summary>
		/// Lights quality
		/// </summary>
		public static readonly MyStringId ScreenGraphicsOptions_LightsQuality = MyStringId.GetOrCompute("ScreenGraphicsOptions_LightsQuality");

		/// <summary>
		/// Medium
		/// </summary>
		public static readonly MyStringId ScreenGraphicsOptions_ShadowMapResolution_Medium = MyStringId.GetOrCompute("ScreenGraphicsOptions_ShadowMapResolution_Medium");

		/// <summary>
		/// Voxel quality
		/// </summary>
		public static readonly MyStringId ScreenGraphicsOptions_VoxelQuality = MyStringId.GetOrCompute("ScreenGraphicsOptions_VoxelQuality");

		/// <summary>
		/// DELUXE version is now available!
		/// </summary>
		public static readonly MyStringId ScreenMainMenu_DeluxeLine1 = MyStringId.GetOrCompute("ScreenMainMenu_DeluxeLine1");

		/// <summary>
		/// Buy it on {0} to get special content!
		/// </summary>
		public static readonly MyStringId ScreenMainMenu_DeluxeLine2 = MyStringId.GetOrCompute("ScreenMainMenu_DeluxeLine2");

		/// <summary>
		/// Special Halloween offer!
		/// </summary>
		public static readonly MyStringId ScreenMainMenu_GhostSkinLine1 = MyStringId.GetOrCompute("ScreenMainMenu_GhostSkinLine1");

		/// <summary>
		/// Grab it on {0}!
		/// </summary>
		public static readonly MyStringId ScreenMainMenu_GhostSkinLine2 = MyStringId.GetOrCompute("ScreenMainMenu_GhostSkinLine2");

		/// <summary>
		/// Limited offer of skins!
		/// </summary>
		public static readonly MyStringId ScreenMainMenu_SkinSaleLine1 = MyStringId.GetOrCompute("ScreenMainMenu_SkinSaleLine1");

		/// <summary>
		/// Grab it on {0}!
		/// </summary>
		public static readonly MyStringId ScreenMainMenu_SkinSaleLine2 = MyStringId.GetOrCompute("ScreenMainMenu_SkinSaleLine2");

		/// <summary>
		/// Decorative blocks are now available!
		/// </summary>
		public static readonly MyStringId ScreenMainMenu_DecoBlockDlcLine1 = MyStringId.GetOrCompute("ScreenMainMenu_DecoBlockDlcLine1");

		/// <summary>
		/// Grab them on {0}!
		/// </summary>
		public static readonly MyStringId ScreenMainMenu_DecoBlockDlcLine2 = MyStringId.GetOrCompute("ScreenMainMenu_DecoBlockDlcLine2");

		/// <summary>
		/// No respawn point is available!  Try the refresh button for any available respawn points. If there is no chance of accessing them, the game will be over in {0:00}:{1:00}.
		/// </summary>
		public static readonly MyStringId ScreenMedicals_NoRespawnPlace = MyStringId.GetOrCompute("ScreenMedicals_NoRespawnPlace");

		/// <summary>
		/// You must spawn in:  {0:00}:{1:00}
		/// </summary>
		public static readonly MyStringId ScreenMedicals_NoRespawnPlaceHeader = MyStringId.GetOrCompute("ScreenMedicals_NoRespawnPlaceHeader");

		/// <summary>
		/// No respawn point is available!  Try the refresh button for any available respawn points. If there is no chance of accessing them, the game is over and you can leave the game.
		/// </summary>
		public static readonly MyStringId ScreenMedicals_NoRespawnPossible = MyStringId.GetOrCompute("ScreenMedicals_NoRespawnPossible");

		/// <summary>
		/// Available in
		/// </summary>
		public static readonly MyStringId ScreenMedicals_OwnerTimeoutColumn = MyStringId.GetOrCompute("ScreenMedicals_OwnerTimeoutColumn");

		/// <summary>
		/// Owner
		/// </summary>
		public static readonly MyStringId ScreenMedicals_Owner = MyStringId.GetOrCompute("ScreenMedicals_Owner");

		/// <summary>
		/// Not ready
		/// </summary>
		public static readonly MyStringId ScreenMedicals_RespawnShipNotReady = MyStringId.GetOrCompute("ScreenMedicals_RespawnShipNotReady");

		/// <summary>
		/// Ready
		/// </summary>
		public static readonly MyStringId ScreenMedicals_RespawnShipReady = MyStringId.GetOrCompute("ScreenMedicals_RespawnShipReady");

		/// <summary>
		/// Will spawn on "{0}" when it is ready.
		/// </summary>
		public static readonly MyStringId ScreenMedicals_RespawnWhenShipReady = MyStringId.GetOrCompute("ScreenMedicals_RespawnWhenShipReady");

		/// <summary>
		/// Press Shift + Escape to enable spectator mode.
		/// </summary>
		public static readonly MyStringId ScreenMedicals_ActivateSpectator = MyStringId.GetOrCompute("ScreenMedicals_ActivateSpectator");

		/// <summary>
		/// After enabling spectator mode from the respawn screen there is no way back to the respawn screen! You will have to reload/reconnect in order to respawn again.  Are you sure you wish to continue?
		/// </summary>
		public static readonly MyStringId ScreenMedicals_ActivateSpectator_Confirm = MyStringId.GetOrCompute("ScreenMedicals_ActivateSpectator_Confirm");

		/// <summary>
		/// Video
		/// </summary>
		public static readonly MyStringId ScreenOptionsButtonVideo = MyStringId.GetOrCompute("ScreenOptionsButtonVideo");

		/// <summary>
		/// There are no assemblers on this ship.
		/// </summary>
		public static readonly MyStringId ScreenTerminalError_NoAssemblers = MyStringId.GetOrCompute("ScreenTerminalError_NoAssemblers");

		/// <summary>
		/// Ship has been disconnected from terminal
		/// </summary>
		public static readonly MyStringId ScreenTerminalError_ShipHasBeenDisconnected = MyStringId.GetOrCompute("ScreenTerminalError_ShipHasBeenDisconnected");

		/// <summary>
		/// Terminal is not connected to any ship
		/// </summary>
		public static readonly MyStringId ScreenTerminalError_ShipNotConnected = MyStringId.GetOrCompute("ScreenTerminalError_ShipNotConnected");

		/// <summary>
		/// Mass: {0} kg
		/// </summary>
		public static readonly MyStringId ScreenTerminalInventory_Mass = MyStringId.GetOrCompute("ScreenTerminalInventory_Mass");

		/// <summary>
		/// Volume:
		/// </summary>
		public static readonly MyStringId ScreenTerminalInventory_Volume = MyStringId.GetOrCompute("ScreenTerminalInventory_Volume");

		/// <summary>
		/// Assembling
		/// </summary>
		public static readonly MyStringId ScreenTerminalProduction_AssemblingButton = MyStringId.GetOrCompute("ScreenTerminalProduction_AssemblingButton");

		/// <summary>
		/// Blueprints:
		/// </summary>
		public static readonly MyStringId ScreenTerminalProduction_Blueprints = MyStringId.GetOrCompute("ScreenTerminalProduction_Blueprints");

		/// <summary>
		/// Control panel
		/// </summary>
		public static readonly MyStringId ScreenTerminalProduction_ControlPanelButton = MyStringId.GetOrCompute("ScreenTerminalProduction_ControlPanelButton");

		/// <summary>
		/// Disassemble all
		/// </summary>
		public static readonly MyStringId ScreenTerminalProduction_DisassembleAllButton = MyStringId.GetOrCompute("ScreenTerminalProduction_DisassembleAllButton");

		/// <summary>
		/// Disassembling
		/// </summary>
		public static readonly MyStringId ScreenTerminalProduction_DisassemblingButton = MyStringId.GetOrCompute("ScreenTerminalProduction_DisassemblingButton");

		/// <summary>
		/// Gained / Available
		/// </summary>
		public static readonly MyStringId ScreenTerminalProduction_GainedAndAvailable = MyStringId.GetOrCompute("ScreenTerminalProduction_GainedAndAvailable");

		/// <summary>
		/// Inventory:
		/// </summary>
		public static readonly MyStringId ScreenTerminalProduction_Inventory = MyStringId.GetOrCompute("ScreenTerminalProduction_Inventory");

		/// <summary>
		/// Inventory
		/// </summary>
		public static readonly MyStringId ScreenTerminalProduction_InventoryButton = MyStringId.GetOrCompute("ScreenTerminalProduction_InventoryButton");

		/// <summary>
		/// Material type
		/// </summary>
		public static readonly MyStringId ScreenTerminalProduction_MaterialType = MyStringId.GetOrCompute("ScreenTerminalProduction_MaterialType");

		/// <summary>
		/// Production queue:
		/// </summary>
		public static readonly MyStringId ScreenTerminalProduction_ProductionQueue = MyStringId.GetOrCompute("ScreenTerminalProduction_ProductionQueue");

		/// <summary>
		/// Required / Available
		/// </summary>
		public static readonly MyStringId ScreenTerminalProduction_RequiredAndAvailable = MyStringId.GetOrCompute("ScreenTerminalProduction_RequiredAndAvailable");

		/// <summary>
		/// Stored materials:
		/// </summary>
		public static readonly MyStringId ScreenTerminalProduction_StoredMaterials = MyStringId.GetOrCompute("ScreenTerminalProduction_StoredMaterials");

		/// <summary>
		/// Infinite
		/// </summary>
		public static readonly MyStringId ScreenTerminal_Infinite = MyStringId.GetOrCompute("ScreenTerminal_Infinite");

		/// <summary>
		/// Current grid
		/// </summary>
		public static readonly MyStringId ScreenTerminal_ShipCombobox = MyStringId.GetOrCompute("ScreenTerminal_ShipCombobox");

		/// <summary>
		/// Accessible grids
		/// </summary>
		public static readonly MyStringId ScreenTerminal_ShipList = MyStringId.GetOrCompute("ScreenTerminal_ShipList");

		/// <summary>
		/// Scripting Tools - Cutscenes
		/// </summary>
		public static readonly MyStringId ScriptingToolsCutscenes = MyStringId.GetOrCompute("ScriptingToolsCutscenes");

		/// <summary>
		/// Scripting Tools - Transformations
		/// </summary>
		public static readonly MyStringId ScriptingToolsTransformations = MyStringId.GetOrCompute("ScriptingToolsTransformations");

		/// <summary>
		/// Selected Block
		/// </summary>
		public static readonly MyStringId SelectedBlock = MyStringId.GetOrCompute("SelectedBlock");

		/// <summary>
		/// Selected Entity
		/// </summary>
		public static readonly MyStringId SelectedEntity = MyStringId.GetOrCompute("SelectedEntity");

		/// <summary>
		/// Selected Trigger
		/// </summary>
		public static readonly MyStringId SelectedTrigger = MyStringId.GetOrCompute("SelectedTrigger");

		/// <summary>
		/// Assembler Efficiency Multiplier
		/// </summary>
		public static readonly MyStringId ServerDetails_AssemblerEfficiencyMultiplier = MyStringId.GetOrCompute("ServerDetails_AssemblerEfficiencyMultiplier");

		/// <summary>
		/// Assembler Speed Multiplier
		/// </summary>
		public static readonly MyStringId ServerDetails_AssemblerSpeedMultiplier = MyStringId.GetOrCompute("ServerDetails_AssemblerSpeedMultiplier");

		/// <summary>
		/// Auto Healing
		/// </summary>
		public static readonly MyStringId ServerDetails_AutoHealing = MyStringId.GetOrCompute("ServerDetails_AutoHealing");

		/// <summary>
		/// Block Type Limits
		/// </summary>
		public static readonly MyStringId ServerDetails_BlockTypeLimits = MyStringId.GetOrCompute("ServerDetails_BlockTypeLimits");

		/// <summary>
		/// Cargo Ships
		/// </summary>
		public static readonly MyStringId ServerDetails_CargoShipsEnabled = MyStringId.GetOrCompute("ServerDetails_CargoShipsEnabled");

		/// <summary>
		/// Destructible Blocks
		/// </summary>
		public static readonly MyStringId ServerDetails_DestructibleBlocks = MyStringId.GetOrCompute("ServerDetails_DestructibleBlocks");

		/// <summary>
		/// 3rd Person View
		/// </summary>
		public static readonly MyStringId ServerDetails_Enable3rdPersonView = MyStringId.GetOrCompute("ServerDetails_Enable3rdPersonView");

		/// <summary>
		/// Block Limits
		/// </summary>
		public static readonly MyStringId ServerDetails_EnableBlockLimits = MyStringId.GetOrCompute("ServerDetails_EnableBlockLimits");

		/// <summary>
		/// Enable Convert To Station
		/// </summary>
		public static readonly MyStringId ServerDetails_EnableConvertToStation = MyStringId.GetOrCompute("ServerDetails_EnableConvertToStation");

		/// <summary>
		/// Drones
		/// </summary>
		public static readonly MyStringId ServerDetails_EnableDrones = MyStringId.GetOrCompute("ServerDetails_EnableDrones");

		/// <summary>
		/// Encounters
		/// </summary>
		public static readonly MyStringId ServerDetails_EnableEncounters = MyStringId.GetOrCompute("ServerDetails_EnableEncounters");

		/// <summary>
		/// Flora
		/// </summary>
		public static readonly MyStringId ServerDetails_EnableFlora = MyStringId.GetOrCompute("ServerDetails_EnableFlora");

		/// <summary>
		/// Ingame Scripts
		/// </summary>
		public static readonly MyStringId ServerDetails_EnableIngameScripts = MyStringId.GetOrCompute("ServerDetails_EnableIngameScripts");

		/// <summary>
		/// Jetpack
		/// </summary>
		public static readonly MyStringId ServerDetails_EnableJetpack = MyStringId.GetOrCompute("ServerDetails_EnableJetpack");

		/// <summary>
		/// Oxygen
		/// </summary>
		public static readonly MyStringId ServerDetails_EnableOxygen = MyStringId.GetOrCompute("ServerDetails_EnableOxygen");

		/// <summary>
		/// Airtightness
		/// </summary>
		public static readonly MyStringId ServerDetails_EnableOxygenPressurization = MyStringId.GetOrCompute("ServerDetails_EnableOxygenPressurization");

		/// <summary>
		/// Remote Removal of Owned Blocks
		/// </summary>
		public static readonly MyStringId ServerDetails_EnableRemoteBlockRemoval = MyStringId.GetOrCompute("ServerDetails_EnableRemoteBlockRemoval");

		/// <summary>
		/// Scripter Role
		/// </summary>
		public static readonly MyStringId ServerDetails_EnableScripterRole = MyStringId.GetOrCompute("ServerDetails_EnableScripterRole");

		/// <summary>
		/// Spiders
		/// </summary>
		public static readonly MyStringId ServerDetails_EnableSpiders = MyStringId.GetOrCompute("ServerDetails_EnableSpiders");

		/// <summary>
		/// Sun Rotation
		/// </summary>
		public static readonly MyStringId ServerDetails_EnableSunRotation = MyStringId.GetOrCompute("ServerDetails_EnableSunRotation");

		/// <summary>
		/// Tool Shake
		/// </summary>
		public static readonly MyStringId ServerDetails_EnableToolShake = MyStringId.GetOrCompute("ServerDetails_EnableToolShake");

		/// <summary>
		/// Voxel Destruction
		/// </summary>
		public static readonly MyStringId ServerDetails_EnableVoxelDestruction = MyStringId.GetOrCompute("ServerDetails_EnableVoxelDestruction");

		/// <summary>
		/// Wolves
		/// </summary>
		public static readonly MyStringId ServerDetails_EnableWolfs = MyStringId.GetOrCompute("ServerDetails_EnableWolfs");

		/// <summary>
		/// Environment Hostility
		/// </summary>
		public static readonly MyStringId ServerDetails_EnvironmentHostility = MyStringId.GetOrCompute("ServerDetails_EnvironmentHostility");

		/// <summary>
		/// Flora Density
		/// </summary>
		public static readonly MyStringId ServerDetails_FloraDensity = MyStringId.GetOrCompute("ServerDetails_FloraDensity");

		/// <summary>
		/// Grinder Speed Multiplier
		/// </summary>
		public static readonly MyStringId ServerDetails_GrinderSpeedMultiplier = MyStringId.GetOrCompute("ServerDetails_GrinderSpeedMultiplier");

		/// <summary>
		/// Hack Speed Multiplier
		/// </summary>
		public static readonly MyStringId ServerDetails_HackSpeedMultiplier = MyStringId.GetOrCompute("ServerDetails_HackSpeedMultiplier");

		/// <summary>
		/// Max Blocks Per Player
		/// </summary>
		public static readonly MyStringId ServerDetails_MaxBlocksPerPlayer = MyStringId.GetOrCompute("ServerDetails_MaxBlocksPerPlayer");

		/// <summary>
		/// Max Floating Objects
		/// </summary>
		public static readonly MyStringId ServerDetails_MaxFloatingObjects = MyStringId.GetOrCompute("ServerDetails_MaxFloatingObjects");

		/// <summary>
		/// Max Grid Size
		/// </summary>
		public static readonly MyStringId ServerDetails_MaxGridSize = MyStringId.GetOrCompute("ServerDetails_MaxGridSize");

		/// <summary>
		/// Permanent Death
		/// </summary>
		public static readonly MyStringId ServerDetails_PermanentDeath = MyStringId.GetOrCompute("ServerDetails_PermanentDeath");

		/// <summary>
		/// Procedural Density
		/// </summary>
		public static readonly MyStringId ServerDetails_ProceduralDensity = MyStringId.GetOrCompute("ServerDetails_ProceduralDensity");

		/// <summary>
		/// Realistic Sound
		/// </summary>
		public static readonly MyStringId ServerDetails_RealisticSound = MyStringId.GetOrCompute("ServerDetails_RealisticSound");

		/// <summary>
		/// Refinery Speed Multiplier
		/// </summary>
		public static readonly MyStringId ServerDetails_RefinerySpeedMultiplier = MyStringId.GetOrCompute("ServerDetails_RefinerySpeedMultiplier");

		/// <summary>
		/// Delete Respawn Ships
		/// </summary>
		public static readonly MyStringId ServerDetails_RespawnShipDelete = MyStringId.GetOrCompute("ServerDetails_RespawnShipDelete");

		/// <summary>
		/// Server Management
		/// </summary>
		public static readonly MyStringId ServerDetails_ServerManagement = MyStringId.GetOrCompute("ServerDetails_ServerManagement");

		/// <summary>
		/// Show Player Names On HUD
		/// </summary>
		public static readonly MyStringId ServerDetails_ShowPlayerNamesOnHud = MyStringId.GetOrCompute("ServerDetails_ShowPlayerNamesOnHud");

		/// <summary>
		/// Respawn Ship Time Multiplier
		/// </summary>
		public static readonly MyStringId ServerDetails_SpawnShipTimeMultiplier = MyStringId.GetOrCompute("ServerDetails_SpawnShipTimeMultiplier");

		/// <summary>
		/// Spawn With Tools
		/// </summary>
		public static readonly MyStringId ServerDetails_SpawnWithTools = MyStringId.GetOrCompute("ServerDetails_SpawnWithTools");

		/// <summary>
		/// Unsupported Stations
		/// </summary>
		public static readonly MyStringId ServerDetails_StationVoxelSupport = MyStringId.GetOrCompute("ServerDetails_StationVoxelSupport");

		/// <summary>
		/// Sun Rotation Interval
		/// </summary>
		public static readonly MyStringId ServerDetails_SunRotationIntervalMinutes = MyStringId.GetOrCompute("ServerDetails_SunRotationIntervalMinutes");

		/// <summary>
		/// Thruster Damage
		/// </summary>
		public static readonly MyStringId ServerDetails_ThrusterDamage = MyStringId.GetOrCompute("ServerDetails_ThrusterDamage");

		/// <summary>
		/// View Distance
		/// </summary>
		public static readonly MyStringId ServerDetails_ViewDistance = MyStringId.GetOrCompute("ServerDetails_ViewDistance");

		/// <summary>
		/// Weapons
		/// </summary>
		public static readonly MyStringId ServerDetails_WeaponsEnabled = MyStringId.GetOrCompute("ServerDetails_WeaponsEnabled");

		/// <summary>
		/// Welder Speed Multiplier
		/// </summary>
		public static readonly MyStringId ServerDetails_WelderSpeedMultiplier = MyStringId.GetOrCompute("ServerDetails_WelderSpeedMultiplier");

		/// <summary>
		/// World Size in Km
		/// </summary>
		public static readonly MyStringId ServerDetails_WorldSizeKm = MyStringId.GetOrCompute("ServerDetails_WorldSizeKm");

		/// <summary>
		/// Set trigger size dialog
		/// </summary>
		public static readonly MyStringId SetTriggerSizeDialog = MyStringId.GetOrCompute("SetTriggerSizeDialog");

		/// <summary>
		/// Shared Blueprint
		/// </summary>
		public static readonly MyStringId SharedBlueprint = MyStringId.GetOrCompute("SharedBlueprint");

		/// <summary>
		/// {0} just shared a blueprint with you.
		/// </summary>
		public static readonly MyStringId SharedBlueprintNotify = MyStringId.GetOrCompute("SharedBlueprintNotify");

		/// <summary>
		/// Do you want to open this blueprint in {0} workshop?
		/// </summary>
		public static readonly MyStringId SharedBlueprintQuestion = MyStringId.GetOrCompute("SharedBlueprintQuestion");

		/// <summary>
		/// Show Only Buildable
		/// </summary>
		public static readonly MyStringId ShowOnlyBuildableBlockToggle = MyStringId.GetOrCompute("ShowOnlyBuildableBlockToggle");

		/// <summary>
		/// Show Only Buildable
		/// </summary>
		public static readonly MyStringId ShowOnlyBuildableTooltip = MyStringId.GetOrCompute("ShowOnlyBuildableTooltip");

		/// <summary>
		///  Enemy Signals
		/// </summary>
		public static readonly MyStringId Signal_Enemy = MyStringId.GetOrCompute("Signal_Enemy");

		/// <summary>
		///  Friendly Signals
		/// </summary>
		public static readonly MyStringId Signal_Friendly = MyStringId.GetOrCompute("Signal_Friendly");

		/// <summary>
		///  Mixed Signals
		/// </summary>
		public static readonly MyStringId Signal_Mixed = MyStringId.GetOrCompute("Signal_Mixed");

		/// <summary>
		///  Neutral Signals
		/// </summary>
		public static readonly MyStringId Signal_Neutral = MyStringId.GetOrCompute("Signal_Neutral");

		/// <summary>
		///  Own Signals
		/// </summary>
		public static readonly MyStringId Signal_Own = MyStringId.GetOrCompute("Signal_Own");

		/// <summary>
		/// Silicon
		/// </summary>
		public static readonly MyStringId Silicon = MyStringId.GetOrCompute("Silicon");

		/// <summary>
		/// Silver
		/// </summary>
		public static readonly MyStringId Silver = MyStringId.GetOrCompute("Silver");

		/// <summary>
		/// SmallGrids
		/// </summary>
		public static readonly MyStringId SmallGrids = MyStringId.GetOrCompute("SmallGrids");

		/// <summary>
		/// Alert 1
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_Alert1 = MyStringId.GetOrCompute("SoundBlock_SoundName_Alert1");

		/// <summary>
		/// Alert 2
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_Alert2 = MyStringId.GetOrCompute("SoundBlock_SoundName_Alert2");

		/// <summary>
		/// Alert 3
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_Alert3 = MyStringId.GetOrCompute("SoundBlock_SoundName_Alert3");

		/// <summary>
		/// Drone - Huge
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_Drone_Huge = MyStringId.GetOrCompute("SoundBlock_SoundName_Drone_Huge");

		/// <summary>
		/// Drone - Large
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_Drone_Large = MyStringId.GetOrCompute("SoundBlock_SoundName_Drone_Large");

		/// <summary>
		/// Drone - Medium
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_Drone_Medium = MyStringId.GetOrCompute("SoundBlock_SoundName_Drone_Medium");

		/// <summary>
		/// Drone - Small
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_Drone_Small = MyStringId.GetOrCompute("SoundBlock_SoundName_Drone_Small");

		/// <summary>
		/// Enemy detected
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_EnemyDetected = MyStringId.GetOrCompute("SoundBlock_SoundName_EnemyDetected");

		/// <summary>
		/// Lights off
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_LightsOff = MyStringId.GetOrCompute("SoundBlock_SoundName_LightsOff");

		/// <summary>
		/// Lights on
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_LightsOn = MyStringId.GetOrCompute("SoundBlock_SoundName_LightsOn");

		/// <summary>
		/// Music 1
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_Music1 = MyStringId.GetOrCompute("SoundBlock_SoundName_Music1");

		/// <summary>
		/// Music 2
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_Music2 = MyStringId.GetOrCompute("SoundBlock_SoundName_Music2");

		/// <summary>
		/// Objective complete
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_ObjectiveComplete = MyStringId.GetOrCompute("SoundBlock_SoundName_ObjectiveComplete");

		/// <summary>
		/// Spawn
		/// </summary>
		public static readonly MyStringId SpawnEntity = MyStringId.GetOrCompute("SpawnEntity");

		/// <summary>
		/// Space Suit
		/// </summary>
		public static readonly MyStringId SpawnInSpaceSuit = MyStringId.GetOrCompute("SpawnInSpaceSuit");

		/// <summary>
		/// Free spectator. You can still shoot and do actions with controlled object
		/// </summary>
		public static readonly MyStringId SpectatorControls_Free_Desc = MyStringId.GetOrCompute("SpectatorControls_Free_Desc");

		/// <summary>
		/// Get back into controlled character / cockpit
		/// </summary>
		public static readonly MyStringId SpectatorControls_None_Desc = MyStringId.GetOrCompute("SpectatorControls_None_Desc");

		/// <summary>
		/// Static spectator. You control character / cockpit, but camera is static
		/// </summary>
		public static readonly MyStringId SpectatorControls_Static_Desc = MyStringId.GetOrCompute("SpectatorControls_Static_Desc");

		/// <summary>
		/// Speed
		/// </summary>
		public static readonly MyStringId Speed = MyStringId.GetOrCompute("Speed");

		/// <summary>
		/// StaticObjects
		/// </summary>
		public static readonly MyStringId StaticObjects = MyStringId.GetOrCompute("StaticObjects");

		/// <summary>
		/// Cycle placement modes
		/// </summary>
		public static readonly MyStringId StationRotation_Static = MyStringId.GetOrCompute("StationRotation_Static");

		/// <summary>
		/// Cycles between 3 placement modes: Local Grid - snap to local coordinate system Free Placement - rotate and place freely Gravity-aligned - rotate and place freely, but aligned to gravity
		/// </summary>
		public static readonly MyStringId StationRotation_Static_Desc = MyStringId.GetOrCompute("StationRotation_Static_Desc");

<<<<<<< HEAD
		/// <summary>
		/// Stop
		/// </summary>
=======
>>>>>>> d46cf8619665219cc163a7b28984ced59ed9470d
		public static readonly MyStringId Stop = MyStringId.GetOrCompute("Stop");

		/// <summary>
		/// Leave selected faction
		/// </summary>
		public static readonly MyStringId String1TerminalTab_Factions_LeaveToolTip = MyStringId.GetOrCompute("String1TerminalTab_Factions_LeaveToolTip");

		/// <summary>
		/// Day duration
		/// </summary>
		public static readonly MyStringId SunRotationPeriod = MyStringId.GetOrCompute("SunRotationPeriod");

		/// <summary>
		/// Switch cockpit builder mode
		/// </summary>
		public static readonly MyStringId SwitchBuilderMode = MyStringId.GetOrCompute("SwitchBuilderMode");

		/// <summary>
		/// Close
		/// </summary>
		public static readonly MyStringId SwitchText_Close = MyStringId.GetOrCompute("SwitchText_Close");

		/// <summary>
		/// Off
		/// </summary>
		public static readonly MyStringId SwitchText_Off = MyStringId.GetOrCompute("SwitchText_Off");

		/// <summary>
		/// On
		/// </summary>
		public static readonly MyStringId SwitchText_On = MyStringId.GetOrCompute("SwitchText_On");

		/// <summary>
		/// Open
		/// </summary>
		public static readonly MyStringId SwitchText_Open = MyStringId.GetOrCompute("SwitchText_Open");

		/// <summary>
		/// With this release we changed visuals of the game a lot. Your graphics settings were changed to Medium to avoid any performance issues.
		/// </summary>
		public static readonly MyStringId SwitchToNormalVT = MyStringId.GetOrCompute("SwitchToNormalVT");

		/// <summary>
		/// Terminal
		/// </summary>
		public static readonly MyStringId Terminal = MyStringId.GetOrCompute("Terminal");

		/// <summary>
		/// Open Terminal
		/// </summary>
		public static readonly MyStringId TerminalAccess = MyStringId.GetOrCompute("TerminalAccess");

		/// <summary>
		/// Save
		/// </summary>
		public static readonly MyStringId TerminalButton_GroupSave = MyStringId.GetOrCompute("TerminalButton_GroupSave");

		/// <summary>
		/// Take Control
		/// </summary>
		public static readonly MyStringId TerminalControl = MyStringId.GetOrCompute("TerminalControl");

		/// <summary>
		/// Control thrusters
		/// </summary>
		public static readonly MyStringId TerminalControlPanel_Cockpit_ControlThrusters = MyStringId.GetOrCompute("TerminalControlPanel_Cockpit_ControlThrusters");

		/// <summary>
		/// Control wheels
		/// </summary>
		public static readonly MyStringId TerminalControlPanel_Cockpit_ControlWheels = MyStringId.GetOrCompute("TerminalControlPanel_Cockpit_ControlWheels");

		/// <summary>
		/// Handbrake
		/// </summary>
		public static readonly MyStringId TerminalControlPanel_Cockpit_Handbrake = MyStringId.GetOrCompute("TerminalControlPanel_Cockpit_Handbrake");

		/// <summary>
		/// Park
		/// </summary>
		public static readonly MyStringId TerminalControlPanel_Cockpit_Park = MyStringId.GetOrCompute("TerminalControlPanel_Cockpit_Park");

		/// <summary>
		/// Show horizon and altitude
		/// </summary>
		public static readonly MyStringId TerminalControlPanel_Cockpit_HorizonIndicator = MyStringId.GetOrCompute("TerminalControlPanel_Cockpit_HorizonIndicator");

		/// <summary>
		/// Enable target locking
		/// </summary>
		public static readonly MyStringId TerminalControlPanel_Cockpit_EnableTargetLocking = MyStringId.GetOrCompute("TerminalControlPanel_Cockpit_EnableTargetLocking");

		/// <summary>
		/// Main cockpit
		/// </summary>
		public static readonly MyStringId TerminalControlPanel_Cockpit_MainCockpit = MyStringId.GetOrCompute("TerminalControlPanel_Cockpit_MainCockpit");

		/// <summary>
		/// Main Remote Control
		/// </summary>
		public static readonly MyStringId TerminalControlPanel_Cockpit_MainRemoteControl = MyStringId.GetOrCompute("TerminalControlPanel_Cockpit_MainRemoteControl");

		/// <summary>
		/// Edit
		/// </summary>
		public static readonly MyStringId TerminalControlPanel_EditCode = MyStringId.GetOrCompute("TerminalControlPanel_EditCode");

		/// <summary>
		/// Opens code editor where you can create new scripts and upload/download them from workshop
		/// </summary>
		public static readonly MyStringId TerminalControlPanel_EditCode_Tooltip = MyStringId.GetOrCompute("TerminalControlPanel_EditCode_Tooltip");

<<<<<<< HEAD
		/// <summary>
		/// Recompile
		/// </summary>
=======
>>>>>>> d46cf8619665219cc163a7b28984ced59ed9470d
		public static readonly MyStringId TerminalControlPanel_Recompile = MyStringId.GetOrCompute("TerminalControlPanel_Recompile");

		/// <summary>
		/// Recompiles the current script
		/// </summary>
		public static readonly MyStringId TerminalControlPanel_Recompile_Tooltip = MyStringId.GetOrCompute("TerminalControlPanel_Recompile_Tooltip");

		/// <summary>
		/// Argument
		/// </summary>
		public static readonly MyStringId TerminalControlPanel_RunArgument = MyStringId.GetOrCompute("TerminalControlPanel_RunArgument");

		/// <summary>
		/// An argument passed to your code when clicking the Run button
		/// </summary>
		public static readonly MyStringId TerminalControlPanel_RunArgument_ToolTip = MyStringId.GetOrCompute("TerminalControlPanel_RunArgument_ToolTip");

		/// <summary>
		/// Run
		/// </summary>
		public static readonly MyStringId TerminalControlPanel_RunCode = MyStringId.GetOrCompute("TerminalControlPanel_RunCode");

		/// <summary>
		/// Run with default argument
		/// </summary>
		public static readonly MyStringId TerminalControlPanel_RunCodeDefault = MyStringId.GetOrCompute("TerminalControlPanel_RunCodeDefault");

		/// <summary>
		/// Run current script and notifies about any exception during run
		/// </summary>
		public static readonly MyStringId TerminalControlPanel_RunCode_Tooltip = MyStringId.GetOrCompute("TerminalControlPanel_RunCode_Tooltip");

		/// <summary>
		/// Delay
		/// </summary>
		public static readonly MyStringId TerminalControlPanel_TimerDelay = MyStringId.GetOrCompute("TerminalControlPanel_TimerDelay");

		/// <summary>
		/// Detonate
		/// </summary>
		public static readonly MyStringId TerminalControlPanel_Warhead_Detonate = MyStringId.GetOrCompute("TerminalControlPanel_Warhead_Detonate");

		/// <summary>
		/// Detonation time
		/// </summary>
		public static readonly MyStringId TerminalControlPanel_Warhead_DetonationTime = MyStringId.GetOrCompute("TerminalControlPanel_Warhead_DetonationTime");

		/// <summary>
		/// Arm warhead
		/// </summary>
		public static readonly MyStringId TerminalControlPanel_Warhead_Safety = MyStringId.GetOrCompute("TerminalControlPanel_Warhead_Safety");

		/// <summary>
		/// When checked, the warhead can be detonated manually or by unwary handle. This does not affect automatic detonation after the countdown.
		/// </summary>
		public static readonly MyStringId TerminalControlPanel_Warhead_SafetyTooltip = MyStringId.GetOrCompute("TerminalControlPanel_Warhead_SafetyTooltip");

		/// <summary>
		/// Start countdown
		/// </summary>
		public static readonly MyStringId TerminalControlPanel_Warhead_StartCountdown = MyStringId.GetOrCompute("TerminalControlPanel_Warhead_StartCountdown");

		/// <summary>
		/// Stop countdown
		/// </summary>
		public static readonly MyStringId TerminalControlPanel_Warhead_StopCountdown = MyStringId.GetOrCompute("TerminalControlPanel_Warhead_StopCountdown");

		/// <summary>
		/// Armed
		/// </summary>
		public static readonly MyStringId TerminalControlPanel_Warhead_SwitchTextArmed = MyStringId.GetOrCompute("TerminalControlPanel_Warhead_SwitchTextArmed");

		/// <summary>
		/// Disarmed
		/// </summary>
		public static readonly MyStringId TerminalControlPanel_Warhead_SwitchTextDisarmed = MyStringId.GetOrCompute("TerminalControlPanel_Warhead_SwitchTextDisarmed");

		/// <summary>
		/// Distance
		/// </summary>
		public static readonly MyStringId TerminalDistance = MyStringId.GetOrCompute("TerminalDistance");

		/// <summary>
		/// Grid Name
		/// </summary>
		public static readonly MyStringId TerminalName = MyStringId.GetOrCompute("TerminalName");

		/// <summary>
		/// Scenario settings:
		/// </summary>
		public static readonly MyStringId TerminalScenarioSettingsLabel = MyStringId.GetOrCompute("TerminalScenarioSettingsLabel");

		/// <summary>
		/// Status
		/// </summary>
		public static readonly MyStringId TerminalStatus = MyStringId.GetOrCompute("TerminalStatus");

		/// <summary>
		/// Comms
		/// </summary>
		public static readonly MyStringId TerminalTab_Chat = MyStringId.GetOrCompute("TerminalTab_Chat");

		/// <summary>
		/// -Global Chat History-
		/// </summary>
		public static readonly MyStringId TerminalTab_Chat_ChatHistory = MyStringId.GetOrCompute("TerminalTab_Chat_ChatHistory");

		/// <summary>
		/// -Broadcast-
		/// </summary>
		public static readonly MyStringId TerminalTab_Chat_GlobalChat = MyStringId.GetOrCompute("TerminalTab_Chat_GlobalChat");

		/// <summary>
		/// Only faction members can use faction-to-faction communications
		/// </summary>
		public static readonly MyStringId TerminalTab_Chat_NoFaction = MyStringId.GetOrCompute("TerminalTab_Chat_NoFaction");

		/// <summary>
		/// offline
		/// </summary>
		public static readonly MyStringId TerminalTab_Chat_Offline = MyStringId.GetOrCompute("TerminalTab_Chat_Offline");

		/// <summary>
		/// PENDING
		/// </summary>
		public static readonly MyStringId TerminalTab_Chat_Pending = MyStringId.GetOrCompute("TerminalTab_Chat_Pending");

		/// <summary>
		/// Factions
		/// </summary>
		public static readonly MyStringId TerminalTab_Factions = MyStringId.GetOrCompute("TerminalTab_Factions");

		/// <summary>
		/// Factions:
		/// </summary>
		public static readonly MyStringId TerminalTab_FactionsTableLabel = MyStringId.GetOrCompute("TerminalTab_FactionsTableLabel");

		/// <summary>
		/// Accept peace
		/// </summary>
		public static readonly MyStringId TerminalTab_Factions_AcceptPeaceRequest = MyStringId.GetOrCompute("TerminalTab_Factions_AcceptPeaceRequest");

		/// <summary>
		/// Accept selected member to your faction
		/// </summary>
		public static readonly MyStringId TerminalTab_Factions_AcceptToolTip = MyStringId.GetOrCompute("TerminalTab_Factions_AcceptToolTip");

		/// <summary>
		/// Accept everyone
		/// </summary>
		public static readonly MyStringId TerminalTab_Factions_AutoAccept = MyStringId.GetOrCompute("TerminalTab_Factions_AutoAccept");

		/// <summary>
		/// Accept peace
		/// </summary>
		public static readonly MyStringId TerminalTab_Factions_AutoAcceptRequest = MyStringId.GetOrCompute("TerminalTab_Factions_AutoAcceptRequest");

		/// <summary>
		/// Automatically accept peace requests
		/// </summary>
		public static readonly MyStringId TerminalTab_Factions_AutoAcceptRequestToolTip = MyStringId.GetOrCompute("TerminalTab_Factions_AutoAcceptRequestToolTip");

		/// <summary>
		/// Automatically accept member requests
		/// </summary>
		public static readonly MyStringId TerminalTab_Factions_AutoAcceptToolTip = MyStringId.GetOrCompute("TerminalTab_Factions_AutoAcceptToolTip");

		/// <summary>
		/// You must leave your faction before creating new one
		/// </summary>
		public static readonly MyStringId TerminalTab_Factions_BeforeCreateLeave = MyStringId.GetOrCompute("TerminalTab_Factions_BeforeCreateLeave");

		/// <summary>
		/// Cancel join
		/// </summary>
		public static readonly MyStringId TerminalTab_Factions_CancelJoin = MyStringId.GetOrCompute("TerminalTab_Factions_CancelJoin");

		/// <summary>
		/// Cancel request
		/// </summary>
		public static readonly MyStringId TerminalTab_Factions_CancelPeaceRequest = MyStringId.GetOrCompute("TerminalTab_Factions_CancelPeaceRequest");

		/// <summary>
		/// Create
		/// </summary>
		public static readonly MyStringId TerminalTab_Factions_Create = MyStringId.GetOrCompute("TerminalTab_Factions_Create");

		/// <summary>
		/// Create a new faction
		/// </summary>
		public static readonly MyStringId TerminalTab_Factions_CreateFaction = MyStringId.GetOrCompute("TerminalTab_Factions_CreateFaction");

		/// <summary>
		/// Public info:
		/// </summary>
		public static readonly MyStringId TerminalTab_Factions_CreateFactionDescription = MyStringId.GetOrCompute("TerminalTab_Factions_CreateFactionDescription");

		/// <summary>
		/// Name:
		/// </summary>
		public static readonly MyStringId TerminalTab_Factions_CreateFactionName = MyStringId.GetOrCompute("TerminalTab_Factions_CreateFactionName");

		/// <summary>
		/// Private info:
		/// </summary>
		public static readonly MyStringId TerminalTab_Factions_CreateFactionPrivateInfo = MyStringId.GetOrCompute("TerminalTab_Factions_CreateFactionPrivateInfo");

		/// <summary>
		/// Visible to members only
		/// </summary>
		public static readonly MyStringId TerminalTab_Factions_CreateFactionPrivateInfoToolTip = MyStringId.GetOrCompute("TerminalTab_Factions_CreateFactionPrivateInfoToolTip");

		/// <summary>
		/// Visible to everyone
		/// </summary>
		public static readonly MyStringId TerminalTab_Factions_CreateFactionPublicInfoToolTip = MyStringId.GetOrCompute("TerminalTab_Factions_CreateFactionPublicInfoToolTip");

		/// <summary>
		/// Tag:
		/// </summary>
		public static readonly MyStringId TerminalTab_Factions_CreateFactionTag = MyStringId.GetOrCompute("TerminalTab_Factions_CreateFactionTag");

		/// <summary>
		/// Faction tag must be exactly 3 characters long
		/// </summary>
		public static readonly MyStringId TerminalTab_Factions_CreateFactionTagToolTip = MyStringId.GetOrCompute("TerminalTab_Factions_CreateFactionTagToolTip");

		/// <summary>
		/// Create new faction
		/// </summary>
		public static readonly MyStringId TerminalTab_Factions_CreateToolTip = MyStringId.GetOrCompute("TerminalTab_Factions_CreateToolTip");

		/// <summary>
		/// Demote selected member
		/// </summary>
		public static readonly MyStringId TerminalTab_Factions_DemoteToolTip = MyStringId.GetOrCompute("TerminalTab_Factions_DemoteToolTip");

		/// <summary>
		/// Edit faction
		/// </summary>
		public static readonly MyStringId TerminalTab_Factions_EditFaction = MyStringId.GetOrCompute("TerminalTab_Factions_EditFaction");

		/// <summary>
		/// Declare war
		/// </summary>
		public static readonly MyStringId TerminalTab_Factions_Enemy = MyStringId.GetOrCompute("TerminalTab_Factions_Enemy");

		/// <summary>
		/// Declare war to selected faction
		/// </summary>
		public static readonly MyStringId TerminalTab_Factions_EnemyToolTip = MyStringId.GetOrCompute("TerminalTab_Factions_EnemyToolTip");

		/// <summary>
		/// Propose peace
		/// </summary>
		public static readonly MyStringId TerminalTab_Factions_Friend = MyStringId.GetOrCompute("TerminalTab_Factions_Friend");

		/// <summary>
		/// Propose peace treaty to selected faction
		/// </summary>
		public static readonly MyStringId TerminalTab_Factions_FriendToolTip = MyStringId.GetOrCompute("TerminalTab_Factions_FriendToolTip");

		/// <summary>
		/// Join
		/// </summary>
		public static readonly MyStringId TerminalTab_Factions_Join = MyStringId.GetOrCompute("TerminalTab_Factions_Join");

		/// <summary>
		/// Cannot join this faction because it will exceed faction block limits!
		/// </summary>
		public static readonly MyStringId TerminalTab_Factions_JoinLimitsExceeded = MyStringId.GetOrCompute("TerminalTab_Factions_JoinLimitsExceeded");

		/// <summary>
		/// Send join request to selected faction
		/// </summary>
		public static readonly MyStringId TerminalTab_Factions_JoinToolTip = MyStringId.GetOrCompute("TerminalTab_Factions_JoinToolTip");

		/// <summary>
		/// Kick selected member from the faction
		/// </summary>
		public static readonly MyStringId TerminalTab_Factions_KickToolTip = MyStringId.GetOrCompute("TerminalTab_Factions_KickToolTip");

		/// <summary>
		/// Leave
		/// </summary>
		public static readonly MyStringId TerminalTab_Factions_Leave = MyStringId.GetOrCompute("TerminalTab_Factions_Leave");

		/// <summary>
		/// Leave selected faction
		/// </summary>
		public static readonly MyStringId TerminalTab_Factions_LeaveToolTip = MyStringId.GetOrCompute("TerminalTab_Factions_LeaveToolTip");

		/// <summary>
		/// Maximum count of factions reached
		/// </summary>
		public static readonly MyStringId TerminalTab_Factions_MaxCountReachedToolTip = MyStringId.GetOrCompute("TerminalTab_Factions_MaxCountReachedToolTip");

		/// <summary>
		/// Members:
		/// </summary>
		public static readonly MyStringId TerminalTab_Factions_Members = MyStringId.GetOrCompute("TerminalTab_Factions_Members");

		/// <summary>
		/// This faction is proposing peace treaty to your faction
		/// </summary>
		public static readonly MyStringId TerminalTab_Factions_PendingPeace = MyStringId.GetOrCompute("TerminalTab_Factions_PendingPeace");

		/// <summary>
		/// Private info (visible to members only):
		/// </summary>
		public static readonly MyStringId TerminalTab_Factions_Private = MyStringId.GetOrCompute("TerminalTab_Factions_Private");

		/// <summary>
		/// Promote selected member
		/// </summary>
		public static readonly MyStringId TerminalTab_Factions_PromoteToolTip = MyStringId.GetOrCompute("TerminalTab_Factions_PromoteToolTip");

		/// <summary>
		/// You are applying for a membership in this faction
		/// </summary>
		public static readonly MyStringId TerminalTab_Factions_SentJoinToolTip = MyStringId.GetOrCompute("TerminalTab_Factions_SentJoinToolTip");

		/// <summary>
		/// You are proposing peace treaty to this faction
		/// </summary>
		public static readonly MyStringId TerminalTab_Factions_SentPeace = MyStringId.GetOrCompute("TerminalTab_Factions_SentPeace");

		/// <summary>
		/// GPS
		/// </summary>
		public static readonly MyStringId TerminalTab_GPS = MyStringId.GetOrCompute("TerminalTab_GPS");

		/// <summary>
		/// New
		/// </summary>
		public static readonly MyStringId TerminalTab_GPS_Add = MyStringId.GetOrCompute("TerminalTab_GPS_Add");

		/// <summary>
		/// Create a new GPS entry
		/// </summary>
		public static readonly MyStringId TerminalTab_GPS_Add_ToolTip = MyStringId.GetOrCompute("TerminalTab_GPS_Add_ToolTip");

		/// <summary>
		/// Always Visible
		/// </summary>
		public static readonly MyStringId TerminalTab_GPS_AlwaysVisible = MyStringId.GetOrCompute("TerminalTab_GPS_AlwaysVisible");

		/// <summary>
		/// Prevents this GPS coordinate from getting clustered or fading out
		/// </summary>
		public static readonly MyStringId TerminalTab_GPS_AlwaysVisible_Tooltip = MyStringId.GetOrCompute("TerminalTab_GPS_AlwaysVisible_Tooltip");

		/// <summary>
		/// Coordinates:
		/// </summary>
		public static readonly MyStringId TerminalTab_GPS_Coordinates = MyStringId.GetOrCompute("TerminalTab_GPS_Coordinates");

		/// <summary>
		/// Copy to clipboard
		/// </summary>
		public static readonly MyStringId TerminalTab_GPS_CopyToClipboard = MyStringId.GetOrCompute("TerminalTab_GPS_CopyToClipboard");

		/// <summary>
		/// Copy the selected GPS entry into your clipboard
		/// </summary>
		public static readonly MyStringId TerminalTab_GPS_CopyToClipboard_ToolTip = MyStringId.GetOrCompute("TerminalTab_GPS_CopyToClipboard_ToolTip");

		/// <summary>
		/// Delete
		/// </summary>
		public static readonly MyStringId TerminalTab_GPS_Delete = MyStringId.GetOrCompute("TerminalTab_GPS_Delete");

		/// <summary>
		/// You have to select a GPS entry before you can remove it
		/// </summary>
		public static readonly MyStringId TerminalTab_GPS_Delete_Disabled_ToolTip = MyStringId.GetOrCompute("TerminalTab_GPS_Delete_Disabled_ToolTip");

		/// <summary>
		/// Remove selected GPS entry
		/// </summary>
		public static readonly MyStringId TerminalTab_GPS_Delete_ToolTip = MyStringId.GetOrCompute("TerminalTab_GPS_Delete_ToolTip");

		/// <summary>
		/// Description:
		/// </summary>
		public static readonly MyStringId TerminalTab_GPS_Description = MyStringId.GetOrCompute("TerminalTab_GPS_Description");

		/// <summary>
		/// By: 
		/// </summary>
		public static readonly MyStringId TerminalTab_GPS_FromChatDescPrefix = MyStringId.GetOrCompute("TerminalTab_GPS_FromChatDescPrefix");

		/// <summary>
		/// Name:
		/// </summary>
		public static readonly MyStringId TerminalTab_GPS_Name = MyStringId.GetOrCompute("TerminalTab_GPS_Name");

		/// <summary>
		/// New coordinates
		/// </summary>
		public static readonly MyStringId TerminalTab_GPS_NewCoord_Desc = MyStringId.GetOrCompute("TerminalTab_GPS_NewCoord_Desc");

		/// <summary>
		/// Description of the GPS entry
		/// </summary>
		public static readonly MyStringId TerminalTab_GPS_NewCoord_Desc_ToolTip = MyStringId.GetOrCompute("TerminalTab_GPS_NewCoord_Desc_ToolTip");

		/// <summary>
		/// New
		/// </summary>
		public static readonly MyStringId TerminalTab_GPS_NewCoord_Name = MyStringId.GetOrCompute("TerminalTab_GPS_NewCoord_Name");

		/// <summary>
		/// Name of the GPS entry, that is visible on your HUD
		/// </summary>
		public static readonly MyStringId TerminalTab_GPS_NewCoord_Name_ToolTip = MyStringId.GetOrCompute("TerminalTab_GPS_NewCoord_Name_ToolTip");

		/// <summary>
		/// New from broadcast
		/// </summary>
		public static readonly MyStringId TerminalTab_GPS_NewFromBroadcast = MyStringId.GetOrCompute("TerminalTab_GPS_NewFromBroadcast");

		/// <summary>
		/// New from clipboard
		/// </summary>
		public static readonly MyStringId TerminalTab_GPS_NewFromClipboard = MyStringId.GetOrCompute("TerminalTab_GPS_NewFromClipboard");

		/// <summary>
		/// Pasted from clipboard
		/// </summary>
		public static readonly MyStringId TerminalTab_GPS_NewFromClipboard_Desc = MyStringId.GetOrCompute("TerminalTab_GPS_NewFromClipboard_Desc");

		/// <summary>
		/// Create a new GPS entry from clipboard
		/// </summary>
		public static readonly MyStringId TerminalTab_GPS_NewFromClipboard_ToolTip = MyStringId.GetOrCompute("TerminalTab_GPS_NewFromClipboard_ToolTip");

		/// <summary>
		/// New from current pos.
		/// </summary>
		public static readonly MyStringId TerminalTab_GPS_NewFromCurrent = MyStringId.GetOrCompute("TerminalTab_GPS_NewFromCurrent");

		/// <summary>
		/// Current position
		/// </summary>
		public static readonly MyStringId TerminalTab_GPS_NewFromCurrent_Desc = MyStringId.GetOrCompute("TerminalTab_GPS_NewFromCurrent_Desc");

		/// <summary>
		/// Current
		/// </summary>
		public static readonly MyStringId TerminalTab_GPS_NewFromCurrent_Name = MyStringId.GetOrCompute("TerminalTab_GPS_NewFromCurrent_Name");

		/// <summary>
		/// Create a new GPS entry at current coordinates
		/// </summary>
		public static readonly MyStringId TerminalTab_GPS_NewFromCurrent_ToolTip = MyStringId.GetOrCompute("TerminalTab_GPS_NewFromCurrent_ToolTip");

		/// <summary>
		/// New from faction comms
		/// </summary>
		public static readonly MyStringId TerminalTab_GPS_NewFromFactionComms = MyStringId.GetOrCompute("TerminalTab_GPS_NewFromFactionComms");

		/// <summary>
		/// New from private comms
		/// </summary>
		public static readonly MyStringId TerminalTab_GPS_NewFromPrivateComms = MyStringId.GetOrCompute("TerminalTab_GPS_NewFromPrivateComms");

		/// <summary>
		/// Warning: illegal data. Modifications will not be saved.
		/// </summary>
		public static readonly MyStringId TerminalTab_GPS_SaveWarning = MyStringId.GetOrCompute("TerminalTab_GPS_SaveWarning");

		/// <summary>
		/// No GPS entry selected.
		/// </summary>
		public static readonly MyStringId TerminalTab_GPS_SelectGpsEntry = MyStringId.GetOrCompute("TerminalTab_GPS_SelectGpsEntry");

		/// <summary>
		/// Show on  HUD
		/// </summary>
		public static readonly MyStringId TerminalTab_GPS_ShowOnHud = MyStringId.GetOrCompute("TerminalTab_GPS_ShowOnHud");

		/// <summary>
		/// Display this GPS marker on in-game HUD.
		/// </summary>
		public static readonly MyStringId TerminalTab_GPS_ShowOnHud_ToolTip = MyStringId.GetOrCompute("TerminalTab_GPS_ShowOnHud_ToolTip");

		/// <summary>
		/// X
		/// </summary>
		public static readonly MyStringId TerminalTab_GPS_X = MyStringId.GetOrCompute("TerminalTab_GPS_X");

		/// <summary>
		/// X Coordinate
		/// </summary>
		public static readonly MyStringId TerminalTab_GPS_X_ToolTip = MyStringId.GetOrCompute("TerminalTab_GPS_X_ToolTip");

		/// <summary>
		/// Y
		/// </summary>
		public static readonly MyStringId TerminalTab_GPS_Y = MyStringId.GetOrCompute("TerminalTab_GPS_Y");

		/// <summary>
		/// Y Coordinate
		/// </summary>
		public static readonly MyStringId TerminalTab_GPS_Y_ToolTip = MyStringId.GetOrCompute("TerminalTab_GPS_Y_ToolTip");

		/// <summary>
		/// Z
		/// </summary>
		public static readonly MyStringId TerminalTab_GPS_Z = MyStringId.GetOrCompute("TerminalTab_GPS_Z");

		/// <summary>
		/// Z Coordinate
		/// </summary>
		public static readonly MyStringId TerminalTab_GPS_Z_ToolTip = MyStringId.GetOrCompute("TerminalTab_GPS_Z_ToolTip");

		/// <summary>
		/// Info
		/// </summary>
		public static readonly MyStringId TerminalTab_Info = MyStringId.GetOrCompute("TerminalTab_Info");

		/// <summary>
		/// Assign Author
		/// </summary>
		public static readonly MyStringId TerminalTab_Info_Assign = MyStringId.GetOrCompute("TerminalTab_Info_Assign");

		/// <summary>
		/// Blocks: 
		/// </summary>
		public static readonly MyStringId TerminalTab_Info_Blocks = MyStringId.GetOrCompute("TerminalTab_Info_Blocks");

		/// <summary>
		/// blocks
		/// </summary>
		public static readonly MyStringId TerminalTab_Info_BlocksLower = MyStringId.GetOrCompute("TerminalTab_Info_BlocksLower");

		/// <summary>
		/// Total number of blocks in a grid
		/// </summary>
		public static readonly MyStringId TerminalTab_Info_BlocksTooltip = MyStringId.GetOrCompute("TerminalTab_Info_BlocksTooltip");

		/// <summary>
		/// Convert to ship
		/// </summary>
		public static readonly MyStringId TerminalTab_Info_ConvertButton = MyStringId.GetOrCompute("TerminalTab_Info_ConvertButton");

		/// <summary>
		/// Converts this station to a ship. Ships can move and rotate.
		/// </summary>
		public static readonly MyStringId TerminalTab_Info_ConvertButton_TT = MyStringId.GetOrCompute("TerminalTab_Info_ConvertButton_TT");

		/// <summary>
		/// Convert to station
		/// </summary>
		public static readonly MyStringId TerminalTab_Info_ConvertToStationButton = MyStringId.GetOrCompute("TerminalTab_Info_ConvertToStationButton");

		/// <summary>
		/// Converts this ship to a station. Ship has to be stationary in order to convert it to a station (both angular and linear velocity have to be 0). Stations are more performance friendly.
		/// </summary>
		public static readonly MyStringId TerminalTab_Info_ConvertToStationButton_TT = MyStringId.GetOrCompute("TerminalTab_Info_ConvertToStationButton_TT");

		/// <summary>
		/// Conveyors: 
		/// </summary>
		public static readonly MyStringId TerminalTab_Info_Conveyors = MyStringId.GetOrCompute("TerminalTab_Info_Conveyors");

		/// <summary>
		/// Building a grid partially inside of terrain automatically turns the grid into a station. Stations are more performance friendly but are static and cannot be moved.  You can convert any station into a ship. Be careful that it's not embedded in any terrain as it might explode.  A ship needs to be stationary in order to convert it into a station.
		/// </summary>
		public static readonly MyStringId TerminalTab_Info_Description = MyStringId.GetOrCompute("TerminalTab_Info_Description");

		/// <summary>
		/// Destructible blocks
		/// </summary>
		public static readonly MyStringId TerminalTab_Info_DestructibleBlocks = MyStringId.GetOrCompute("TerminalTab_Info_DestructibleBlocks");

		/// <summary>
		/// Toogles destructible blocks only for this grid. If destructible blocks are disabled in world settings, this is ignored. Only available in scenarios.
		/// </summary>
		public static readonly MyStringId TerminalTab_Info_DestructibleBlocks_Tooltip = MyStringId.GetOrCompute("TerminalTab_Info_DestructibleBlocks_Tooltip");

		/// <summary>
		/// Show distance for enemy antennas
		/// </summary>
		public static readonly MyStringId TerminalTab_Info_EnemyAntennaRange = MyStringId.GetOrCompute("TerminalTab_Info_EnemyAntennaRange");

		/// <summary>
		/// Maximum range at which enemy antennas can be displayed on HUD
		/// </summary>
		public static readonly MyStringId TerminalTab_Info_EnemyAntennaRange_ToolTip = MyStringId.GetOrCompute("TerminalTab_Info_EnemyAntennaRange_ToolTip");

		/// <summary>
		/// Show distance for friendly antennas
		/// </summary>
		public static readonly MyStringId TerminalTab_Info_FriendlyAntennaRange = MyStringId.GetOrCompute("TerminalTab_Info_FriendlyAntennaRange");

		/// <summary>
		/// Maximum range at which friendly antennas can be displayed on HUD
		/// </summary>
		public static readonly MyStringId TerminalTab_Info_FriendlyAntennaRange_ToolTip = MyStringId.GetOrCompute("TerminalTab_Info_FriendlyAntennaRange_ToolTip");

		/// <summary>
		/// Gravity generators: 
		/// </summary>
		public static readonly MyStringId TerminalTab_Info_GravGens = MyStringId.GetOrCompute("TerminalTab_Info_GravGens");

		/// <summary>
		/// Grid info:
		/// </summary>
		public static readonly MyStringId TerminalTab_Info_GridInfoLabel = MyStringId.GetOrCompute("TerminalTab_Info_GridInfoLabel");

		/// <summary>
		/// Grid mass:
		/// </summary>
		public static readonly MyStringId TerminalTab_Info_GridMass = MyStringId.GetOrCompute("TerminalTab_Info_GridMass");

		/// <summary>
		/// Lights: 
		/// </summary>
		public static readonly MyStringId TerminalTab_Info_Lights = MyStringId.GetOrCompute("TerminalTab_Info_Lights");

		/// <summary>
		/// Non-armor blocks: 
		/// </summary>
		public static readonly MyStringId TerminalTab_Info_NonArmor = MyStringId.GetOrCompute("TerminalTab_Info_NonArmor");

		/// <summary>
		/// Created blocks info:
		/// </summary>
		public static readonly MyStringId TerminalTab_Info_Overview = MyStringId.GetOrCompute("TerminalTab_Info_Overview");

		/// <summary>
		/// Show distance for owned antennas
		/// </summary>
		public static readonly MyStringId TerminalTab_Info_OwnedAntennaRange = MyStringId.GetOrCompute("TerminalTab_Info_OwnedAntennaRange");

		/// <summary>
		/// Maximum range at which owned antennas can be displayed on HUD
		/// </summary>
		public static readonly MyStringId TerminalTab_Info_OwnedAntennaRange_ToolTip = MyStringId.GetOrCompute("TerminalTab_Info_OwnedAntennaRange_ToolTip");

		/// <summary>
		/// Show grid pivot
		/// </summary>
		public static readonly MyStringId TerminalTab_Info_PivotBtn = MyStringId.GetOrCompute("TerminalTab_Info_PivotBtn");

		/// <summary>
		/// Draw pivot point of each grid
		/// </summary>
		public static readonly MyStringId TerminalTab_Info_PivotBtn_ToolTip = MyStringId.GetOrCompute("TerminalTab_Info_PivotBtn_ToolTip");

		/// <summary>
		/// Spotlights: 
		/// </summary>
		public static readonly MyStringId TerminalTab_Info_Reflectors = MyStringId.GetOrCompute("TerminalTab_Info_Reflectors");

		/// <summary>
		/// Remove whole grid from the world
		/// </summary>
		public static readonly MyStringId TerminalTab_Info_RemoveGrid = MyStringId.GetOrCompute("TerminalTab_Info_RemoveGrid");

		/// <summary>
		/// Rotors: 
		/// </summary>
		public static readonly MyStringId TerminalTab_Info_Rotors = MyStringId.GetOrCompute("TerminalTab_Info_Rotors");

		/// <summary>
		/// Physical shapes: {0}/{1}
		/// </summary>
		public static readonly MyStringId TerminalTab_Info_Shapes = MyStringId.GetOrCompute("TerminalTab_Info_Shapes");

		/// <summary>
		/// Grid Name:
		/// </summary>
		public static readonly MyStringId TerminalTab_Info_ShipName = MyStringId.GetOrCompute("TerminalTab_Info_ShipName");

		/// <summary>
		/// Show antenna range
		/// </summary>
		public static readonly MyStringId TerminalTab_Info_ShowAntenaGizmo = MyStringId.GetOrCompute("TerminalTab_Info_ShowAntenaGizmo");

		/// <summary>
		/// Visualizes range of nearby antennas.
		/// </summary>
		public static readonly MyStringId TerminalTab_Info_ShowAntenaGizmo_ToolTip = MyStringId.GetOrCompute("TerminalTab_Info_ShowAntenaGizmo_ToolTip");

		/// <summary>
		/// Show gravity range
		/// </summary>
		public static readonly MyStringId TerminalTab_Info_ShowGravityGizmo = MyStringId.GetOrCompute("TerminalTab_Info_ShowGravityGizmo");

		/// <summary>
		/// Visualize range of gravity generators
		/// </summary>
		public static readonly MyStringId TerminalTab_Info_ShowGravityGizmo_ToolTip = MyStringId.GetOrCompute("TerminalTab_Info_ShowGravityGizmo_ToolTip");

		/// <summary>
		/// Show center of mass
		/// </summary>
		public static readonly MyStringId TerminalTab_Info_ShowMassCenter = MyStringId.GetOrCompute("TerminalTab_Info_ShowMassCenter");

		/// <summary>
		/// Draw center of mass of each grid
		/// </summary>
		public static readonly MyStringId TerminalTab_Info_ShowMassCenter_ToolTip = MyStringId.GetOrCompute("TerminalTab_Info_ShowMassCenter_ToolTip");

		/// <summary>
		/// Show sensors field range
		/// </summary>
		public static readonly MyStringId TerminalTab_Info_ShowSenzorGizmo = MyStringId.GetOrCompute("TerminalTab_Info_ShowSenzorGizmo");

		/// <summary>
		/// Draw range of sensor fields
		/// </summary>
		public static readonly MyStringId TerminalTab_Info_ShowSenzorGizmo_ToolTip = MyStringId.GetOrCompute("TerminalTab_Info_ShowSenzorGizmo_ToolTip");

		/// <summary>
		/// Thrusters: 
		/// </summary>
		public static readonly MyStringId TerminalTab_Info_Thrusters = MyStringId.GetOrCompute("TerminalTab_Info_Thrusters");

		/// <summary>
		/// Triangles: 
		/// </summary>
		public static readonly MyStringId TerminalTab_Info_Triangles = MyStringId.GetOrCompute("TerminalTab_Info_Triangles");

		/// <summary>
		/// Number of triangles for drawing. Technical information. Higher numbers affect performance.
		/// </summary>
		public static readonly MyStringId TerminalTab_Info_TrianglesTooltip = MyStringId.GetOrCompute("TerminalTab_Info_TrianglesTooltip");

		/// <summary>
		/// Artificial masses: 
		/// </summary>
		public static readonly MyStringId TerminalTab_Info_VirtualMass = MyStringId.GetOrCompute("TerminalTab_Info_VirtualMass");

		/// <summary>
		/// You built
		/// </summary>
		public static readonly MyStringId TerminalTab_Info_YouBuilt = MyStringId.GetOrCompute("TerminalTab_Info_YouBuilt");

		/// <summary>
		/// Players:
		/// </summary>
		public static readonly MyStringId TerminalTab_PlayersTableLabel = MyStringId.GetOrCompute("TerminalTab_PlayersTableLabel");

		/// <summary>
		/// Production
		/// </summary>
		public static readonly MyStringId TerminalTab_Production = MyStringId.GetOrCompute("TerminalTab_Production");

		/// <summary>
		/// Authorship operations are not available when playing with no limits.
		/// </summary>
		public static readonly MyStringId Terminal_AuthorshipNotAvailable = MyStringId.GetOrCompute("Terminal_AuthorshipNotAvailable");

		/// <summary>
		///  (access denied)
		/// </summary>
		public static readonly MyStringId Terminal_BlockAccessDenied = MyStringId.GetOrCompute("Terminal_BlockAccessDenied");

		/// <summary>
		///  (incomplete)
		/// </summary>
		public static readonly MyStringId Terminal_BlockIncomplete = MyStringId.GetOrCompute("Terminal_BlockIncomplete");

		/// <summary>
		/// Collect All
		/// </summary>
		public static readonly MyStringId Terminal_CollectAll = MyStringId.GetOrCompute("Terminal_CollectAll");

		/// <summary>
		/// Override Power Transfer
		/// </summary>
		public static readonly MyStringId Terminal_PowerTransferOverride = MyStringId.GetOrCompute("Terminal_PowerTransferOverride");

		/// <summary>
		/// Custom Data
		/// </summary>
		public static readonly MyStringId Terminal_CustomData = MyStringId.GetOrCompute("Terminal_CustomData");

		/// <summary>
		/// Shows an editor for custom data to be used by scripts and mods.
		/// </summary>
		public static readonly MyStringId Terminal_CustomDataTooltip = MyStringId.GetOrCompute("Terminal_CustomDataTooltip");

		/// <summary>
		/// Drain All
		/// </summary>
		public static readonly MyStringId Terminal_DrainAll = MyStringId.GetOrCompute("Terminal_DrainAll");

		/// <summary>
		/// Block Group:
		/// </summary>
		public static readonly MyStringId Terminal_GroupTitle = MyStringId.GetOrCompute("Terminal_GroupTitle");

		/// <summary>
		/// Remote Access
		/// </summary>
		public static readonly MyStringId Terminal_RemoteControl_Button = MyStringId.GetOrCompute("Terminal_RemoteControl_Button");

		/// <summary>
		/// Shoot
		/// </summary>
		public static readonly MyStringId Terminal_Shoot = MyStringId.GetOrCompute("Terminal_Shoot");

		/// <summary>
		/// Shoot once
		/// </summary>
		public static readonly MyStringId Terminal_ShootOnce = MyStringId.GetOrCompute("Terminal_ShootOnce");

		/// <summary>
		/// Show hidden blocks
		/// </summary>
		public static readonly MyStringId Terminal_ShowAllInTerminal = MyStringId.GetOrCompute("Terminal_ShowAllInTerminal");

		/// <summary>
		/// Show block in Inventory Screen
		/// </summary>
		public static readonly MyStringId Terminal_ShowInInventory = MyStringId.GetOrCompute("Terminal_ShowInInventory");

		/// <summary>
		/// Show block in inventory screen. If you access the block directly it will be visible regardless of this setting.
		/// </summary>
		public static readonly MyStringId Terminal_ShowInInventoryToolTip = MyStringId.GetOrCompute("Terminal_ShowInInventoryToolTip");

		/// <summary>
		/// Show block in terminal
		/// </summary>
		public static readonly MyStringId Terminal_ShowInTerminal = MyStringId.GetOrCompute("Terminal_ShowInTerminal");

		/// <summary>
		/// Show/hide current block in terminal
		/// </summary>
		public static readonly MyStringId Terminal_ShowInTerminalToolTip = MyStringId.GetOrCompute("Terminal_ShowInTerminalToolTip");

		/// <summary>
		/// Show block in toolbar config
		/// </summary>
		public static readonly MyStringId Terminal_ShowInToolbarConfig = MyStringId.GetOrCompute("Terminal_ShowInToolbarConfig");

		/// <summary>
		/// Show/hide current block in toolbar config
		/// </summary>
		public static readonly MyStringId Terminal_ShowInToolbarConfigToolTip = MyStringId.GetOrCompute("Terminal_ShowInToolbarConfigToolTip");

		/// <summary>
		/// Show on HUD
		/// </summary>
		public static readonly MyStringId Terminal_ShowOnHUD = MyStringId.GetOrCompute("Terminal_ShowOnHUD");

		/// <summary>
		/// You must have active antenna connected
		/// </summary>
		public static readonly MyStringId Terminal_ShowOnHUDToolTip = MyStringId.GetOrCompute("Terminal_ShowOnHUDToolTip");

		/// <summary>
		/// Throw Out
		/// </summary>
		public static readonly MyStringId Terminal_ThrowOut = MyStringId.GetOrCompute("Terminal_ThrowOut");

		/// <summary>
		/// Use Conveyor System
		/// </summary>
		public static readonly MyStringId Terminal_UseConveyorSystem = MyStringId.GetOrCompute("Terminal_UseConveyorSystem");

		/// <summary>
		/// Decrease
		/// </summary>
		public static readonly MyStringId ToolbarAction_Decrease = MyStringId.GetOrCompute("ToolbarAction_Decrease");

		/// <summary>
		/// Increase
		/// </summary>
		public static readonly MyStringId ToolbarAction_Increase = MyStringId.GetOrCompute("ToolbarAction_Increase");

		/// <summary>
		/// Reset
		/// </summary>
		public static readonly MyStringId ToolbarAction_Reset = MyStringId.GetOrCompute("ToolbarAction_Reset");

		/// <summary>
		/// Progression is currently disabled, you can enable it in the advanced world settings.
		/// </summary>
		public static readonly MyStringId ToolbarConfig_ResearchTabDisabledTooltip = MyStringId.GetOrCompute("ToolbarConfig_ResearchTabDisabledTooltip");

		/// <summary>
		/// Enable sound echo. Note that if your audio rate is larger than  48kHz, this feature will not work. (You can configure the audio rate in system's speaker properties)
		/// </summary>
		public static readonly MyStringId ToolTipAudioOptionsEnableReverb = MyStringId.GetOrCompute("ToolTipAudioOptionsEnableReverb");

		/// <summary>
		/// Check for power storage, uncheck for power output
		/// </summary>
		public static readonly MyStringId ToolTipBatteryBlock = MyStringId.GetOrCompute("ToolTipBatteryBlock");

		/// <summary>
		/// Discharge the battery
		/// </summary>
		public static readonly MyStringId ToolTipBatteryBlock_Discharge = MyStringId.GetOrCompute("ToolTipBatteryBlock_Discharge");

		/// <summary>
		/// Sets to recharge when stored power is 0, sets to discharge when stored power is max.
		/// </summary>
		public static readonly MyStringId ToolTipBatteryBlock_Semiauto = MyStringId.GetOrCompute("ToolTipBatteryBlock_Semiauto");

		/// <summary>
		/// Show only one item in case you own multiple items of the same type
		/// </summary>
		public static readonly MyStringId ToolTipCharacterScreen_HideDuplicates = MyStringId.GetOrCompute("ToolTipCharacterScreen_HideDuplicates");

		/// <summary>
		/// Change your character model
		/// </summary>
		public static readonly MyStringId ToolTipCharacterScreen_Model = MyStringId.GetOrCompute("ToolTipCharacterScreen_Model");

		/// <summary>
		/// Show only items you own more than one time
		/// </summary>
		public static readonly MyStringId ToolTipCharacterScreen_ShowOnlyDuplicates = MyStringId.GetOrCompute("ToolTipCharacterScreen_ShowOnlyDuplicates");

		/// <summary>
		/// Intensity multiplier for all lens flares
		/// </summary>
		public static readonly MyStringId ToolTipFlaresIntensity = MyStringId.GetOrCompute("ToolTipFlaresIntensity");

<<<<<<< HEAD
		/// <summary>
		/// Scale of the UI screens to prevent having text outside of the TV border.
		/// </summary>
		public static readonly MyStringId ToolTipOptionsDisplay_SpriteMainViewportScale = MyStringId.GetOrCompute("ToolTipOptionsDisplay_SpriteMainViewportScale");

		/// <summary>
		/// UI scale
		/// </summary>
		public static readonly MyStringId LabelOptionsDisplay_SpriteMainViewportScale = MyStringId.GetOrCompute("LabelOptionsDisplay_SpriteMainViewportScale");

		/// <summary>
		/// Any ammo magazine accepted by {0}
		/// </summary>
=======
		public static readonly MyStringId ToolTipOptionsDisplay_SpriteMainViewportScale = MyStringId.GetOrCompute("ToolTipOptionsDisplay_SpriteMainViewportScale");

		public static readonly MyStringId LabelOptionsDisplay_SpriteMainViewportScale = MyStringId.GetOrCompute("LabelOptionsDisplay_SpriteMainViewportScale");

>>>>>>> d46cf8619665219cc163a7b28984ced59ed9470d
		public static readonly MyStringId ToolTipItemFilter_AmmoMagazineInput = MyStringId.GetOrCompute("ToolTipItemFilter_AmmoMagazineInput");

		/// <summary>
		/// Any kind of ingot
		/// </summary>
		public static readonly MyStringId ToolTipItemFilter_AnyIngot = MyStringId.GetOrCompute("ToolTipItemFilter_AnyIngot");

		/// <summary>
		/// Any kind of ore
		/// </summary>
		public static readonly MyStringId ToolTipItemFilter_AnyOre = MyStringId.GetOrCompute("ToolTipItemFilter_AnyOre");

		/// <summary>
		/// Any item produced by assembler
		/// </summary>
		public static readonly MyStringId ToolTipItemFilter_AssembledItems = MyStringId.GetOrCompute("ToolTipItemFilter_AssembledItems");

		/// <summary>
		/// Any item accepted by {0}
		/// </summary>
		public static readonly MyStringId ToolTipItemFilter_GenericProductionBlockInput = MyStringId.GetOrCompute("ToolTipItemFilter_GenericProductionBlockInput");

		/// <summary>
		/// Any item produced by {0}
		/// </summary>
		public static readonly MyStringId ToolTipItemFilter_GenericProductionBlockOutput = MyStringId.GetOrCompute("ToolTipItemFilter_GenericProductionBlockOutput");

		/// <summary>
		/// Missile 200 mm
		/// </summary>
		public static readonly MyStringId ToolTipItemFilter_Missile200mm = MyStringId.GetOrCompute("ToolTipItemFilter_Missile200mm");

		/// <summary>
		/// NATO 25x184 mm
		/// </summary>
		public static readonly MyStringId ToolTipItemFilter_NATO_25x184mm = MyStringId.GetOrCompute("ToolTipItemFilter_NATO_25x184mm");

		/// <summary>
		/// NATO 5.56x45 mm
		/// </summary>
		public static readonly MyStringId ToolTipItemFilter_NATO_5p56x45mm = MyStringId.GetOrCompute("ToolTipItemFilter_NATO_5p56x45mm");

		/// <summary>
		/// Uranium ingot
		/// </summary>
		public static readonly MyStringId ToolTipItemFilter_UraniumIngot = MyStringId.GetOrCompute("ToolTipItemFilter_UraniumIngot");

		/// <summary>
		/// Check to add this IP to your favorite servers list
		/// </summary>
		public static readonly MyStringId ToolTipJoinGameDirectConnect_Favorite = MyStringId.GetOrCompute("ToolTipJoinGameDirectConnect_Favorite");

		/// <summary>
		/// Insert server IP or hostname.
		/// </summary>
		public static readonly MyStringId ToolTipJoinGameDirectConnect_IP = MyStringId.GetOrCompute("ToolTipJoinGameDirectConnect_IP");

		/// <summary>
		/// Add selected server to favorites
		/// </summary>
		public static readonly MyStringId ToolTipJoinGameServerDetails_AddFavorite = MyStringId.GetOrCompute("ToolTipJoinGameServerDetails_AddFavorite");

		/// <summary>
		/// View server mods
		/// </summary>
		public static readonly MyStringId ToolTipJoinGameServerDetails_Mods = MyStringId.GetOrCompute("ToolTipJoinGameServerDetails_Mods");

		/// <summary>
		/// View online players
		/// </summary>
		public static readonly MyStringId ToolTipJoinGameServerDetails_Players = MyStringId.GetOrCompute("ToolTipJoinGameServerDetails_Players");

		/// <summary>
		/// Remove selected server from favorites
		/// </summary>
		public static readonly MyStringId ToolTipJoinGameServerDetails_RemoveFavorite = MyStringId.GetOrCompute("ToolTipJoinGameServerDetails_RemoveFavorite");

		/// <summary>
		/// View server settings
		/// </summary>
		public static readonly MyStringId ToolTipJoinGameServerDetails_Settings = MyStringId.GetOrCompute("ToolTipJoinGameServerDetails_Settings");

		/// <summary>
		/// Configure advanced search settings
		/// </summary>
		public static readonly MyStringId ToolTipJoinGameServerSearch_Advanced = MyStringId.GetOrCompute("ToolTipJoinGameServerSearch_Advanced");

		/// <summary>
		/// Show servers supporting {0} group whitelisting
		/// </summary>
		public static readonly MyStringId ToolTipJoinGameServerSearch_AllowedGroups = MyStringId.GetOrCompute("ToolTipJoinGameServerSearch_AllowedGroups");

		/// <summary>
		/// Show only servers with compatible version
		/// </summary>
		public static readonly MyStringId ToolTipJoinGameServerSearch_CompatibleVersions = MyStringId.GetOrCompute("ToolTipJoinGameServerSearch_CompatibleVersions");

		/// <summary>
		/// Show creative servers
		/// </summary>
		public static readonly MyStringId ToolTipJoinGameServerSearch_Creative = MyStringId.GetOrCompute("ToolTipJoinGameServerSearch_Creative");

		/// <summary>
		/// Restore server search settings to default value
		/// </summary>
		public static readonly MyStringId ToolTipJoinGameServerSearch_Defaults = MyStringId.GetOrCompute("ToolTipJoinGameServerSearch_Defaults");

		/// <summary>
		/// Show only servers with corresponding level of environment hostility
		/// </summary>
		public static readonly MyStringId ToolTipJoinGameServerSearch_EvnironmentHostility = MyStringId.GetOrCompute("ToolTipJoinGameServerSearch_EvnironmentHostility");

		/// <summary>
		/// Show servers with password
		/// </summary>
		public static readonly MyStringId ToolTipJoinGameServerSearch_HasPassword = MyStringId.GetOrCompute("ToolTipJoinGameServerSearch_HasPassword");

		/// <summary>
		/// Maximum filter value
		/// </summary>
		public static readonly MyStringId ToolTipJoinGameServerSearch_MaximumFilterValue = MyStringId.GetOrCompute("ToolTipJoinGameServerSearch_MaximumFilterValue");

		/// <summary>
		/// Minimum filter value
		/// </summary>
		public static readonly MyStringId ToolTipJoinGameServerSearch_MinimumFilterValue = MyStringId.GetOrCompute("ToolTipJoinGameServerSearch_MinimumFilterValue");

		/// <summary>
		/// Configure mods search settings
		/// </summary>
		public static readonly MyStringId ToolTipJoinGameServerSearch_Mods = MyStringId.GetOrCompute("ToolTipJoinGameServerSearch_Mods");

		/// <summary>
		/// Filter by latency
		/// </summary>
		public static readonly MyStringId ToolTipJoinGameServerSearch_Ping = MyStringId.GetOrCompute("ToolTipJoinGameServerSearch_Ping");

		/// <summary>
		/// Show only servers with same game data
		/// </summary>
		public static readonly MyStringId ToolTipJoinGameServerSearch_SameGameData = MyStringId.GetOrCompute("ToolTipJoinGameServerSearch_SameGameData");

		/// <summary>
		/// Update current server search filter
		/// </summary>
		public static readonly MyStringId ToolTipJoinGameServerSearch_Search = MyStringId.GetOrCompute("ToolTipJoinGameServerSearch_Search");

		/// <summary>
		/// Configure basic server search settings
		/// </summary>
		public static readonly MyStringId ToolTipJoinGameServerSearch_Settings = MyStringId.GetOrCompute("ToolTipJoinGameServerSearch_Settings");

		/// <summary>
		/// Show survival servers
		/// </summary>
		public static readonly MyStringId ToolTipJoinGameServerSearch_Survival = MyStringId.GetOrCompute("ToolTipJoinGameServerSearch_Survival");

		/// <summary>
		/// Open advanced server search settings
		/// </summary>
		public static readonly MyStringId ToolTipJoinGame_Advanced = MyStringId.GetOrCompute("ToolTipJoinGame_Advanced");

		/// <summary>
		/// Connect to a server via IP
		/// </summary>
		public static readonly MyStringId ToolTipJoinGame_DirectConnect = MyStringId.GetOrCompute("ToolTipJoinGame_DirectConnect");

		/// <summary>
		/// Join selected server
		/// </summary>
		public static readonly MyStringId ToolTipJoinGame_JoinWorld = MyStringId.GetOrCompute("ToolTipJoinGame_JoinWorld");

		/// <summary>
		/// Refresh server list
		/// </summary>
		public static readonly MyStringId ToolTipJoinGame_Refresh = MyStringId.GetOrCompute("ToolTipJoinGame_Refresh");

		/// <summary>
		/// Search by entering name of the server
		/// </summary>
		public static readonly MyStringId ToolTipJoinGame_Search = MyStringId.GetOrCompute("ToolTipJoinGame_Search");

		/// <summary>
		/// Clear search
		/// </summary>
		public static readonly MyStringId ToolTipJoinGame_SearchClear = MyStringId.GetOrCompute("ToolTipJoinGame_SearchClear");

		/// <summary>
		/// Open server details screen
		/// </summary>
		public static readonly MyStringId ToolTipJoinGame_ServerDetails = MyStringId.GetOrCompute("ToolTipJoinGame_ServerDetails");

		/// <summary>
		/// Show backups for selected save file
		/// </summary>
		public static readonly MyStringId ToolTipLoadGame_Backups = MyStringId.GetOrCompute("ToolTipLoadGame_Backups");

		/// <summary>
		/// Delete selected save file
		/// </summary>
		public static readonly MyStringId ToolTipLoadGame_Delete = MyStringId.GetOrCompute("ToolTipLoadGame_Delete");

		/// <summary>
		/// Edit world settings of selected save file
		/// </summary>
		public static readonly MyStringId ToolTipLoadGame_EditSettings = MyStringId.GetOrCompute("ToolTipLoadGame_EditSettings");

		/// <summary>
		/// Load and play selected world
		/// </summary>
		public static readonly MyStringId ToolTipLoadGame_Load = MyStringId.GetOrCompute("ToolTipLoadGame_Load");

		/// <summary>
		/// Create a new save file from a selected world
		/// </summary>
		public static readonly MyStringId ToolTipLoadGame_SaveAs = MyStringId.GetOrCompute("ToolTipLoadGame_SaveAs");

		/// <summary>
		/// Apply mod configuration
		/// </summary>
		public static readonly MyStringId ToolTipMods_Ok = MyStringId.GetOrCompute("ToolTipMods_Ok");

		/// <summary>
		/// Search for a mod by typing its name
		/// </summary>
		public static readonly MyStringId ToolTipMods_Search = MyStringId.GetOrCompute("ToolTipMods_Search");

		/// <summary>
		/// Open advanced world configuration screen
		/// </summary>
		public static readonly MyStringId ToolTipNewGameCustomGame_Advanced = MyStringId.GetOrCompute("ToolTipNewGameCustomGame_Advanced");

		/// <summary>
		/// Open mod configuration screen
		/// </summary>
		public static readonly MyStringId ToolTipNewGameCustomGame_Mods = MyStringId.GetOrCompute("ToolTipNewGameCustomGame_Mods");

		/// <summary>
		/// Start a new campaign game
		/// </summary>
		public static readonly MyStringId ToolTipNewGame_Campaign = MyStringId.GetOrCompute("ToolTipNewGame_Campaign");

		/// <summary>
		/// Create a new custom world
		/// </summary>
		public static readonly MyStringId ToolTipNewGame_CustomGame = MyStringId.GetOrCompute("ToolTipNewGame_CustomGame");

		/// <summary>
		/// Start selected world
		/// </summary>
		public static readonly MyStringId ToolTipNewGame_Start = MyStringId.GetOrCompute("ToolTipNewGame_Start");

		/// <summary>
		/// Choose one of your subscribed workshop items or browse for more
		/// </summary>
		public static readonly MyStringId ToolTipNewGame_WorkshopContent = MyStringId.GetOrCompute("ToolTipNewGame_WorkshopContent");

		/// <summary>
		/// There are no subscribed Workshop worlds. Open Workshop Browser to subscribe worlds.
		/// </summary>
		public static readonly MyStringId ToolTipNewGame_NoWorkshopWorld = MyStringId.GetOrCompute("ToolTipNewGame_NoWorkshopWorld");

		/// <summary>
		/// Close this window
		/// </summary>
		public static readonly MyStringId ToolTipNewsletter_Close = MyStringId.GetOrCompute("ToolTipNewsletter_Close");

		/// <summary>
		/// Check this, if you don't want to see this popup again
		/// </summary>
		public static readonly MyStringId ToolTipNewsletter_DontAskAgain = MyStringId.GetOrCompute("ToolTipNewsletter_DontAskAgain");

		/// <summary>
		/// Insert your email adress
		/// </summary>
		public static readonly MyStringId ToolTipNewsletter_Email = MyStringId.GetOrCompute("ToolTipNewsletter_Email");

		/// <summary>
		/// Insert your email address to login to {0}: (temporary)
		/// </summary>
		public static readonly MyStringId UGCService_Email = MyStringId.GetOrCompute("UGCService_Email");

		/// <summary>
		/// Proceed
		/// </summary>
		public static readonly MyStringId ToolTipNewsletter_Ok = MyStringId.GetOrCompute("ToolTipNewsletter_Ok");

		/// <summary>
		/// Create a new world using the default settings: Game Type: Creative Mode Scenario: Planet / Easy Start 1 Auto-Save: ON
		/// </summary>
		public static readonly MyStringId ToolTipNewWorldQuickstart = MyStringId.GetOrCompute("ToolTipNewWorldQuickstart");

		/// <summary>
		/// Enable in-game voice chat
		/// </summary>
		public static readonly MyStringId ToolTipOptionsAudio_EnableVoiceChat = MyStringId.GetOrCompute("ToolTipOptionsAudio_EnableVoiceChat");

		/// <summary>
		/// Use sound warnings, when low on oxygen, health or power
		/// </summary>
		public static readonly MyStringId ToolTipOptionsAudio_HudWarnings = MyStringId.GetOrCompute("ToolTipOptionsAudio_HudWarnings");

		/// <summary>
		/// Configure volume level of in-game music
		/// </summary>
		public static readonly MyStringId ToolTipOptionsAudio_MusicVolume = MyStringId.GetOrCompute("ToolTipOptionsAudio_MusicVolume");

		/// <summary>
		/// Disable all sound when game window loses focus
		/// </summary>
		public static readonly MyStringId ToolTipOptionsAudio_MuteWhenInactive = MyStringId.GetOrCompute("ToolTipOptionsAudio_MuteWhenInactive");

		/// <summary>
		/// Configure volume level of sound effects
		/// </summary>
		public static readonly MyStringId ToolTipOptionsAudio_SoundVolume = MyStringId.GetOrCompute("ToolTipOptionsAudio_SoundVolume");

		/// <summary>
		/// Play ship engine sounds based solely on the speed of the craft. Uncheck for realistic sound.
		/// </summary>
		public static readonly MyStringId ToolTipOptionsAudio_SpeedBasedSounds = MyStringId.GetOrCompute("ToolTipOptionsAudio_SpeedBasedSounds");

		/// <summary>
		/// Change music according to current in-game situation
		/// </summary>
		public static readonly MyStringId ToolTipOptionsAudio_UseContextualMusic = MyStringId.GetOrCompute("ToolTipOptionsAudio_UseContextualMusic");

		/// <summary>
		/// Configure volume level of player voice chat
		/// </summary>
		public static readonly MyStringId ToolTipOptionsAudio_VoiceChatVolume = MyStringId.GetOrCompute("ToolTipOptionsAudio_VoiceChatVolume");

		/// <summary>
		/// Choose controls category
		/// </summary>
		public static readonly MyStringId ToolTipOptionsControls_Category = MyStringId.GetOrCompute("ToolTipOptionsControls_Category");

		/// <summary>
		/// Click to edit Right click to remove binding
		/// </summary>
		public static readonly MyStringId ToolTipOptionsControls_ClickToEdit = MyStringId.GetOrCompute("ToolTipOptionsControls_ClickToEdit");

		/// <summary>
		/// Set controls to default values
		/// </summary>
		public static readonly MyStringId ToolTipOptionsControls_Defaults = MyStringId.GetOrCompute("ToolTipOptionsControls_Defaults");

		/// <summary>
		/// Reverse horizontal movement of mouse
		/// </summary>
		public static readonly MyStringId ToolTipOptionsControls_InvertMouseX = MyStringId.GetOrCompute("ToolTipOptionsControls_InvertMouseX");

		/// <summary>
		/// Reverse vertical movement of mouse
		/// </summary>
		public static readonly MyStringId ToolTipOptionsControls_InvertMouseY = MyStringId.GetOrCompute("ToolTipOptionsControls_InvertMouseY");

<<<<<<< HEAD
		/// <summary>
		/// Reverse block selection by mouse scroll (scroll up = next block, scroll down = previous block)
		/// </summary>
		public static readonly MyStringId ToolTipOptionsControls_InvertMouseScrollBlockSelection = MyStringId.GetOrCompute("ToolTipOptionsControls_InvertMouseScrollBlockSelection");

		/// <summary>
		/// Adjust how much movement of the controller is needed before it activates
		/// </summary>
=======
		public static readonly MyStringId ToolTipOptionsControls_InvertMouseScrollBlockSelection = MyStringId.GetOrCompute("ToolTipOptionsControls_InvertMouseScrollBlockSelection");

>>>>>>> d46cf8619665219cc163a7b28984ced59ed9470d
		public static readonly MyStringId ToolTipOptionsControls_JoystickDeadzoneWidth = MyStringId.GetOrCompute("ToolTipOptionsControls_JoystickDeadzoneWidth");

		/// <summary>
		/// Change how sensitive your controller is to slow movements
		/// </summary>
		public static readonly MyStringId ToolTipOptionsControls_JoystickGradualPrecision = MyStringId.GetOrCompute("ToolTipOptionsControls_JoystickGradualPrecision");

		/// <summary>
		/// Select active controller
		/// </summary>
		public static readonly MyStringId ToolTipOptionsControls_JoystickOrGamepad = MyStringId.GetOrCompute("ToolTipOptionsControls_JoystickOrGamepad");

		/// <summary>
		/// Adjust sensitivty of your controller
		/// </summary>
		public static readonly MyStringId ToolTipOptionsControls_JoystickSensitivity = MyStringId.GetOrCompute("ToolTipOptionsControls_JoystickSensitivity");

		/// <summary>
		/// Change how sensitive your mouse is to movement
		/// </summary>
		public static readonly MyStringId ToolTipOptionsControls_MouseSensitivity = MyStringId.GetOrCompute("ToolTipOptionsControls_MouseSensitivity");

		/// <summary>
		/// Choose how big screenshots will be in multipliers of current window size
		/// </summary>
		public static readonly MyStringId ToolTipOptionsDisplay_ScreenshotMultiplier = MyStringId.GetOrCompute("ToolTipOptionsDisplay_ScreenshotMultiplier");

		/// <summary>
		/// Choose whether the game should appear fullscreen or in a window
		/// </summary>
		public static readonly MyStringId ToolTipOptionsDisplay_WindowMode = MyStringId.GetOrCompute("ToolTipOptionsDisplay_WindowMode");

		/// <summary>
		/// By checking this you agree to our privacy policy according to GDPR.  You can change your mind at any time.
		/// </summary>
		public static readonly MyStringId ToolTipOptionsGame_GDPRConsent = MyStringId.GetOrCompute("ToolTipOptionsGame_GDPRConsent");

		/// <summary>
		/// Select default block-placement mode (Affects only building in creative)
		/// </summary>
		public static readonly MyStringId ToolTipOptionsGame_BuildingMode = MyStringId.GetOrCompute("ToolTipOptionsGame_BuildingMode");

		/// <summary>
		/// Choose your preferred language settings
		/// </summary>
		public static readonly MyStringId ToolTipOptionsGame_Language = MyStringId.GetOrCompute("ToolTipOptionsGame_Language");

		/// <summary>
		/// Darken the areas that are less exposed to the ambient light
		/// </summary>
		public static readonly MyStringId ToolTipOptionsGraphics_AmbientOcclusion = MyStringId.GetOrCompute("ToolTipOptionsGraphics_AmbientOcclusion");

		/// <summary>
		/// Improve render quality of textures
		/// </summary>
		public static readonly MyStringId ToolTipOptionsGraphics_AnisotropicFiltering = MyStringId.GetOrCompute("ToolTipOptionsGraphics_AnisotropicFiltering");

		/// <summary>
		/// Smooth out hard edges around objects
		/// </summary>
		public static readonly MyStringId ToolTipOptionsGraphics_Antialiasing = MyStringId.GetOrCompute("ToolTipOptionsGraphics_Antialiasing");

		/// <summary>
		/// Adjust view cone of character camera in degrees
		/// </summary>
		public static readonly MyStringId ToolTipOptionsGraphics_FOV = MyStringId.GetOrCompute("ToolTipOptionsGraphics_FOV");

		/// <summary>
		/// Set density of grass
		/// </summary>
		public static readonly MyStringId ToolTipOptionsGraphics_GrassDensity = MyStringId.GetOrCompute("ToolTipOptionsGraphics_GrassDensity");

		/// <summary>
		/// Modify grass render distance
		/// </summary>
		public static readonly MyStringId ToolTipOptionsGraphics_GrassDrawDistance = MyStringId.GetOrCompute("ToolTipOptionsGraphics_GrassDrawDistance");

		/// <summary>
		/// Set model complexity
		/// </summary>
		public static readonly MyStringId ToolTipOptionsGraphics_ModelQuality = MyStringId.GetOrCompute("ToolTipOptionsGraphics_ModelQuality");

		/// <summary>
		/// Enables Bloom, Vignette, Chromatic Aberation and washes the visor up
		/// </summary>
		public static readonly MyStringId ToolTipOptionsGraphics_PostProcessing = MyStringId.GetOrCompute("ToolTipOptionsGraphics_PostProcessing");

		/// <summary>
		/// Choose a quality preset, according to your HW specifications
		/// </summary>
		public static readonly MyStringId ToolTipOptionsGraphics_QualityPreset = MyStringId.GetOrCompute("ToolTipOptionsGraphics_QualityPreset");

		/// <summary>
		/// Select quality of render effects. Higher settings may affect performance.
		/// </summary>
		public static readonly MyStringId ToolTipOptionsGraphics_ShaderQuality = MyStringId.GetOrCompute("ToolTipOptionsGraphics_ShaderQuality");

		/// <summary>
		/// Select shadow resolution
		/// </summary>
		public static readonly MyStringId ToolTipOptionsGraphics_ShadowQuality = MyStringId.GetOrCompute("ToolTipOptionsGraphics_ShadowQuality");

		/// <summary>
		/// Set texture detail
		/// </summary>
		public static readonly MyStringId ToolTipOptionsGraphics_TextureQuality = MyStringId.GetOrCompute("ToolTipOptionsGraphics_TextureQuality");

		/// <summary>
		/// Select tree render distance
		/// </summary>
		public static readonly MyStringId ToolTipOptionsGraphics_TreeDrawDistance = MyStringId.GetOrCompute("ToolTipOptionsGraphics_TreeDrawDistance");

		/// <summary>
		/// Choose visual complexity of distant voxels
		/// </summary>
		public static readonly MyStringId ToolTipOptionsGraphics_VoxelQuality = MyStringId.GetOrCompute("ToolTipOptionsGraphics_VoxelQuality");

		/// <summary>
		/// Configure audio options
		/// </summary>
		public static readonly MyStringId ToolTipOptionsSpace_Audio = MyStringId.GetOrCompute("ToolTipOptionsSpace_Audio");

		/// <summary>
		/// Return to previous menu
		/// </summary>
		public static readonly MyStringId ToolTipOptionsSpace_Cancel = MyStringId.GetOrCompute("ToolTipOptionsSpace_Cancel");

		/// <summary>
		/// Configure game contorls
		/// </summary>
		public static readonly MyStringId ToolTipOptionsSpace_Controls = MyStringId.GetOrCompute("ToolTipOptionsSpace_Controls");

		/// <summary>
		/// View credits
		/// </summary>
		public static readonly MyStringId ToolTipOptionsSpace_Credits = MyStringId.GetOrCompute("ToolTipOptionsSpace_Credits");

		/// <summary>
		/// Configure display options
		/// </summary>
		public static readonly MyStringId ToolTipOptionsSpace_Display = MyStringId.GetOrCompute("ToolTipOptionsSpace_Display");

		/// <summary>
		/// Configure game options
		/// </summary>
		public static readonly MyStringId ToolTipOptionsSpace_Game = MyStringId.GetOrCompute("ToolTipOptionsSpace_Game");

		/// <summary>
		/// Configure graphics options
		/// </summary>
		public static readonly MyStringId ToolTipOptionsSpace_Graphics = MyStringId.GetOrCompute("ToolTipOptionsSpace_Graphics");

		/// <summary>
		/// Apply changes
		/// </summary>
		public static readonly MyStringId ToolTipOptionsSpace_Ok = MyStringId.GetOrCompute("ToolTipOptionsSpace_Ok");

		/// <summary>
		/// Add all entities inside safe zone to the filter
		/// </summary>
		public static readonly MyStringId ToolTipSafeZone_AddContained = MyStringId.GetOrCompute("ToolTipSafeZone_AddContained");

		/// <summary>
		/// All
		/// </summary>
		public static readonly MyStringId TooltipScreenMods_Category_All = MyStringId.GetOrCompute("TooltipScreenMods_Category_All");

		/// <summary>
		/// Animation
		/// </summary>
		public static readonly MyStringId TooltipScreenMods_Category_Animation = MyStringId.GetOrCompute("TooltipScreenMods_Category_Animation");

		/// <summary>
		/// Block
		/// </summary>
		public static readonly MyStringId TooltipScreenMods_Category_Block = MyStringId.GetOrCompute("TooltipScreenMods_Category_Block");

		/// <summary>
		/// Character
		/// </summary>
		public static readonly MyStringId TooltipScreenMods_Category_Character = MyStringId.GetOrCompute("TooltipScreenMods_Category_Character");

		/// <summary>
		/// Modpack
		/// </summary>
		public static readonly MyStringId TooltipScreenMods_Category_Modpack = MyStringId.GetOrCompute("TooltipScreenMods_Category_Modpack");

		/// <summary>
		/// Other
		/// </summary>
		public static readonly MyStringId TooltipScreenMods_Category_Other = MyStringId.GetOrCompute("TooltipScreenMods_Category_Other");

		/// <summary>
		/// Planet
		/// </summary>
		public static readonly MyStringId TooltipScreenMods_Category_Planet = MyStringId.GetOrCompute("TooltipScreenMods_Category_Planet");

		/// <summary>
		/// Production
		/// </summary>
		public static readonly MyStringId TooltipScreenMods_Category_Production = MyStringId.GetOrCompute("TooltipScreenMods_Category_Production");

		/// <summary>
		/// Respawn Ship
		/// </summary>
		public static readonly MyStringId TooltipScreenMods_Category_RespawnShip = MyStringId.GetOrCompute("TooltipScreenMods_Category_RespawnShip");

		/// <summary>
		/// Script
		/// </summary>
		public static readonly MyStringId TooltipScreenMods_Category_Script = MyStringId.GetOrCompute("TooltipScreenMods_Category_Script");

		/// <summary>
		/// Skybox
		/// </summary>
		public static readonly MyStringId TooltipScreenMods_Category_Skybox = MyStringId.GetOrCompute("TooltipScreenMods_Category_Skybox");

		/// <summary>
		/// Show all types of inventories
		/// </summary>
		public static readonly MyStringId ToolTipTerminalInventory_FilterAll = MyStringId.GetOrCompute("ToolTipTerminalInventory_FilterAll");

		/// <summary>
		/// Show only inventories of the current ship
		/// </summary>
		public static readonly MyStringId ToolTipTerminalInventory_FilterShip = MyStringId.GetOrCompute("ToolTipTerminalInventory_FilterShip");

		/// <summary>
		/// Filter energy inventories
		/// </summary>
		public static readonly MyStringId ToolTipTerminalInventory_FilterEnergy = MyStringId.GetOrCompute("ToolTipTerminalInventory_FilterEnergy");

		/// <summary>
		/// Filter storage inventories
		/// </summary>
		public static readonly MyStringId ToolTipTerminalInventory_FilterStorage = MyStringId.GetOrCompute("ToolTipTerminalInventory_FilterStorage");

		/// <summary>
		/// Filter system inventories
		/// </summary>
		public static readonly MyStringId ToolTipTerminalInventory_FilterSystem = MyStringId.GetOrCompute("ToolTipTerminalInventory_FilterSystem");

		/// <summary>
		/// Show only inventories that are not empty
		/// </summary>
		public static readonly MyStringId ToolTipTerminalInventory_HideEmpty = MyStringId.GetOrCompute("ToolTipTerminalInventory_HideEmpty");

		/// <summary>
		/// {0}{3} Mass: {1} kg Volume: {2} L{4}
		/// </summary>
		public static readonly MyStringId ToolTipTerminalInventory_ItemInfo = MyStringId.GetOrCompute("ToolTipTerminalInventory_ItemInfo");

		/// <summary>
		/// Show character inventory
		/// </summary>
		public static readonly MyStringId ToolTipTerminalInventory_ShowCharacter = MyStringId.GetOrCompute("ToolTipTerminalInventory_ShowCharacter");

		/// <summary>
		/// Show connected inventories (on ship or station)
		/// </summary>
		public static readonly MyStringId ToolTipTerminalInventory_ShowConnected = MyStringId.GetOrCompute("ToolTipTerminalInventory_ShowConnected");

		/// <summary>
		/// No connected inventories
		/// </summary>
		public static readonly MyStringId ToolTipTerminalInventory_ShowConnectedDisabled = MyStringId.GetOrCompute("ToolTipTerminalInventory_ShowConnectedDisabled");

		/// <summary>
		/// Show inventory of interacted item (or corpse)
		/// </summary>
		public static readonly MyStringId ToolTipTerminalInventory_ShowInteracted = MyStringId.GetOrCompute("ToolTipTerminalInventory_ShowInteracted");

		/// <summary>
		/// Drop item
		/// </summary>
		public static readonly MyStringId ToolTipTerminalInventory_ThrowOut = MyStringId.GetOrCompute("ToolTipTerminalInventory_ThrowOut");

		/// <summary>
		/// Drop selected item from character inventory
		/// </summary>
		public static readonly MyStringId ToolTipTerminalInventory_ThrowOutDisabled = MyStringId.GetOrCompute("ToolTipTerminalInventory_ThrowOutDisabled");

		/// <summary>
		/// Assembling mode: ingots to components
		/// </summary>
		public static readonly MyStringId ToolTipTerminalProduction_AssemblingMode = MyStringId.GetOrCompute("ToolTipTerminalProduction_AssemblingMode");

		/// <summary>
		/// Disassemble all items in inventory
		/// </summary>
		public static readonly MyStringId ToolTipTerminalProduction_DisassembleAll = MyStringId.GetOrCompute("ToolTipTerminalProduction_DisassembleAll");

		/// <summary>
		/// Disassembling mode: components to ingots
		/// </summary>
		public static readonly MyStringId ToolTipTerminalProduction_DisassemblingMode = MyStringId.GetOrCompute("ToolTipTerminalProduction_DisassemblingMode");

		/// <summary>
		/// Enable or disable repeat mode
		/// </summary>
		public static readonly MyStringId ToolTipTerminalProduction_RepeatMode = MyStringId.GetOrCompute("ToolTipTerminalProduction_RepeatMode");

		/// <summary>
		/// Enable or disable cooperative mode
		/// </summary>
		public static readonly MyStringId ToolTipTerminalProduction_SlaveMode = MyStringId.GetOrCompute("ToolTipTerminalProduction_SlaveMode");

		/// <summary>
		/// Turn off timer beep sounds
		/// </summary>
		public static readonly MyStringId ToolTipTimerBlock_Silent = MyStringId.GetOrCompute("ToolTipTimerBlock_Silent");

		/// <summary>
		/// Enable particle effects  for damaged blocks
		/// </summary>
		public static readonly MyStringId ToolTipVideoOptionsEnableDamageEffects = MyStringId.GetOrCompute("ToolTipVideoOptionsEnableDamageEffects");

		/// <summary>
		/// Changing the renderer requires restart of the game
		/// </summary>
		public static readonly MyStringId ToolTipVideoOptionsRenderer = MyStringId.GetOrCompute("ToolTipVideoOptionsRenderer");

		/// <summary>
		/// Sets the density of procedurally generated asteroid fields.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettingsAsteroidAmount = MyStringId.GetOrCompute("ToolTipWorldSettingsAsteroidAmount");

		/// <summary>
		/// Enables auto-healing of players in pressurized environments while not taking any damage. It heals up to {0}%.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettingsAutoHealing = MyStringId.GetOrCompute("ToolTipWorldSettingsAutoHealing");

		/// <summary>
		/// Enables blocks destruction.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettingsDestructibleBlocks = MyStringId.GetOrCompute("ToolTipWorldSettingsDestructibleBlocks");

		/// <summary>
		/// The damage given and taken to and from enemies and environment. Higher difficulty means more  realistic damage.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettingsDifficulty = MyStringId.GetOrCompute("ToolTipWorldSettingsDifficulty");

		/// <summary>
		/// Whether random cargo ships should be enabled
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettingsEnableCargoShips = MyStringId.GetOrCompute("ToolTipWorldSettingsEnableCargoShips");

		/// <summary>
		/// Copy paste allows to create new ships or  stations directly from the clipboard.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettingsEnableCopyPaste = MyStringId.GetOrCompute("ToolTipWorldSettingsEnableCopyPaste");

		/// <summary>
		/// Enables spectator view in the world.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettingsEnableSpectator = MyStringId.GetOrCompute("ToolTipWorldSettingsEnableSpectator");

		/// <summary>
		/// Sets the frequency and intensity of meteor showers.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettingsEnvironment = MyStringId.GetOrCompute("ToolTipWorldSettingsEnvironment");

		/// <summary>
		/// When checked, allies can damage each other
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettingsFriendlyFire = MyStringId.GetOrCompute("ToolTipWorldSettingsFriendlyFire");

		/// <summary>
		/// Hardware requirements define how rich your world can be.  Higher values are more demanding on computing performance  of your computer (CPU and GPU) and will definitely require more memory.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettingsHardwareRequirements = MyStringId.GetOrCompute("ToolTipWorldSettingsHardwareRequirements");

		/// <summary>
		/// Creative Mode: unlimited resources, instant building, players don't die. Use creative mode when you just want to build things.  Survival Mode: realistic inventory capacity, constrained resources - you have to drill and harvest ore, process it in a refinery, construct components in assembler, build blocks using welder, disassemble using grinder, players can die - they re-spawn in their spawn point and if there's no spawn point available, then in a new ship as a new player at the border of the sector.  Survival x3: same as "Survival", but 3x larger inventory capacity.  Survival x10: same as "Survival", but 10x larger inventory capacity.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettingsHarvestingMode = MyStringId.GetOrCompute("ToolTipWorldSettingsHarvestingMode");

		/// <summary>
		/// When set, the game area is limited to a cube with  the side length set to the chosen size. All objects that leave the game area will be  removed from the game. Characters leaving the game area will be killed.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettingsLimitWorldSize = MyStringId.GetOrCompute("ToolTipWorldSettingsLimitWorldSize");

		/// <summary>
		/// Configure the maximum number of saves that  should be backed up. The backup folder is located on the respective save directory. When this is 0 then  the backup feature is disabled and all backups are  deleted upon save!
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettingsMaxBackupSaves = MyStringId.GetOrCompute("ToolTipWorldSettingsMaxBackupSaves");

		/// <summary>
		/// Maximum number of blocks each player can build.  Destroyed blocks are refunded.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettingsMaxBlocksPerPlayer = MyStringId.GetOrCompute("ToolTipWorldSettingsMaxBlocksPerPlayer");

		/// <summary>
		/// Maximum number of small objects floating in  space (ore, ingots, components) Warning - values  higher than 64 can significantly affect performance!
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettingsMaxFloatingObjects = MyStringId.GetOrCompute("ToolTipWorldSettingsMaxFloatingObjects");

		/// <summary>
		/// Maximum number of animal NPCs on planets. Warning - values  higher than 64 can significantly affect performance!
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettingsTotalBotLimit = MyStringId.GetOrCompute("ToolTipWorldSettingsTotalBotLimit");

		/// <summary>
		/// Sets the maximum size (in blocks) of ships and stations.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettingsMaxGridSize = MyStringId.GetOrCompute("ToolTipWorldSettingsMaxGridSize");

		/// <summary>
		/// Sets the maximum amount of players in game.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettingsMaxPlayer = MyStringId.GetOrCompute("ToolTipWorldSettingsMaxPlayer");

		/// <summary>
		/// Unlimited resources, instant building, no death
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettingsModeCreative = MyStringId.GetOrCompute("ToolTipWorldSettingsModeCreative");

		/// <summary>
		/// Realistic management of resources, realistic inventory  capacity, death and respawn
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettingsModeSurvival = MyStringId.GetOrCompute("ToolTipWorldSettingsModeSurvival");

		/// <summary>
		/// Visibility of your game.  Offline: Game runs in offline mode and does not  require internet connection Private: Only invited players can join Friends: Only your {0} friends can join Public: Any {0} player can join
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettingsOnlineMode = MyStringId.GetOrCompute("ToolTipWorldSettingsOnlineMode");

		/// <summary>
		/// Enables players losing everything if they die and don't have any available respawn points.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettingsPermanentDeath = MyStringId.GetOrCompute("ToolTipWorldSettingsPermanentDeath");

		/// <summary>
		/// PvE means that you cannot damage other players. PvP  means that you can damage them and they can damage you.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettingsPVP = MyStringId.GetOrCompute("ToolTipWorldSettingsPVP");

		/// <summary>
		/// If checked, ships that are considered to be trash will be  removed to make the game run faster. To be considered  trash, the grid has to contain just a few blocks, be in uniform  linear motion, be unpowered, uncontrolled, without a  medbay and far enough from all players so that they can barely see it.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettingsRemoveTrash = MyStringId.GetOrCompute("ToolTipWorldSettingsRemoveTrash");

		/// <summary>
		/// Removes ownership of all blocks.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettingsResetOwnership = MyStringId.GetOrCompute("ToolTipWorldSettingsResetOwnership");

		/// <summary>
		/// Deletes respawn ships when players leave servers or spawn in new ships.
		/// </summary>
		public static readonly MyStringId TooltipWorldSettingsRespawnShipDelete = MyStringId.GetOrCompute("TooltipWorldSettingsRespawnShipDelete");

		/// <summary>
		/// Enables player name tags above above their characters.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettingsShowPlayerNamesOnHud = MyStringId.GetOrCompute("ToolTipWorldSettingsShowPlayerNamesOnHud");

		/// <summary>
		/// There's no sound in space. Turn it on to simulate Earth-like sound conditions (even though it's not realistic). Turn it off for a realistic mode where you can hear only sounds that your astronaut character can hear.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettingsSoundInSpace = MyStringId.GetOrCompute("ToolTipWorldSettingsSoundInSpace");

		/// <summary>
		/// Switches between realistic and arcade sounds.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettingsSoundMode = MyStringId.GetOrCompute("ToolTipWorldSettingsSoundMode");

		/// <summary>
		/// Enables thruster flames dealing damage to blocks, players, and small objects.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettingsThrusterDamage = MyStringId.GetOrCompute("ToolTipWorldSettingsThrusterDamage");

		/// <summary>
		/// Sets the total amount of performance cost units (PCU) in the world. Each placed block costs some PCU. Dismantled blocks are refunded.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettingsTotalPCU = MyStringId.GetOrCompute("ToolTipWorldSettingsTotalPCU");

		/// <summary>
		/// Larger view distances can cause performance issues  depending on how many objects are in the world. Large view distances are not recommended on worlds with high asteroid densities.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettingsViewDistance = MyStringId.GetOrCompute("ToolTipWorldSettingsViewDistance");

		/// <summary>
		/// Optimal distance in meters the game should take into consideration when spawning new player near others.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettingsOptimalSpawnDistance = MyStringId.GetOrCompute("ToolTipWorldSettingsOptimalSpawnDistance");

		/// <summary>
		/// Enables automatic respawning at the nearest available respawn point.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettingsAutorespawn = MyStringId.GetOrCompute("ToolTipWorldSettingsAutorespawn");

		/// <summary>
		/// Enable autorespawn
		/// </summary>
		public static readonly MyStringId WorldSettings_EnableAutorespawn = MyStringId.GetOrCompute("WorldSettings_EnableAutorespawn");

		/// <summary>
		/// Allows supergridding exploit to be used.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettingsSupergridding = MyStringId.GetOrCompute("ToolTipWorldSettingsSupergridding");

		/// <summary>
		/// Enable supergridding
		/// </summary>
		public static readonly MyStringId WorldSettings_EnableSupergridding = MyStringId.GetOrCompute("WorldSettings_EnableSupergridding");

		/// <summary>
		/// Enables weapons and explosives.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettingsWeapons = MyStringId.GetOrCompute("ToolTipWorldSettingsWeapons");

		/// <summary>
		/// Enables quality reduction of deformations and explosions affecting voxels in case the CPU is on fire.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettings_AdaptiveSimulationQuality = MyStringId.GetOrCompute("ToolTipWorldSettings_AdaptiveSimulationQuality");

		/// <summary>
		/// Sets the assembler efficiency multiplier. This setting increases or decreases the material yield of ore.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettings_AssemblerEfficiency = MyStringId.GetOrCompute("ToolTipWorldSettings_AssemblerEfficiency");

		/// <summary>
		/// Default assembler speed and efficiency
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettings_Assembler_x1 = MyStringId.GetOrCompute("ToolTipWorldSettings_Assembler_x1");

		/// <summary>
		/// Assembler requires 10x less materials and is 10x faster
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettings_Assembler_x10 = MyStringId.GetOrCompute("ToolTipWorldSettings_Assembler_x10");

		/// <summary>
		/// Assembler requires 3x less materials and is 3x faster
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettings_Assembler_x3 = MyStringId.GetOrCompute("ToolTipWorldSettings_Assembler_x3");

		/// <summary>
		/// Enables random cargoships flying through the world  from time to time.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettings_CargoShipsEnabled = MyStringId.GetOrCompute("ToolTipWorldSettings_CargoShipsEnabled");

		/// <summary>
		/// Client can save network game. If unchecked  then only server can save
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettings_ClientCanSave = MyStringId.GetOrCompute("ToolTipWorldSettings_ClientCanSave");

		/// <summary>
		/// Adjusts the length of the day cycle.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettings_DayDuration = MyStringId.GetOrCompute("ToolTipWorldSettings_DayDuration");

		/// <summary>
		/// Enables the camera to be switchable to 3rd person view.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettings_Enable3rdPersonCamera = MyStringId.GetOrCompute("ToolTipWorldSettings_Enable3rdPersonCamera");

		/// <summary>
		/// Enables spawning of unknown signals.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettings_EnableContainerDrops = MyStringId.GetOrCompute("ToolTipWorldSettings_EnableContainerDrops");

		/// <summary>
		/// Adds an option to ship terminals to convert ships to stations.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettings_EnableConvertToStation = MyStringId.GetOrCompute("ToolTipWorldSettings_EnableConvertToStation");

		/// <summary>
		/// Random NPC pirate ship will be generated from time to time. These ships are enemies and will try to attack you with their drones.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettings_EnableDrones = MyStringId.GetOrCompute("ToolTipWorldSettings_EnableDrones");

		/// <summary>
		/// Enables randomly spawned abandoned ships and stations.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettings_EnableEncounters = MyStringId.GetOrCompute("ToolTipWorldSettings_EnableEncounters");

		/// <summary>
		/// Enables flora for planets.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettings_EnableFlora = MyStringId.GetOrCompute("ToolTipWorldSettings_EnableFlora");

		/// <summary>
		/// Enables scripts running in game. Scripts are used in programmable blocks. They can also be used by some mods to create advanced logic and effects.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettings_EnableIngameScripts = MyStringId.GetOrCompute("ToolTipWorldSettings_EnableIngameScripts");

		/// <summary>
		/// If this is turned off, characters won't be able to use jetpacks at all.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettings_EnableJetpack = MyStringId.GetOrCompute("ToolTipWorldSettings_EnableJetpack");

		/// <summary>
		/// Enables oxygen processing. Oxygen is used by space suits and cockpits.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettings_EnableOxygen = MyStringId.GetOrCompute("ToolTipWorldSettings_EnableOxygen");

		/// <summary>
		/// Allows pressurization of ships and stations.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettings_EnableOxygenPressurization = MyStringId.GetOrCompute("ToolTipWorldSettings_EnableOxygenPressurization");

		/// <summary>
		/// Enable/disable spawning of planets in world
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettings_EnablePlanets = MyStringId.GetOrCompute("ToolTipWorldSettings_EnablePlanets");

		/// <summary>
		/// Enables realistic dampeners
		/// </summary>
		public static readonly MyStringId TooltipWorldSettings_EnableRealisticDampeners = MyStringId.GetOrCompute("TooltipWorldSettings_EnableRealisticDampeners");

		/// <summary>
		/// Enables players to remotely remove owned blocks  to free up their PCU limit.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettings_EnableRemoteBlockRemoval = MyStringId.GetOrCompute("ToolTipWorldSettings_EnableRemoteBlockRemoval");

		/// <summary>
		/// Enables respawning in ships. If disabled, respawning is only possible in the suit, in medical stations, or in survival kits.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettings_EnableRespawnShips = MyStringId.GetOrCompute("ToolTipWorldSettings_EnableRespawnShips");

		/// <summary>
		/// Enables spawning of spiders on planets.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettings_EnableSpiders = MyStringId.GetOrCompute("ToolTipWorldSettings_EnableSpiders");

		/// <summary>
		/// Enables damage to sub-grids originating from collisions, explosions and other sources on connected grids. We recommend  leaving this setting disabled for more stable behavior.
		/// </summary>
		public static readonly MyStringId TooltipWorldSettings_EnableSubGridDamage = MyStringId.GetOrCompute("TooltipWorldSettings_EnableSubGridDamage");

		/// <summary>
		/// Enables sun movement to create a day night cycle.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettings_EnableSunRotation = MyStringId.GetOrCompute("ToolTipWorldSettings_EnableSunRotation");

		/// <summary>
		/// Enables explosion damage from missiles being applied to its own grid.
		/// </summary>
		public static readonly MyStringId TooltipWorldSettings_EnableTurrerFriendlyDamage = MyStringId.GetOrCompute("TooltipWorldSettings_EnableTurrerFriendlyDamage");

		/// <summary>
		/// Enables voxel destruction.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettings_EnableVoxelDestruction = MyStringId.GetOrCompute("ToolTipWorldSettings_EnableVoxelDestruction");

		/// <summary>
		/// Enables spawning of wolves on planets.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettings_EnableWolfs = MyStringId.GetOrCompute("ToolTipWorldSettings_EnableWolfs");

		/// <summary>
		/// Density of flora elements on planets
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettings_FloraDensity = MyStringId.GetOrCompute("ToolTipWorldSettings_FloraDensity");

		/// <summary>
		/// Decrease grinding speed by 50%
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettings_Grinder_half = MyStringId.GetOrCompute("ToolTipWorldSettings_Grinder_half");

		/// <summary>
		/// Default grinding speed
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettings_Grinder_x1 = MyStringId.GetOrCompute("ToolTipWorldSettings_Grinder_x1");

		/// <summary>
		/// Grinding speed is 2x faster
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettings_Grinder_x2 = MyStringId.GetOrCompute("ToolTipWorldSettings_Grinder_x2");

		/// <summary>
		/// Grinding speed is 5x faster
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettings_Grinder_x5 = MyStringId.GetOrCompute("ToolTipWorldSettings_Grinder_x5");

		/// <summary>
		/// Sets the grinding speed multiplier.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettings_GrindingSpeed = MyStringId.GetOrCompute("ToolTipWorldSettings_GrindingSpeed");

		/// <summary>
		/// Adjusts the inventory size of your character.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettings_InventorySize = MyStringId.GetOrCompute("ToolTipWorldSettings_InventorySize");

		/// <summary>
		/// Default inventory capacity
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettings_Inventory_x1 = MyStringId.GetOrCompute("ToolTipWorldSettings_Inventory_x1");

		/// <summary>
		/// Inventory capacity is 10x larger
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettings_Inventory_x10 = MyStringId.GetOrCompute("ToolTipWorldSettings_Inventory_x10");

		/// <summary>
		/// Inventory capacity is 3x larger
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettings_Inventory_x3 = MyStringId.GetOrCompute("ToolTipWorldSettings_Inventory_x3");

		/// <summary>
		/// Sets the refinery speed multiplier.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettings_RefinerySpeed = MyStringId.GetOrCompute("ToolTipWorldSettings_RefinerySpeed");

		/// <summary>
		/// Default refinery speed
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettings_Refinery_x1 = MyStringId.GetOrCompute("ToolTipWorldSettings_Refinery_x1");

		/// <summary>
		/// Refinery is 10x faster
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettings_Refinery_x10 = MyStringId.GetOrCompute("ToolTipWorldSettings_Refinery_x10");

		/// <summary>
		/// Refinery is 3x faster
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettings_Refinery_x3 = MyStringId.GetOrCompute("ToolTipWorldSettings_Refinery_x3");

		/// <summary>
		/// Sets the respawn ship cooldown multiplier.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettings_RespawnShipCooldown = MyStringId.GetOrCompute("ToolTipWorldSettings_RespawnShipCooldown");

		/// <summary>
		/// Allows additional ingame options for creating scenario. Also displays your saved game in scenario start screen.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettings_ScenarioEditMode = MyStringId.GetOrCompute("ToolTipWorldSettings_ScenarioEditMode");

		/// <summary>
		/// If this is turned off, characters won't spawn with  any tools in their inventory.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettings_SpawnWithTools = MyStringId.GetOrCompute("ToolTipWorldSettings_SpawnWithTools");

		/// <summary>
		/// When played as scenario: player will start in  respawn screen with new identity, all ownership  will be lost
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettings_StartInRespawnScreen = MyStringId.GetOrCompute("ToolTipWorldSettings_StartInRespawnScreen");

		/// <summary>
		/// By enabling this option grids will no longer turn dynamic when disconnected from static grids.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettings_StationVoxelSupport = MyStringId.GetOrCompute("ToolTipWorldSettings_StationVoxelSupport");

		/// <summary>
		/// Enables shaking of ship drills and grinders.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettings_ToolShake = MyStringId.GetOrCompute("ToolTipWorldSettings_ToolShake");

		/// <summary>
		/// Enables voxel hand.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettings_VoxelHand = MyStringId.GetOrCompute("ToolTipWorldSettings_VoxelHand");

		/// <summary>
		/// Decrease welding speed by 50%
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettings_Welder_half = MyStringId.GetOrCompute("ToolTipWorldSettings_Welder_half");

		/// <summary>
		/// Default welding speed
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettings_Welder_x1 = MyStringId.GetOrCompute("ToolTipWorldSettings_Welder_x1");

		/// <summary>
		/// Welding speed is 2x faster
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettings_Welder_x2 = MyStringId.GetOrCompute("ToolTipWorldSettings_Welder_x2");

		/// <summary>
		/// Welding speed is 5x faster
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettings_Welder_x5 = MyStringId.GetOrCompute("ToolTipWorldSettings_Welder_x5");

		/// <summary>
		/// Sets the welding speed multiplier.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettings_WeldingSpeed = MyStringId.GetOrCompute("ToolTipWorldSettings_WeldingSpeed");

		/// <summary>
		/// Training Level
		/// </summary>
		public static readonly MyStringId TrainingLevel = MyStringId.GetOrCompute("TrainingLevel");

		/// <summary>
		/// Advanced
		/// </summary>
		public static readonly MyStringId TrainingLevel_Advanced = MyStringId.GetOrCompute("TrainingLevel_Advanced");

		/// <summary>
		/// Basic
		/// </summary>
		public static readonly MyStringId TrainingLevel_Basic = MyStringId.GetOrCompute("TrainingLevel_Basic");

		/// <summary>
		/// Intermediate
		/// </summary>
		public static readonly MyStringId TrainingLevel_Intermediate = MyStringId.GetOrCompute("TrainingLevel_Intermediate");

		/// <summary>
		/// Planetary
		/// </summary>
		public static readonly MyStringId TrainingLevel_Planetary = MyStringId.GetOrCompute("TrainingLevel_Planetary");

		/// <summary>
		/// Transformation tools
		/// </summary>
		public static readonly MyStringId TransformationToolsButton = MyStringId.GetOrCompute("TransformationToolsButton");

		/// <summary>
		/// Trigger not selected
		/// </summary>
		public static readonly MyStringId TriggerNotSelected = MyStringId.GetOrCompute("TriggerNotSelected");

		/// <summary>
		/// Triggers
		/// </summary>
		public static readonly MyStringId Triggers = MyStringId.GetOrCompute("Triggers");

		/// <summary>
		/// Turret
		/// </summary>
		public static readonly MyStringId Turret = MyStringId.GetOrCompute("Turret");

		/// <summary>
		/// Unsaved changes
		/// </summary>
		public static readonly MyStringId UnsavedChanges = MyStringId.GetOrCompute("UnsavedChanges");

		/// <summary>
		/// You have unsaved changes. Do you want to save current cutscene first?
		/// </summary>
		public static readonly MyStringId UnsavedChangesQuestion = MyStringId.GetOrCompute("UnsavedChangesQuestion");

		/// <summary>
		/// Uranium
		/// </summary>
		public static readonly MyStringId Uranium = MyStringId.GetOrCompute("Uranium");

		/// <summary>
		/// Marek Rosa
		/// </summary>
		public static readonly MyStringId WelcomeScreen_Signature = MyStringId.GetOrCompute("WelcomeScreen_Signature");

		/// <summary>
		/// Creative Director
		/// </summary>
		public static readonly MyStringId WelcomeScreen_SignatureTitle = MyStringId.GetOrCompute("WelcomeScreen_SignatureTitle");

		/// <summary>
		/// I would first like to personally thank you for choosing to support our game and its development. Many talented people been involved in this project during the last six years and we are honoured to have you join our community.
		/// </summary>
		public static readonly MyStringId WelcomeScreen_Text1 = MyStringId.GetOrCompute("WelcomeScreen_Text1");

		/// <summary>
		/// A space engineer is a professional practitioner who uses scientific knowledge, mathematics, physics, astronomy, propulsion technology, materials science, structural analysis, manufacturing, and ingenuity to solve practical problems in space and on planets.  Space engineers take pride in their ability to get the job done right. No matter how big, how complex, or how remote.
		/// </summary>
		public static readonly MyStringId WelcomeScreen_Text2 = MyStringId.GetOrCompute("WelcomeScreen_Text2");

		/// <summary>
		/// If you experience any issues, please do not hesitate to visit the support site or our Discord server where there are developers and many experienced players available to assist you!  If you're interested in seeing some of the potential of Space Engineers, be sure to visit the {0} Community Hub. We look forward to seeing your creations and screenshots on there in the future. Good luck engineering your dreams!
		/// </summary>
		public static readonly MyStringId WelcomeScreen_Text3 = MyStringId.GetOrCompute("WelcomeScreen_Text3");

		/// <summary>
		/// Press {0} to weld target
		/// </summary>
		public static readonly MyStringId WelderPrimaryActionBuild = MyStringId.GetOrCompute("WelderPrimaryActionBuild");

		/// <summary>
		/// Asteroid
		/// </summary>
		public static readonly MyStringId WorkshopTag_Asteroid = MyStringId.GetOrCompute("WorkshopTag_Asteroid");

		/// <summary>
		/// Development
		/// </summary>
		public static readonly MyStringId WorkshopTag_Dev = MyStringId.GetOrCompute("WorkshopTag_Dev");

		/// <summary>
		/// Exploration
		/// </summary>
		public static readonly MyStringId WorkshopTag_Exploration = MyStringId.GetOrCompute("WorkshopTag_Exploration");

<<<<<<< HEAD
		/// <summary>
		/// Ship
		/// </summary>
		public static readonly MyStringId WorkshopTag_Ship = MyStringId.GetOrCompute("WorkshopTag_Ship");

		/// <summary>
		/// Rover
		/// </summary>
		public static readonly MyStringId WorkshopTag_Rover = MyStringId.GetOrCompute("WorkshopTag_Rover");

		/// <summary>
		/// Base
		/// </summary>
		public static readonly MyStringId WorkshopTag_Base = MyStringId.GetOrCompute("WorkshopTag_Base");

		/// <summary>
		/// Story
		/// </summary>
		public static readonly MyStringId WorkshopTag_Story = MyStringId.GetOrCompute("WorkshopTag_Story");

		/// <summary>
		/// PvP
		/// </summary>
		public static readonly MyStringId WorkshopTag_PvP = MyStringId.GetOrCompute("WorkshopTag_PvP");

		/// <summary>
		/// Survival
		/// </summary>
		public static readonly MyStringId WorkshopTag_Survival = MyStringId.GetOrCompute("WorkshopTag_Survival");

		/// <summary>
		/// Hud
		/// </summary>
=======
		public static readonly MyStringId WorkshopTag_Ship = MyStringId.GetOrCompute("WorkshopTag_Ship");

		public static readonly MyStringId WorkshopTag_Rover = MyStringId.GetOrCompute("WorkshopTag_Rover");

		public static readonly MyStringId WorkshopTag_Base = MyStringId.GetOrCompute("WorkshopTag_Base");

		public static readonly MyStringId WorkshopTag_Story = MyStringId.GetOrCompute("WorkshopTag_Story");

		public static readonly MyStringId WorkshopTag_PvP = MyStringId.GetOrCompute("WorkshopTag_PvP");

		public static readonly MyStringId WorkshopTag_Survival = MyStringId.GetOrCompute("WorkshopTag_Survival");

>>>>>>> d46cf8619665219cc163a7b28984ced59ed9470d
		public static readonly MyStringId WorkshopTag_Hud = MyStringId.GetOrCompute("WorkshopTag_Hud");

		/// <summary>
		/// Planet
		/// </summary>
		public static readonly MyStringId WorkshopTag_Planet = MyStringId.GetOrCompute("WorkshopTag_Planet");

		/// <summary>
		/// Production
		/// </summary>
		public static readonly MyStringId WorkshopTag_Production = MyStringId.GetOrCompute("WorkshopTag_Production");

		/// <summary>
		/// Respawn Ship
		/// </summary>
		public static readonly MyStringId WorkshopTag_RespawnShip = MyStringId.GetOrCompute("WorkshopTag_RespawnShip");

		/// <summary>
		/// World Settings
		/// </summary>
		public static readonly MyStringId WorldSettings = MyStringId.GetOrCompute("WorldSettings");

		/// <summary>
		/// Advanced
		/// </summary>
		public static readonly MyStringId WorldSettings_Advanced = MyStringId.GetOrCompute("WorldSettings_Advanced");

		/// <summary>
		/// Arcade
		/// </summary>
		public static readonly MyStringId WorldSettings_ArcadeSound = MyStringId.GetOrCompute("WorldSettings_ArcadeSound");

		/// <summary>
		/// Assembler efficiency
		/// </summary>
		public static readonly MyStringId WorldSettings_AssemblerEfficiency = MyStringId.GetOrCompute("WorldSettings_AssemblerEfficiency");

		/// <summary>
		/// Extreme: 16 large asteroids
		/// </summary>
		public static readonly MyStringId WorldSettings_AsteroidAmountExtreme = MyStringId.GetOrCompute("WorldSettings_AsteroidAmountExtreme");

		/// <summary>
		/// Large: 7 large asteroids
		/// </summary>
		public static readonly MyStringId WorldSettings_AsteroidAmountLarge = MyStringId.GetOrCompute("WorldSettings_AsteroidAmountLarge");

		/// <summary>
		/// None
		/// </summary>
		public static readonly MyStringId WorldSettings_AsteroidAmountNone = MyStringId.GetOrCompute("WorldSettings_AsteroidAmountNone");

		/// <summary>
		/// Normal: 4 large asteroids
		/// </summary>
		public static readonly MyStringId WorldSettings_AsteroidAmountNormal = MyStringId.GetOrCompute("WorldSettings_AsteroidAmountNormal");

		/// <summary>
		/// Infinite: High density
		/// </summary>
		public static readonly MyStringId WorldSettings_AsteroidAmountProceduralHigh = MyStringId.GetOrCompute("WorldSettings_AsteroidAmountProceduralHigh");

		/// <summary>
		/// Infinite: Low density
		/// </summary>
		public static readonly MyStringId WorldSettings_AsteroidAmountProceduralLow = MyStringId.GetOrCompute("WorldSettings_AsteroidAmountProceduralLow");

		/// <summary>
		/// Infinite: None
		/// </summary>
		public static readonly MyStringId WorldSettings_AsteroidAmountProceduralNone = MyStringId.GetOrCompute("WorldSettings_AsteroidAmountProceduralNone");

		/// <summary>
		/// Infinite: Normal density
		/// </summary>
		public static readonly MyStringId WorldSettings_AsteroidAmountProceduralNormal = MyStringId.GetOrCompute("WorldSettings_AsteroidAmountProceduralNormal");

		/// <summary>
		/// Infinite: Lowest density
		/// </summary>
		public static readonly MyStringId WorldSettings_AsteroidAmountProceduralLowest = MyStringId.GetOrCompute("WorldSettings_AsteroidAmountProceduralLowest");

		/// <summary>
		/// Auto-healing
		/// </summary>
		public static readonly MyStringId WorldSettings_AutoHealing = MyStringId.GetOrCompute("WorldSettings_AutoHealing");

		/// <summary>
		/// Battle
		/// </summary>
		public static readonly MyStringId WorldSettings_Battle = MyStringId.GetOrCompute("WorldSettings_Battle");

		/// <summary>
		/// Clients can save
		/// </summary>
		public static readonly MyStringId WorldSettings_ClientCanSave = MyStringId.GetOrCompute("WorldSettings_ClientCanSave");

		/// <summary>
		/// Description
		/// </summary>
		public static readonly MyStringId WorldSettings_Description = MyStringId.GetOrCompute("WorldSettings_Description");

		/// <summary>
		/// Destructible blocks
		/// </summary>
		public static readonly MyStringId WorldSettings_DestructibleBlocks = MyStringId.GetOrCompute("WorldSettings_DestructibleBlocks");

		/// <summary>
		/// Enable 3rd person view
		/// </summary>
		public static readonly MyStringId WorldSettings_Enable3rdPersonCamera = MyStringId.GetOrCompute("WorldSettings_Enable3rdPersonCamera");

		/// <summary>
		/// Adaptive simulation quality
		/// </summary>
		public static readonly MyStringId WorldSettings_EnableAdaptiveSimulationQuality = MyStringId.GetOrCompute("WorldSettings_EnableAdaptiveSimulationQuality");

		/// <summary>
		/// Cargo ships
		/// </summary>
		public static readonly MyStringId WorldSettings_EnableCargoShips = MyStringId.GetOrCompute("WorldSettings_EnableCargoShips");

		/// <summary>
		/// Enable unknown signals
		/// </summary>
		public static readonly MyStringId WorldSettings_EnableContainerDrops = MyStringId.GetOrCompute("WorldSettings_EnableContainerDrops");

		/// <summary>
		/// Enable convert to station
		/// </summary>
		public static readonly MyStringId WorldSettings_EnableConvertToStation = MyStringId.GetOrCompute("WorldSettings_EnableConvertToStation");

		/// <summary>
		/// Enable copy/paste
		/// </summary>
		public static readonly MyStringId WorldSettings_EnableCopyPaste = MyStringId.GetOrCompute("WorldSettings_EnableCopyPaste");

		/// <summary>
		/// Enable drones
		/// </summary>
		public static readonly MyStringId WorldSettings_EnableDrones = MyStringId.GetOrCompute("WorldSettings_EnableDrones");

		/// <summary>
		/// Enable Flora
		/// </summary>
		public static readonly MyStringId WorldSettings_EnableFlora = MyStringId.GetOrCompute("WorldSettings_EnableFlora");

		/// <summary>
		/// In-game scripts
		/// </summary>
		public static readonly MyStringId WorldSettings_EnableIngameScripts = MyStringId.GetOrCompute("WorldSettings_EnableIngameScripts");

		/// <summary>
		/// Enable jetpack
		/// </summary>
		public static readonly MyStringId WorldSettings_EnableJetpack = MyStringId.GetOrCompute("WorldSettings_EnableJetpack");

		/// <summary>
		/// Enable planets
		/// </summary>
		public static readonly MyStringId WorldSettings_EnablePlanets = MyStringId.GetOrCompute("WorldSettings_EnablePlanets");

		/// <summary>
		/// Enable realistic dampeners
		/// </summary>
		public static readonly MyStringId WorldSettings_EnableRealisticDampeners = MyStringId.GetOrCompute("WorldSettings_EnableRealisticDampeners");

		/// <summary>
		/// Remote block removal
		/// </summary>
		public static readonly MyStringId WorldSettings_EnableRemoteBlockRemoval = MyStringId.GetOrCompute("WorldSettings_EnableRemoteBlockRemoval");

		/// <summary>
		/// Enable respawn ships
		/// </summary>
		public static readonly MyStringId WorldSettings_EnableRespawnShips = MyStringId.GetOrCompute("WorldSettings_EnableRespawnShips");

		/// <summary>
		/// Enable spectator
		/// </summary>
		public static readonly MyStringId WorldSettings_EnableSpectator = MyStringId.GetOrCompute("WorldSettings_EnableSpectator");

		/// <summary>
		/// Enable spiders
		/// </summary>
		public static readonly MyStringId WorldSettings_EnableSpiders = MyStringId.GetOrCompute("WorldSettings_EnableSpiders");

		/// <summary>
		/// Enable sub-grid damage
		/// </summary>
		public static readonly MyStringId WorldSettings_EnableSubGridDamage = MyStringId.GetOrCompute("WorldSettings_EnableSubGridDamage");

		/// <summary>
		/// Enable sun rotation
		/// </summary>
		public static readonly MyStringId WorldSettings_EnableSunRotation = MyStringId.GetOrCompute("WorldSettings_EnableSunRotation");

		/// <summary>
		/// Enable tools shake
		/// </summary>
		public static readonly MyStringId WorldSettings_EnableToolShake = MyStringId.GetOrCompute("WorldSettings_EnableToolShake");

		/// <summary>
		/// Enable friendly missile damage
		/// </summary>
		public static readonly MyStringId WorldSettings_EnableTurrerFriendlyDamage = MyStringId.GetOrCompute("WorldSettings_EnableTurrerFriendlyDamage");

		/// <summary>
		/// Enable voxel destruction
		/// </summary>
		public static readonly MyStringId WorldSettings_EnableVoxelDestruction = MyStringId.GetOrCompute("WorldSettings_EnableVoxelDestruction");

		/// <summary>
		/// Enable voxel hand
		/// </summary>
		public static readonly MyStringId WorldSettings_EnableVoxelHand = MyStringId.GetOrCompute("WorldSettings_EnableVoxelHand");

		/// <summary>
		/// Weapons enabled
		/// </summary>
		public static readonly MyStringId WorldSettings_EnableWeapons = MyStringId.GetOrCompute("WorldSettings_EnableWeapons");

		/// <summary>
		/// Enable wolves
		/// </summary>
		public static readonly MyStringId WorldSettings_EnableWolfs = MyStringId.GetOrCompute("WorldSettings_EnableWolfs");

		/// <summary>
		/// Random encounters
		/// </summary>
		public static readonly MyStringId WorldSettings_Encounters = MyStringId.GetOrCompute("WorldSettings_Encounters");

		/// <summary>
		/// Environment hostility
		/// </summary>
		public static readonly MyStringId WorldSettings_EnvironmentHostility = MyStringId.GetOrCompute("WorldSettings_EnvironmentHostility");

		/// <summary>
		/// Cataclysm
		/// </summary>
		public static readonly MyStringId WorldSettings_EnvironmentHostilityCataclysm = MyStringId.GetOrCompute("WorldSettings_EnvironmentHostilityCataclysm");

		/// <summary>
		/// Armageddon (unrealistic)
		/// </summary>
		public static readonly MyStringId WorldSettings_EnvironmentHostilityCataclysmUnreal = MyStringId.GetOrCompute("WorldSettings_EnvironmentHostilityCataclysmUnreal");

		/// <summary>
		/// Normal
		/// </summary>
		public static readonly MyStringId WorldSettings_EnvironmentHostilityNormal = MyStringId.GetOrCompute("WorldSettings_EnvironmentHostilityNormal");

		/// <summary>
		/// Safe
		/// </summary>
		public static readonly MyStringId WorldSettings_EnvironmentHostilitySafe = MyStringId.GetOrCompute("WorldSettings_EnvironmentHostilitySafe");

		/// <summary>
		/// Flora Density
		/// </summary>
		public static readonly MyStringId WorldSettings_FloraDensity = MyStringId.GetOrCompute("WorldSettings_FloraDensity");

		/// <summary>
		/// Extreme
		/// </summary>
		public static readonly MyStringId WorldSettings_FloraDensity_Extreme = MyStringId.GetOrCompute("WorldSettings_FloraDensity_Extreme");

		/// <summary>
		/// High
		/// </summary>
		public static readonly MyStringId WorldSettings_FloraDensity_High = MyStringId.GetOrCompute("WorldSettings_FloraDensity_High");

		/// <summary>
		/// Low
		/// </summary>
		public static readonly MyStringId WorldSettings_FloraDensity_Low = MyStringId.GetOrCompute("WorldSettings_FloraDensity_Low");

		/// <summary>
		/// Medium
		/// </summary>
		public static readonly MyStringId WorldSettings_FloraDensity_Medium = MyStringId.GetOrCompute("WorldSettings_FloraDensity_Medium");

		/// <summary>
		/// None
		/// </summary>
		public static readonly MyStringId WorldSettings_FloraDensity_None = MyStringId.GetOrCompute("WorldSettings_FloraDensity_None");

		/// <summary>
		/// Friendly fire
		/// </summary>
		public static readonly MyStringId WorldSettings_FriendlyFire = MyStringId.GetOrCompute("WorldSettings_FriendlyFire");

		/// <summary>
		/// Scenario
		/// </summary>
		public static readonly MyStringId WorldSettings_GameScenario = MyStringId.GetOrCompute("WorldSettings_GameScenario");

		/// <summary>
		/// Game style
		/// </summary>
		public static readonly MyStringId WorldSettings_GameStyle = MyStringId.GetOrCompute("WorldSettings_GameStyle");

		/// <summary>
		/// Realistic
		/// </summary>
		public static readonly MyStringId WorldSettings_GameSurvivalTimes1 = MyStringId.GetOrCompute("WorldSettings_GameSurvivalTimes1");

		/// <summary>
		/// Realistic x10
		/// </summary>
		public static readonly MyStringId WorldSettings_GameSurvivalTimes10 = MyStringId.GetOrCompute("WorldSettings_GameSurvivalTimes10");

		/// <summary>
		/// Realistic x3
		/// </summary>
		public static readonly MyStringId WorldSettings_GameSurvivalTimes3 = MyStringId.GetOrCompute("WorldSettings_GameSurvivalTimes3");

		/// <summary>
		/// Grinding speed
		/// </summary>
		public static readonly MyStringId WorldSettings_GrinderSpeed = MyStringId.GetOrCompute("WorldSettings_GrinderSpeed");

		/// <summary>
		/// Inventory size
		/// </summary>
		public static readonly MyStringId WorldSettings_InventorySize = MyStringId.GetOrCompute("WorldSettings_InventorySize");

		/// <summary>
		/// Limit world size
		/// </summary>
		public static readonly MyStringId WorldSettings_LimitWorldSize = MyStringId.GetOrCompute("WorldSettings_LimitWorldSize");

		/// <summary>
		/// Max blocks per player
		/// </summary>
		public static readonly MyStringId WorldSettings_MaxBlocksPerPlayer = MyStringId.GetOrCompute("WorldSettings_MaxBlocksPerPlayer");

		/// <summary>
		/// Max ship size
		/// </summary>
		public static readonly MyStringId WorldSettings_MaxGridSize = MyStringId.GetOrCompute("WorldSettings_MaxGridSize");

		/// <summary>
		/// Maximum size of moons
		/// </summary>
		public static readonly MyStringId WorldSettings_MoonSizeMax = MyStringId.GetOrCompute("WorldSettings_MoonSizeMax");

		/// <summary>
		/// Minimum size of moons
		/// </summary>
		public static readonly MyStringId WorldSettings_MoonSizeMin = MyStringId.GetOrCompute("WorldSettings_MoonSizeMin");

		/// <summary>
		/// Password
		/// </summary>
		public static readonly MyStringId WorldSettings_Password = MyStringId.GetOrCompute("WorldSettings_Password");

		/// <summary>
		/// Permanent death
		/// </summary>
		public static readonly MyStringId WorldSettings_PermanentDeath = MyStringId.GetOrCompute("WorldSettings_PermanentDeath");

		/// <summary>
		/// Maximum size of planets
		/// </summary>
		public static readonly MyStringId WorldSettings_PlanetSizeMax = MyStringId.GetOrCompute("WorldSettings_PlanetSizeMax");

		/// <summary>
		/// Minimum size of planets
		/// </summary>
		public static readonly MyStringId WorldSettings_PlanetSizeMin = MyStringId.GetOrCompute("WorldSettings_PlanetSizeMin");

		/// <summary>
		/// Realistic
		/// </summary>
		public static readonly MyStringId WorldSettings_Realistic = MyStringId.GetOrCompute("WorldSettings_Realistic");

		/// <summary>
		/// Realistic
		/// </summary>
		public static readonly MyStringId WorldSettings_RealisticSound = MyStringId.GetOrCompute("WorldSettings_RealisticSound");

		/// <summary>
		/// x0.5
		/// </summary>
		public static readonly MyStringId WorldSettings_Realistic_half = MyStringId.GetOrCompute("WorldSettings_Realistic_half");

		/// <summary>
		/// x10
		/// </summary>
		public static readonly MyStringId WorldSettings_Realistic_x10 = MyStringId.GetOrCompute("WorldSettings_Realistic_x10");

		/// <summary>
		/// x2
		/// </summary>
		public static readonly MyStringId WorldSettings_Realistic_x2 = MyStringId.GetOrCompute("WorldSettings_Realistic_x2");

		/// <summary>
		/// x3
		/// </summary>
		public static readonly MyStringId WorldSettings_Realistic_x3 = MyStringId.GetOrCompute("WorldSettings_Realistic_x3");

		/// <summary>
		/// x5
		/// </summary>
		public static readonly MyStringId WorldSettings_Realistic_x5 = MyStringId.GetOrCompute("WorldSettings_Realistic_x5");

		/// <summary>
		/// Refinery speed
		/// </summary>
		public static readonly MyStringId WorldSettings_RefinerySpeed = MyStringId.GetOrCompute("WorldSettings_RefinerySpeed");

		/// <summary>
		/// Trash auto-removal
		/// </summary>
		public static readonly MyStringId WorldSettings_RemoveTrash = MyStringId.GetOrCompute("WorldSettings_RemoveTrash");

		/// <summary>
		/// Reset ownership
		/// </summary>
		public static readonly MyStringId WorldSettings_ResetOwnership = MyStringId.GetOrCompute("WorldSettings_ResetOwnership");

		/// <summary>
		/// Respawn ship cooldown
		/// </summary>
		public static readonly MyStringId WorldSettings_RespawnShipCooldown = MyStringId.GetOrCompute("WorldSettings_RespawnShipCooldown");

		/// <summary>
		/// Delete respawn ship
		/// </summary>
		public static readonly MyStringId WorldSettings_RespawnShipDelete = MyStringId.GetOrCompute("WorldSettings_RespawnShipDelete");

		/// <summary>
		/// Cooldowns disabled
		/// </summary>
		public static readonly MyStringId WorldSettings_RespawnShip_CooldownsDisabled = MyStringId.GetOrCompute("WorldSettings_RespawnShip_CooldownsDisabled");

		/// <summary>
		/// Default cooldowns
		/// </summary>
		public static readonly MyStringId WorldSettings_RespawnShip_Default = MyStringId.GetOrCompute("WorldSettings_RespawnShip_Default");

		/// <summary>
		/// Default / 10
		/// </summary>
		public static readonly MyStringId WorldSettings_RespawnShip_x01 = MyStringId.GetOrCompute("WorldSettings_RespawnShip_x01");

		/// <summary>
		/// Default / 5
		/// </summary>
		public static readonly MyStringId WorldSettings_RespawnShip_x02 = MyStringId.GetOrCompute("WorldSettings_RespawnShip_x02");

		/// <summary>
		/// Default / 2
		/// </summary>
		public static readonly MyStringId WorldSettings_RespawnShip_x05 = MyStringId.GetOrCompute("WorldSettings_RespawnShip_x05");

		/// <summary>
		/// Default x 10
		/// </summary>
		public static readonly MyStringId WorldSettings_RespawnShip_x10 = MyStringId.GetOrCompute("WorldSettings_RespawnShip_x10");

		/// <summary>
		/// Default x 100
		/// </summary>
		public static readonly MyStringId WorldSettings_RespawnShip_x100 = MyStringId.GetOrCompute("WorldSettings_RespawnShip_x100");

		/// <summary>
		/// Default x 2
		/// </summary>
		public static readonly MyStringId WorldSettings_RespawnShip_x2 = MyStringId.GetOrCompute("WorldSettings_RespawnShip_x2");

		/// <summary>
		/// Default x 20
		/// </summary>
		public static readonly MyStringId WorldSettings_RespawnShip_x20 = MyStringId.GetOrCompute("WorldSettings_RespawnShip_x20");

		/// <summary>
		/// Default x 5
		/// </summary>
		public static readonly MyStringId WorldSettings_RespawnShip_x5 = MyStringId.GetOrCompute("WorldSettings_RespawnShip_x5");

		/// <summary>
		/// Default x 50
		/// </summary>
		public static readonly MyStringId WorldSettings_RespawnShip_x50 = MyStringId.GetOrCompute("WorldSettings_RespawnShip_x50");

		/// <summary>
		/// Scenario
		/// </summary>
		public static readonly MyStringId WorldSettings_Scenario = MyStringId.GetOrCompute("WorldSettings_Scenario");

		/// <summary>
		/// Scenario edit mode
		/// </summary>
		public static readonly MyStringId WorldSettings_ScenarioEditMode = MyStringId.GetOrCompute("WorldSettings_ScenarioEditMode");

		/// <summary>
		/// Show player names
		/// </summary>
		public static readonly MyStringId WorldSettings_ShowPlayerNamesOnHud = MyStringId.GetOrCompute("WorldSettings_ShowPlayerNamesOnHud");

		/// <summary>
		/// Sound in space
		/// </summary>
		public static readonly MyStringId WorldSettings_SoundInSpace = MyStringId.GetOrCompute("WorldSettings_SoundInSpace");

		/// <summary>
		/// Sound mode
		/// </summary>
		public static readonly MyStringId WorldSettings_SoundMode = MyStringId.GetOrCompute("WorldSettings_SoundMode");

		/// <summary>
		/// Spawn with tools
		/// </summary>
		public static readonly MyStringId WorldSettings_SpawnWithTools = MyStringId.GetOrCompute("WorldSettings_SpawnWithTools");

		/// <summary>
		/// Start in respawn screen
		/// </summary>
		public static readonly MyStringId WorldSettings_StartInRespawnScreen = MyStringId.GetOrCompute("WorldSettings_StartInRespawnScreen");

		/// <summary>
		/// Unsupported stations
		/// </summary>
		public static readonly MyStringId WorldSettings_StationVoxelSupport = MyStringId.GetOrCompute("WorldSettings_StationVoxelSupport");

		/// <summary>
		/// Thruster damage
		/// </summary>
		public static readonly MyStringId WorldSettings_ThrusterDamage = MyStringId.GetOrCompute("WorldSettings_ThrusterDamage");

		/// <summary>
		/// Total PCU
		/// </summary>
		public static readonly MyStringId WorldSettings_TotalPCU = MyStringId.GetOrCompute("WorldSettings_TotalPCU");

		/// <summary>
		/// Optimal spawn distance
		/// </summary>
		public static readonly MyStringId WorldSettings_OptimalSpawnDistance = MyStringId.GetOrCompute("WorldSettings_OptimalSpawnDistance");

		/// <summary>
		/// View distance
		/// </summary>
		public static readonly MyStringId WorldSettings_ViewDistance = MyStringId.GetOrCompute("WorldSettings_ViewDistance");

		/// <summary>
		/// 10 km
		/// </summary>
		public static readonly MyStringId WorldSettings_ViewDistance_10_Km = MyStringId.GetOrCompute("WorldSettings_ViewDistance_10_Km");

		/// <summary>
		/// 15 km
		/// </summary>
		public static readonly MyStringId WorldSettings_ViewDistance_15_Km = MyStringId.GetOrCompute("WorldSettings_ViewDistance_15_Km");

		/// <summary>
		/// 20 km
		/// </summary>
		public static readonly MyStringId WorldSettings_ViewDistance_20_Km = MyStringId.GetOrCompute("WorldSettings_ViewDistance_20_Km");

		/// <summary>
		/// 30 km - small performance hit
		/// </summary>
		public static readonly MyStringId WorldSettings_ViewDistance_30_Km = MyStringId.GetOrCompute("WorldSettings_ViewDistance_30_Km");

		/// <summary>
		/// 40 km - performance hit
		/// </summary>
		public static readonly MyStringId WorldSettings_ViewDistance_40_Km = MyStringId.GetOrCompute("WorldSettings_ViewDistance_40_Km");

		/// <summary>
		/// 50 km - big performance hit
		/// </summary>
		public static readonly MyStringId WorldSettings_ViewDistance_50_Km = MyStringId.GetOrCompute("WorldSettings_ViewDistance_50_Km");

		/// <summary>
		/// 5 km - low end machines
		/// </summary>
		public static readonly MyStringId WorldSettings_ViewDistance_5_Km = MyStringId.GetOrCompute("WorldSettings_ViewDistance_5_Km");

		/// <summary>
		/// 7 km - performance friendly
		/// </summary>
		public static readonly MyStringId WorldSettings_ViewDistance_7_Km = MyStringId.GetOrCompute("WorldSettings_ViewDistance_7_Km");

		/// <summary>
		/// Custom
		/// </summary>
		public static readonly MyStringId WorldSettings_ViewDistance_Custom = MyStringId.GetOrCompute("WorldSettings_ViewDistance_Custom");

		/// <summary>
		/// The selected world size is more limited than the original one. Reducing world size in an existing save could delete some ships beyond the new limit. Are you sure you want to continue?
		/// </summary>
		public static readonly MyStringId WorldSettings_WarningChangingWorldSize = MyStringId.GetOrCompute("WorldSettings_WarningChangingWorldSize");

		/// <summary>
		/// The name you have entered already exists. Please change the name to something else.
		/// </summary>
		public static readonly MyStringId WorldSettings_Error_NameExists = MyStringId.GetOrCompute("WorldSettings_Error_NameExists");

		/// <summary>
		/// There was an error trying to rename your world. Please check your saves folder for any problems.
		/// </summary>
		public static readonly MyStringId WorldSettings_Error_SavingFailed = MyStringId.GetOrCompute("WorldSettings_Error_SavingFailed");

		/// <summary>
		/// Welding speed
		/// </summary>
		public static readonly MyStringId WorldSettings_WelderSpeed = MyStringId.GetOrCompute("WorldSettings_WelderSpeed");

		/// <summary>
		/// World generator
		/// </summary>
		public static readonly MyStringId WorldSettings_WorldGenerator = MyStringId.GetOrCompute("WorldSettings_WorldGenerator");

		/// <summary>
		/// 100 km
		/// </summary>
		public static readonly MyStringId WorldSettings_WorldSize100Km = MyStringId.GetOrCompute("WorldSettings_WorldSize100Km");

		/// <summary>
		/// 10 km
		/// </summary>
		public static readonly MyStringId WorldSettings_WorldSize10Km = MyStringId.GetOrCompute("WorldSettings_WorldSize10Km");

		/// <summary>
		/// 20 km
		/// </summary>
		public static readonly MyStringId WorldSettings_WorldSize20Km = MyStringId.GetOrCompute("WorldSettings_WorldSize20Km");

		/// <summary>
		/// 50 km
		/// </summary>
		public static readonly MyStringId WorldSettings_WorldSize50Km = MyStringId.GetOrCompute("WorldSettings_WorldSize50Km");

		/// <summary>
		/// Custom
		/// </summary>
		public static readonly MyStringId WorldSettings_WorldSizeCustom = MyStringId.GetOrCompute("WorldSettings_WorldSizeCustom");

		/// <summary>
		/// Unlimited
		/// </summary>
		public static readonly MyStringId WorldSettings_WorldSizeUnlimited = MyStringId.GetOrCompute("WorldSettings_WorldSizeUnlimited");

		/// <summary>
		/// Enable oxygen
		/// </summary>
		public static readonly MyStringId World_Settings_EnableOxygen = MyStringId.GetOrCompute("World_Settings_EnableOxygen");

		/// <summary>
		/// Enable airtightness
		/// </summary>
		public static readonly MyStringId World_Settings_EnableOxygenPressurization = MyStringId.GetOrCompute("World_Settings_EnableOxygenPressurization");

		/// <summary>
		/// This link is not allowed and will not open. Allowed sites: {0}community, youtube, KSH forum.
		/// </summary>
		public static readonly MyStringId WwwLinkNotAllowed = MyStringId.GetOrCompute("WwwLinkNotAllowed");

		/// <summary>
		/// This link is not allowed and will not open. Allowed sites: {0}community, youtube, KSH forum.
		/// </summary>
		public static readonly MyStringId WwwLinkNotAllowed_Steam = MyStringId.GetOrCompute("WwwLinkNotAllowed_Steam");

		/// <summary>
		/// Cycle through the various HUD states; they differ by amount of shown information. You can also change the way signals show up on your HUD.
		/// </summary>
		public static readonly MyStringId IngameHelp_HUD_Detail1 = MyStringId.GetOrCompute("IngameHelp_HUD_Detail1");

		/// <summary>
		/// Press {CONTROL:TOGGLE_HUD} to cycle through HUD states.
		/// </summary>
		public static readonly MyStringId IngameHelp_HUD_Detail2 = MyStringId.GetOrCompute("IngameHelp_HUD_Detail2");

		/// <summary>
		/// Press {CONTROL:TOGGLE_SIGNALS} to cycle through signal states.
		/// </summary>
		public static readonly MyStringId IngameHelp_HUD_Detail3 = MyStringId.GetOrCompute("IngameHelp_HUD_Detail3");

		/// <summary>
		/// Good.bot: HUD
		/// </summary>
		public static readonly MyStringId IngameHelp_HUD_Title = MyStringId.GetOrCompute("IngameHelp_HUD_Title");

		/// <summary>
		/// Turning off dampeners while flying allows you to move without slowing down when you let go of the input. This can be useful to move steady at low or high speeds without using much fuel.
		/// </summary>
		public static readonly MyStringId IngameHelp_Jetpack2_Detail1 = MyStringId.GetOrCompute("IngameHelp_Jetpack2_Detail1");

		/// <summary>
		/// Toggle dampeners with {CONTROL:DAMPING} while flying.
		/// </summary>
		public static readonly MyStringId IngameHelp_Jetpack2_Detail2 = MyStringId.GetOrCompute("IngameHelp_Jetpack2_Detail2");

		/// <summary>
		/// Good.bot: Building
		/// </summary>
		public static readonly MyStringId IngameHelp_Building_Title = MyStringId.GetOrCompute("IngameHelp_Building_Title");

		/// <summary>
		/// You can build blocks anywhere in the world or add them to existing grids. The toolbar config screen will show you all available blocks that you can build.
		/// </summary>
		public static readonly MyStringId IngameHelp_Building_Detail1 = MyStringId.GetOrCompute("IngameHelp_Building_Detail1");

		/// <summary>
		/// Press {CONTROL:BUILD_SCREEN} to open toolbar config screen.
		/// </summary>
		public static readonly MyStringId IngameHelp_Building_Detail2 = MyStringId.GetOrCompute("IngameHelp_Building_Detail2");

		/// <summary>
		/// Drag a block to your toolbar.
		/// </summary>
		public static readonly MyStringId IngameHelp_Building_Detail3 = MyStringId.GetOrCompute("IngameHelp_Building_Detail3");

		/// <summary>
		/// Select a block or tool by pressing 1 - 9
		/// </summary>
		public static readonly MyStringId IngameHelp_Building_Detail4 = MyStringId.GetOrCompute("IngameHelp_Building_Detail4");

		/// <summary>
		/// Press {CONTROL:TOOLBAR_RADIAL_MENU} to open the [Building Radial Menu].
		/// </summary>
		public static readonly MyStringId IngameHelp_Building_Detail2_Gamepad = MyStringId.GetOrCompute("IngameHelp_Building_Detail2_Gamepad");

		/// <summary>
		/// Press {CONTROL:GUI:SWITCH_GUI_LEFT} or {CONTROL:GUI:SWITCH_GUI_RIGHT} to change tabs.
		/// </summary>
		public static readonly MyStringId IngameHelp_Building_Detail3_Gamepad = MyStringId.GetOrCompute("IngameHelp_Building_Detail3_Gamepad");

		/// <summary>
		/// Highlight a block with {GAMEPAD:AXIS_MOTION} and press {CONTROL:GUI:SHIFT_RIGHT} to select a block.
		/// </summary>
		public static readonly MyStringId IngameHelp_Building_Detail4_Gamepad = MyStringId.GetOrCompute("IngameHelp_Building_Detail4_Gamepad");

		/// <summary>
		/// Most blocks come in two sizes and can be rotated in any direction.
		/// </summary>
		public static readonly MyStringId IngameHelp_Building2_Detail1 = MyStringId.GetOrCompute("IngameHelp_Building2_Detail1");

		/// <summary>
		/// Select the same block twice on your toolbar to pick a size.
		/// </summary>
		public static readonly MyStringId IngameHelp_Building2_Detail2 = MyStringId.GetOrCompute("IngameHelp_Building2_Detail2");

		/// <summary>
		/// Use {CONTROL:CUBE_ROTATE_ROLL_POSITIVE}, {CONTROL:CUBE_ROTATE_VERTICAL_NEGATIVE}, {CONTROL:CUBE_ROTATE_HORISONTAL_POSITIVE}, {CONTROL:CUBE_ROTATE_HORISONTAL_NEGATIVE}, {CONTROL:CUBE_ROTATE_ROLL_NEGATIVE} and {CONTROL:CUBE_ROTATE_VERTICAL_POSITIVE} keys to rotate blocks.
		/// </summary>
		public static readonly MyStringId IngameHelp_Building2_Detail3 = MyStringId.GetOrCompute("IngameHelp_Building2_Detail3");

		/// <summary>
		/// Press {CONTROL:BUILD:CUBE_BUILDER_CUBESIZE_MODE} to change block size.
		/// </summary>
		public static readonly MyStringId IngameHelp_Building2_Detail2_Gamepad = MyStringId.GetOrCompute("IngameHelp_Building2_Detail2_Gamepad");

		/// <summary>
		/// Use {CONTROL:BUILD:CHANGE_ROTATION_AXIS} to change rotation axis.
		/// </summary>
		public static readonly MyStringId IngameHelp_Building2_Detail3_Gamepad = MyStringId.GetOrCompute("IngameHelp_Building2_Detail3_Gamepad");

		/// <summary>
		/// Use {CONTROL:BUILD:ROTATE_AXIS_LEFT} and {CONTROL:BUILD:ROTATE_AXIS_RIGHT} to rotate around the axis.
		/// </summary>
		public static readonly MyStringId IngameHelp_Building2_Detail4_Gamepad = MyStringId.GetOrCompute("IngameHelp_Building2_Detail4_Gamepad");

		/// <summary>
		/// In survival mode you need the first component of a block to place it. You can produce components in assembler or salvage them from other blocks with a grinder.
		/// </summary>
		public static readonly MyStringId IngameHelp_Building3_Detail1 = MyStringId.GetOrCompute("IngameHelp_Building3_Detail1");

		/// <summary>
		/// Place a block with the {CONTROL:BUILD:PRIMARY_TOOL_ACTION}.
		/// </summary>
		public static readonly MyStringId IngameHelp_Building3_Detail2 = MyStringId.GetOrCompute("IngameHelp_Building3_Detail2");

		/// <summary>
		/// Blocks owned by other players cannot be accessed if they are not shared with others. You can hack blocks by replacing their computer parts  with a grinder and welder to gain access.
		/// </summary>
		public static readonly MyStringId IngameHelp_Ownership_Detail1 = MyStringId.GetOrCompute("IngameHelp_Ownership_Detail1");

		/// <summary>
		/// Hack a block.
		/// </summary>
		public static readonly MyStringId IngameHelp_Ownership_Detail2 = MyStringId.GetOrCompute("IngameHelp_Ownership_Detail2");

		/// <summary>
		/// Good.bot: Ownership
		/// </summary>
		public static readonly MyStringId IngameHelp_Ownership_Title = MyStringId.GetOrCompute("IngameHelp_Ownership_Title");

		/// <summary>
		/// You will be building in no time!
		/// </summary>
		public static readonly MyStringId IngameHelp_CameraTip_Detail1 = MyStringId.GetOrCompute("IngameHelp_CameraTip_Detail1");

		/// <summary>
		/// *Tip:* Third person camera will switch to first person if there are objects in your way.
		/// </summary>
		public static readonly MyStringId IngameHelp_CameraTip_Detail2 = MyStringId.GetOrCompute("IngameHelp_CameraTip_Detail2");

		/// <summary>
		/// Good.bot: Camera
		/// </summary>
		public static readonly MyStringId IngameHelp_Camera_Title = MyStringId.GetOrCompute("IngameHelp_Camera_Title");

		/// <summary>
		/// Blocks or entire grids can be turned off to save power and fuel.  When you are in a cockpit, Press {CONTROL:TOGGLE_REACTORS} to turn off and on the power production blocks.
		/// </summary>
		public static readonly MyStringId IngameHelp_Power_Detail1 = MyStringId.GetOrCompute("IngameHelp_Power_Detail1");

		/// <summary>
		/// Press {CONTROL:TOGGLE_REACTORS} while in a cockpit.
		/// </summary>
		public static readonly MyStringId IngameHelp_Power_Detail2 = MyStringId.GetOrCompute("IngameHelp_Power_Detail2");

		/// <summary>
		/// Good.bot: Power
		/// </summary>
		public static readonly MyStringId IngameHelp_Power_Title = MyStringId.GetOrCompute("IngameHelp_Power_Title");

		/// <summary>
		/// You are a natural!
		/// </summary>
		public static readonly MyStringId IngameHelp_BuildingTip_Detail1 = MyStringId.GetOrCompute("IngameHelp_BuildingTip_Detail1");

		/// <summary>
		/// *Tip:* Blocks with a + symbol have variations available that you can scroll through.
		/// </summary>
		public static readonly MyStringId IngameHelp_BuildingTip_Detail2 = MyStringId.GetOrCompute("IngameHelp_BuildingTip_Detail2");

		/// <summary>
		/// I could not have done it better myself!
		/// </summary>
		public static readonly MyStringId IngameHelp_HUDTip_Detail1 = MyStringId.GetOrCompute("IngameHelp_HUDTip_Detail1");

		/// <summary>
		/// *Tip:* HUD signals can be individually disabled in your terminal control panel.
		/// </summary>
		public static readonly MyStringId IngameHelp_HUDTip_Detail2 = MyStringId.GetOrCompute("IngameHelp_HUDTip_Detail2");

		/// <summary>
		/// Well done!
		/// </summary>
		public static readonly MyStringId IngameHelp_IntroTip_Detail1 = MyStringId.GetOrCompute("IngameHelp_IntroTip_Detail1");

		/// <summary>
		/// *Tip:* You can ask me anything in the chat {CONTROL:CHAT_SCREEN} using ? &lt;question&gt; (english only). In case of any troubles contact us at support@keenswh.com
		/// </summary>
		public static readonly MyStringId IngameHelp_IntroTip_Detail2 = MyStringId.GetOrCompute("IngameHelp_IntroTip_Detail2");

		/// <summary>
		/// That is my definition of flying!
		/// </summary>
		public static readonly MyStringId IngameHelp_JetpackTip_Detail1 = MyStringId.GetOrCompute("IngameHelp_JetpackTip_Detail1");

		/// <summary>
		/// *Tip:* Use relative dampening with [Ctrl+]{0} to keep velocity of the ship under cursor.
		/// </summary>
		public static readonly MyStringId IngameHelp_JetpackTip_Detail2 = MyStringId.GetOrCompute("IngameHelp_JetpackTip_Detail2");

		/// <summary>
		/// Organization equals efficiency!
		/// </summary>
		public static readonly MyStringId IngameHelp_InventoryTip_Detail1 = MyStringId.GetOrCompute("IngameHelp_InventoryTip_Detail1");

		/// <summary>
		/// *Tip:* You can drag items out of your inventory to drop them again.
		/// </summary>
		public static readonly MyStringId IngameHelp_InventoryTip_Detail2 = MyStringId.GetOrCompute("IngameHelp_InventoryTip_Detail2");

		/// <summary>
		/// Highlighted objects can be picked up if there is room in your inventory.
		/// </summary>
		public static readonly MyStringId IngameHelp_Inventory_Detail1 = MyStringId.GetOrCompute("IngameHelp_Inventory_Detail1");

		/// <summary>
		/// Press {CONTROL:USE} to pick up an item.
		/// </summary>
		public static readonly MyStringId IngameHelp_Inventory_Detail2 = MyStringId.GetOrCompute("IngameHelp_Inventory_Detail2");

		/// <summary>
		/// Press {CONTROL:INVENTORY} to open inventory.
		/// </summary>
		public static readonly MyStringId IngameHelp_Inventory_Detail3 = MyStringId.GetOrCompute("IngameHelp_Inventory_Detail3");

		/// <summary>
		/// Good.bot: Inventory
		/// </summary>
		public static readonly MyStringId IngameHelp_Inventory_Title = MyStringId.GetOrCompute("IngameHelp_Inventory_Title");

		/// <summary>
		/// Energized!
		/// </summary>
		public static readonly MyStringId IngameHelp_EnergyTip_Detail1 = MyStringId.GetOrCompute("IngameHelp_EnergyTip_Detail1");

		/// <summary>
		/// *Tip:*  Energy drains faster when it is hot or cold.
		/// </summary>
		public static readonly MyStringId IngameHelp_EnergyTip_Detail2 = MyStringId.GetOrCompute("IngameHelp_EnergyTip_Detail2");

		/// <summary>
		/// Your energy is getting low. Interact with a powered medical bay or survival kit to recharge your energy or use any kind of cockpit. Your tools need energy to function.
		/// </summary>
		public static readonly MyStringId IngameHelp_Energy_Detail1 = MyStringId.GetOrCompute("IngameHelp_Energy_Detail1");

		/// <summary>
		/// Refill your energy.
		/// </summary>
		public static readonly MyStringId IngameHelp_Energy_Detail2 = MyStringId.GetOrCompute("IngameHelp_Energy_Detail2");

		/// <summary>
		/// Good.bot: Energy
		/// </summary>
		public static readonly MyStringId IngameHelp_Energy_Title = MyStringId.GetOrCompute("IngameHelp_Energy_Title");

		/// <summary>
		/// Just what the doctor ordered!
		/// </summary>
		public static readonly MyStringId IngameHelp_HealthTip_Detail1 = MyStringId.GetOrCompute("IngameHelp_HealthTip_Detail1");

		/// <summary>
		/// *Tip:* You will also slowly heal in oxygenated environments.
		/// </summary>
		public static readonly MyStringId IngameHelp_HealthTip_Detail2 = MyStringId.GetOrCompute("IngameHelp_HealthTip_Detail2");

		/// <summary>
		/// You're hurt. You can heal by interacting with the console of a powered medical bay or survival kit.
		/// </summary>
		public static readonly MyStringId IngameHelp_Health_Detail1 = MyStringId.GetOrCompute("IngameHelp_Health_Detail1");

		/// <summary>
		/// Replenish your health.
		/// </summary>
		public static readonly MyStringId IngameHelp_Health_Detail2 = MyStringId.GetOrCompute("IngameHelp_Health_Detail2");

		/// <summary>
		/// Good.bot: Health
		/// </summary>
		public static readonly MyStringId IngameHelp_Health_Title = MyStringId.GetOrCompute("IngameHelp_Health_Title");

		/// <summary>
		/// I think you are smarter than my maker!
		/// </summary>
		public static readonly MyStringId IngameHelp_HydrogenTip_Detail1 = MyStringId.GetOrCompute("IngameHelp_HydrogenTip_Detail1");

		/// <summary>
		/// *Tip:* You can conserve hydrogen when in space by flying with dampeners off.
		/// </summary>
		public static readonly MyStringId IngameHelp_HydrogenTip_Detail2 = MyStringId.GetOrCompute("IngameHelp_HydrogenTip_Detail2");

		/// <summary>
		/// Your hydrogen is getting low. Hydrogen is produced from ice in a O2/H2 generator. You can refill bottles at the generator or resupply directly by interacting with a medical bay or survival kit if it's connected with the O2/H2 generator.
		/// </summary>
		public static readonly MyStringId IngameHelp_Hydrogen_Detail1 = MyStringId.GetOrCompute("IngameHelp_Hydrogen_Detail1");

		/// <summary>
		/// Refill your hydrogen.
		/// </summary>
		public static readonly MyStringId IngameHelp_Hydrogen_Detail2 = MyStringId.GetOrCompute("IngameHelp_Hydrogen_Detail2");

		/// <summary>
		/// Good.bot: Hydrogen
		/// </summary>
		public static readonly MyStringId IngameHelp_Hydrogen_Title = MyStringId.GetOrCompute("IngameHelp_Hydrogen_Title");

		/// <summary>
		/// The last Engineer took much longer to figure this out!
		/// </summary>
		public static readonly MyStringId IngameHelp_MagneticBootsTip_Detail1 = MyStringId.GetOrCompute("IngameHelp_MagneticBootsTip_Detail1");

		/// <summary>
		/// *Tip:* Do not jump!
		/// </summary>
		public static readonly MyStringId IngameHelp_MagneticBootsTip_Detail2 = MyStringId.GetOrCompute("IngameHelp_MagneticBootsTip_Detail2");

		/// <summary>
		/// In zero gravity you can use your magnetic boots to walk on any surface. Position yourself with your feet down and turn off your jetpack to automatically lock your magnetic boots.
		/// </summary>
		public static readonly MyStringId IngameHelp_MagneticBoots_Detail1 = MyStringId.GetOrCompute("IngameHelp_MagneticBoots_Detail1");

		/// <summary>
		/// Use your magnetic boots in zero gravity.
		/// </summary>
		public static readonly MyStringId IngameHelp_MagneticBoots_Detail2 = MyStringId.GetOrCompute("IngameHelp_MagneticBoots_Detail2");

		/// <summary>
		/// Good.bot: Magnetic Boots
		/// </summary>
		public static readonly MyStringId IngameHelp_MagneticBoots_Title = MyStringId.GetOrCompute("IngameHelp_MagneticBoots_Title");

		/// <summary>
		/// Breathing is preferable to not breathing!
		/// </summary>
		public static readonly MyStringId IngameHelp_OxygenTip_Detail1 = MyStringId.GetOrCompute("IngameHelp_OxygenTip_Detail1");

		/// <summary>
		/// *Tip:* Walking consumes less oxygen than running or sprinting
		/// </summary>
		public static readonly MyStringId IngameHelp_OxygenTip_Detail2 = MyStringId.GetOrCompute("IngameHelp_OxygenTip_Detail2");

		/// <summary>
		/// Your oxygen is getting low. Oxygen is produced from ice in a O2/H2 generator. You can refill bottles at the generator or resupply directly by interacting with a medical bay or survival kit if it's connected with the O2/H2 generator.
		/// </summary>
		public static readonly MyStringId IngameHelp_Oxygen_Detail1 = MyStringId.GetOrCompute("IngameHelp_Oxygen_Detail1");

		/// <summary>
		/// Refill your oxygen.
		/// </summary>
		public static readonly MyStringId IngameHelp_Oxygen_Detail2 = MyStringId.GetOrCompute("IngameHelp_Oxygen_Detail2");

		/// <summary>
		/// Good.bot: Oxygen
		/// </summary>
		public static readonly MyStringId IngameHelp_Oxygen_Title = MyStringId.GetOrCompute("IngameHelp_Oxygen_Title");

		/// <summary>
		/// Pilots take no special joy in walking. Pilots like flying. - Neil Armstrong
		/// </summary>
		public static readonly MyStringId IngameHelp_FlyingAShipTip_Detail1 = MyStringId.GetOrCompute("IngameHelp_FlyingAShipTip_Detail1");

		/// <summary>
		/// *Tip:* You need thrusters in all six directions. More thrusters means faster acceleration!
		/// </summary>
		public static readonly MyStringId IngameHelp_FlyingAShipTip_Detail2 = MyStringId.GetOrCompute("IngameHelp_FlyingAShipTip_Detail2");

		/// <summary>
		/// A ship requires thrusters for movement, gyroscopes to orientate,  power and a cockpit.  The controls for a ship are the same as the jetpack.
		/// </summary>
		public static readonly MyStringId IngameHelp_FlyingAShip_Detail1 = MyStringId.GetOrCompute("IngameHelp_FlyingAShip_Detail1");

		/// <summary>
		/// Press {CONTROL:TOGGLE_REACTORS} to toggle power on or off.
		/// </summary>
		public static readonly MyStringId IngameHelp_FlyingAShip_Detail2 = MyStringId.GetOrCompute("IngameHelp_FlyingAShip_Detail2");

		/// <summary>
		/// Use {CONTROL:JUMP} and {CONTROL:CROUCH} to go up and down.
		/// </summary>
		public static readonly MyStringId IngameHelp_FlyingAShip_Detail3 = MyStringId.GetOrCompute("IngameHelp_FlyingAShip_Detail3");

		/// <summary>
		/// Use {CONTROL:ROLL_LEFT} and {CONTROL:ROLL_RIGHT} to roll.
		/// </summary>
		public static readonly MyStringId IngameHelp_FlyingAShip_Detail4 = MyStringId.GetOrCompute("IngameHelp_FlyingAShip_Detail4");

		/// <summary>
		/// Good.bot: Flying a Ship
		/// </summary>
		public static readonly MyStringId IngameHelp_FlyingAShip_Title = MyStringId.GetOrCompute("IngameHelp_FlyingAShip_Title");

		/// <summary>
		/// A  grinder is used to deconstruct and salvage blocks by removing their components into your inventory.
		/// </summary>
		public static readonly MyStringId IngameHelp_Grinder_Detail1 = MyStringId.GetOrCompute("IngameHelp_Grinder_Detail1");

		/// <summary>
		/// Hold {CONTROL:TOOLS:PRIMARY_TOOL_ACTION} to use grinder on any block.
		/// </summary>
		public static readonly MyStringId IngameHelp_Grinder_Detail2 = MyStringId.GetOrCompute("IngameHelp_Grinder_Detail2");

		/// <summary>
		/// Good.bot: Grinder
		/// </summary>
		public static readonly MyStringId IngameHelp_Grinder_Title = MyStringId.GetOrCompute("IngameHelp_Grinder_Title");

		/// <summary>
		/// You made quick work of that!
		/// </summary>
		public static readonly MyStringId IngameHelp_GrinderTip_Detail1 = MyStringId.GetOrCompute("IngameHelp_GrinderTip_Detail1");

		/// <summary>
		/// *Tip:* Grinder's can be used to remove trees.
		/// </summary>
		public static readonly MyStringId IngameHelp_GrinderTip_Detail2 = MyStringId.GetOrCompute("IngameHelp_GrinderTip_Detail2");

		/// <summary>
		/// A hand drill is used to break down rock, collect minerals or to dig tunnels. Ores can be found in asteroids and dark spots on planets. All drills are equipped with a short-range detector.
		/// </summary>
		public static readonly MyStringId IngameHelp_HandDrill_Detail1 = MyStringId.GetOrCompute("IngameHelp_HandDrill_Detail1");

		/// <summary>
		/// Hold {CONTROL:TOOLS:PRIMARY_TOOL_ACTION} to break down stone.
		/// </summary>
		public static readonly MyStringId IngameHelp_HandDrill_Detail2 = MyStringId.GetOrCompute("IngameHelp_HandDrill_Detail2");

		/// <summary>
		/// Press {CONTROL:USE} to pick up rocks.
		/// </summary>
		public static readonly MyStringId IngameHelp_HandDrill_Detail3 = MyStringId.GetOrCompute("IngameHelp_HandDrill_Detail3");

		/// <summary>
		/// Hold {CONTROL:TOOLS:SECONDARY_TOOL_ACTION} to quickly dig tunnels.
		/// </summary>
		public static readonly MyStringId IngameHelp_HandDrill_Detail4 = MyStringId.GetOrCompute("IngameHelp_HandDrill_Detail4");

		/// <summary>
		/// Good.bot: Hand Drill
		/// </summary>
		public static readonly MyStringId IngameHelp_HandDrill_Title = MyStringId.GetOrCompute("IngameHelp_HandDrill_Title");

		/// <summary>
		/// A basic weapon to protect yourself; requires small calibre ammunition.
		/// </summary>
		public static readonly MyStringId IngameHelp_Rifle_Detail1 = MyStringId.GetOrCompute("IngameHelp_Rifle_Detail1");

		/// <summary>
		/// *Tip:* There are more specialized rifles available. Don’t forget that you can review useful information anytime in the help screen by pressing {CONTROL:HELP_SCREEN}.
		/// </summary>
		public static readonly MyStringId IngameHelp_Rifle_Detail2 = MyStringId.GetOrCompute("IngameHelp_Rifle_Detail2");

		/// <summary>
		/// Good.bot: Rifle
		/// </summary>
		public static readonly MyStringId IngameHelp_Rifle_Title = MyStringId.GetOrCompute("IngameHelp_Rifle_Title");

		/// <summary>
		/// Impressive… Most impressive!
		/// </summary>
		public static readonly MyStringId IngameHelp_WelderTip_Detail1 = MyStringId.GetOrCompute("IngameHelp_WelderTip_Detail1");

		/// <summary>
		/// *Tip:* Use the {CONTROL:TOOLS:SECONDARY_TOOL_ACTION} to store components from your inventory into a block under construction.
		/// </summary>
		public static readonly MyStringId IngameHelp_WelderTip_Detail2 = MyStringId.GetOrCompute("IngameHelp_WelderTip_Detail2");

		/// <summary>
		/// A  welder is used to construct and repair blocks by adding the required components from your inventory.
		/// </summary>
		public static readonly MyStringId IngameHelp_Welder_Detail1 = MyStringId.GetOrCompute("IngameHelp_Welder_Detail1");

		/// <summary>
		/// Hold {CONTROL:TOOLS:PRIMARY_TOOL_ACTION} to use the welder on any block.
		/// </summary>
		public static readonly MyStringId IngameHelp_Welder_Detail2 = MyStringId.GetOrCompute("IngameHelp_Welder_Detail2");

		/// <summary>
		/// Good.bot: Welder
		/// </summary>
		public static readonly MyStringId IngameHelp_Welder_Title = MyStringId.GetOrCompute("IngameHelp_Welder_Title");

		/// <summary>
		/// Ore and scrap metal can be refined into ingots in a powered Refinery.  Ingots can be used to produce components, tools and weapons. Refineries will automatically pull resources and refine them.
		/// </summary>
		public static readonly MyStringId IngameHelp_RefiningOre_Detail1 = MyStringId.GetOrCompute("IngameHelp_RefiningOre_Detail1");

		/// <summary>
		/// Use a survival kit or Refinery to process ore and obtain ingots.
		/// </summary>
		public static readonly MyStringId IngameHelp_RefiningOre_Detail2 = MyStringId.GetOrCompute("IngameHelp_RefiningOre_Detail2");

		/// <summary>
		/// Good.bot: Refining Ore
		/// </summary>
		public static readonly MyStringId IngameHelp_RefiningOre_Title = MyStringId.GetOrCompute("IngameHelp_RefiningOre_Title");

		/// <summary>
		/// Your skills are quickly becoming superior to mine!
		/// </summary>
		public static readonly MyStringId IngameHelp_ComponentsTip_Detail1 = MyStringId.GetOrCompute("IngameHelp_ComponentsTip_Detail1");

		/// <summary>
		/// *Tip:* Blocks with a + symbol have variations available that you can scroll through.
		/// </summary>
		public static readonly MyStringId IngameHelp_ComponentsTip_Detail2 = MyStringId.GetOrCompute("IngameHelp_ComponentsTip_Detail2");

		/// <summary>
		/// Components are used to build and repair blocks. You can use a welder on any block to add the required component. You can select tools and blocks on your toolbar.
		/// </summary>
		public static readonly MyStringId IngameHelp_Components_Detail1 = MyStringId.GetOrCompute("IngameHelp_Components_Detail1");

		/// <summary>
		/// Repair a block
		/// </summary>
		public static readonly MyStringId IngameHelp_Components_Detail2 = MyStringId.GetOrCompute("IngameHelp_Components_Detail2");

		/// <summary>
		/// Good.bot: Components
		/// </summary>
		public static readonly MyStringId IngameHelp_Components_Title = MyStringId.GetOrCompute("IngameHelp_Components_Title");

		/// <summary>
		/// A little light goes a long way!
		/// </summary>
		public static readonly MyStringId IngameHelp_FlashlightTip_Detail1 = MyStringId.GetOrCompute("IngameHelp_FlashlightTip_Detail1");

		/// <summary>
		/// *Tip:* Remember, your flashlight consumes power from your suit.
		/// </summary>
		public static readonly MyStringId IngameHelp_FlashlightTip_Detail2 = MyStringId.GetOrCompute("IngameHelp_FlashlightTip_Detail2");

		/// <summary>
		/// Use your flashlight when entering dark areas.
		/// </summary>
		public static readonly MyStringId IngameHelp_Flashlight_Detail1 = MyStringId.GetOrCompute("IngameHelp_Flashlight_Detail1");

		/// <summary>
		/// Press {CONTROL:HEADLIGHTS} to toggle your flashlight off and on.
		/// </summary>
		public static readonly MyStringId IngameHelp_Flashlight_Detail2 = MyStringId.GetOrCompute("IngameHelp_Flashlight_Detail2");

		/// <summary>
		/// Good.bot: Flashlight
		/// </summary>
		public static readonly MyStringId IngameHelp_Flashlight_Title = MyStringId.GetOrCompute("IngameHelp_Flashlight_Title");

		/// <summary>
		/// Ingots can be used by a survival kit or assembler to produce components, tools and weapons. You can select what component to produce in the assembler's or survival kit's menu.
		/// </summary>
		public static readonly MyStringId IngameHelp_Ingots_Detail1 = MyStringId.GetOrCompute("IngameHelp_Ingots_Detail1");

		/// <summary>
		/// Put iron ingot into Assembler inventory.
		/// </summary>
		public static readonly MyStringId IngameHelp_Ingots_Detail2 = MyStringId.GetOrCompute("IngameHelp_Ingots_Detail2");

		/// <summary>
		/// Use a survival kit or Assembler to produce and obtain steel plates.
		/// </summary>
		public static readonly MyStringId IngameHelp_Ingots_Detail3 = MyStringId.GetOrCompute("IngameHelp_Ingots_Detail3");

		/// <summary>
		/// Good.bot: Ingots
		/// </summary>
		public static readonly MyStringId IngameHelp_Ingots_Title = MyStringId.GetOrCompute("IngameHelp_Ingots_Title");

		/// <summary>
		/// These skills will serve you well!
		/// </summary>
		public static readonly MyStringId IngameHelp_InteractiveTip_Detail1 = MyStringId.GetOrCompute("IngameHelp_InteractiveTip_Detail1");

		/// <summary>
		/// *Tip:* Build control panels to easily access ship menus.
		/// </summary>
		public static readonly MyStringId IngameHelp_InteractiveTip_Detail2 = MyStringId.GetOrCompute("IngameHelp_InteractiveTip_Detail2");

		/// <summary>
		/// Many blocks like doors, button panels, consoles, medical rooms, inventories and cockpits support various different actions.
		/// </summary>
		public static readonly MyStringId IngameHelp_Interactive_Detail1 = MyStringId.GetOrCompute("IngameHelp_Interactive_Detail1");

		/// <summary>
		/// Press {CONTROL:USE} to activate a highlighted block.
		/// </summary>
		public static readonly MyStringId IngameHelp_Interactive_Detail2 = MyStringId.GetOrCompute("IngameHelp_Interactive_Detail2");

		/// <summary>
		/// Press {CONTROL:TERMINAL} to go to menu of highlighted block.
		/// </summary>
		public static readonly MyStringId IngameHelp_Interactive_Detail3 = MyStringId.GetOrCompute("IngameHelp_Interactive_Detail3");

		/// <summary>
		/// Press {CONTROL:INVENTORY} to open inventory of highlighted block.
		/// </summary>
		public static readonly MyStringId IngameHelp_Interactive_Detail4 = MyStringId.GetOrCompute("IngameHelp_Interactive_Detail4");

		/// <summary>
		/// Good.bot: Interactive objects
		/// </summary>
		public static readonly MyStringId IngameHelp_Interactive_Title = MyStringId.GetOrCompute("IngameHelp_Interactive_Title");

		/// <summary>
		/// Simple enough, is it not?!
		/// </summary>
		public static readonly MyStringId IngameHelp_PowerTip_Detail1 = MyStringId.GetOrCompute("IngameHelp_PowerTip_Detail1");

		/// <summary>
		/// *Tip:* Turn off blocks that you do not need to save power.
		/// </summary>
		public static readonly MyStringId IngameHelp_PowerTip_Detail2 = MyStringId.GetOrCompute("IngameHelp_PowerTip_Detail2");

		/// <summary>
		/// *Tip:* Use [Ctrl+]{CONTROL:TOGGLE_REACTORS} to also turn off all connected grids.
		/// </summary>
		public static readonly MyStringId IngameHelp_PowerTip_Detail3 = MyStringId.GetOrCompute("IngameHelp_PowerTip_Detail3");

		/// <summary>
		/// Author: {0}
		/// </summary>
		public static readonly MyStringId ScreenBlueprintsRew_Author = MyStringId.GetOrCompute("ScreenBlueprintsRew_Author");

<<<<<<< HEAD
		/// <summary>
		/// Size: {0}
		/// </summary>
		public static readonly MyStringId ScreenBlueprintsRew_Size = MyStringId.GetOrCompute("ScreenBlueprintsRew_Size");

		/// <summary>
		/// Required DLC: {0}
		/// </summary>
=======
		public static readonly MyStringId ScreenBlueprintsRew_Size = MyStringId.GetOrCompute("ScreenBlueprintsRew_Size");

>>>>>>> d46cf8619665219cc163a7b28984ced59ed9470d
		public static readonly MyStringId ScreenBlueprintsRew_Dlc = MyStringId.GetOrCompute("ScreenBlueprintsRew_Dlc");

		/// <summary>
		/// Delete
		/// </summary>
		public static readonly MyStringId ScreenBlueprintsRew_ButDelete = MyStringId.GetOrCompute("ScreenBlueprintsRew_ButDelete");

		/// <summary>
		/// Edit
		/// </summary>
		public static readonly MyStringId ScreenBlueprintsRew_ButEdit = MyStringId.GetOrCompute("ScreenBlueprintsRew_ButEdit");

		/// <summary>
		/// Info
		/// </summary>
		public static readonly MyStringId ScreenBlueprintsRew_ButInfo = MyStringId.GetOrCompute("ScreenBlueprintsRew_ButInfo");

		/// <summary>
		/// Open in Workshop
		/// </summary>
		public static readonly MyStringId ScreenBlueprintsRew_ButOpenInWorkshop = MyStringId.GetOrCompute("ScreenBlueprintsRew_ButOpenInWorkshop");

		/// <summary>
		/// Publish
		/// </summary>
		public static readonly MyStringId ScreenBlueprintsRew_ButPublish = MyStringId.GetOrCompute("ScreenBlueprintsRew_ButPublish");

		/// <summary>
		/// Rename
		/// </summary>
		public static readonly MyStringId ScreenBlueprintsRew_ButRename = MyStringId.GetOrCompute("ScreenBlueprintsRew_ButRename");

		/// <summary>
		/// Replace
		/// </summary>
		public static readonly MyStringId ScreenBlueprintsRew_ButReplace = MyStringId.GetOrCompute("ScreenBlueprintsRew_ButReplace");

		/// <summary>
		/// Take Screenshot
		/// </summary>
		public static readonly MyStringId ScreenBlueprintsRew_ButScreenshot = MyStringId.GetOrCompute("ScreenBlueprintsRew_ButScreenshot");

		/// <summary>
		/// Copy to clipboard
		/// </summary>
		public static readonly MyStringId ScreenBlueprintsRew_ButToClipboard = MyStringId.GetOrCompute("ScreenBlueprintsRew_ButToClipboard");

		/// <summary>
		/// Blueprints
		/// </summary>
		public static readonly MyStringId ScreenBlueprintsRew_Caption = MyStringId.GetOrCompute("ScreenBlueprintsRew_Caption");

		/// <summary>
		/// Delete
		/// </summary>
		public static readonly MyStringId ScreenBlueprintsRew_Delete = MyStringId.GetOrCompute("ScreenBlueprintsRew_Delete");

		/// <summary>
		/// Cannot rename blueprint because it is used by another process.
		/// </summary>
		public static readonly MyStringId ScreenBlueprintsRew_DeleteMessage = MyStringId.GetOrCompute("ScreenBlueprintsRew_DeleteMessage");

		/// <summary>
		/// Type: {0}
		/// </summary>
		public static readonly MyStringId ScreenBlueprintsRew_GridType = MyStringId.GetOrCompute("ScreenBlueprintsRew_GridType");

		/// <summary>
		/// Name: {0}
		/// </summary>
		public static readonly MyStringId ScreenBlueprintsRew_Name = MyStringId.GetOrCompute("ScreenBlueprintsRew_Name");

		/// <summary>
		/// N/A
		/// </summary>
		public static readonly MyStringId ScreenBlueprintsRew_NotAvailable = MyStringId.GetOrCompute("ScreenBlueprintsRew_NotAvailable");

		/// <summary>
		/// Number of Blocks: {0}
		/// </summary>
		public static readonly MyStringId ScreenBlueprintsRew_NumOfBlocks = MyStringId.GetOrCompute("ScreenBlueprintsRew_NumOfBlocks");

		/// <summary>
		/// PCU: {0}
		/// </summary>
		public static readonly MyStringId ScreenBlueprintsRew_PCU = MyStringId.GetOrCompute("ScreenBlueprintsRew_PCU");

		/// <summary>
		/// Replace
		/// </summary>
		public static readonly MyStringId ScreenBlueprintsRew_Replace = MyStringId.GetOrCompute("ScreenBlueprintsRew_Replace");

		/// <summary>
		/// Blueprint/script with the name "
		/// </summary>
		public static readonly MyStringId ScreenBlueprintsRew_ReplaceMessage1 = MyStringId.GetOrCompute("ScreenBlueprintsRew_ReplaceMessage1");

		/// <summary>
		/// " already exists. Do you want to replace it?
		/// </summary>
		public static readonly MyStringId ScreenBlueprintsRew_ReplaceMessage2 = MyStringId.GetOrCompute("ScreenBlueprintsRew_ReplaceMessage2");

		/// <summary>
		/// Search:
		/// </summary>
		public static readonly MyStringId ScreenBlueprintsRew_Search = MyStringId.GetOrCompute("ScreenBlueprintsRew_Search");

		/// <summary>
		/// Delete blueprint (local/cloud BP only) or scripts (local script only)
		/// </summary>
		public static readonly MyStringId ScreenBlueprintsRew_Tooltip_ButDelete = MyStringId.GetOrCompute("ScreenBlueprintsRew_Tooltip_ButDelete");

		/// <summary>
		/// Open tab for editing blueprint/script information
		/// </summary>
		public static readonly MyStringId ScreenBlueprintsRew_Tooltip_ButEdit = MyStringId.GetOrCompute("ScreenBlueprintsRew_Tooltip_ButEdit");

		/// <summary>
		/// Open directory selection
		/// </summary>
		public static readonly MyStringId ScreenBlueprintsRew_Tooltip_ButFolders = MyStringId.GetOrCompute("ScreenBlueprintsRew_Tooltip_ButFolders");

<<<<<<< HEAD
		/// <summary>
		/// Toggle between "All", "Local", "Cloud", "{0}" and "{1}" blueprints/scripts
		/// </summary>
		public static readonly MyStringId ScreenBlueprintsRew_Tooltip_ButGrouping_Aggregator = MyStringId.GetOrCompute("ScreenBlueprintsRew_Tooltip_ButGrouping_Aggregator");

		/// <summary>
		/// Toggle between "All", "Local", "Cloud" and "{0}" blueprints/scripts
		/// </summary>
		public static readonly MyStringId ScreenBlueprintsRew_Tooltip_ButGrouping = MyStringId.GetOrCompute("ScreenBlueprintsRew_Tooltip_ButGrouping");

		/// <summary>
		/// Toggle between "All", "Cloud", "{0}" and "{1}" blueprints/scripts
		/// </summary>
		public static readonly MyStringId ScreenBlueprintsRew_Tooltip_ButGrouping_NoLocal_Aggregator = MyStringId.GetOrCompute("ScreenBlueprintsRew_Tooltip_ButGrouping_NoLocal_Aggregator");

		/// <summary>
		/// Toggle between "All", "Cloud" and "{0}" blueprints/scripts
		/// </summary>
		public static readonly MyStringId ScreenBlueprintsRew_Tooltip_ButGrouping_NoLocal = MyStringId.GetOrCompute("ScreenBlueprintsRew_Tooltip_ButGrouping_NoLocal");

		/// <summary>
		/// Toggle between "All", "{0}" and "{1}"
		/// </summary>
		public static readonly MyStringId WorldSettings_Tooltip_ButGrouping = MyStringId.GetOrCompute("WorldSettings_Tooltip_ButGrouping");

		/// <summary>
		/// Open tab with blueprint/script informations
		/// </summary>
=======
		public static readonly MyStringId ScreenBlueprintsRew_Tooltip_ButGrouping_Aggregator = MyStringId.GetOrCompute("ScreenBlueprintsRew_Tooltip_ButGrouping_Aggregator");

		public static readonly MyStringId ScreenBlueprintsRew_Tooltip_ButGrouping = MyStringId.GetOrCompute("ScreenBlueprintsRew_Tooltip_ButGrouping");

		public static readonly MyStringId ScreenBlueprintsRew_Tooltip_ButGrouping_NoLocal_Aggregator = MyStringId.GetOrCompute("ScreenBlueprintsRew_Tooltip_ButGrouping_NoLocal_Aggregator");

		public static readonly MyStringId ScreenBlueprintsRew_Tooltip_ButGrouping_NoLocal = MyStringId.GetOrCompute("ScreenBlueprintsRew_Tooltip_ButGrouping_NoLocal");

		public static readonly MyStringId WorldSettings_Tooltip_ButGrouping = MyStringId.GetOrCompute("WorldSettings_Tooltip_ButGrouping");

>>>>>>> d46cf8619665219cc163a7b28984ced59ed9470d
		public static readonly MyStringId ScreenBlueprintsRew_Tooltip_ButInfo = MyStringId.GetOrCompute("ScreenBlueprintsRew_Tooltip_ButInfo");

		/// <summary>
		/// Create new blueprint from clipboard
		/// </summary>
		public static readonly MyStringId ScreenBlueprintsRew_Tooltip_ButNewBlueprint = MyStringId.GetOrCompute("ScreenBlueprintsRew_Tooltip_ButNewBlueprint");

		/// <summary>
		/// Open already published blueprint/script in Workshop
		/// </summary>
		public static readonly MyStringId ScreenBlueprintsRew_Tooltip_ButOpenInWorkshop = MyStringId.GetOrCompute("ScreenBlueprintsRew_Tooltip_ButOpenInWorkshop");

		/// <summary>
		/// Browse and subscribe workshop items
		/// </summary>
		public static readonly MyStringId ScreenBlueprintsRew_Tooltip_ButOpenWorkshop = MyStringId.GetOrCompute("ScreenBlueprintsRew_Tooltip_ButOpenWorkshop");

		/// <summary>
		/// Publish blueprint/script to Workshop
		/// </summary>
		public static readonly MyStringId ScreenBlueprintsRew_Tooltip_ButPublish = MyStringId.GetOrCompute("ScreenBlueprintsRew_Tooltip_ButPublish");

		/// <summary>
		/// Reload all blueprints/scripts and refresh the list
		/// </summary>
		public static readonly MyStringId ScreenBlueprintsRew_Tooltip_ButRefresh = MyStringId.GetOrCompute("ScreenBlueprintsRew_Tooltip_ButRefresh");

		/// <summary>
		/// Rename blueprint (local/cloud BP only) or script (local script only) 
		/// </summary>
		public static readonly MyStringId ScreenBlueprintsRew_Tooltip_ButRename = MyStringId.GetOrCompute("ScreenBlueprintsRew_Tooltip_ButRename");

		/// <summary>
		/// Replace blueprint with clipboard (local or cloud BP) or script from editor (local scripts only)
		/// </summary>
		public static readonly MyStringId ScreenBlueprintsRew_Tooltip_ButReplace = MyStringId.GetOrCompute("ScreenBlueprintsRew_Tooltip_ButReplace");

		/// <summary>
		/// Take screenshot for blueprint preview (local BP only)
		/// </summary>
		public static readonly MyStringId ScreenBlueprintsRew_Tooltip_ButScreenshot = MyStringId.GetOrCompute("ScreenBlueprintsRew_Tooltip_ButScreenshot");

		/// <summary>
		/// Toggle between sorts "None", "alphabetical", "Creation date" and "Update date"
		/// </summary>
		public static readonly MyStringId ScreenBlueprintsRew_Tooltip_ButSort = MyStringId.GetOrCompute("ScreenBlueprintsRew_Tooltip_ButSort");

		/// <summary>
		/// Copy blueprint into clipboard
		/// </summary>
		public static readonly MyStringId ScreenBlueprintsRew_Tooltip_ButToClipboard = MyStringId.GetOrCompute("ScreenBlueprintsRew_Tooltip_ButToClipboard");

		/// <summary>
		/// Show/Hide thumbnails of blueprints/scripts
		/// </summary>
		public static readonly MyStringId ScreenBlueprintsRew_Tooltip_ButVisibility = MyStringId.GetOrCompute("ScreenBlueprintsRew_Tooltip_ButVisibility");

		/// <summary>
		/// Send blueprint to other players (Workshop Blueprints only)
		/// </summary>
		public static readonly MyStringId ScreenBlueprintsRew_Tooltip_SendToPlayer = MyStringId.GetOrCompute("ScreenBlueprintsRew_Tooltip_SendToPlayer");

		/// <summary>
		/// No content matches the selected filter.
		/// </summary>
		public static readonly MyStringId ScreenBlueprintsRew_NoBlueprints = MyStringId.GetOrCompute("ScreenBlueprintsRew_NoBlueprints");

		/// <summary>
		/// There are no subscribed Workshop blueprints. Open Workshop Browser to subscribe blueprints.
		/// </summary>
		public static readonly MyStringId ScreenBlueprintsRew_NoWorkshopBlueprints = MyStringId.GetOrCompute("ScreenBlueprintsRew_NoWorkshopBlueprints");

		/// <summary>
		/// There are no subscribed Workshop scripts. Open Workshop Browser to subscribe blueprints.
		/// </summary>
		public static readonly MyStringId ScreenBlueprintsRew_NoWorkshopScripts = MyStringId.GetOrCompute("ScreenBlueprintsRew_NoWorkshopScripts");

		/// <summary>
		/// Open
		/// </summary>
		public static readonly MyStringId ScreenFolders_ButOpen = MyStringId.GetOrCompute("ScreenFolders_ButOpen");

		/// <summary>
		/// Directory selection
		/// </summary>
		public static readonly MyStringId ScreenFolders_Caption = MyStringId.GetOrCompute("ScreenFolders_Caption");

		/// <summary>
		/// Open current directory
		/// </summary>
		public static readonly MyStringId ScreenFolders_Tooltip_Open = MyStringId.GetOrCompute("ScreenFolders_Tooltip_Open");

		/// <summary>
		/// Refresh folders and directories
		/// </summary>
		public static readonly MyStringId ScreenFolders_Tooltip_Refresh = MyStringId.GetOrCompute("ScreenFolders_Tooltip_Refresh");

		/// <summary>
		/// Copy to editor
		/// </summary>
		public static readonly MyStringId ScreenBlueprintsRew_ButToEditor = MyStringId.GetOrCompute("ScreenBlueprintsRew_ButToEditor");

		/// <summary>
		/// Create new script from editor
		/// </summary>
		public static readonly MyStringId ScreenBlueprintsRew_Tooltip_ButNewScript = MyStringId.GetOrCompute("ScreenBlueprintsRew_Tooltip_ButNewScript");

		/// <summary>
		/// Copy script to editor
		/// </summary>
		public static readonly MyStringId ScreenBlueprintsRew_Tooltip_ButToEditor = MyStringId.GetOrCompute("ScreenBlueprintsRew_Tooltip_ButToEditor");

		/// <summary>
		/// Screenshot is already being taken at this moment
		/// </summary>
		public static readonly MyStringId ScreenBlueprintsRew_ScreenBeingTaken = MyStringId.GetOrCompute("ScreenBlueprintsRew_ScreenBeingTaken");

		/// <summary>
		/// Screenshoting in progress
		/// </summary>
		public static readonly MyStringId ScreenBlueprintsRew_ScreenBeingTaken_Caption = MyStringId.GetOrCompute("ScreenBlueprintsRew_ScreenBeingTaken_Caption");

		/// <summary>
		/// Good.bot
		/// </summary>
		public static readonly MyStringId ChatBotName = MyStringId.GetOrCompute("ChatBotName");

		/// <summary>
		/// I am sorry, I'm not available right now. Please visit https://support.keenswh.com/ or try again later.
		/// </summary>
		public static readonly MyStringId ChatBotUnavailable = MyStringId.GetOrCompute("ChatBotUnavailable");

		/// <summary>
		/// Hello, Engineer! I am Good.bot. What can I help you with?
		/// </summary>
		public static readonly MyStringId ChatBot_Generic = MyStringId.GetOrCompute("ChatBot_Generic");

		/// <summary>
		/// I am well, thank you!
		/// </summary>
		public static readonly MyStringId ChatBot_HowAreYou = MyStringId.GetOrCompute("ChatBot_HowAreYou");

		/// <summary>
		/// That was not very nice! In case of any issues, please contact us at https://support.keenswh.com/
		/// </summary>
		public static readonly MyStringId ChatBot_Rude = MyStringId.GetOrCompute("ChatBot_Rude");

		/// <summary>
		/// You're welcome!
		/// </summary>
		public static readonly MyStringId ChatBot_ThankYou = MyStringId.GetOrCompute("ChatBot_ThankYou");

		/// <summary>
		/// Apologies, I am unable to answer the question. I am still learning. For more help, please visit https://support.keenswh.com/
		/// </summary>
		public static readonly MyStringId ChatBotMisunderstanding0 = MyStringId.GetOrCompute("ChatBotMisunderstanding0");

		/// <summary>
		/// Electricity can be produced through reactors or solar panels and stored in batteries. It is transferred automatically through all connected blocks. Many blocks require electricity to function. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_Electricity = MyStringId.GetOrCompute("Description_FAQ_Electricity");

		/// <summary>
		/// Asteroids can be found in space. How many there are depends on the server or world settings. Most asteroids will have ores that can be mined. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_Asteroids = MyStringId.GetOrCompute("Description_FAQ_Asteroids");

		/// <summary>
		/// There is gravity on planets. Virtual Gravity can also be produced with the gravity generator block. Virtual gravity has no effect on grids unless virtual mass blocks are implemented. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_Gravity = MyStringId.GetOrCompute("Description_FAQ_Gravity");

		/// <summary>
		/// Some planets have breathable atmospheres. Oxygen can be produced from ice with a O2/H2 generator or from an oxygen farm. Oxygen can be stored in oxygen tanks and bottles.
		/// </summary>
		public static readonly MyStringId Description_FAQ_Oxygen = MyStringId.GetOrCompute("Description_FAQ_Oxygen");

		/// <summary>
		/// Damage can be inflicted by using weapons like missile launchers or gatling turrets or hand held rifles. Grids can also be damaged by impacts with other grids or voxels. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_Damage = MyStringId.GetOrCompute("Description_FAQ_Damage");

		/// <summary>
		/// Use your welder to repair damaged blocks. Blocks that have been completely destroyed need to be replaced or you can use a projector to repair faster. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_Repair = MyStringId.GetOrCompute("Description_FAQ_Repair");

		/// <summary>
		/// Use your welder on blocks to build and repair. Welding requires power drawn from your suit and components for the block. You can also install welders on ships. Use RMB to add missing components from the block you are looking at to your build planner.
		/// </summary>
		public static readonly MyStringId Description_FAQ_Welding = MyStringId.GetOrCompute("Description_FAQ_Welding");

		/// <summary>
		/// You can collect ore by using your drill on voxels like planets or asteroids. Your drill has a short-range detector that shows you the location of ores. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_Mining = MyStringId.GetOrCompute("Description_FAQ_Mining");

		/// <summary>
		/// You can heal yourself at a medical room or survival kit if you are injured. Hold {CONTROL:USE} to use the console. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_Healing = MyStringId.GetOrCompute("Description_FAQ_Healing");

		/// <summary>
		/// You can recharge your suit power in medical rooms, survival kits or by sitting in any kind of seat or cockpit as long as it is powered.
		/// </summary>
		public static readonly MyStringId Description_FAQ_Recharging = MyStringId.GetOrCompute("Description_FAQ_Recharging");

		/// <summary>
		/// You can use a grinder to grind down blocks and deconstruct them. Components are salvaged and transferred into your inventory while grinding. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_Grinding = MyStringId.GetOrCompute("Description_FAQ_Grinding");

		/// <summary>
		/// Hydrogen is a fuel used for your suit's jetpack and hydrogen thrusters. Hydrogen is produced from ice in a O2/H2 generator. You can story hydrogen in hydrogen tanks and bottles. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_Hydrogen = MyStringId.GetOrCompute("Description_FAQ_Hydrogen");

		/// <summary>
		/// Your jetpack requires hydrogen. You can produce hydrogen from ice in a O2/H2 generator. Refill bottles at the generator or connect the generator with a medical room or survival kit to recharge your hydrogen directly. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_Jetpack = MyStringId.GetOrCompute("Description_FAQ_Jetpack");

		/// <summary>
		/// Magnetic boots only work in zero gravity environments. They enable you to stick to surfaces like asteroids or ships. Press {CONTROL:THRUSTS} to disable your jetpack and enable your magnetic boots when in a standing position on a surface. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_MagneticBoots = MyStringId.GetOrCompute("Description_FAQ_MagneticBoots");

		/// <summary>
		/// Ore refers to several types of minerals that can be refined into ingots using a refinery. Ores can be found on planets and asteroids. Look for dark spots on planets to find ore. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_Ore = MyStringId.GetOrCompute("Description_FAQ_Ore");

		/// <summary>
		/// Ice is essential to produce oxygen and hydrogen and can be found on planets and inside asteroids. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_Ice = MyStringId.GetOrCompute("Description_FAQ_Ice");

		/// <summary>
		/// Voxels are physical bodies such as asteroids or planets. Use your drill to bore into voxels and alter their shape. Use voxel hands in creative mode to create your own shapes. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_Voxel = MyStringId.GetOrCompute("Description_FAQ_Voxel");

		/// <summary>
		/// Grids are collections of blocks that shape stations or ships. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_Grid = MyStringId.GetOrCompute("Description_FAQ_Grid");

		/// <summary>
		/// Hail Clang!
		/// </summary>
		public static readonly MyStringId Description_FAQ_Clang = MyStringId.GetOrCompute("Description_FAQ_Clang");

		/// <summary>
		/// Your visor can be opened and closed by pressing {CONTROL:HELMET}. Don't open your visor in space or you will suffocate!
		/// </summary>
		public static readonly MyStringId Description_FAQ_Visor = MyStringId.GetOrCompute("Description_FAQ_Visor");

		/// <summary>
		/// Room pressure is displayed in a vent menu. A room has to be sealed in order to pressurized. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_RoomPressure = MyStringId.GetOrCompute("Description_FAQ_RoomPressure");

		/// <summary>
		/// Thrusters allow your ships to move and fly. Make sure to use the right thrusters in the appropriate environments. Atmospheric thrusters will not work in space!
		/// </summary>
		public static readonly MyStringId Description_FAQ_Thrusters = MyStringId.GetOrCompute("Description_FAQ_Thrusters");

		/// <summary>
		/// Press {CONTROL:TOGGLE_REACTORS}  to turn power off and on. If you are wondering if you have enough power, check if there is fuel in your reactors or if your batteries are charged.
		/// </summary>
		public static readonly MyStringId Description_FAQ_ShipMovement = MyStringId.GetOrCompute("Description_FAQ_ShipMovement");

		/// <summary>
		/// Press {CONTROL:LANDING_GEAR} to disable the brakes and landing gears or {CONTROL:TOGGLE_REACTORS} to turn the power off and on. You can check if there is fuel in your reactors or if your batteries are charged.
		/// </summary>
		public static readonly MyStringId Description_FAQ_RoverMovement = MyStringId.GetOrCompute("Description_FAQ_RoverMovement");

		/// <summary>
		/// Planets can be seen from any distance. If you do not see planets then they are likely not part of this world. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_Planets = MyStringId.GetOrCompute("Description_FAQ_Planets");

		/// <summary>
		/// Protect yourself against pirates and other players by building armor, turrets and decoys. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_Pirates = MyStringId.GetOrCompute("Description_FAQ_Pirates");

		/// <summary>
		/// Reactors use refined uranium ingots for fuel. Your jetpack and hydrogen thrusters require hydrogen. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_Fuel = MyStringId.GetOrCompute("Description_FAQ_Fuel");

		/// <summary>
		/// PCU stands for Performance Cost Unit.  Building and removing blocks cost and refunds PCU. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_PCU = MyStringId.GetOrCompute("Description_FAQ_PCU");

		/// <summary>
		/// You can own blocks when you are the one who added the computer components. You can choose to share your blocks with your faction or anybody else. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_Ownership = MyStringId.GetOrCompute("Description_FAQ_Ownership");

		/// <summary>
		/// Factions are a way to play with other players by sharing your blocks, which can be used by other players. Anyone can set up factions. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_Factions = MyStringId.GetOrCompute("Description_FAQ_Factions");

		/// <summary>
		/// Hydrogen and oxygen bottles can be produced in assemblers and refilled in O2/H2 generators. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_Bottles = MyStringId.GetOrCompute("Description_FAQ_Bottles");

		/// <summary>
		/// Press {CONTROL:HELP_SCREEN} to find additional help or just ask me.
		/// </summary>
		public static readonly MyStringId Description_FAQ_Help = MyStringId.GetOrCompute("Description_FAQ_Help");

		/// <summary>
		/// You can save ship designs in blueprints by aiming at them and press Ctrl-B. Press F10 to open your menu of blueprints. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_SaveBlueprints = MyStringId.GetOrCompute("Description_FAQ_SaveBlueprints");

		/// <summary>
		/// If you find yourself lost, you can always press {CONTROL:SUICIDE} to respawn at your nearest respawn point. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_Lost = MyStringId.GetOrCompute("Description_FAQ_Lost");

		/// <summary>
		/// Mass indicates the weight of your ship. Filling cargo containers with ores or components can severely impact the performance of your ship. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_Mass = MyStringId.GetOrCompute("Description_FAQ_Mass");

		/// <summary>
		/// Skins can be found in survival mode by finding the drop pods and activating their buttons. Use a medical room to customize your character. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_Skins = MyStringId.GetOrCompute("Description_FAQ_Skins");

		/// <summary>
		/// Be sure to connect individual inventories using conveyors. Some items are too large to pass through small conveyor tubes. Press {CONTROL:INVENTORY} to open your personal inventory. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_ShipInventories = MyStringId.GetOrCompute("Description_FAQ_ShipInventories");

		/// <summary>
		/// The minimum requirements for a ship are a cockpit, gyroscope, one thruster in each direction and some form of power supply, such as a reactor or a battery. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_ShipBuilding = MyStringId.GetOrCompute("Description_FAQ_ShipBuilding");

		/// <summary>
		/// Scripts might be disabled in world settings. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_Script = MyStringId.GetOrCompute("Description_FAQ_Script");

		/// <summary>
		/// Make sure it has thrusters pointing in the direction it is moving and some source of power. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_GridMovement = MyStringId.GetOrCompute("Description_FAQ_GridMovement");

		/// <summary>
		/// Be sure to enable your jetpack with {CONTROL:THRUSTS} and turn on your dampeners with {CONTROL:DAMPING}. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_StopMoving = MyStringId.GetOrCompute("Description_FAQ_StopMoving");

		/// <summary>
		/// Relative dampeners match your speed and direction with a moving target. Press [Ctrl-{CONTROL:DAMPING}] while looking at your target. You need to be within 100 meters for it to work. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_RelativeDampeners = MyStringId.GetOrCompute("Description_FAQ_RelativeDampeners");

		/// <summary>
		/// Inertia dampeners will slow movements when there is no input and can be toggled with {CONTROL:DAMPING}. Relative dampeners will match your speed with that of a moving object and can be toggled with [Ctrl-{CONTROL:DAMPING}]. Both need thrusters in all directions to work effectively
		/// </summary>
		public static readonly MyStringId Description_FAQ_InertiaDampeners = MyStringId.GetOrCompute("Description_FAQ_InertiaDampeners");

		/// <summary>
		/// You can toggle your flashlight with {CONTROL:HEADLIGHTS}. Flashlights consume suit power and will not work when depleted. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_Flashlight = MyStringId.GetOrCompute("Description_FAQ_Flashlight");

		/// <summary>
		/// Look for factions that allow anyone to join or ask around if you can group up with players. Look for antenna signals that could indicate other players. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_FindOtherPlayers = MyStringId.GetOrCompute("Description_FAQ_FindOtherPlayers");

		/// <summary>
		/// Can you be more specific, please?
		/// </summary>
		public static readonly MyStringId Description_FAQ_HowToPlayGame = MyStringId.GetOrCompute("Description_FAQ_HowToPlayGame");

		/// <summary>
		/// Have you tried that other thing?
		/// </summary>
		public static readonly MyStringId Description_FAQ_Thing = MyStringId.GetOrCompute("Description_FAQ_Thing");

		/// <summary>
		/// Does your ship have enough power? Does it have enough thrusters? Are your dampeners turned on?
		/// </summary>
		public static readonly MyStringId Description_FAQ_ShipWontFly = MyStringId.GetOrCompute("Description_FAQ_ShipWontFly");

		/// <summary>
		/// Blocks are what all ships and stations are made off. There are two sizes: large and small. You can find blocks in the menu by pressing {CONTROL:BUILD_SCREEN}. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_WhatIsABlock = MyStringId.GetOrCompute("Description_FAQ_WhatIsABlock");

		/// <summary>
		/// Mirror mode only works in creative mode and allows symmetric building. Press {CONTROL:SYMMETRY_SWITCH} to cycle through all six planes of mirrors. Use LMB button to confirm placement and RMB to remove one. Press {CONTROL:USE_SYMMETRY} to temporarily disable mirror mode. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_MirrorMode = MyStringId.GetOrCompute("Description_FAQ_MirrorMode");

		/// <summary>
		/// Hide your bases underground or inside asteroids. Build turrets and decoys to defend against attacks. Build hidden medical rooms and spread them out to maintain ways to respawn when attacked from inside you base.
		/// </summary>
		public static readonly MyStringId Description_FAQ_ProtectingMyself = MyStringId.GetOrCompute("Description_FAQ_ProtectingMyself");

		/// <summary>
		/// Are you suffocating? Standing in front of a thruster or perhaps you came too close to an active ship tool?
		/// </summary>
		public static readonly MyStringId Description_FAQ_LosingHealth = MyStringId.GetOrCompute("Description_FAQ_LosingHealth");

		/// <summary>
		/// Voxel hands is a tool only available in creative mode, which allows you to add and sculpt voxel shapes. It can be enabled in world settings. press K to open voxel hand menu while equiped. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_VoxelHands = MyStringId.GetOrCompute("Description_FAQ_VoxelHands");

		/// <summary>
		/// A room needs to be airtight before it can be filled with oxygen by an air vent. Make sure there are no holes exposed to space and that all doors are closed. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_AirTightnessPressure = MyStringId.GetOrCompute("Description_FAQ_AirTightnessPressure");

		/// <summary>
		/// Components are required to construct blocks. They can be produced in assemblers from ingots. Placing a block in survival mode always requires the first component. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_Components = MyStringId.GetOrCompute("Description_FAQ_Components");

		/// <summary>
		/// A station is a grid that is static and directly attached to voxels like planets or asteroids. Some stations can fly, but only have enough thrusters for basic movement. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_Station = MyStringId.GetOrCompute("Description_FAQ_Station");

		/// <summary>
		/// A ship is a grid that is designed to move. It has thrusters in each direction, a gyroscope for orientation, a cockpit and some source of power like batteries or reactors. Ships can be designed for specific tasks like building or fighting. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_Ship = MyStringId.GetOrCompute("Description_FAQ_Ship");

		/// <summary>
		/// A rover is a vehicle that uses wheels to move instead of thrusters, which are used to fly. Rovers are usually cheap to build, but often slow and an easy target for other players. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_CarRover = MyStringId.GetOrCompute("Description_FAQ_CarRover");

		/// <summary>
		/// GPS signals can be disabled or created in the Coms tab. Double-click a GPS signal to disable it. GPS signals can be stored in LCD panels or broadcasted in chat. Be careful not to attract enemies.
		/// </summary>
		public static readonly MyStringId Description_FAQ_GPSSignals = MyStringId.GetOrCompute("Description_FAQ_GPSSignals");

		/// <summary>
		/// There are 2 grid sizes available that are simply referred to as small and large. You can switch the grid size of a block by reselecting the same block on your toolbar. Not all blocks are available in both grid sizes. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_GridSize = MyStringId.GetOrCompute("Description_FAQ_GridSize");

		/// <summary>
		/// Your suit keeps you alive when you are in space. Your health, hydrogen, oxygen and power supplies are displayed on your HUD. Your suit is equipped with magnetic boots to walk in space and a jetpack to fly. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_Suit = MyStringId.GetOrCompute("Description_FAQ_Suit");

		/// <summary>
		/// There are 3 hand tools. A welder builds and repairs. A grinder salvages and deconstructs, while a drill is used to find ore, collect ore and dig tunnels. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_HandTools = MyStringId.GetOrCompute("Description_FAQ_HandTools");

		/// <summary>
		/// Your inventory can be accessed by pressing {CONTROL:INVENTORY}. Drag items outside of your inventory screen to drop them. Pick up items by pressing {CONTROL:PICK_UP}.
		/// </summary>
		public static readonly MyStringId Description_FAQ_Inventory = MyStringId.GetOrCompute("Description_FAQ_Inventory");

		/// <summary>
		/// Tools can be added to your toolbars by pressing {CONTROL:BUILD_SCREEN}. Drag and drop or right-click tools to automatically add them to your toolbar. This works the same for ship functions when you are inside a cockpit. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_ShipToolsWeapons = MyStringId.GetOrCompute("Description_FAQ_ShipToolsWeapons");

		/// <summary>
		/// Ingots are produced in refineries from ores and are essential to produce components. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_Ingots = MyStringId.GetOrCompute("Description_FAQ_Ingots");

		/// <summary>
		/// Armor is used to design the structure of ships and stations, and acts as protection for important blocks. Light armor is cheap and enables ships to be fast. Heavy armor offers more protection for ships, but it affects these vehicles' speed. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_Armor = MyStringId.GetOrCompute("Description_FAQ_Armor");

		/// <summary>
		/// Meteors can be enabled in world settings. You can protect yourself against meteors by building gatling turrets, adding layers of armor to vehicles and buildings or by simply hiding inside structures.
		/// </summary>
		public static readonly MyStringId Description_FAQ_Meteor = MyStringId.GetOrCompute("Description_FAQ_Meteor");

		/// <summary>
		/// Signals indicate positions of pods where you can obtain loot and skins in survival mode. Weak signals are only visible for you. Stronger signals are visible for everyone on the server but may lead to better loot. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_UnknownSignals = MyStringId.GetOrCompute("Description_FAQ_UnknownSignals");

		/// <summary>
		/// Blue Signals are owned by you. White signals are owned by a friendly faction. Red signals are owned by a hostile faction. Green and yellow signals indicate loot pods. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_GPSColors = MyStringId.GetOrCompute("Description_FAQ_GPSColors");

		/// <summary>
		/// Drones are small unmanned ships that can either be remote controlled, script controlled or sometimes controlled by sensors and timer blocks. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_Drones = MyStringId.GetOrCompute("Description_FAQ_Drones");

		/// <summary>
		/// Space Engineers is a sandbox game. You can set your own goals. Search the workshop for scenarios and missions or create your own to play together with friends! Active mission objectives are displayed in the top left corner. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_Objective = MyStringId.GetOrCompute("Description_FAQ_Objective");

		/// <summary>
		/// I am Good.bot. I am here to answer your questions to the best of my ability. How can I help you?
		/// </summary>
		public static readonly MyStringId Description_FAQ_GoodBot = MyStringId.GetOrCompute("Description_FAQ_GoodBot");

		/// <summary>
		/// Math! I do that all the time!
		/// </summary>
		public static readonly MyStringId Description_FAQ_Math = MyStringId.GetOrCompute("Description_FAQ_Math");

		/// <summary>
		/// Get your production up and running. Build refineries and assemblers. Make sure you have enough power, Build solar panels, batteries and reactors. make sure your medical room is well protected and build more to be sure!
		/// </summary>
		public static readonly MyStringId Description_FAQ_Begin = MyStringId.GetOrCompute("Description_FAQ_Begin");

		/// <summary>
		/// Use {CONTROL:FORWARD} {CONTROL:STRAFE_LEFT} {CONTROL:BACKWARD} {CONTROL:STRAFE_RIGHT} to move, Hold {CONTROL:SPRINT} to sprint, Toggle {CONTROL:SWITCH_WALK} to walk. Use {CONTROL:CROUCH} to crouch and {CONTROL:JUMP} to jump. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_BasicMovement = MyStringId.GetOrCompute("Description_FAQ_BasicMovement");

		/// <summary>
		/// It is time for Space Engineers!
		/// </summary>
		public static readonly MyStringId Description_FAQ_Time = MyStringId.GetOrCompute("Description_FAQ_Time");

		/// <summary>
		/// The {0} workshop is where you can find all player made blueprints, scenarios, scripts and mods that players published. Subscribe to workshop items to access them in game.
		/// </summary>
		public static readonly MyStringId Description_FAQ_SteamWorkshop = MyStringId.GetOrCompute("Description_FAQ_SteamWorkshop");

		/// <summary>
		/// While holding a block, you can paint blocks with {CONTROL:CUBE_COLOR_CHANGE}. Press K to access more colour options. Use Ctrl-{CONTROL:CUBE_COLOR_CHANGE} or Shift-{CONTROL:CUBE_COLOR_CHANGE} to paint large surfaces. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_Painting = MyStringId.GetOrCompute("Description_FAQ_Painting");

		/// <summary>
		/// Sorry, That material does not exist in Space Engineers. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_InvalidMaterial = MyStringId.GetOrCompute("Description_FAQ_InvalidMaterial");

		/// <summary>
		/// Test received!
		/// </summary>
		public static readonly MyStringId Description_FAQ_Test = MyStringId.GetOrCompute("Description_FAQ_Test");

		/// <summary>
		/// Your suit has a limited range antenna for accessing grids remotely or controlling drones. You can turn it off and on with O. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_Broadcasting = MyStringId.GetOrCompute("Description_FAQ_Broadcasting");

		/// <summary>
		/// You can turn on the block and grid rotations assist in the game options menu to see the rotation controls. Press {CONTROL:CUBE_DEFAULT_MOUNTPOINT} to rotate a block towards its default mount-point. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_BlockRotation = MyStringId.GetOrCompute("Description_FAQ_BlockRotation");

		/// <summary>
		/// You can switch between HUD states with {CONTROL:TOGGLE_HUD}. Toggle {CONTROL:TOGGLE_SIGNALS} to switch between modes for GPS signals. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_HUD = MyStringId.GetOrCompute("Description_FAQ_HUD");

		/// <summary>
		/// You can report bugs and problems with the game at the forums or visit https://support.keenswh.com/
		/// </summary>
		public static readonly MyStringId Description_FAQ_Bug = MyStringId.GetOrCompute("Description_FAQ_Bug");

		/// <summary>
		/// You can send private messages to other players or factions through the Coms tab in your inventory. These messages can only be send if your antenna is enabled and in range of other players or antennas. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_Messages = MyStringId.GetOrCompute("Description_FAQ_Messages");

		/// <summary>
		/// To use autopilot your ship first needs a Remote Control block. You need to add custom GPS waypoints in the Remote Control Block and select a flight mode. You can also set actions to happen when the ship arrives at the next waypoint. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_AutoPilot = MyStringId.GetOrCompute("Description_FAQ_AutoPilot");

		/// <summary>
		/// Experimental mode is a setting that enables features that are considered unstable and can possibly cause performance issues. Experimental mode can be enabled in game settings.
		/// </summary>
		public static readonly MyStringId Description_FAQ_Experimental = MyStringId.GetOrCompute("Description_FAQ_Experimental");

		/// <summary>
		/// Marek Rosa is the Founder and CEO of Keen Software House and GoodAI. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_Marek = MyStringId.GetOrCompute("Description_FAQ_Marek");

		/// <summary>
		/// GoodAI was founded by CEO/CTO Marek Rosa in January 2014 and performs research on the development of artificial intelligence. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_GoodAI = MyStringId.GetOrCompute("Description_FAQ_GoodAI");

		/// <summary>
		/// To disable Good.bot hints, press Escape, go to Options, go to Game and disable "Show Good.bot hints".
		/// </summary>
		public static readonly MyStringId Description_FAQ_DisableHints = MyStringId.GetOrCompute("Description_FAQ_DisableHints");

		/// <summary>
		/// In multiplayer you need special permissions from an admin to be able to spawn blueprints, edit scripts or teleport. In single player you can turn on space master or change the world mode to creative. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_Permissions = MyStringId.GetOrCompute("Description_FAQ_Permissions");

		/// <summary>
		/// To leave a planet with an atmosphere you need a ship capable of going into space. The best way is to equip your ship with hydrogen thrusters and hydrogen tanks. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_LeavePlanet = MyStringId.GetOrCompute("Description_FAQ_LeavePlanet");

		/// <summary>
		/// You can use block functions of multiple blocks simultaneously by using block groups. Use Ctrl or Shift to select the ship blocks you wish to put into a group; enter a name in "Block group" on the right side of the screen and press Enter to create the block group. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_Groups = MyStringId.GetOrCompute("Description_FAQ_Groups");

		/// <summary>
		/// You can connect grids with each other with landing gears or connectors. You can merge two grids of the same size type together permanently by using merge blocks or even rotors. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_MergeGrids = MyStringId.GetOrCompute("Description_FAQ_MergeGrids");

		/// <summary>
		/// You can change your perspective with {CONTROL:CAMERA_MODE} from first person mode to third person mode. Note that third person camera can clip back to first person if objects are obstructing the view. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_Camera = MyStringId.GetOrCompute("Description_FAQ_Camera");

		/// <summary>
		/// You can create ammunition for your weapons and turrets in the advanced assembler if you have the right materials available. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_Ammo = MyStringId.GetOrCompute("Description_FAQ_Ammo");

		/// <summary>
		/// An airlock permits the player to move freely in and out while keeping the interior pressurized. The easiest way to achieve this is by building a set of parallel doors but can be made much more advanced with air vents, timer blocks, button panels or scripts. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_Airlock = MyStringId.GetOrCompute("Description_FAQ_Airlock");

		/// <summary>
		/// Player characters can push small grids by walking or flying into them if these grids aren't too heavy. If you want to push or pull heavy objects you will have to build a ship or rover and grab the object with landing gear. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_Pushing = MyStringId.GetOrCompute("Description_FAQ_Pushing");

		/// <summary>
		/// You can assemble better tools in the assembler. You can also upgrade the refinery and assembler by adding upgrade modules to make them faster, more efficient or less power consuming. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_Upgrade = MyStringId.GetOrCompute("Description_FAQ_Upgrade");

		/// <summary>
		/// There are two game modes: survival and creative. In creative mode you won't need any materials to build your ships. You can change this game mode by selecting your world in your saves menu and change the settings. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_GameMode = MyStringId.GetOrCompute("Description_FAQ_GameMode");

		/// <summary>
		/// You can make screenshots by pressing F12 by default. Or if you have Nvidia Ansel you can press Alt-F to enter capture mode. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_ScreenShot = MyStringId.GetOrCompute("Description_FAQ_ScreenShot");

		/// <summary>
		/// You can unlock new blocks by fully constructing other required blocks. You can see what blocks will unlock the next block by viewing them in the G screen. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_Unlock = MyStringId.GetOrCompute("Description_FAQ_Unlock");

		/// <summary>
		/// Temperature affects your suit systems and will drain your power faster in extreme conditions. Without power your suit will no longer protect you against extreme conditions and you may start taking damage. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_Temperature = MyStringId.GetOrCompute("Description_FAQ_Temperature");

		/// <summary>
		/// Your spawn ship will have everything you need to get started. A survival kit, power and a O2/H2 generator for oxygen and hydrogen. You can take nonesential parts of your ship to use for your new base and scrap it entirely once you no longer need it. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_SpawnShip = MyStringId.GetOrCompute("Description_FAQ_SpawnShip");

		/// <summary>
		/// Metal scrap appears when blocks are violently destroyed and can be melted back into iron ingots by putting them into a refinery. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_MetalScrap = MyStringId.GetOrCompute("Description_FAQ_MetalScrap");

		/// <summary>
		/// You can use a cryo room to store your character before leaving the server. This will prevent your character from dying after some time and losing your toolbar. Make sure the room is supplied with oxygen and power.
		/// </summary>
		public static readonly MyStringId Description_FAQ_LogOut = MyStringId.GetOrCompute("Description_FAQ_LogOut");

		/// <summary>
		/// Interactive objects like doors, cockpits and button panels are highlighted yellow and can be entered or interacted with by pressing  {CONTROL:USE}.
		/// </summary>
		public static readonly MyStringId Description_FAQ_Interaction = MyStringId.GetOrCompute("Description_FAQ_Interaction");

		/// <summary>
		/// You can create GPS signals to store important locations and waypoints. Use an antenna or beacon to broadcast positions of grids, but be careful, as others can also see these marked locations. Use /GPS to quickly save your current location. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_Navigation = MyStringId.GetOrCompute("Description_FAQ_Navigation");

		/// <summary>
		/// Can you be more specific?
		/// </summary>
		public static readonly MyStringId Description_FAQ_Elaborate = MyStringId.GetOrCompute("Description_FAQ_Elaborate");

		/// <summary>
		/// You can copy, paste and delete blocks and grids only in creative mode by pressing Ctrl+C, Ctrl+V and Ctrl-X. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_CopyPaste = MyStringId.GetOrCompute("Description_FAQ_CopyPaste");

		/// <summary>
		/// A welder to construct blocks, a grinder to deconstruct blocks and a drill to find ore and dig tunnels. All tools can be produced in assemblers or survival kits from basic materials. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_Tools = MyStringId.GetOrCompute("Description_FAQ_Tools");

		/// <summary>
		/// Use /help to find all chat commands. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_Commands = MyStringId.GetOrCompute("Description_FAQ_Commands");

		/// <summary>
		/// Platinum is a rare material only found in asteroids and moons. There is no platinum on planets. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_Platinum = MyStringId.GetOrCompute("Description_FAQ_Platinum");

		/// <summary>
		/// Uranium is a rare material only found in asteroids and moons. There is no uranium on planets. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_Uranium = MyStringId.GetOrCompute("Description_FAQ_Uranium");

		/// <summary>
		/// Stone can be refined into small amounts of basic minerals like Iron, Silicon and Nickel in refineries or a survival kit. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_Stone = MyStringId.GetOrCompute("Description_FAQ_Stone");

		/// <summary>
		/// You can access alternative block shapes if you have a block equipped on your toolbar with an + symbol. Use the scroll wheel to switch to different shapes. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_BlockShapes = MyStringId.GetOrCompute("Description_FAQ_BlockShapes");

		/// <summary>
		/// You can toggle different building modes by pressing B. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_BuildMode = MyStringId.GetOrCompute("Description_FAQ_BuildMode");

		/// <summary>
		/// Your car can use its suspensions to jump to get out of tight spaces. Hold and release X to charge the jump of your car. The strength of the jump is based on your suspensions strength setting. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_CarJump = MyStringId.GetOrCompute("Description_FAQ_CarJump");

		/// <summary>
		/// You can convert grids from station to ship or ship into station in a grid's info screen if this is enabled in the world settings. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_ConvertGrid = MyStringId.GetOrCompute("Description_FAQ_ConvertGrid");

		/// <summary>
		/// You can flip your rover by adding pistons and pushing itself up or you can try adding heavy blocks like batteries to your grid, so that it will fall over by changing its center of mass. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_FlipRover = MyStringId.GetOrCompute("Description_FAQ_FlipRover");

		/// <summary>
		/// Play "Learning to Survive" to learn about the basics of Space Engineers. Pay attention to the tooltips for blocks to learn about their functions and I will do my best to help you along the way!
		/// </summary>
		public static readonly MyStringId Description_FAQ_Tutorial = MyStringId.GetOrCompute("Description_FAQ_Tutorial");

		/// <summary>
		/// Random encounters are shipwrecks, derelict vessels and pirate stations that can be found in space. They often broadcast a MAYDAY signal. Careful, exploring these encounters can be dangerous.
		/// </summary>
		public static readonly MyStringId Description_FAQ_Encounter = MyStringId.GetOrCompute("Description_FAQ_Encounter");

		/// <summary>
		/// Blast door blocks are armor blocks that won't bend and fit in between layers of blocks, so they can move freely by rotors or pistons. They are useful to create large moving doors and platforms. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_Blastdoors = MyStringId.GetOrCompute("Description_FAQ_Blastdoors");

		/// <summary>
		/// Block limits sets a limit to how many of each type of block each player can build to ensure server performance. Block limits can be disabled in the world settings. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_BlockLimit = MyStringId.GetOrCompute("Description_FAQ_BlockLimit");

		/// <summary>
		/// Hacking a block can be done by using a grinder to remove the computer components from a block and placing them back with a welder to gain access to the block. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_Hacking = MyStringId.GetOrCompute("Description_FAQ_Hacking");

		/// <summary>
		/// You can use ladders to traverse vertical spaces. Ladders can be stacked vertically. Press {CONTROL:USE} to interact with a ladder. Hold {CONTROL:FORWARD} or {CONTROL:BACKWARD} to go up and down. Press {CONTROL:JUMP} to get off the ladder. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_Ladder = MyStringId.GetOrCompute("Description_FAQ_Ladder");

		/// <summary>
		/// Decorative blocks allow players to decorate the interiors of large grid ships. Blocks such as the desk and kitchen are modular and can be combined together to create many shapes.
		/// </summary>
		public static readonly MyStringId Description_FAQ_Decoratives = MyStringId.GetOrCompute("Description_FAQ_Decoratives");

		/// <summary>
		/// The industrial cockpit is a sturdy decorative cockpit for large and small grids that features a large field of vision. This cockpit is useful for rovers and ships that need to work close to surfaces or other grids without damaging them. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_IndustrialCockpit = MyStringId.GetOrCompute("Description_FAQ_IndustrialCockpit");

		/// <summary>
		/// The console block is a decorative block with the ability to project large and small grids scaled down. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_ConsoleBlock = MyStringId.GetOrCompute("Description_FAQ_ConsoleBlock");

		/// <summary>
		/// Emotes are character animations that can be equipped on your toolbar from the G-screen or played by opening chat and entering / followed by the name of the emote you wish to play. for example: /EmoteName
		/// </summary>
		public static readonly MyStringId Description_FAQ_Emotes = MyStringId.GetOrCompute("Description_FAQ_Emotes");

		/// <summary>
		/// The build planner helps you to quickly access the components required to build blocks. Use your welders RMB function to add a block to your component list. Use the withdraw button from any inventories to automatically collect the required components if available and accessible. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_BuildPlanner = MyStringId.GetOrCompute("Description_FAQ_BuildPlanner");

		/// <summary>
		/// The Style Pack ads more player skins, armor skins and emotes for you to use in game.
		/// </summary>
		public static readonly MyStringId Description_FAQ_StylePack = MyStringId.GetOrCompute("Description_FAQ_StylePack");

		/// <summary>
		/// Armor skins are different textures and patterns for your ships and stations. They can be applied the same way you paint grids. Press P to open the paint screen. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_ArmorSkins = MyStringId.GetOrCompute("Description_FAQ_ArmorSkins");

		/// <summary>
		/// There are cargo ships that travel the world around you. Coming near them can be dangerous as they consider you a threat. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_NPCShip = MyStringId.GetOrCompute("Description_FAQ_NPCShip");

		/// <summary>
		/// Cooperative mode will let assemblers automatically take a portion of the queue of another assembler, making them work together.
		/// </summary>
		public static readonly MyStringId Description_FAQ_CooperativeMode = MyStringId.GetOrCompute("Description_FAQ_CooperativeMode ");

		/// <summary>
		/// You can access Spectator mode by pressing F8 to move around your camera freely and F7 to remain in the spectator camera while controlling your character. Spectator mode requires permissions and has to enabled in worlds settings. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_SpectatorMode = MyStringId.GetOrCompute("Description_FAQ_SpectatorMode");

		/// <summary>
		/// Rent your server here.
		/// </summary>
		public static readonly MyStringId JoinScreen_GTXGamingBanner = MyStringId.GetOrCompute("JoinScreen_GTXGamingBanner");

		/// <summary>
		/// Thank you
		/// </summary>
		public static readonly MyStringId ChatBot_ThankYou_Q0 = MyStringId.GetOrCompute("ChatBot_ThankYou_Q0");

		/// <summary>
		/// Thanks
		/// </summary>
		public static readonly MyStringId ChatBot_ThankYou_Q1 = MyStringId.GetOrCompute("ChatBot_ThankYou_Q1");

		/// <summary>
		/// Thats great
		/// </summary>
		public static readonly MyStringId ChatBot_ThankYou_Q2 = MyStringId.GetOrCompute("ChatBot_ThankYou_Q2");

		/// <summary>
		/// Sounds great
		/// </summary>
		public static readonly MyStringId ChatBot_ThankYou_Q3 = MyStringId.GetOrCompute("ChatBot_ThankYou_Q3");

		/// <summary>
		/// Always appreciated
		/// </summary>
		public static readonly MyStringId ChatBot_ThankYou_Q4 = MyStringId.GetOrCompute("ChatBot_ThankYou_Q4");

		/// <summary>
		/// Thanks so much
		/// </summary>
		public static readonly MyStringId ChatBot_ThankYou_Q5 = MyStringId.GetOrCompute("ChatBot_ThankYou_Q5");

		/// <summary>
		/// Thanks a lot
		/// </summary>
		public static readonly MyStringId ChatBot_ThankYou_Q6 = MyStringId.GetOrCompute("ChatBot_ThankYou_Q6");

		/// <summary>
		/// Thanks a bunch
		/// </summary>
		public static readonly MyStringId ChatBot_ThankYou_Q7 = MyStringId.GetOrCompute("ChatBot_ThankYou_Q7");

		/// <summary>
		/// I owe you one
		/// </summary>
		public static readonly MyStringId ChatBot_ThankYou_Q8 = MyStringId.GetOrCompute("ChatBot_ThankYou_Q8");

		/// <summary>
		/// I can’t thank you enough
		/// </summary>
		public static readonly MyStringId ChatBot_ThankYou_Q9 = MyStringId.GetOrCompute("ChatBot_ThankYou_Q9");

		/// <summary>
		/// Hi
		/// </summary>
		public static readonly MyStringId ChatBot_Generic_Q0 = MyStringId.GetOrCompute("ChatBot_Generic_Q0");

		/// <summary>
		/// Hello
		/// </summary>
		public static readonly MyStringId ChatBot_Generic_Q1 = MyStringId.GetOrCompute("ChatBot_Generic_Q1");

		/// <summary>
		/// Hallo
		/// </summary>
		public static readonly MyStringId ChatBot_Generic_Q2 = MyStringId.GetOrCompute("ChatBot_Generic_Q2");

		/// <summary>
		/// Ciao
		/// </summary>
		public static readonly MyStringId ChatBot_Generic_Q3 = MyStringId.GetOrCompute("ChatBot_Generic_Q3");

		/// <summary>
		/// Ahoy
		/// </summary>
		public static readonly MyStringId ChatBot_Generic_Q4 = MyStringId.GetOrCompute("ChatBot_Generic_Q4");

		/// <summary>
		/// Greetings
		/// </summary>
		public static readonly MyStringId ChatBot_Generic_Q5 = MyStringId.GetOrCompute("ChatBot_Generic_Q5");

		/// <summary>
		/// Aloha
		/// </summary>
		public static readonly MyStringId ChatBot_Generic_Q6 = MyStringId.GetOrCompute("ChatBot_Generic_Q6");

		/// <summary>
		/// Howdy
		/// </summary>
		public static readonly MyStringId ChatBot_Generic_Q7 = MyStringId.GetOrCompute("ChatBot_Generic_Q7");

		/// <summary>
		/// Namaste
		/// </summary>
		public static readonly MyStringId ChatBot_Generic_Q8 = MyStringId.GetOrCompute("ChatBot_Generic_Q8");

		/// <summary>
		/// Look at you
		/// </summary>
		public static readonly MyStringId ChatBot_Generic_Q9 = MyStringId.GetOrCompute("ChatBot_Generic_Q9");

		/// <summary>
		/// What is this
		/// </summary>
		public static readonly MyStringId ChatBot_Generic_Q10 = MyStringId.GetOrCompute("ChatBot_Generic_Q10");

		/// <summary>
		/// How does this work
		/// </summary>
		public static readonly MyStringId ChatBot_Generic_Q11 = MyStringId.GetOrCompute("ChatBot_Generic_Q11");

		/// <summary>
		/// Hey
		/// </summary>
		public static readonly MyStringId ChatBot_Generic_Q12 = MyStringId.GetOrCompute("ChatBot_Generic_Q12");

		/// <summary>
		/// How are you
		/// </summary>
		public static readonly MyStringId ChatBot_HowAreYou_Q0 = MyStringId.GetOrCompute("ChatBot_HowAreYou_Q0");

		/// <summary>
		/// How have you been
		/// </summary>
		public static readonly MyStringId ChatBot_HowAreYou_Q1 = MyStringId.GetOrCompute("ChatBot_HowAreYou_Q1");

		/// <summary>
		/// Hows everything
		/// </summary>
		public static readonly MyStringId ChatBot_HowAreYou_Q2 = MyStringId.GetOrCompute("ChatBot_HowAreYou_Q2");

		/// <summary>
		/// Hows it going
		/// </summary>
		public static readonly MyStringId ChatBot_HowAreYou_Q3 = MyStringId.GetOrCompute("ChatBot_HowAreYou_Q3");

		/// <summary>
		/// How are things going
		/// </summary>
		public static readonly MyStringId ChatBot_HowAreYou_Q4 = MyStringId.GetOrCompute("ChatBot_HowAreYou_Q4");

		/// <summary>
		/// Whats going on
		/// </summary>
		public static readonly MyStringId ChatBot_HowAreYou_Q5 = MyStringId.GetOrCompute("ChatBot_HowAreYou_Q5");

		/// <summary>
		/// Whats new
		/// </summary>
		public static readonly MyStringId ChatBot_HowAreYou_Q6 = MyStringId.GetOrCompute("ChatBot_HowAreYou_Q6");

		/// <summary>
		/// Whats up
		/// </summary>
		public static readonly MyStringId ChatBot_HowAreYou_Q7 = MyStringId.GetOrCompute("ChatBot_HowAreYou_Q7");

		/// <summary>
		/// Whassup
		/// </summary>
		public static readonly MyStringId ChatBot_HowAreYou_Q8 = MyStringId.GetOrCompute("ChatBot_HowAreYou_Q8");

		/// <summary>
		/// What are you up to
		/// </summary>
		public static readonly MyStringId ChatBot_HowAreYou_Q9 = MyStringId.GetOrCompute("ChatBot_HowAreYou_Q9");

		/// <summary>
		/// Fuck
		/// </summary>
		public static readonly MyStringId ChatBot_Rude_Q0 = MyStringId.GetOrCompute("ChatBot_Rude_Q0");

		/// <summary>
		/// Fucking
		/// </summary>
		public static readonly MyStringId ChatBot_Rude_Q1 = MyStringId.GetOrCompute("ChatBot_Rude_Q1");

		/// <summary>
		/// dumb
		/// </summary>
		public static readonly MyStringId ChatBot_Rude_Q2 = MyStringId.GetOrCompute("ChatBot_Rude_Q2");

		/// <summary>
		/// Shit
		/// </summary>
		public static readonly MyStringId ChatBot_Rude_Q3 = MyStringId.GetOrCompute("ChatBot_Rude_Q3");

		/// <summary>
		/// Shitty
		/// </summary>
		public static readonly MyStringId ChatBot_Rude_Q4 = MyStringId.GetOrCompute("ChatBot_Rude_Q4");

		/// <summary>
		/// stupid
		/// </summary>
		public static readonly MyStringId ChatBot_Rude_Q5 = MyStringId.GetOrCompute("ChatBot_Rude_Q5");

		/// <summary>
		/// bitch
		/// </summary>
		public static readonly MyStringId ChatBot_Rude_Q6 = MyStringId.GetOrCompute("ChatBot_Rude_Q6");

		/// <summary>
		/// What is my purpose
		/// </summary>
		public static readonly MyStringId Description_FAQ_Objective_Q0 = MyStringId.GetOrCompute("Description_FAQ_Objective_Q0");

		/// <summary>
		/// Should I do something
		/// </summary>
		public static readonly MyStringId Description_FAQ_Objective_Q1 = MyStringId.GetOrCompute("Description_FAQ_Objective_Q1");

		/// <summary>
		/// What can I do
		/// </summary>
		public static readonly MyStringId Description_FAQ_Objective_Q2 = MyStringId.GetOrCompute("Description_FAQ_Objective_Q2");

		/// <summary>
		/// what Do I do
		/// </summary>
		public static readonly MyStringId Description_FAQ_Objective_Q3 = MyStringId.GetOrCompute("Description_FAQ_Objective_Q3");

		/// <summary>
		/// What do I have to do
		/// </summary>
		public static readonly MyStringId Description_FAQ_Objective_Q4 = MyStringId.GetOrCompute("Description_FAQ_Objective_Q4");

		/// <summary>
		/// what to do
		/// </summary>
		public static readonly MyStringId Description_FAQ_Objective_Q5 = MyStringId.GetOrCompute("Description_FAQ_Objective_Q5");

		/// <summary>
		/// Who are you
		/// </summary>
		public static readonly MyStringId Description_FAQ_GoodBot_Q0 = MyStringId.GetOrCompute("Description_FAQ_GoodBot_Q0");

		/// <summary>
		/// What is your purpose
		/// </summary>
		public static readonly MyStringId Description_FAQ_GoodBot_Q1 = MyStringId.GetOrCompute("Description_FAQ_GoodBot_Q1");

		/// <summary>
		/// What are you
		/// </summary>
		public static readonly MyStringId Description_FAQ_GoodBot_Q2 = MyStringId.GetOrCompute("Description_FAQ_GoodBot_Q2");

		/// <summary>
		/// What can you do
		/// </summary>
		public static readonly MyStringId Description_FAQ_GoodBot_Q3 = MyStringId.GetOrCompute("Description_FAQ_GoodBot_Q3");

		/// <summary>
		/// Help
		/// </summary>
		public static readonly MyStringId Description_FAQ_GoodBot_Q4 = MyStringId.GetOrCompute("Description_FAQ_GoodBot_Q4");

		/// <summary>
		/// What should I do
		/// </summary>
		public static readonly MyStringId Description_FAQ_Begin_Q0 = MyStringId.GetOrCompute("Description_FAQ_Begin_Q0");

		/// <summary>
		/// How do I report a bug
		/// </summary>
		public static readonly MyStringId Description_FAQ_Bug_Q0 = MyStringId.GetOrCompute("Description_FAQ_Bug_Q0");

		/// <summary>
		/// Bug
		/// </summary>
		public static readonly MyStringId Description_FAQ_Bug_Q1 = MyStringId.GetOrCompute("Description_FAQ_Bug_Q1");

		/// <summary>
		/// I found a bug
		/// </summary>
		public static readonly MyStringId Description_FAQ_Bug_Q2 = MyStringId.GetOrCompute("Description_FAQ_Bug_Q2");

		/// <summary>
		/// Is the game is bugged
		/// </summary>
		public static readonly MyStringId Description_FAQ_Bug_Q3 = MyStringId.GetOrCompute("Description_FAQ_Bug_Q3");

		/// <summary>
		/// The game is broken
		/// </summary>
		public static readonly MyStringId Description_FAQ_Bug_Q4 = MyStringId.GetOrCompute("Description_FAQ_Bug_Q4");

		/// <summary>
		/// Where can I report a bug
		/// </summary>
		public static readonly MyStringId Description_FAQ_Bug_Q5 = MyStringId.GetOrCompute("Description_FAQ_Bug_Q5");

		/// <summary>
		/// Glitch
		/// </summary>
		public static readonly MyStringId Description_FAQ_Bug_Q6 = MyStringId.GetOrCompute("Description_FAQ_Bug_Q6");

		/// <summary>
		/// This does not work
		/// </summary>
		public static readonly MyStringId Description_FAQ_Bug_Q7 = MyStringId.GetOrCompute("Description_FAQ_Bug_Q7");

		/// <summary>
		/// Out of memory
		/// </summary>
		public static readonly MyStringId Description_FAQ_Bug_Q8 = MyStringId.GetOrCompute("Description_FAQ_Bug_Q8");

		/// <summary>
		/// Test
		/// </summary>
		public static readonly MyStringId Description_FAQ_Test_Q0 = MyStringId.GetOrCompute("Description_FAQ_Test_Q0");

		/// <summary>
		/// Testing
		/// </summary>
		public static readonly MyStringId Description_FAQ_Test_Q1 = MyStringId.GetOrCompute("Description_FAQ_Test_Q1");

		/// <summary>
		/// Is this working
		/// </summary>
		public static readonly MyStringId Description_FAQ_Test_Q2 = MyStringId.GetOrCompute("Description_FAQ_Test_Q2");

		/// <summary>
		/// Does this work
		/// </summary>
		public static readonly MyStringId Description_FAQ_Test_Q3 = MyStringId.GetOrCompute("Description_FAQ_Test_Q3");

		/// <summary>
		/// Clang
		/// </summary>
		public static readonly MyStringId Description_FAQ_Clang_Q0 = MyStringId.GetOrCompute("Description_FAQ_Clang_Q0");

		/// <summary>
		/// Xocliw
		/// </summary>
		public static readonly MyStringId Description_FAQ_Clang_Q1 = MyStringId.GetOrCompute("Description_FAQ_Clang_Q1");

		/// <summary>
		/// Advanced Rotor Part
		/// </summary>
		public static readonly MyStringId ChatBot_Substitute0_S = MyStringId.GetOrCompute("ChatBot_Substitute0_S");

		/// <summary>
		/// strawberry dumpling
		/// </summary>
		public static readonly MyStringId ChatBot_Substitute0_D = MyStringId.GetOrCompute("ChatBot_Substitute0_D");

		/// <summary>
		/// Advanced Rotor Parts
		/// </summary>
		public static readonly MyStringId ChatBot_Substitute1_S = MyStringId.GetOrCompute("ChatBot_Substitute1_S");

		/// <summary>
		/// strawberry dumplings
		/// </summary>
		public static readonly MyStringId ChatBot_Substitute1_D = MyStringId.GetOrCompute("ChatBot_Substitute1_D");

		/// <summary>
		/// Advanced Rotors Part
		/// </summary>
		public static readonly MyStringId ChatBot_Substitute2_S = MyStringId.GetOrCompute("ChatBot_Substitute2_S");

		/// <summary>
		/// strawberry dumpling
		/// </summary>
		public static readonly MyStringId ChatBot_Substitute2_D = MyStringId.GetOrCompute("ChatBot_Substitute2_D");

		/// <summary>
		/// Advanced Rotors Parts
		/// </summary>
		public static readonly MyStringId ChatBot_Substitute3_S = MyStringId.GetOrCompute("ChatBot_Substitute3_S");

		/// <summary>
		/// strawberry dumplings
		/// </summary>
		public static readonly MyStringId ChatBot_Substitute3_D = MyStringId.GetOrCompute("ChatBot_Substitute3_D");

		/// <summary>
		/// Are you sure you have not done this before?
		/// </summary>
		public static readonly MyStringId IngameHelp_BuildingTip2_Detail1 = MyStringId.GetOrCompute("IngameHelp_BuildingTip2_Detail1");

		/// <summary>
		/// *Tip:* Always make sure you keep a few components with you.
		/// </summary>
		public static readonly MyStringId IngameHelp_BuildingTip2_Detail2 = MyStringId.GetOrCompute("IngameHelp_BuildingTip2_Detail2");

		/// <summary>
		/// One Engineer told me that flying a ship is as easy as riding a bike!
		/// </summary>
		public static readonly MyStringId IngameHelp_FlyingAShipLGTip_Detail1 = MyStringId.GetOrCompute("IngameHelp_FlyingAShipLGTip_Detail1");

		/// <summary>
		/// *Tip:* Landing gears can be used to pick up other grids and move them around.
		/// </summary>
		public static readonly MyStringId IngameHelp_FlyingAShipLGTip_Detail2 = MyStringId.GetOrCompute("IngameHelp_FlyingAShipLGTip_Detail2");

		/// <summary>
		/// This ship is equipped with magnetic landing gears. Toggling landing gears will temporarily disable their magnetic lock.
		/// </summary>
		public static readonly MyStringId IngameHelp_FlyingAShipLG_Detail1 = MyStringId.GetOrCompute("IngameHelp_FlyingAShipLG_Detail1");

		/// <summary>
		/// Use {CONTROL:LANDING_GEAR} to toggle the landing gear.
		/// </summary>
		public static readonly MyStringId IngameHelp_FlyingAShipLG_Detail2 = MyStringId.GetOrCompute("IngameHelp_FlyingAShipLG_Detail2");

		/// <summary>
		/// You can adjust wheel settings individually to control steering angles, acceleration, maximum speed and much more. They can “jump” by charging their suspension to get out of gaps.
		/// </summary>
		public static readonly MyStringId IngameHelp_WheeledVehicles2_Detail1 = MyStringId.GetOrCompute("IngameHelp_WheeledVehicles2_Detail1");

		/// <summary>
		/// Hold and release {CONTROL:THRUSTS} to charge a jump.
		/// </summary>
		public static readonly MyStringId IngameHelp_WheeledVehicles2_Detail2 = MyStringId.GetOrCompute("IngameHelp_WheeledVehicles2_Detail2");

		/// <summary>
		/// Congratulations! You just passed your driving test!
		/// </summary>
		public static readonly MyStringId IngameHelp_WheeledVehiclesTip_Detail1 = MyStringId.GetOrCompute("IngameHelp_WheeledVehiclesTip_Detail1");

		/// <summary>
		/// *Tip:* Be careful not to go too fast with Wheeled Vehicles, which can flip over easily.
		/// </summary>
		public static readonly MyStringId IngameHelp_WheeledVehiclesTip_Detail2 = MyStringId.GetOrCompute("IngameHelp_WheeledVehiclesTip_Detail2");

		/// <summary>
		/// Wheeled Vehicles are cheap to build and require little power.
		/// </summary>
		public static readonly MyStringId IngameHelp_WheeledVehicles_Detail1 = MyStringId.GetOrCompute("IngameHelp_WheeledVehicles_Detail1");

		/// <summary>
		/// Toggle {CONTROL:TOGGLE_REACTORS} to turn power off and on.
		/// </summary>
		public static readonly MyStringId IngameHelp_WheeledVehicles_Detail2 = MyStringId.GetOrCompute("IngameHelp_WheeledVehicles_Detail2");

		/// <summary>
		/// Toggle {CONTROL:LANDING_GEAR} for parking.
		/// </summary>
		public static readonly MyStringId IngameHelp_WheeledVehicles_Detail3 = MyStringId.GetOrCompute("IngameHelp_WheeledVehicles_Detail3");

		/// <summary>
		/// Use {CONTROL:FORWARD}, {CONTROL:BACKWARD}, {CONTROL:STRAFE_LEFT}, {CONTROL:STRAFE_RIGHT} keys to move.
		/// </summary>
		public static readonly MyStringId IngameHelp_WheeledVehicles_Detail4 = MyStringId.GetOrCompute("IngameHelp_WheeledVehicles_Detail4");

		/// <summary>
		/// Hold {CONTROL:JUMP} to brake.
		/// </summary>
		public static readonly MyStringId IngameHelp_WheeledVehicles_Detail5 = MyStringId.GetOrCompute("IngameHelp_WheeledVehicles_Detail5");

		/// <summary>
		/// Good.bot: Driving a Vehicle
		/// </summary>
		public static readonly MyStringId IngameHelp_WheeledVehicles_Title = MyStringId.GetOrCompute("IngameHelp_WheeledVehicles_Title");

		/// <summary>
		/// To hack or not to hack? That is the real question!
		/// </summary>
		public static readonly MyStringId IngameHelp_OwnershipTip_Detail1 = MyStringId.GetOrCompute("IngameHelp_OwnershipTip_Detail1");

		/// <summary>
		/// *Tip:* You can configure ownership to share it with friends. Remember, you can find additional information anytime in the help screen by pressing {CONTROL:HELP_SCREEN}.
		/// </summary>
		public static readonly MyStringId IngameHelp_OwnershipTip_Detail2 = MyStringId.GetOrCompute("IngameHelp_OwnershipTip_Detail2");

		/// <summary>
		/// Being able to breathe makes working a little easier.
		/// </summary>
		public static readonly MyStringId IngameHelp_HelmetVisorTip_Detail1 = MyStringId.GetOrCompute("IngameHelp_HelmetVisorTip_Detail1");

		/// <summary>
		/// *Tip:* Always make sure your visor is closed before going into space.  All of this useful information can always be accessed in the help screen by pressing {CONTROL:HELP_SCREEN}.
		/// </summary>
		public static readonly MyStringId IngameHelp_HelmetVisorTip_Detail2 = MyStringId.GetOrCompute("IngameHelp_HelmetVisorTip_Detail2");

		/// <summary>
		/// Your helmet visor is still open! Close it to avoid taking damage in low oxygen environments.
		/// </summary>
		public static readonly MyStringId IngameHelp_HelmetVisor_Detail1 = MyStringId.GetOrCompute("IngameHelp_HelmetVisor_Detail1");

		/// <summary>
		/// Use {CONTROL:HELMET} to open and close your visor.
		/// </summary>
		public static readonly MyStringId IngameHelp_HelmetVisor_Detail2 = MyStringId.GetOrCompute("IngameHelp_HelmetVisor_Detail2");

		/// <summary>
		/// Good.bot: Helmet Visor
		/// </summary>
		public static readonly MyStringId IngameHelp_HelmetVisor_Title = MyStringId.GetOrCompute("IngameHelp_HelmetVisor_Title");

		/// <summary>
		/// Blueprints
		/// </summary>
		public static readonly MyStringId ScreenBlueprintsRew_Caption_Blueprint = MyStringId.GetOrCompute("ScreenBlueprintsRew_Caption_Blueprint");

		/// <summary>
		/// Scripts
		/// </summary>
		public static readonly MyStringId ScreenBlueprintsRew_Caption_Script = MyStringId.GetOrCompute("ScreenBlueprintsRew_Caption_Script");

		/// <summary>
		/// Send to:
		/// </summary>
		public static readonly MyStringId BlueprintInfo_SendTo = MyStringId.GetOrCompute("BlueprintInfo_SendTo");

		/// <summary>
		/// Enable relative dampening 
		/// </summary>
		public static readonly MyStringId ControlName_RelativeDampening = MyStringId.GetOrCompute("ControlName_RelativeDampening");

		/// <summary>
		/// Excellent! Now you can continue your training.
		/// </summary>
		public static readonly MyStringId IngameHelp_StuckTip_Detail1 = MyStringId.GetOrCompute("IngameHelp_StuckTip_Detail1");

		/// <summary>
		/// *Tip:* Always make sure your vehicle has enough fuel before leaving your base.
		/// </summary>
		public static readonly MyStringId IngameHelp_StuckTip_Detail2 = MyStringId.GetOrCompute("IngameHelp_StuckTip_Detail2");

		/// <summary>
		/// You appear to be stuck.
		/// </summary>
		public static readonly MyStringId IngameHelp_Stuck_Detail1 = MyStringId.GetOrCompute("IngameHelp_Stuck_Detail1");

		/// <summary>
		/// Press {0} to toggle power on and off.
		/// </summary>
		public static readonly MyStringId IngameHelp_Stuck_Detail2 = MyStringId.GetOrCompute("IngameHelp_Stuck_Detail2");

		/// <summary>
		/// Press {0} to toggle landing gears, brakes and connectors.
		/// </summary>
		public static readonly MyStringId IngameHelp_Stuck_Detail3 = MyStringId.GetOrCompute("IngameHelp_Stuck_Detail3");

		/// <summary>
		/// Good.bot: Stuck?
		/// </summary>
		public static readonly MyStringId IngameHelp_Stuck_Title = MyStringId.GetOrCompute("IngameHelp_Stuck_Title");

		/// <summary>
		/// *Tip:* You can enable/disable Good.bot ingame help or control hints in Game-Options.
		/// </summary>
		public static readonly MyStringId IngameHelp_IntroTip2_Detail1 = MyStringId.GetOrCompute("IngameHelp_IntroTip2_Detail1");

		/// <summary>
		/// Jump was aborted, connected grid is already jumping.
		/// </summary>
		public static readonly MyStringId NotificationJumpAbortedAlreadyJumping = MyStringId.GetOrCompute("NotificationJumpAbortedAlreadyJumping");

		/// <summary>
		/// Jump was aborted, the grid is locked.
		/// </summary>
		public static readonly MyStringId NotificationJumpAbortedLocked = MyStringId.GetOrCompute("NotificationJumpAbortedLocked");

		/// <summary>
		/// Jump was aborted, no suitable target location found.
		/// </summary>
		public static readonly MyStringId NotificationJumpAbortedNoLocation = MyStringId.GetOrCompute("NotificationJumpAbortedNoLocation");

		/// <summary>
		/// Jump was aborted, distance too short.
		/// </summary>
		public static readonly MyStringId NotificationJumpAbortedShortDistance = MyStringId.GetOrCompute("NotificationJumpAbortedShortDistance");

		/// <summary>
		/// Jump was aborted, the grid is static.
		/// </summary>
		public static readonly MyStringId NotificationJumpAbortedStatic = MyStringId.GetOrCompute("NotificationJumpAbortedStatic");

		/// <summary>
		/// Spawn Name
		/// </summary>
		public static readonly MyStringId MedicalRoom_SpawnNameLabel = MyStringId.GetOrCompute("MedicalRoom_SpawnNameLabel");

		/// <summary>
		/// The name to display on the spawn screen. Leave empty to display the block name.
		/// </summary>
		public static readonly MyStringId MedicalRoom_SpawnNameToolTip = MyStringId.GetOrCompute("MedicalRoom_SpawnNameToolTip");

		/// <summary>
		/// Spawn Name
		/// </summary>
		public static readonly MyStringId SurvivalKit_SpawnNameLabel = MyStringId.GetOrCompute("SurvivalKit_SpawnNameLabel");

		/// <summary>
		/// The name to display on the spawn screen. Leave empty to display the block name.
		/// </summary>
		public static readonly MyStringId SurvivalKit_SpawnNameToolTip = MyStringId.GetOrCompute("SurvivalKit_SpawnNameToolTip");

		/// <summary>
		/// HUD Text
		/// </summary>
		public static readonly MyStringId Antenna_HudTextLabel = MyStringId.GetOrCompute("Antenna_HudTextLabel");

		/// <summary>
		/// The text to display on the HUD when the antenna is enabled. Leave empty to display the block name.
		/// </summary>
		public static readonly MyStringId Antenna_HudTextToolTip = MyStringId.GetOrCompute("Antenna_HudTextToolTip");

		/// <summary>
		/// HUD Text
		/// </summary>
		public static readonly MyStringId BlockPropertiesTitle_HudText = MyStringId.GetOrCompute("BlockPropertiesTitle_HudText");

		/// <summary>
		/// The text to display on the HUD when the beacon is enabled. Leave empty to display the block name.
		/// </summary>
		public static readonly MyStringId BlockPropertiesTitle_HudText_Tooltip = MyStringId.GetOrCompute("BlockPropertiesTitle_HudText_Tooltip");

		/// <summary>
		/// Hydrogen Engine
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Hydrogen_Engine = MyStringId.GetOrCompute("DisplayName_Block_Hydrogen_Engine");

		/// <summary>
		/// Wind Turbine
		/// </summary>
		public static readonly MyStringId DisplayName_Block_WindTurbine = MyStringId.GetOrCompute("DisplayName_Block_WindTurbine");

		/// <summary>
		/// Survival Kit
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SurvivalKit = MyStringId.GetOrCompute("DisplayName_Block_SurvivalKit");

		/// <summary>
		/// Small Battery
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SmallBattery = MyStringId.GetOrCompute("DisplayName_Block_SmallBattery");

		/// <summary>
		/// Enables advancement through the progression tree.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettings_EnableResearch = MyStringId.GetOrCompute("ToolTipWorldSettings_EnableResearch");

		/// <summary>
		/// Enable progression
		/// </summary>
		public static readonly MyStringId WorldSettings_EnableResearch = MyStringId.GetOrCompute("WorldSettings_EnableResearch");

		/// <summary>
		/// Set entity position
		/// </summary>
		public static readonly MyStringId SetEntityPositionDialog = MyStringId.GetOrCompute("SetEntityPositionDialog");

		/// <summary>
		/// Back to faction selection
		/// </summary>
		public static readonly MyStringId ScreenMedicals_BackToFactionSelection = MyStringId.GetOrCompute("ScreenMedicals_BackToFactionSelection");

		/// <summary>
		/// Does not accept players
		/// </summary>
		public static readonly MyStringId ScreenMedicals_DoesNotAcceptPlayers = MyStringId.GetOrCompute("ScreenMedicals_DoesNotAcceptPlayers");

		/// <summary>
		/// No faction leader is online
		/// </summary>
		public static readonly MyStringId ScreenMedicals_LeaderNotOnline = MyStringId.GetOrCompute("ScreenMedicals_LeaderNotOnline");

		/// <summary>
		/// No faction
		/// </summary>
		public static readonly MyStringId ScreenMedicals_NoFaction = MyStringId.GetOrCompute("ScreenMedicals_NoFaction");

		/// <summary>
		/// Waiting for faction acceptance
		/// </summary>
		public static readonly MyStringId ScreenMedicals_WaitingForAcceptance = MyStringId.GetOrCompute("ScreenMedicals_WaitingForAcceptance");

		/// <summary>
		/// Requires acceptance from a leader.
		/// </summary>
		public static readonly MyStringId ScreenMedicals_RequiresAcceptance = MyStringId.GetOrCompute("ScreenMedicals_RequiresAcceptance");

		/// <summary>
		/// Unknown technology. You have to research it first.
		/// </summary>
		public static readonly MyStringId NotificationBlockNotResearched = MyStringId.GetOrCompute("NotificationBlockNotResearched");

		/// <summary>
		/// Ladder
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Ladder = MyStringId.GetOrCompute("DisplayName_Block_Ladder");

		/// <summary>
		/// Never Surrender
		/// </summary>
		public static readonly MyStringId CustomWorld_NeverSurrender = MyStringId.GetOrCompute("CustomWorld_NeverSurrender");

		/// <summary>
		/// Learning to Survive
		/// </summary>
		public static readonly MyStringId CustomWorld_LearningToSurvive = MyStringId.GetOrCompute("CustomWorld_LearningToSurvive");

		/// <summary>
		/// You start in small drop pod containing the most important accessories. The pod is equipped with an O2/H2 generator to produce hydrogen and oxygen and a survival kit for health and energy.
		/// </summary>
		public static readonly MyStringId IngameHelp_Pod1_Detail1 = MyStringId.GetOrCompute("IngameHelp_Pod1_Detail1");

		/// <summary>
		/// The survival kit, if powered, will let you respawn, regenerate your health and energy and is capable of producing small amounts of ingots from stone that you can then produce into components.
		/// </summary>
		public static readonly MyStringId IngameHelp_Pod2_Detail1 = MyStringId.GetOrCompute("IngameHelp_Pod2_Detail1");

		/// <summary>
		/// The first thing to do is to gather stone using your hand drill. Equip your drill, find some stone and store it in the survival kit on the back of your pod. Then access the production tab of your pod and produce ingots.
		/// </summary>
		public static readonly MyStringId IngameHelp_Pod3_Detail1 = MyStringId.GetOrCompute("IngameHelp_Pod3_Detail1");

		/// <summary>
		/// Good.bot: Drop pod
		/// </summary>
		public static readonly MyStringId IngameHelp_Pod_Title = MyStringId.GetOrCompute("IngameHelp_Pod_Title");

		/// <summary>
		/// Keep original ownership on paste
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_KeepOriginalOwnershipOnPaste = MyStringId.GetOrCompute("ScreenDebugAdminMenu_KeepOriginalOwnershipOnPaste");

		/// <summary>
		/// When grid is pasted keep original ownership and authorship.
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_KeepOriginalOwnershipOnPasteTip = MyStringId.GetOrCompute("ScreenDebugAdminMenu_KeepOriginalOwnershipOnPasteTip");

		/// <summary>
		/// Share progress
		/// </summary>
		public static readonly MyStringId ShareProgress = MyStringId.GetOrCompute("ShareProgress");

		/// <summary>
		/// Share your block unlock progress with selected member.
		/// </summary>
		public static readonly MyStringId TerminalTab_Factions_ShareProgressToolTip = MyStringId.GetOrCompute("TerminalTab_Factions_ShareProgressToolTip");

		/// <summary>
		/// Your base will require more power as you add more functional blocks. Be sure to build more wind turbines or solar panels or turn blocks off to prevent them from consuming power.
		/// </summary>
		public static readonly MyStringId IngameHelp_Turbine2_Detail1 = MyStringId.GetOrCompute("IngameHelp_Turbine2_Detail1");

		/// <summary>
		/// A solar panel or wind turbine under the right conditions will be able to provide enough energy for you to get started. Continue by adding a basic assembler or deconstruct your old survival kit and move it over to your new base.
		/// </summary>
		public static readonly MyStringId IngameHelp_Turbine_Detail1 = MyStringId.GetOrCompute("IngameHelp_Turbine_Detail1");

		/// <summary>
		/// Good.bot: Power
		/// </summary>
		public static readonly MyStringId IngameHelp_Turbine_Title = MyStringId.GetOrCompute("IngameHelp_Turbine_Title");

		/// <summary>
		/// A basic assembler or basic refinery is more efficient at producing and refining then the survival kit but also requires more power.   Build a battery to use your power more efficiently.
		/// </summary>
		public static readonly MyStringId IngameHelp_BasicRefinery_Detail1 = MyStringId.GetOrCompute("IngameHelp_BasicRefinery_Detail1");

		/// <summary>
		/// Good.bot: Efficiency
		/// </summary>
		public static readonly MyStringId IngameHelp_BasicRefinery_Title = MyStringId.GetOrCompute("IngameHelp_BasicRefinery_Title");

		/// <summary>
		/// You can find ores by looking for dark or bright spots on the ground. Equip your drill to scan for nearby ores or build scouting vehicles with ore detectors to move large amounts of ore to your base.
		/// </summary>
		public static readonly MyStringId IngameHelp_Battery2_Detail1 = MyStringId.GetOrCompute("IngameHelp_Battery2_Detail1");

		/// <summary>
		/// Your base is shaping up!  Now that you have a battery you can start expanding your base even more. Try to find ores to increase your production significantly.
		/// </summary>
		public static readonly MyStringId IngameHelp_Battery_Detail1 = MyStringId.GetOrCompute("IngameHelp_Battery_Detail1");

		/// <summary>
		/// Good.bot: Progression
		/// </summary>
		public static readonly MyStringId IngameHelp_Battery_Title = MyStringId.GetOrCompute("IngameHelp_Battery_Title");

		/// <summary>
		/// Temperature affects how quickly your suit energy drains. Hot or cold temperatures will hurt you when your suit is out of power.    Tip: Pressurized environments will always maintain optimal temperatures.
		/// </summary>
		public static readonly MyStringId IngameHelp_Temperature_Detail1 = MyStringId.GetOrCompute("IngameHelp_Temperature_Detail1");

		/// <summary>
		/// Good.bot: Temperature
		/// </summary>
		public static readonly MyStringId IngameHelp_Temperature_Title = MyStringId.GetOrCompute("IngameHelp_Temperature_Title");

		/// <summary>
		/// You will spawn near other players in space.
		/// </summary>
		public static readonly MyStringId RespawnScreeenHelpTextSpaceSpawn = MyStringId.GetOrCompute("RespawnScreeenHelpTextSpaceSpawn");

		/// <summary>
		/// You will spawn near other players on the planet or the moon.
		/// </summary>
		public static readonly MyStringId RespawnScreeenHelpTextSpawn = MyStringId.GetOrCompute("RespawnScreeenHelpTextSpawn");

		/// <summary>
		/// Blocks inventory size
		/// </summary>
		public static readonly MyStringId WorldSettings_BlocksInventorySize = MyStringId.GetOrCompute("WorldSettings_BlocksInventorySize");

		/// <summary>
		/// Characters inventory size
		/// </summary>
		public static readonly MyStringId WorldSettings_CharactersInventorySize = MyStringId.GetOrCompute("WorldSettings_CharactersInventorySize");

		/// <summary>
		/// Adjusts the inventory size of blocks like cargo containers, production blocks, and similar.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettings_BlocksInventorySize = MyStringId.GetOrCompute("ToolTipWorldSettings_BlocksInventorySize");

		/// <summary>
		/// Designers
		/// </summary>
		public static readonly MyStringId Department_Designers = MyStringId.GetOrCompute("Department_Designers");

		/// <summary>
		/// Lead Artist
		/// </summary>
		public static readonly MyStringId Department_LeadArtist = MyStringId.GetOrCompute("Department_LeadArtist");

		/// <summary>
		/// Lead Designer
		/// </summary>
		public static readonly MyStringId Department_LeadDesigner = MyStringId.GetOrCompute("Department_LeadDesigner");

		/// <summary>
		/// Technical Director
		/// </summary>
		public static readonly MyStringId Department_TechnicalDirector = MyStringId.GetOrCompute("Department_TechnicalDirector");

		/// <summary>
		/// Team Operations
		/// </summary>
		public static readonly MyStringId Department_TeamOperations = MyStringId.GetOrCompute("Department_TeamOperations");

		/// <summary>
		/// Video
		/// </summary>
		public static readonly MyStringId Department_Video = MyStringId.GetOrCompute("Department_Video");

		/// <summary>
		/// Show Enemies
		/// </summary>
		public static readonly MyStringId Faction_Filter_Enemy = MyStringId.GetOrCompute("Faction_Filter_Enemy");

		/// <summary>
		/// Show Friends
		/// </summary>
		public static readonly MyStringId Faction_Filter_Friend = MyStringId.GetOrCompute("Faction_Filter_Friend");

		/// <summary>
		/// Show Neutrals
		/// </summary>
		public static readonly MyStringId Faction_Filter_Neutral = MyStringId.GetOrCompute("Faction_Filter_Neutral");

		/// <summary>
		/// Show Me
		/// </summary>
		public static readonly MyStringId Faction_Filter_Player = MyStringId.GetOrCompute("Faction_Filter_Player");

		/// <summary>
		/// All
		/// </summary>
		public static readonly MyStringId Faction_Filter_None = MyStringId.GetOrCompute("Faction_Filter_None");

		/// <summary>
		/// Non Player
		/// </summary>
		public static readonly MyStringId Faction_Filter_NPC = MyStringId.GetOrCompute("Faction_Filter_NPC");

		/// <summary>
		/// Block that enables automatized trading.
		/// </summary>
		public static readonly MyStringId Description_StoreBlock = MyStringId.GetOrCompute("Description_StoreBlock");

		/// <summary>
		/// Store
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Store = MyStringId.GetOrCompute("DisplayName_Block_Store");

		/// <summary>
		/// Time (in seconds) after which connector automatically unlocks. 
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_Connector_AutoUnlockTime = MyStringId.GetOrCompute("BlockPropertyDescription_Connector_AutoUnlockTime");

		/// <summary>
		/// Autounlock Time
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_Connector_AutoUnlockTime = MyStringId.GetOrCompute("BlockPropertyTitle_Connector_AutoUnlockTime");

		/// <summary>
		/// Trading Mode
		/// </summary>
		public static readonly MyStringId Terminal_Trading = MyStringId.GetOrCompute("Terminal_Trading");

		/// <summary>
		/// Trading Mode allows trading through store block. It also prevents the visibility of blocks of other grid, transfer of electricity and items. Cannot be changed while connector is connected.
		/// </summary>
		public static readonly MyStringId Terminal_Trading_Tooltip = MyStringId.GetOrCompute("Terminal_Trading_Tooltip");

		/// <summary>
		/// Connected 
		/// </summary>
		public static readonly MyStringId BlockPropertiesText_ConnectorDetail_Part1 = MyStringId.GetOrCompute("BlockPropertiesText_ConnectorDetail_Part1");

		/// <summary>
		///  ago  Disconnect after: 
		/// </summary>
		public static readonly MyStringId BlockPropertiesText_ConnectorDetail_Part2 = MyStringId.GetOrCompute("BlockPropertiesText_ConnectorDetail_Part2");

		/// <summary>
		/// Never
		/// </summary>
		public static readonly MyStringId BlockPropertiesText_ConnectorDetail_Part3 = MyStringId.GetOrCompute("BlockPropertiesText_ConnectorDetail_Part3");

		/// <summary>
		/// Enable safe zone
		/// </summary>
		public static readonly MyStringId Beacon_SafeZone_Desc = MyStringId.GetOrCompute("Beacon_SafeZone_Desc");

		/// <summary>
		/// Safe Zone: 
		/// </summary>
		public static readonly MyStringId Beacon_SafeZone_Info_Desc = MyStringId.GetOrCompute("Beacon_SafeZone_Info_Desc");

		/// <summary>
		/// Disabled
		/// </summary>
		public static readonly MyStringId Beacon_SafeZone_Info_Disabled = MyStringId.GetOrCompute("Beacon_SafeZone_Info_Disabled");

		/// <summary>
		/// Enabled
		/// </summary>
		public static readonly MyStringId Beacon_SafeZone_Info_Enabled = MyStringId.GetOrCompute("Beacon_SafeZone_Info_Enabled");

		/// <summary>
		/// Initializing...
		/// </summary>
		public static readonly MyStringId Beacon_SafeZone_Info_Initializing = MyStringId.GetOrCompute("Beacon_SafeZone_Info_Initializing");

		/// <summary>
		/// Off
		/// </summary>
		public static readonly MyStringId Beacon_SafeZone_Off = MyStringId.GetOrCompute("Beacon_SafeZone_Off");

		/// <summary>
		/// On
		/// </summary>
		public static readonly MyStringId Beacon_SafeZone_On = MyStringId.GetOrCompute("Beacon_SafeZone_On");

		/// <summary>
		/// Toggle to turn on safe zone (Grid has to be converted to station for this to work).  Activation time is {0} second{3}. Cost is {1} Zone Chip{4} per {2} minute{5}.
		/// </summary>
		public static readonly MyStringId Beacon_SafeZone_ToolTip = MyStringId.GetOrCompute("Beacon_SafeZone_ToolTip");

		/// <summary>
		/// Set Range of safe zone
		/// </summary>
		public static readonly MyStringId Beacon_SafeZone_RangeSlider = MyStringId.GetOrCompute("Beacon_SafeZone_RangeSlider");

		/// <summary>
		/// Change to set new safe zone range
		/// </summary>
		public static readonly MyStringId Beacon_SafeZone_RangeSlider_TTIP = MyStringId.GetOrCompute("Beacon_SafeZone_RangeSlider_TTIP");

		/// <summary>
		/// Inactive
		/// </summary>
		public static readonly MyStringId Beacon_SafeZone_Info_Inactive = MyStringId.GetOrCompute("Beacon_SafeZone_Info_Inactive");

		/// <summary>
		/// Datapad
		/// </summary>
		public static readonly MyStringId DisplayName_Item_Datapad = MyStringId.GetOrCompute("DisplayName_Item_Datapad");

		/// <summary>
		/// Zone Chip
		/// </summary>
		public static readonly MyStringId DisplayName_Item_ZoneChip = MyStringId.GetOrCompute("DisplayName_Item_ZoneChip");

		/// <summary>
		/// Datapad Editor
		/// </summary>
		public static readonly MyStringId DatapadEditEcreen_Caption = MyStringId.GetOrCompute("DatapadEditEcreen_Caption");

		/// <summary>
		/// Datapad Name: 
		/// </summary>
		public static readonly MyStringId DatapadEditScreen_Name = MyStringId.GetOrCompute("DatapadEditScreen_Name");

		/// <summary>
		/// Allow/Disallow Building in Safe Zone
		/// </summary>
		public static readonly MyStringId Beacon_SafeZone_AllowBuild_TTIP = MyStringId.GetOrCompute("Beacon_SafeZone_AllowBuild_TTIP");

		/// <summary>
		/// Allow/Disallow Damage in Safe Zone
		/// </summary>
		public static readonly MyStringId Beacon_SafeZone_AllowDmg_TTIP = MyStringId.GetOrCompute("Beacon_SafeZone_AllowDmg_TTIP");

		/// <summary>
		/// Allow/Disallow Drilling in Safe Zone
		/// </summary>
		public static readonly MyStringId Beacon_SafeZone_AllowDrill_TTIP = MyStringId.GetOrCompute("Beacon_SafeZone_AllowDrill_TTIP");

		/// <summary>
		/// Allow/Disallow Grinding in Safe Zone
		/// </summary>
		public static readonly MyStringId Beacon_SafeZone_AllowGrind_TTIP = MyStringId.GetOrCompute("Beacon_SafeZone_AllowGrind_TTIP");

		/// <summary>
		/// Allow/Disallow Shooting in Safe Zone
		/// </summary>
		public static readonly MyStringId Beacon_SafeZone_AllowShoot_TTIP = MyStringId.GetOrCompute("Beacon_SafeZone_AllowShoot_TTIP");

		/// <summary>
		/// Allow/Disallow Voxel modifications in Safe Zone
		/// </summary>
		public static readonly MyStringId Beacon_SafeZone_AllowVoxel_TTIP = MyStringId.GetOrCompute("Beacon_SafeZone_AllowVoxel_TTIP");

		/// <summary>
		/// Allow/Disallow Welding in Safe Zone
		/// </summary>
		public static readonly MyStringId Beacon_SafeZone_AllowWeld_TTIP = MyStringId.GetOrCompute("Beacon_SafeZone_AllowWeld_TTIP");

		/// <summary>
		/// Setup Safe Zone access
		/// </summary>
		public static readonly MyStringId Beacon_SafeZone_FilterBtn_TTIP = MyStringId.GetOrCompute("Beacon_SafeZone_FilterBtn_TTIP");

		/// <summary>
		/// Content:
		/// </summary>
		public static readonly MyStringId DatapadEditScreen_Content = MyStringId.GetOrCompute("DatapadEditScreen_Content");

		/// <summary>
		/// Bytes used: {0}/{1}
		/// </summary>
		public static readonly MyStringId DatapadEditScreen_ContentUsage = MyStringId.GetOrCompute("DatapadEditScreen_ContentUsage");

		/// <summary>
		/// Select to allow converting large grids to stations inside the safe zone.
		/// </summary>
		public static readonly MyStringId Beacon_SafeZone_AllowConvertToStation_TTIP = MyStringId.GetOrCompute("Beacon_SafeZone_AllowConvertToStation_TTIP");

		/// <summary>
		/// Select to allow landing gear locking inside the safe zone
		/// </summary>
		public static readonly MyStringId Beacon_SafeZone_AllowLandingGear_TTIP = MyStringId.GetOrCompute("Beacon_SafeZone_AllowLandingGear_TTIP");

		/// <summary>
		/// Allow Landing Gear Lock
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_SafeZones_AllowLandingGear = MyStringId.GetOrCompute("ScreenDebugAdminMenu_SafeZones_AllowLandingGear");

		/// <summary>
		/// Change shape of safe zone
		/// </summary>
		public static readonly MyStringId Beacon_SafeZone_Shape_TTIP = MyStringId.GetOrCompute("Beacon_SafeZone_Shape_TTIP");

		/// <summary>
		/// Trade
		/// </summary>
		public static readonly MyStringId ScreenCaptionPlayerTrade = MyStringId.GetOrCompute("ScreenCaptionPlayerTrade");

		/// <summary>
		/// Accept
		/// </summary>
		public static readonly MyStringId TradeScreenAccept = MyStringId.GetOrCompute("TradeScreenAccept");

		/// <summary>
		/// Submit Offer
		/// </summary>
		public static readonly MyStringId TradeScreenSubmitOffer = MyStringId.GetOrCompute("TradeScreenSubmitOffer");

		/// <summary>
		/// Player's Offer
		/// </summary>
		public static readonly MyStringId TradeScreenOtherOffer = MyStringId.GetOrCompute("TradeScreenOtherOffer");

		/// <summary>
		/// Your Inventory
		/// </summary>
		public static readonly MyStringId TradeScreenYoursInventory = MyStringId.GetOrCompute("TradeScreenYoursInventory");

		/// <summary>
		/// Your Offer
		/// </summary>
		public static readonly MyStringId TradeScreenYoursOffer = MyStringId.GetOrCompute("TradeScreenYoursOffer");

		/// <summary>
		/// Account Balance:
		/// </summary>
		public static readonly MyStringId Currency_Default_Account_Label = MyStringId.GetOrCompute("Currency_Default_Account_Label");

		/// <summary>
		/// Deposit
		/// </summary>
		public static readonly MyStringId FactionTerminal_Deposit_Currency = MyStringId.GetOrCompute("FactionTerminal_Deposit_Currency");

		/// <summary>
		/// Deposit to faction account from personal account
		/// </summary>
		public static readonly MyStringId FactionTerminal_Deposit_Currency_TTIP = MyStringId.GetOrCompute("FactionTerminal_Deposit_Currency_TTIP");

		/// <summary>
		/// Withdraw
		/// </summary>
		public static readonly MyStringId FactionTerminal_Withdraw_Currency = MyStringId.GetOrCompute("FactionTerminal_Withdraw_Currency");

		/// <summary>
		/// Withdraw from faction account to personal account
		/// </summary>
		public static readonly MyStringId FactionTerminal_Withdraw_Currency_TTIP = MyStringId.GetOrCompute("FactionTerminal_Withdraw_Currency_TTIP");

		/// <summary>
		/// {0} L
		/// </summary>
		public static readonly MyStringId ScreenTerminalInventory_VolumeValue = MyStringId.GetOrCompute("ScreenTerminalInventory_VolumeValue");

		/// <summary>
		/// Amount:
		/// </summary>
		public static readonly MyStringId Transaction_Form_Amount = MyStringId.GetOrCompute("Transaction_Form_Amount");

		/// <summary>
		/// Faction Balance:
		/// </summary>
		public static readonly MyStringId Transaction_Form_FactionBalance = MyStringId.GetOrCompute("Transaction_Form_FactionBalance");

		/// <summary>
		/// Final Balance:
		/// </summary>
		public static readonly MyStringId Transaction_Form_FinalBalance = MyStringId.GetOrCompute("Transaction_Form_FinalBalance");

		/// <summary>
		/// Ok
		/// </summary>
		public static readonly MyStringId Transaction_Form_Ok_Btn = MyStringId.GetOrCompute("Transaction_Form_Ok_Btn");

		/// <summary>
		/// Press to confirm transaction
		/// </summary>
		public static readonly MyStringId Transaction_Form_Ok_Btn_TTIP = MyStringId.GetOrCompute("Transaction_Form_Ok_Btn_TTIP");

		/// <summary>
		/// Personal Balance:
		/// </summary>
		public static readonly MyStringId Transaction_Form_PersonalBalance = MyStringId.GetOrCompute("Transaction_Form_PersonalBalance");

		/// <summary>
		/// Next Upkeep in: 
		/// </summary>
		public static readonly MyStringId Beacon_SafeZone_Info_NextUnkeepIn = MyStringId.GetOrCompute("Beacon_SafeZone_Info_NextUnkeepIn");

		/// <summary>
		/// Zone Chips:
		/// </summary>
		public static readonly MyStringId Beacon_SafeZone_Info_ZoneChips = MyStringId.GetOrCompute("Beacon_SafeZone_Info_ZoneChips");

		/// <summary>
		/// Scale
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_Scale = MyStringId.GetOrCompute("BlockPropertyTitle_Scale");

		/// <summary>
		/// Bathroom
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Bathroom = MyStringId.GetOrCompute("DisplayName_Block_Bathroom");

		/// <summary>
		/// Toilet
		/// </summary>
		public static readonly MyStringId DisplayName_Block_BathroomOpen = MyStringId.GetOrCompute("DisplayName_Block_BathroomOpen");

		/// <summary>
		/// Bed
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Bed = MyStringId.GetOrCompute("DisplayName_Block_Bed");

		/// <summary>
		/// Industrial Cockpit
		/// </summary>
		public static readonly MyStringId DisplayName_Block_CockpitIndustrial = MyStringId.GetOrCompute("DisplayName_Block_CockpitIndustrial");

		/// <summary>
		/// Console Block
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Console = MyStringId.GetOrCompute("DisplayName_Block_Console");

		/// <summary>
		/// Couch
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Couch = MyStringId.GetOrCompute("DisplayName_Block_Couch");

		/// <summary>
		/// Corner Couch
		/// </summary>
		public static readonly MyStringId DisplayName_Block_CouchCorner = MyStringId.GetOrCompute("DisplayName_Block_CouchCorner");

		/// <summary>
		/// Desk
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Desk = MyStringId.GetOrCompute("DisplayName_Block_Desk");

		/// <summary>
		/// Desk Corner
		/// </summary>
		public static readonly MyStringId DisplayName_Block_DeskCorner = MyStringId.GetOrCompute("DisplayName_Block_DeskCorner");

		/// <summary>
		/// Chairless Desk
		/// </summary>
		public static readonly MyStringId DisplayName_Block_DeskChairless = MyStringId.GetOrCompute("DisplayName_Block_DeskChairless");

		/// <summary>
		/// Chairless Desk Corner
		/// </summary>
		public static readonly MyStringId DisplayName_Block_DeskChairlessCorner = MyStringId.GetOrCompute("DisplayName_Block_DeskChairlessCorner");

		/// <summary>
		/// Kitchen
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Kitchen = MyStringId.GetOrCompute("DisplayName_Block_Kitchen");

		/// <summary>
		/// Armory
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LockerRoom = MyStringId.GetOrCompute("DisplayName_Block_LockerRoom");

		/// <summary>
		/// Lockers
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Lockers = MyStringId.GetOrCompute("DisplayName_Block_Lockers");

		/// <summary>
		/// Planters
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Planters = MyStringId.GetOrCompute("DisplayName_Block_Planters");

		/// <summary>
		/// Toilet Seat
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Toilet = MyStringId.GetOrCompute("DisplayName_Block_Toilet");

		/// <summary>
		/// Armory Lockers
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LockerRoomCorner = MyStringId.GetOrCompute("DisplayName_Block_LockerRoomCorner");

		/// <summary>
		/// Replay Tool
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_ReplayTool = MyStringId.GetOrCompute("ScreenDebugAdminMenu_ReplayTool");

		/// <summary>
		/// Reload World
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_ReplayTool_ReloadWorld = MyStringId.GetOrCompute("ScreenDebugAdminMenu_ReplayTool_ReloadWorld");

		/// <summary>
		/// Reloads the world.
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_ReplayTool_ReloadWorld_Tooltip = MyStringId.GetOrCompute("ScreenDebugAdminMenu_ReplayTool_ReloadWorld_Tooltip");

		/// <summary>
		/// You cannot reload the world if you are not the host.
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_ReplayTool_ReloadWorldClient_Tooltip = MyStringId.GetOrCompute("ScreenDebugAdminMenu_ReplayTool_ReloadWorldClient_Tooltip");

		/// <summary>
		/// Manage Characters
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_ReplayTool_ManageCharacters = MyStringId.GetOrCompute("ScreenDebugAdminMenu_ReplayTool_ManageCharacters");

		/// <summary>
		/// Add Character
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_ReplayTool_AddCharacter = MyStringId.GetOrCompute("ScreenDebugAdminMenu_ReplayTool_AddCharacter");

		/// <summary>
		/// Adds a new controllable character to the world.
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_ReplayTool_AddCharacter_Tooltip = MyStringId.GetOrCompute("ScreenDebugAdminMenu_ReplayTool_AddCharacter_Tooltip");

		/// <summary>
		/// Remove Character
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_ReplayTool_RemoveCharacter = MyStringId.GetOrCompute("ScreenDebugAdminMenu_ReplayTool_RemoveCharacter");

		/// <summary>
		/// Removes the currently active character from the world.
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_ReplayTool_RemoveCharacter_Tooltip = MyStringId.GetOrCompute("ScreenDebugAdminMenu_ReplayTool_RemoveCharacter_Tooltip");

		/// <summary>
		/// Manage Recordings
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_ReplayTool_ManageRecordings = MyStringId.GetOrCompute("ScreenDebugAdminMenu_ReplayTool_ManageRecordings");

		/// <summary>
		/// Delete Recordings
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_ReplayTool_DeleteRecordings = MyStringId.GetOrCompute("ScreenDebugAdminMenu_ReplayTool_DeleteRecordings");

		/// <summary>
		/// Deletes all current recordings.
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_ReplayTool_DeleteRecordings_Tooltip = MyStringId.GetOrCompute("ScreenDebugAdminMenu_ReplayTool_DeleteRecordings_Tooltip");

		/// <summary>
		/// Please confirm you wish to delete the stored recordings.
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_ReplayTool_DeleteRecordings_Confirm = MyStringId.GetOrCompute("ScreenDebugAdminMenu_ReplayTool_DeleteRecordings_Confirm");

		/// <summary>
		/// Replay
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_ReplayTool_Replay = MyStringId.GetOrCompute("ScreenDebugAdminMenu_ReplayTool_Replay");

		/// <summary>
		/// Starts playing back all stored data.
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_ReplayTool_Replay_Tooltip = MyStringId.GetOrCompute("ScreenDebugAdminMenu_ReplayTool_Replay_Tooltip");

		/// <summary>
		/// Record + Replay
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_ReplayTool_RecordAndReplay = MyStringId.GetOrCompute("ScreenDebugAdminMenu_ReplayTool_RecordAndReplay");

		/// <summary>
		/// Starts replay of stored data, as well as begins recording data for the current selected character.
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_ReplayTool_RecordAndReplay_Tooltip = MyStringId.GetOrCompute("ScreenDebugAdminMenu_ReplayTool_RecordAndReplay_Tooltip");

<<<<<<< HEAD
		/// <summary>
		/// Stop Recording
		/// </summary>
=======
>>>>>>> d46cf8619665219cc163a7b28984ced59ed9470d
		public static readonly MyStringId ScreenDebugAdminMenu_ReplayTool_StopRecording = MyStringId.GetOrCompute("ScreenDebugAdminMenu_ReplayTool_StopRecording");

		/// <summary>
		/// Stops recording for the currently selected character.
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_ReplayTool_StopRecording_Tooltip = MyStringId.GetOrCompute("ScreenDebugAdminMenu_ReplayTool_StopRecording_Tooltip");

		/// <summary>
		/// Stop Replay
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_ReplayTool_StopReplay = MyStringId.GetOrCompute("ScreenDebugAdminMenu_ReplayTool_StopReplay");

		/// <summary>
		/// Stops playback of recorded data.
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_ReplayTool_StopReplay_Tooltip = MyStringId.GetOrCompute("ScreenDebugAdminMenu_ReplayTool_StopReplay_Tooltip");

<<<<<<< HEAD
		/// <summary>
		/// How to use the Replay Tool:
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_ReplayTool_Tutorial_0 = MyStringId.GetOrCompute("ScreenDebugAdminMenu_ReplayTool_Tutorial_0");

		/// <summary>
		/// 1. Add as many characters as you need, then position them how you want them and save the world. 
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_ReplayTool_Tutorial_1 = MyStringId.GetOrCompute("ScreenDebugAdminMenu_ReplayTool_Tutorial_1");

		/// <summary>
		/// 2. Switch to the character you wish to control using F6.
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_ReplayTool_Tutorial_2 = MyStringId.GetOrCompute("ScreenDebugAdminMenu_ReplayTool_Tutorial_2");

		/// <summary>
		/// 3. Click 'Record + Replay', and move the character as you wish.
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_ReplayTool_Tutorial_3 = MyStringId.GetOrCompute("ScreenDebugAdminMenu_ReplayTool_Tutorial_3");

		/// <summary>
		/// 4. Press escape to stop recording.
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_ReplayTool_Tutorial_4 = MyStringId.GetOrCompute("ScreenDebugAdminMenu_ReplayTool_Tutorial_4");

		/// <summary>
		/// 5. Reload the world, do not save!.
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_ReplayTool_Tutorial_5 = MyStringId.GetOrCompute("ScreenDebugAdminMenu_ReplayTool_Tutorial_5");

		/// <summary>
		/// 6. Repeat from step 2.
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_ReplayTool_Tutorial_6 = MyStringId.GetOrCompute("ScreenDebugAdminMenu_ReplayTool_Tutorial_6");

		/// <summary>
		/// If you wish to clear the recorded data, press Delete Recordings to start over.
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_ReplayTool_Tutorial_7 = MyStringId.GetOrCompute("ScreenDebugAdminMenu_ReplayTool_Tutorial_7");

		/// <summary>
		/// If you wish to observe the recorded data, press 'Replay' and watch as the game replays the data.
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_ReplayTool_Tutorial_8 = MyStringId.GetOrCompute("ScreenDebugAdminMenu_ReplayTool_Tutorial_8");

		/// <summary>
		/// If you wish to store the recorded data, reload the world, then save the game. Then, it will carry over to other sessions.
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_ReplayTool_Tutorial_9 = MyStringId.GetOrCompute("ScreenDebugAdminMenu_ReplayTool_Tutorial_9");

		/// <summary>
		/// How to use the Replay Tool: 1. Add as many characters as you need, then position them how you want them and save the world.  2. Switch to the character you wish to control using F6. 3. Click 'Record + Replay', and move the character as you wish. 4. Press escape to stop recording. 5. Reload the world, do not save!. 6. Repeat from step 2. If you wish to clear the recorded data, press Delete Recordings to start over. If you wish to observe the recorded data, press 'Replay' and watch as the game replays the data. If you wish to store the recorded data, reload the world, then save the game. Then, it will carry over to other sessions.     
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_ReplayTool_Tutorial = MyStringId.GetOrCompute("ScreenDebugAdminMenu_ReplayTool_Tutorial");

		/// <summary>
		/// Pre-order Pack
		/// </summary>
		public static readonly MyStringId DisplayName_DLC_PreorderPack = MyStringId.GetOrCompute("DisplayName_DLC_PreorderPack");

		/// <summary>
		/// Deluxe Edition
		/// </summary>
=======
		public static readonly MyStringId ScreenDebugAdminMenu_ReplayTool_Tutorial_0 = MyStringId.GetOrCompute("ScreenDebugAdminMenu_ReplayTool_Tutorial_0");

		public static readonly MyStringId ScreenDebugAdminMenu_ReplayTool_Tutorial_1 = MyStringId.GetOrCompute("ScreenDebugAdminMenu_ReplayTool_Tutorial_1");

		public static readonly MyStringId ScreenDebugAdminMenu_ReplayTool_Tutorial_2 = MyStringId.GetOrCompute("ScreenDebugAdminMenu_ReplayTool_Tutorial_2");

		public static readonly MyStringId ScreenDebugAdminMenu_ReplayTool_Tutorial_3 = MyStringId.GetOrCompute("ScreenDebugAdminMenu_ReplayTool_Tutorial_3");

		public static readonly MyStringId ScreenDebugAdminMenu_ReplayTool_Tutorial_4 = MyStringId.GetOrCompute("ScreenDebugAdminMenu_ReplayTool_Tutorial_4");

		public static readonly MyStringId ScreenDebugAdminMenu_ReplayTool_Tutorial_5 = MyStringId.GetOrCompute("ScreenDebugAdminMenu_ReplayTool_Tutorial_5");

		public static readonly MyStringId ScreenDebugAdminMenu_ReplayTool_Tutorial_6 = MyStringId.GetOrCompute("ScreenDebugAdminMenu_ReplayTool_Tutorial_6");

		public static readonly MyStringId ScreenDebugAdminMenu_ReplayTool_Tutorial_7 = MyStringId.GetOrCompute("ScreenDebugAdminMenu_ReplayTool_Tutorial_7");

		public static readonly MyStringId ScreenDebugAdminMenu_ReplayTool_Tutorial_8 = MyStringId.GetOrCompute("ScreenDebugAdminMenu_ReplayTool_Tutorial_8");

		public static readonly MyStringId ScreenDebugAdminMenu_ReplayTool_Tutorial_9 = MyStringId.GetOrCompute("ScreenDebugAdminMenu_ReplayTool_Tutorial_9");

		public static readonly MyStringId ScreenDebugAdminMenu_ReplayTool_Tutorial = MyStringId.GetOrCompute("ScreenDebugAdminMenu_ReplayTool_Tutorial");

		public static readonly MyStringId DisplayName_DLC_PreorderPack = MyStringId.GetOrCompute("DisplayName_DLC_PreorderPack");

>>>>>>> d46cf8619665219cc163a7b28984ced59ed9470d
		public static readonly MyStringId DisplayName_DLC_DeluxeEdition = MyStringId.GetOrCompute("DisplayName_DLC_DeluxeEdition");

		/// <summary>
		/// Decorative Blocks
		/// </summary>
		public static readonly MyStringId DisplayName_DLC_DecorativeBlocks = MyStringId.GetOrCompute("DisplayName_DLC_DecorativeBlocks");

		/// <summary>
		/// Decorative Blocks 2
		/// </summary>
		public static readonly MyStringId DisplayName_DLC_DecorativeBlocks2 = MyStringId.GetOrCompute("DisplayName_DLC_DecorativeBlocks2");

		/// <summary>
		/// Style Pack
		/// </summary>
		public static readonly MyStringId DisplayName_DLC_StylePack = MyStringId.GetOrCompute("DisplayName_DLC_StylePack");

<<<<<<< HEAD
		/// <summary>
		/// Frostbite
		/// </summary>
		public static readonly MyStringId DisplayName_DLC_Frostbite = MyStringId.GetOrCompute("DisplayName_DLC_Frostbite");

		/// <summary>
		/// Sparks Of The Future
		/// </summary>
		public static readonly MyStringId DisplayName_DLC_SparksOfTheFuture = MyStringId.GetOrCompute("DisplayName_DLC_SparksOfTheFuture");

		/// <summary>
		/// Wasteland
		/// </summary>
		public static readonly MyStringId DisplayName_DLC_ScrapRace = MyStringId.GetOrCompute("DisplayName_DLC_ScrapRace");

		/// <summary>
		/// You are a member of a salvage crew, which has been tasked by a mysterious client to acquire something extremely valuable (yet unknown) on Triton. Play solo or with up to four players; explore this moon’s frigid landscape and remarkable architecture, and overcome numerous engineering challenges as you uncover this world’s secrets.
		/// </summary>
		public static readonly MyStringId SimpleNewGame_Frostbite_Description = MyStringId.GetOrCompute("SimpleNewGame_Frostbite_Description");

		/// <summary>
		/// Tools, Weapons, Ammo, and personal items
		/// </summary>
=======
		public static readonly MyStringId DisplayName_DLC_Frostbite = MyStringId.GetOrCompute("DisplayName_DLC_Frostbite");

		public static readonly MyStringId DisplayName_DLC_SparksOfTheFuture = MyStringId.GetOrCompute("DisplayName_DLC_SparksOfTheFuture");

		public static readonly MyStringId DisplayName_DLC_ScrapRace = MyStringId.GetOrCompute("DisplayName_DLC_ScrapRace");

		public static readonly MyStringId SimpleNewGame_Frostbite_Description = MyStringId.GetOrCompute("SimpleNewGame_Frostbite_Description");

>>>>>>> d46cf8619665219cc163a7b28984ced59ed9470d
		public static readonly MyStringId DisplayName_InventoryConstraint_PersonalItems = MyStringId.GetOrCompute("DisplayName_InventoryConstraint_PersonalItems");

		/// <summary>
		/// Analog Clock
		/// </summary>
		public static readonly MyStringId DisplayName_TSS_ClockAnalog = MyStringId.GetOrCompute("DisplayName_TSS_ClockAnalog");

<<<<<<< HEAD
		/// <summary>
		/// Weather
		/// </summary>
		public static readonly MyStringId DisplayName_TSS_Weather = MyStringId.GetOrCompute("DisplayName_TSS_Weather");

		/// <summary>
		/// Thunderstorm
		/// </summary>
		public static readonly MyStringId DisplayName_TSS_Weather_Thunderstorm = MyStringId.GetOrCompute("DisplayName_TSS_Weather_Thunderstorm");

		/// <summary>
		/// Rain
		/// </summary>
		public static readonly MyStringId DisplayName_TSS_Weather_Rain = MyStringId.GetOrCompute("DisplayName_TSS_Weather_Rain");

		/// <summary>
		/// Snow
		/// </summary>
		public static readonly MyStringId DisplayName_TSS_Weather_Snow = MyStringId.GetOrCompute("DisplayName_TSS_Weather_Snow");

		/// <summary>
		/// Dry Ice Snow
		/// </summary>
		public static readonly MyStringId DisplayName_TSS_Weather_MarsSnow = MyStringId.GetOrCompute("DisplayName_TSS_Weather_MarsSnow");

		/// <summary>
		/// Sandstorm
		/// </summary>
		public static readonly MyStringId DisplayName_TSS_Weather_Sandstorm = MyStringId.GetOrCompute("DisplayName_TSS_Weather_Sandstorm");

		/// <summary>
		/// Fog
		/// </summary>
		public static readonly MyStringId DisplayName_TSS_Weather_Fog = MyStringId.GetOrCompute("DisplayName_TSS_Weather_Fog");

		/// <summary>
		/// Dust
		/// </summary>
		public static readonly MyStringId DisplayName_TSS_Weather_Dust = MyStringId.GetOrCompute("DisplayName_TSS_Weather_Dust");

		/// <summary>
		/// Description
		/// </summary>
		public static readonly MyStringId DisplayName_TSS_Description = MyStringId.GetOrCompute("DisplayName_TSS_Description");

		/// <summary>
		/// *** Description of decorative blocks DLC ***
		/// </summary>
=======
		public static readonly MyStringId DisplayName_TSS_Weather = MyStringId.GetOrCompute("DisplayName_TSS_Weather");

		public static readonly MyStringId DisplayName_TSS_Weather_Thunderstorm = MyStringId.GetOrCompute("DisplayName_TSS_Weather_Thunderstorm");

		public static readonly MyStringId DisplayName_TSS_Weather_Rain = MyStringId.GetOrCompute("DisplayName_TSS_Weather_Rain");

		public static readonly MyStringId DisplayName_TSS_Weather_Snow = MyStringId.GetOrCompute("DisplayName_TSS_Weather_Snow");

		public static readonly MyStringId DisplayName_TSS_Weather_MarsSnow = MyStringId.GetOrCompute("DisplayName_TSS_Weather_MarsSnow");

		public static readonly MyStringId DisplayName_TSS_Weather_Sandstorm = MyStringId.GetOrCompute("DisplayName_TSS_Weather_Sandstorm");

		public static readonly MyStringId DisplayName_TSS_Weather_Fog = MyStringId.GetOrCompute("DisplayName_TSS_Weather_Fog");

		public static readonly MyStringId DisplayName_TSS_Weather_Dust = MyStringId.GetOrCompute("DisplayName_TSS_Weather_Dust");

		public static readonly MyStringId DisplayName_TSS_Description = MyStringId.GetOrCompute("DisplayName_TSS_Description");

>>>>>>> d46cf8619665219cc163a7b28984ced59ed9470d
		public static readonly MyStringId Description_DLC_DecorativeBlocks = MyStringId.GetOrCompute("Description_DLC_DecorativeBlocks");

		/// <summary>
		/// *** Description of decorative blocks 2 DLC ***
		/// </summary>
		public static readonly MyStringId Description_DLC_DecorativeBlocks2 = MyStringId.GetOrCompute("Description_DLC_DecorativeBlocks2");

		/// <summary>
		/// *** Description of style pack DLC ***
		/// </summary>
		public static readonly MyStringId Description_DLC_StylePack = MyStringId.GetOrCompute("Description_DLC_StylePack");

<<<<<<< HEAD
		/// <summary>
		/// *** Description of Frostbite DLC ***
		/// </summary>
		public static readonly MyStringId Description_DLC_Frostbite = MyStringId.GetOrCompute("Description_DLC_Frostbite");

		/// <summary>
		/// *** Description of Sparks Of The Future DLC ***
		/// </summary>
		public static readonly MyStringId Description_DLC_SparksOfTheFuture = MyStringId.GetOrCompute("Description_DLC_SparksOfTheFuture");

		/// <summary>
		/// *** Description of Wasteland ***
		/// </summary>
		public static readonly MyStringId Description_DLC_ScrapRace = MyStringId.GetOrCompute("Description_DLC_ScrapRace");

		/// <summary>
		/// Digital Clock
		/// </summary>
=======
		public static readonly MyStringId Description_DLC_Frostbite = MyStringId.GetOrCompute("Description_DLC_Frostbite");

		public static readonly MyStringId Description_DLC_SparksOfTheFuture = MyStringId.GetOrCompute("Description_DLC_SparksOfTheFuture");

		public static readonly MyStringId Description_DLC_ScrapRace = MyStringId.GetOrCompute("Description_DLC_ScrapRace");

>>>>>>> d46cf8619665219cc163a7b28984ced59ed9470d
		public static readonly MyStringId DisplayName_TSS_ClockDigital = MyStringId.GetOrCompute("DisplayName_TSS_ClockDigital");

		/// <summary>
		/// Velocity
		/// </summary>
		public static readonly MyStringId DisplayName_TSS_Velocity = MyStringId.GetOrCompute("DisplayName_TSS_Velocity");

		/// <summary>
		/// Gravity
		/// </summary>
		public static readonly MyStringId DisplayName_TSS_Gravity = MyStringId.GetOrCompute("DisplayName_TSS_Gravity");

<<<<<<< HEAD
		/// <summary>
		/// Weather
		/// </summary>
		public static readonly MyStringId TSS_Weather = MyStringId.GetOrCompute("TSS_Weather");

		/// <summary>
		/// Energy and Hydrogen
		/// </summary>
=======
		public static readonly MyStringId TSS_Weather = MyStringId.GetOrCompute("TSS_Weather");

>>>>>>> d46cf8619665219cc163a7b28984ced59ed9470d
		public static readonly MyStringId DisplayName_TSS_EnergyHydrogen = MyStringId.GetOrCompute("DisplayName_TSS_EnergyHydrogen");

		/// <summary>
		/// Artificial Horizon
		/// </summary>
		public static readonly MyStringId DisplayName_TSS_ArtificialHorizon = MyStringId.GetOrCompute("DisplayName_TSS_ArtificialHorizon");

		/// <summary>
		/// ALTITUDE
		/// </summary>
		public static readonly MyStringId DisplayName_TSS_ArtificialHorizon_AltitudeWarning = MyStringId.GetOrCompute("DisplayName_TSS_ArtificialHorizon_AltitudeWarning");

<<<<<<< HEAD
		/// <summary>
		/// *** Description of pre-order pack DLC ***
		/// </summary>
		public static readonly MyStringId Description_DLC_PreorderPack = MyStringId.GetOrCompute("Description_DLC_PreorderPack");

		/// <summary>
		/// *** Description of deluxe edition DLC ***
		/// </summary>
=======
		public static readonly MyStringId Description_DLC_PreorderPack = MyStringId.GetOrCompute("Description_DLC_PreorderPack");

>>>>>>> d46cf8619665219cc163a7b28984ced59ed9470d
		public static readonly MyStringId Description_DLC_DeluxeEdition = MyStringId.GetOrCompute("Description_DLC_DeluxeEdition");

		/// <summary>
		/// Projection Area
		/// </summary>
		public static readonly MyStringId DisplayName_Screen_ProjectionArea = MyStringId.GetOrCompute("DisplayName_Screen_ProjectionArea");

		/// <summary>
		/// Large Display
		/// </summary>
		public static readonly MyStringId DisplayName_Screen_Large = MyStringId.GetOrCompute("DisplayName_Screen_Large");

		/// <summary>
		/// Keyboard
		/// </summary>
		public static readonly MyStringId DisplayName_Screen_Keyboard = MyStringId.GetOrCompute("DisplayName_Screen_Keyboard");

		/// <summary>
		/// Numpad
		/// </summary>
		public static readonly MyStringId DisplayName_Screen_Numpad = MyStringId.GetOrCompute("DisplayName_Screen_Numpad");

		/// <summary>
		/// Top Center Screen
		/// </summary>
		public static readonly MyStringId DisplayName_Screen_TopCenter = MyStringId.GetOrCompute("DisplayName_Screen_TopCenter");

		/// <summary>
		/// Bottom Center Screen
		/// </summary>
		public static readonly MyStringId DisplayName_Screen_BottomCenter = MyStringId.GetOrCompute("DisplayName_Screen_BottomCenter");

		/// <summary>
		/// Top Left Screen
		/// </summary>
		public static readonly MyStringId DisplayName_Screen_TopLeft = MyStringId.GetOrCompute("DisplayName_Screen_TopLeft");

		/// <summary>
		/// Bottom Left Screen
		/// </summary>
		public static readonly MyStringId DisplayName_Screen_BottomLeft = MyStringId.GetOrCompute("DisplayName_Screen_BottomLeft");

		/// <summary>
		/// Top Right Screen
		/// </summary>
		public static readonly MyStringId DisplayName_Screen_TopRight = MyStringId.GetOrCompute("DisplayName_Screen_TopRight");

		/// <summary>
		/// Bottom Right Screen
		/// </summary>
		public static readonly MyStringId DisplayName_Screen_BottomRight = MyStringId.GetOrCompute("DisplayName_Screen_BottomRight");

		/// <summary>
		/// Activation failed
		/// </summary>
		public static readonly MyStringId Notification_ActivationFailed = MyStringId.GetOrCompute("Notification_ActivationFailed");

		/// <summary>
		/// Add components from Build Planner to production queue  Shortcuts for conveyor port interaction:  Shift+{0} - Add components to production Shift+Ctrl+{0} - Add components to production 10x
		/// </summary>
		public static readonly MyStringId ToolTipTerminalInventory_AddComponents = MyStringId.GetOrCompute("ToolTipTerminalInventory_AddComponents");

		/// <summary>
		/// Add components from Build Planner to production queue
		/// </summary>
		public static readonly MyStringId ToolTipTerminalInventory_AddComponents_Controller = MyStringId.GetOrCompute("ToolTipTerminalInventory_AddComponents_Controller");

		/// <summary>
		/// Add selected component to production queue
		/// </summary>
		public static readonly MyStringId ToolTipTerminalInventory_AddSelectedComponent = MyStringId.GetOrCompute("ToolTipTerminalInventory_AddSelectedComponent");

		/// <summary>
		/// Deposit all ores, ingots and components  Shortcuts for conveyor port interaction:  Alt+{0} - Deposit all ores, ingots and components
		/// </summary>
		public static readonly MyStringId ToolTipTerminalInventory_Deposit = MyStringId.GetOrCompute("ToolTipTerminalInventory_Deposit");

		/// <summary>
		/// Withdraw components for Build Planner Hold Ctrl for x10 amount.  Shortcuts for conveyor port interaction:  {0} - Default withdraw Ctrl+{0} - Withdraw 10x and keep block in Build Planner Alt+Ctrl+{0} - Withdraw and keep block in Build Planner
		/// </summary>
		public static readonly MyStringId ToolTipTerminalInventory_Withdraw = MyStringId.GetOrCompute("ToolTipTerminalInventory_Withdraw");

		/// <summary>
		/// Withdraw components for Build Planner
		/// </summary>
		public static readonly MyStringId ToolTipTerminalInventory_Withdraw_Controller = MyStringId.GetOrCompute("ToolTipTerminalInventory_Withdraw_Controller");

		/// <summary>
		/// Build Planner
		/// </summary>
		public static readonly MyStringId DisplayName_BlueprintClass_BuildPlanner = MyStringId.GetOrCompute("DisplayName_BlueprintClass_BuildPlanner");

		/// <summary>
		/// {0} component(s) could not be deposited.
		/// </summary>
		public static readonly MyStringId NotificationDepositFailed = MyStringId.GetOrCompute("NotificationDepositFailed");

		/// <summary>
		/// All possible components were deposited.
		/// </summary>
		public static readonly MyStringId NotificationDepositSuccessful = MyStringId.GetOrCompute("NotificationDepositSuccessful");

		/// <summary>
		/// {0} component(s) could not be put to production.
		/// </summary>
		public static readonly MyStringId NotificationPutToProductionFailed = MyStringId.GetOrCompute("NotificationPutToProductionFailed");

		/// <summary>
		/// All components were successfully put to production.
		/// </summary>
		public static readonly MyStringId NotificationPutToProductionSuccessful = MyStringId.GetOrCompute("NotificationPutToProductionSuccessful");

		/// <summary>
		/// Build Planner is empty. Open Toolbar screen {0}  to add some items to Build Planner.
		/// </summary>
		public static readonly MyStringId NotificationBuildPlannerEmpty = MyStringId.GetOrCompute("NotificationBuildPlannerEmpty");

		/// <summary>
		/// Cannot withdraw {0} {1}(s).
		/// </summary>
		public static readonly MyStringId NotificationWithdrawFailed1 = MyStringId.GetOrCompute("NotificationWithdrawFailed1");

		/// <summary>
		/// Cannot withdraw {0} {1}(s) and {2} {3}(s).
		/// </summary>
		public static readonly MyStringId NotificationWithdrawFailed2 = MyStringId.GetOrCompute("NotificationWithdrawFailed2");

		/// <summary>
		/// Cannot withdraw {0} {1}(s), {2} {3}(s) and {4} {5}(s).
		/// </summary>
		public static readonly MyStringId NotificationWithdrawFailed3 = MyStringId.GetOrCompute("NotificationWithdrawFailed3");

		/// <summary>
		/// Cannot withdraw {0} {1}(s), {2} {3}(s), {4} {5}(s) and {6} other components.
		/// </summary>
		public static readonly MyStringId NotificationWithdrawFailed4More = MyStringId.GetOrCompute("NotificationWithdrawFailed4More");

		/// <summary>
		/// All components were successfully withdrawn.
		/// </summary>
		public static readonly MyStringId NotificationWithdrawSuccessful = MyStringId.GetOrCompute("NotificationWithdrawSuccessful");

		/// <summary>
		/// Click to add selected block variant or drag and drop the block here. MMB on a block to quickly add it to the Build Planner.
		/// </summary>
		public static readonly MyStringId TooltipBuildScreen_BuildPlanner = MyStringId.GetOrCompute("TooltipBuildScreen_BuildPlanner");

		/// <summary>
		/// Build Planner
		/// </summary>
		public static readonly MyStringId BuildPlanner = MyStringId.GetOrCompute("BuildPlanner");

		/// <summary>
		/// Build planner capacity reached. Components not added.
		/// </summary>
		public static readonly MyStringId BuildPlannerCapacityReached = MyStringId.GetOrCompute("BuildPlannerCapacityReached");

		/// <summary>
		/// Components added to Build Planner.
		/// </summary>
		public static readonly MyStringId BuildPlannerComponentsAdded = MyStringId.GetOrCompute("BuildPlannerComponentsAdded");

		/// <summary>
		/// Angry
		/// </summary>
		public static readonly MyStringId DisplayName_EmoteAngry = MyStringId.GetOrCompute("DisplayName_EmoteAngry");

		/// <summary>
		/// Assist Stop
		/// </summary>
		public static readonly MyStringId DisplayName_EmoteAssistStop = MyStringId.GetOrCompute("DisplayName_EmoteAssistStop");

		/// <summary>
		/// Assist Come Closer
		/// </summary>
		public static readonly MyStringId DisplayName_EmoteAssistCome = MyStringId.GetOrCompute("DisplayName_EmoteAssistCome");

		/// <summary>
		/// Dance
		/// </summary>
		public static readonly MyStringId DisplayName_EmoteDance = MyStringId.GetOrCompute("DisplayName_EmoteDance");

		/// <summary>
		/// Aggressive Point
		/// </summary>
		public static readonly MyStringId DisplayName_EmotePointAggressive = MyStringId.GetOrCompute("DisplayName_EmotePointAggressive");

		/// <summary>
		/// Point Back
		/// </summary>
		public static readonly MyStringId DisplayName_EmotePointBack = MyStringId.GetOrCompute("DisplayName_EmotePointBack");

		/// <summary>
		/// Point Down
		/// </summary>
		public static readonly MyStringId DisplayName_EmotePointDown = MyStringId.GetOrCompute("DisplayName_EmotePointDown");

		/// <summary>
		/// Allow Conversion to station
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_SafeZones_AllowConvertToStation = MyStringId.GetOrCompute("ScreenDebugAdminMenu_SafeZones_AllowConvertToStation");

		/// <summary>
		/// Point Forward
		/// </summary>
		public static readonly MyStringId DisplayName_EmotePointForward = MyStringId.GetOrCompute("DisplayName_EmotePointForward");

		/// <summary>
		/// Point Left
		/// </summary>
		public static readonly MyStringId DisplayName_EmotePointLeft = MyStringId.GetOrCompute("DisplayName_EmotePointLeft");

		/// <summary>
		/// Point Right
		/// </summary>
		public static readonly MyStringId DisplayName_EmotePointRight = MyStringId.GetOrCompute("DisplayName_EmotePointRight");

<<<<<<< HEAD
		/// <summary>
		/// Cold
		/// </summary>
		public static readonly MyStringId DisplayName_EmoteCold = MyStringId.GetOrCompute("DisplayName_EmoteCold");

		/// <summary>
		/// Check Wrist
		/// </summary>
		public static readonly MyStringId DisplayName_EmoteCheckWrist = MyStringId.GetOrCompute("DisplayName_EmoteCheckWrist");

		/// <summary>
		/// Bite Me
		/// </summary>
		public static readonly MyStringId DisplayName_EmoteFYou = MyStringId.GetOrCompute("DisplayName_EmoteFYou");

		/// <summary>
		/// Drunk
		/// </summary>
		public static readonly MyStringId DisplayName_EmoteDrunk = MyStringId.GetOrCompute("DisplayName_EmoteDrunk");

		/// <summary>
		/// Rock Paper Scissors
		/// </summary>
		public static readonly MyStringId DisplayName_EmoteRPS = MyStringId.GetOrCompute("DisplayName_EmoteRPS");

		/// <summary>
		/// Charge
		/// </summary>
		public static readonly MyStringId DisplayName_EmoteCharge = MyStringId.GetOrCompute("DisplayName_EmoteCharge");

		/// <summary>
		/// Come Here Baby
		/// </summary>
		public static readonly MyStringId DisplayName_EmoteComeHereBaby = MyStringId.GetOrCompute("DisplayName_EmoteComeHereBaby");

		/// <summary>
		/// Dance Disco 1
		/// </summary>
		public static readonly MyStringId DisplayName_DanceDisco1 = MyStringId.GetOrCompute("DisplayName_DanceDisco1");

		/// <summary>
		/// Dance Disco 2
		/// </summary>
		public static readonly MyStringId DisplayName_DanceDisco2 = MyStringId.GetOrCompute("DisplayName_DanceDisco2");

		/// <summary>
		/// Looking Around
		/// </summary>
		public static readonly MyStringId DisplayName_LookingAround = MyStringId.GetOrCompute("DisplayName_LookingAround");

		/// <summary>
		/// Stretching
		/// </summary>
		public static readonly MyStringId DisplayName_Stretching = MyStringId.GetOrCompute("DisplayName_Stretching");

		/// <summary>
		/// Whatever
		/// </summary>
		public static readonly MyStringId DisplayName_Whatever = MyStringId.GetOrCompute("DisplayName_Whatever");

		/// <summary>
		/// Finger Guns
		/// </summary>
		public static readonly MyStringId DisplayName_FingerGuns = MyStringId.GetOrCompute("DisplayName_FingerGuns");

		/// <summary>
		/// Yelling
		/// </summary>
		public static readonly MyStringId DisplayName_Yelling = MyStringId.GetOrCompute("DisplayName_Yelling");

		/// <summary>
		/// Got Hit
		/// </summary>
		public static readonly MyStringId DisplayName_GotHit = MyStringId.GetOrCompute("DisplayName_GotHit");

		/// <summary>
		/// Inventory terminal controls
		/// </summary>
=======
		public static readonly MyStringId DisplayName_EmoteCold = MyStringId.GetOrCompute("DisplayName_EmoteCold");

		public static readonly MyStringId DisplayName_EmoteCheckWrist = MyStringId.GetOrCompute("DisplayName_EmoteCheckWrist");

		public static readonly MyStringId DisplayName_EmoteFYou = MyStringId.GetOrCompute("DisplayName_EmoteFYou");

		public static readonly MyStringId DisplayName_EmoteDrunk = MyStringId.GetOrCompute("DisplayName_EmoteDrunk");

		public static readonly MyStringId DisplayName_EmoteCharge = MyStringId.GetOrCompute("DisplayName_EmoteCharge");

		public static readonly MyStringId DisplayName_EmoteComeHereBaby = MyStringId.GetOrCompute("DisplayName_EmoteComeHereBaby");

		public static readonly MyStringId DisplayName_DanceDisco1 = MyStringId.GetOrCompute("DisplayName_DanceDisco1");

		public static readonly MyStringId DisplayName_DanceDisco2 = MyStringId.GetOrCompute("DisplayName_DanceDisco2");

		public static readonly MyStringId DisplayName_LookingAround = MyStringId.GetOrCompute("DisplayName_LookingAround");

		public static readonly MyStringId DisplayName_Stretching = MyStringId.GetOrCompute("DisplayName_Stretching");

		public static readonly MyStringId DisplayName_Whatever = MyStringId.GetOrCompute("DisplayName_Whatever");

		public static readonly MyStringId DisplayName_FingerGuns = MyStringId.GetOrCompute("DisplayName_FingerGuns");

		public static readonly MyStringId DisplayName_Yelling = MyStringId.GetOrCompute("DisplayName_Yelling");

		public static readonly MyStringId DisplayName_GotHit = MyStringId.GetOrCompute("DisplayName_GotHit");

>>>>>>> d46cf8619665219cc163a7b28984ced59ed9470d
		public static readonly MyStringId BuildPlanner_Controls = MyStringId.GetOrCompute("BuildPlanner_Controls");

		/// <summary>
		/// Deposit all
		/// </summary>
		public static readonly MyStringId BuildPlanner_DepositAll = MyStringId.GetOrCompute("BuildPlanner_DepositAll");

		/// <summary>
		/// Build Planner helps you to manage required components for your build. It also helps you with grabbing them from inventories or queueing for production.
		/// </summary>
		public static readonly MyStringId BuildPlanner_Description = MyStringId.GetOrCompute("BuildPlanner_Description");

		/// <summary>
		/// Put x10 to production
		/// </summary>
		public static readonly MyStringId BuildPlanner_Put10ToProduction = MyStringId.GetOrCompute("BuildPlanner_Put10ToProduction");

		/// <summary>
		/// Put to production
		/// </summary>
		public static readonly MyStringId BuildPlanner_PutToProduction = MyStringId.GetOrCompute("BuildPlanner_PutToProduction");

		/// <summary>
		/// Withdraw
		/// </summary>
		public static readonly MyStringId BuildPlanner_Withdraw = MyStringId.GetOrCompute("BuildPlanner_Withdraw");

		/// <summary>
		/// Withdraw x10 and keep
		/// </summary>
		public static readonly MyStringId BuildPlanner_Withdraw10Keep = MyStringId.GetOrCompute("BuildPlanner_Withdraw10Keep");

		/// <summary>
		/// Withdraw and keep
		/// </summary>
		public static readonly MyStringId BuildPlanner_WithdrawKeep = MyStringId.GetOrCompute("BuildPlanner_WithdrawKeep");

		/// <summary>
		/// Press {0} to withdraw components from {1}
		/// </summary>
		public static readonly MyStringId NotificationHintPressToWithdraw = MyStringId.GetOrCompute("NotificationHintPressToWithdraw");

		/// <summary>
		/// Miscellaneous Blocks
		/// </summary>
		public static readonly MyStringId DisplayName_BlockGroup_MiscGroup = MyStringId.GetOrCompute("DisplayName_BlockGroup_MiscGroup");

		/// <summary>
		/// Uncategorized hidden blocks.
		/// </summary>
		public static readonly MyStringId Description_BlockGroup_MiscGroup = MyStringId.GetOrCompute("Description_BlockGroup_MiscGroup");

		/// <summary>
		/// Light Armor Ramps
		/// </summary>
		public static readonly MyStringId DisplayName_BlockGroup_ArmorLightRampGroup = MyStringId.GetOrCompute("DisplayName_BlockGroup_ArmorLightRampGroup");

		/// <summary>
		/// Light Armor Ramp Corners
		/// </summary>
		public static readonly MyStringId DisplayName_BlockGroup_ArmorLightRampCornerGroup = MyStringId.GetOrCompute("DisplayName_BlockGroup_ArmorLightRampCornerGroup");

		/// <summary>
		/// Heavy Armor Ramps
		/// </summary>
		public static readonly MyStringId DisplayName_BlockGroup_ArmorHeavyRampGroup = MyStringId.GetOrCompute("DisplayName_BlockGroup_ArmorHeavyRampGroup");

		/// <summary>
		/// Heavy Armor Ramp Corners
		/// </summary>
		public static readonly MyStringId DisplayName_BlockGroup_ArmorHeavyRampCornerGroup = MyStringId.GetOrCompute("DisplayName_BlockGroup_ArmorHeavyRampCornerGroup");

		/// <summary>
		/// Upgrade Modules
		/// </summary>
		public static readonly MyStringId DisplayName_BlockGroup_UpgradeModuleGroup = MyStringId.GetOrCompute("DisplayName_BlockGroup_UpgradeModuleGroup");

		/// <summary>
		/// Various upgrade modules for production blocks, like refinery or assembler.
		/// </summary>
		public static readonly MyStringId Description_BlockGroup_UpgradeModuleGroup = MyStringId.GetOrCompute("Description_BlockGroup_UpgradeModuleGroup");

		/// <summary>
		/// Renewable Energy Sources
		/// </summary>
		public static readonly MyStringId DisplayName_BlockGroup_EnergyRenewableGroup = MyStringId.GetOrCompute("DisplayName_BlockGroup_EnergyRenewableGroup");

		/// <summary>
		/// Power provider blocks, that are draining energy from renewable sources: wind and sun.
		/// </summary>
		public static readonly MyStringId Description_BlockGroup_EnergyRenewableGroup = MyStringId.GetOrCompute("Description_BlockGroup_EnergyRenewableGroup");

		/// <summary>
		/// Fueled Energy Sources
		/// </summary>
		public static readonly MyStringId DisplayName_BlockGroup_EnergyFueledGroup = MyStringId.GetOrCompute("DisplayName_BlockGroup_EnergyFueledGroup");

		/// <summary>
		/// Power provide blocks, that are consuming some kind of fuel in order to generate energy.
		/// </summary>
		public static readonly MyStringId Description_BlockGroup_EnergyFueledGroup = MyStringId.GetOrCompute("Description_BlockGroup_EnergyFueledGroup");

		/// <summary>
		/// Medical Blocks
		/// </summary>
		public static readonly MyStringId DisplayName_BlockGroup_MedicalGroup = MyStringId.GetOrCompute("DisplayName_BlockGroup_MedicalGroup");

		/// <summary>
		/// Blocks that are responsible for preserving character's health.
		/// </summary>
		public static readonly MyStringId Description_BlockGroup_MedicalGroup = MyStringId.GetOrCompute("Description_BlockGroup_MedicalGroup");

		/// <summary>
		/// Gas Tanks
		/// </summary>
		public static readonly MyStringId DisplayName_BlockGroup_TankGroup = MyStringId.GetOrCompute("DisplayName_BlockGroup_TankGroup");

		/// <summary>
		/// Tanks are used to store gases.
		/// </summary>
		public static readonly MyStringId Description_BlockGroup_TankGroup = MyStringId.GetOrCompute("Description_BlockGroup_TankGroup");

		/// <summary>
		/// Cargo Containers
		/// </summary>
		public static readonly MyStringId DisplayName_BlockGroup_ContainerGroup = MyStringId.GetOrCompute("DisplayName_BlockGroup_ContainerGroup");

		/// <summary>
		/// Universal storage blocks.
		/// </summary>
		public static readonly MyStringId Description_BlockGroup_ContainerGroup = MyStringId.GetOrCompute("Description_BlockGroup_ContainerGroup");

		/// <summary>
		/// Inputs/Outputs
		/// </summary>
		public static readonly MyStringId DisplayName_BlockGroup_InputOutputGroup = MyStringId.GetOrCompute("DisplayName_BlockGroup_InputOutputGroup");

		/// <summary>
		/// Blocks that are responsible for input and output from conveyor system.
		/// </summary>
		public static readonly MyStringId Description_BlockGroup_InputOutputGroup = MyStringId.GetOrCompute("Description_BlockGroup_InputOutputGroup");

		/// <summary>
		/// Static Wheels
		/// </summary>
		public static readonly MyStringId DisplayName_BlockGroup_WheelStaticGroup = MyStringId.GetOrCompute("DisplayName_BlockGroup_WheelStaticGroup");

		/// <summary>
		/// Ship Tools
		/// </summary>
		public static readonly MyStringId DisplayName_BlockGroup_ShipToolGroup = MyStringId.GetOrCompute("DisplayName_BlockGroup_ShipToolGroup");

		/// <summary>
		/// Ship equipment blocks.
		/// </summary>
		public static readonly MyStringId Description_BlockGroup_ShipToolGroup = MyStringId.GetOrCompute("Description_BlockGroup_ShipToolGroup");

		/// <summary>
		/// Stationary Weapons
		/// </summary>
		public static readonly MyStringId DisplayName_BlockGroup_ShipWeaponStaticGroup = MyStringId.GetOrCompute("DisplayName_BlockGroup_ShipWeaponStaticGroup");

		/// <summary>
		/// Static weapon blocks.
		/// </summary>
		public static readonly MyStringId Description_BlockGroup_ShipWeaponStaticGroup = MyStringId.GetOrCompute("Description_BlockGroup_ShipWeaponStaticGroup");

		/// <summary>
		/// Turreted Weapons
		/// </summary>
		public static readonly MyStringId DisplayName_BlockGroup_TurretGroup = MyStringId.GetOrCompute("DisplayName_BlockGroup_TurretGroup");

		/// <summary>
		/// Weaponized turrets with own targeting AI.
		/// </summary>
		public static readonly MyStringId Description_BlockGroup_TurretGroup = MyStringId.GetOrCompute("Description_BlockGroup_TurretGroup");

		/// <summary>
		/// Communication Blocks
		/// </summary>
		public static readonly MyStringId DisplayName_BlockGroup_AntennaGroup = MyStringId.GetOrCompute("DisplayName_BlockGroup_AntennaGroup");

		/// <summary>
		/// Blocks responsible for communication and remote connection.
		/// </summary>
		public static readonly MyStringId Description_BlockGroup_AntennaGroup = MyStringId.GetOrCompute("Description_BlockGroup_AntennaGroup");

		/// <summary>
		/// LCD Screens
		/// </summary>
		public static readonly MyStringId DisplayName_BlockGroup_LCDGroup = MyStringId.GetOrCompute("DisplayName_BlockGroup_LCDGroup");

		/// <summary>
		/// LCD Screens of various sizes and formats.
		/// </summary>
		public static readonly MyStringId Description_BlockGroup_LCDGroup = MyStringId.GetOrCompute("Description_BlockGroup_LCDGroup");

		/// <summary>
		/// Corner LCD Screens
		/// </summary>
		public static readonly MyStringId DisplayName_BlockGroup_LCDCornerGroup = MyStringId.GetOrCompute("DisplayName_BlockGroup_LCDCornerGroup");

		/// <summary>
		/// Lighting
		/// </summary>
		public static readonly MyStringId DisplayName_BlockGroup_LightingGroup = MyStringId.GetOrCompute("DisplayName_BlockGroup_LightingGroup");

		/// <summary>
		/// Various sources of light.
		/// </summary>
		public static readonly MyStringId Description_BlockGroup_LightingGroup = MyStringId.GetOrCompute("Description_BlockGroup_LightingGroup");

		/// <summary>
		/// Seats
		/// </summary>
		public static readonly MyStringId DisplayName_BlockGroup_SeatsGroup = MyStringId.GetOrCompute("DisplayName_BlockGroup_SeatsGroup");

		/// <summary>
		/// Various seats and beds for character.
		/// </summary>
		public static readonly MyStringId Description_BlockGroup_SeatsGroup = MyStringId.GetOrCompute("Description_BlockGroup_SeatsGroup");

		/// <summary>
		/// Interior Structure
		/// </summary>
		public static readonly MyStringId DisplayName_BlockGroup_InteriorStructureGroup = MyStringId.GetOrCompute("DisplayName_BlockGroup_InteriorStructureGroup");

		/// <summary>
		/// Internal pillars and cover walls.
		/// </summary>
		public static readonly MyStringId Description_BlockGroup_InteriorStructureGroup = MyStringId.GetOrCompute("Description_BlockGroup_InteriorStructureGroup");

		/// <summary>
		/// Decorative Utility
		/// </summary>
		public static readonly MyStringId DisplayName_BlockGroup_DecorativeUtilityGroup = MyStringId.GetOrCompute("DisplayName_BlockGroup_DecorativeUtilityGroup");

		/// <summary>
		/// Various utility blocks for decorative purposes.
		/// </summary>
		public static readonly MyStringId Description_BlockGroup_DecorativeUtilityGroup = MyStringId.GetOrCompute("Description_BlockGroup_DecorativeUtilityGroup");

		/// <summary>
		/// Small Windows
		/// </summary>
		public static readonly MyStringId DisplayName_BlockGroup_WindowSmallGroup = MyStringId.GetOrCompute("DisplayName_BlockGroup_WindowSmallGroup");

		/// <summary>
		/// Medium Windows
		/// </summary>
		public static readonly MyStringId DisplayName_BlockGroup_WindowMediumGroup = MyStringId.GetOrCompute("DisplayName_BlockGroup_WindowMediumGroup");

		/// <summary>
		/// Large Windows
		/// </summary>
		public static readonly MyStringId DisplayName_BlockGroup_WindowLargeGroup = MyStringId.GetOrCompute("DisplayName_BlockGroup_WindowLargeGroup");

		/// <summary>
		/// Small Corner Windows
		/// </summary>
		public static readonly MyStringId DisplayName_BlockGroup_WindowSmallCornerGroup = MyStringId.GetOrCompute("DisplayName_BlockGroup_WindowSmallCornerGroup");

		/// <summary>
		/// Medium Corner Windows
		/// </summary>
		public static readonly MyStringId DisplayName_BlockGroup_WindowMediumCornerGroup = MyStringId.GetOrCompute("DisplayName_BlockGroup_WindowMediumCornerGroup");

		/// <summary>
		/// Shutters
		/// </summary>
		public static readonly MyStringId DisplayName_BlockGroup_ShutterGroup = MyStringId.GetOrCompute("DisplayName_BlockGroup_ShutterGroup");

		/// <summary>
		/// Gravity Blocks
		/// </summary>
		public static readonly MyStringId DisplayName_BlockGroup_GravityGroup = MyStringId.GetOrCompute("DisplayName_BlockGroup_GravityGroup");

		/// <summary>
		/// Various blocks related to artificial gravity.
		/// </summary>
		public static readonly MyStringId Description_BlockGroup_GravityGroup = MyStringId.GetOrCompute("Description_BlockGroup_GravityGroup");

		/// <summary>
		/// Automation Blocks
		/// </summary>
		public static readonly MyStringId DisplayName_BlockGroup_AutomationGroup = MyStringId.GetOrCompute("DisplayName_BlockGroup_AutomationGroup");

		/// <summary>
		/// Various blocks responsible for any kind of automation.
		/// </summary>
		public static readonly MyStringId Description_BlockGroup_AutomationGroup = MyStringId.GetOrCompute("Description_BlockGroup_AutomationGroup");

<<<<<<< HEAD
		/// <summary>
		/// Light Armor Sloped Corners
		/// </summary>
		public static readonly MyStringId DisplayName_BlockGroup_LightArmorSlopedCorners = MyStringId.GetOrCompute("DisplayName_BlockGroup_LightArmorSlopedCorners");
=======
		public static readonly MyStringId DisplayName_BlockGroup_LightArmorSlopedCorners = MyStringId.GetOrCompute("DisplayName_BlockGroup_LightArmorSlopedCorners");

		public static readonly MyStringId DisplayName_BlockGroup_HeavyArmorSlopedCorners = MyStringId.GetOrCompute("DisplayName_BlockGroup_HeavyArmorSlopedCorners");

		public static readonly MyStringId RadialMenuGroupTitle_ArmorLight = MyStringId.GetOrCompute("RadialMenuGroupTitle_ArmorLight");
>>>>>>> d46cf8619665219cc163a7b28984ced59ed9470d

		/// <summary>
		/// Heavy Armor Sloped Corners
		/// </summary>
		public static readonly MyStringId DisplayName_BlockGroup_HeavyArmorSlopedCorners = MyStringId.GetOrCompute("DisplayName_BlockGroup_HeavyArmorSlopedCorners");

		/// <summary>
		/// Light Armor
		/// </summary>
		public static readonly MyStringId RadialMenuGroupTitle_ArmorLight = MyStringId.GetOrCompute("RadialMenuGroupTitle_ArmorLight");

		/// <summary>
		/// Production &amp; Medical
		/// </summary>
		public static readonly MyStringId RadialMenuGroupTitle_ProductionMedical = MyStringId.GetOrCompute("RadialMenuGroupTitle_ProductionMedical");

		/// <summary>
		/// Gas &amp; Logistics
		/// </summary>
		public static readonly MyStringId RadialMenuGroupTitle_GasLogistics = MyStringId.GetOrCompute("RadialMenuGroupTitle_GasLogistics");

		/// <summary>
		/// Ship Essentials
		/// </summary>
		public static readonly MyStringId RadialMenuGroupTitle_ShipEssentials = MyStringId.GetOrCompute("RadialMenuGroupTitle_ShipEssentials");

		/// <summary>
		/// Wheels &amp; Weapons
		/// </summary>
		public static readonly MyStringId RadialMenuGroupTitle_WheelsWeapons = MyStringId.GetOrCompute("RadialMenuGroupTitle_WheelsWeapons");

		/// <summary>
		/// Comms &amp; Hangars
		/// </summary>
		public static readonly MyStringId RadialMenuGroupTitle_CommsHangars = MyStringId.GetOrCompute("RadialMenuGroupTitle_CommsHangars");

		/// <summary>
		/// Decoration #1
		/// </summary>
		public static readonly MyStringId RadialMenuGroupTitle_Decoration = MyStringId.GetOrCompute("RadialMenuGroupTitle_Decoration");

		/// <summary>
		/// Decoration #2
		/// </summary>
		public static readonly MyStringId RadialMenuGroupTitle_Decoration2 = MyStringId.GetOrCompute("RadialMenuGroupTitle_Decoration2");

		/// <summary>
		/// Windows &amp; Hi-tech
		/// </summary>
		public static readonly MyStringId RadialMenuGroupTitle_WindowsAndHitech = MyStringId.GetOrCompute("RadialMenuGroupTitle_WindowsAndHitech");

		/// <summary>
		/// Advanced Systems
		/// </summary>
		public static readonly MyStringId RadialMenuGroupTitle_AdvancedSystems = MyStringId.GetOrCompute("RadialMenuGroupTitle_AdvancedSystems");

		/// <summary>
		/// Deecortive Pack 2
		/// </summary>
		public static readonly MyStringId RadialMenuGroupTitle_DecoPack2 = MyStringId.GetOrCompute("RadialMenuGroupTitle_DecoPack2");

		/// <summary>
		/// Quick Actions
		/// </summary>
		public static readonly MyStringId RadialMenuGroupTitle_QuickActions = MyStringId.GetOrCompute("RadialMenuGroupTitle_QuickActions");

		/// <summary>
		/// Menu
		/// </summary>
		public static readonly MyStringId RadialMenuGroupTitle_Menu = MyStringId.GetOrCompute("RadialMenuGroupTitle_Menu");

		/// <summary>
		/// Alien grass green
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_AlienGreenGrass = MyStringId.GetOrCompute("ControlMenuItemLabel_AlienGreenGrass");

		/// <summary>
		/// Alien grass green bare
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_AlienGreenGrassBare = MyStringId.GetOrCompute("ControlMenuItemLabel_AlienGreenGrassBare");

		/// <summary>
		/// Alien ice
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_AlienIce = MyStringId.GetOrCompute("ControlMenuItemLabel_AlienIce");

		/// <summary>
		/// Alien ice 03
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_AlienIce_03 = MyStringId.GetOrCompute("ControlMenuItemLabel_AlienIce_03");

		/// <summary>
		/// Alien grass orange
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_AlienOrangeGrass = MyStringId.GetOrCompute("ControlMenuItemLabel_AlienOrangeGrass");

		/// <summary>
		/// Alien grass orange bare
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_AlienOrangeGrassBare = MyStringId.GetOrCompute("ControlMenuItemLabel_AlienOrangeGrassBare");

		/// <summary>
		/// Alien grass rock
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_AlienRockGrass = MyStringId.GetOrCompute("ControlMenuItemLabel_AlienRockGrass");

		/// <summary>
		/// Alient grass rock bare
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_AlienRockGrassBare = MyStringId.GetOrCompute("ControlMenuItemLabel_AlienRockGrassBare");

		/// <summary>
		/// Alien rocky mountain
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_AlienRockyMountain = MyStringId.GetOrCompute("ControlMenuItemLabel_AlienRockyMountain");

		/// <summary>
		/// Alien rocky terrain
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_AlienRockyTerrain = MyStringId.GetOrCompute("ControlMenuItemLabel_AlienRockyTerrain");

		/// <summary>
		/// Alien sand
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_AlienSand = MyStringId.GetOrCompute("ControlMenuItemLabel_AlienSand");

		/// <summary>
		/// Alien snow
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_AlienSnow = MyStringId.GetOrCompute("ControlMenuItemLabel_AlienSnow");

		/// <summary>
		/// Alien soil
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_AlienSoil = MyStringId.GetOrCompute("ControlMenuItemLabel_AlienSoil");

		/// <summary>
		/// Alien grass yellow
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_AlienYellowGrass = MyStringId.GetOrCompute("ControlMenuItemLabel_AlienYellowGrass");

		/// <summary>
		/// Alien grass yellow bare
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_AlienYellowGrassBare = MyStringId.GetOrCompute("ControlMenuItemLabel_AlienYellowGrassBare");

		/// <summary>
		/// Cobalt 01
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_Cobalt01 = MyStringId.GetOrCompute("ControlMenuItemLabel_Cobalt01");

		/// <summary>
		/// Debug material
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_DebugMaterial = MyStringId.GetOrCompute("ControlMenuItemLabel_DebugMaterial");

		/// <summary>
		/// Desert rocks
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_DesertRocks = MyStringId.GetOrCompute("ControlMenuItemLabel_DesertRocks");

		/// <summary>
		/// Gold 01
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_Gold01 = MyStringId.GetOrCompute("ControlMenuItemLabel_Gold01");

		/// <summary>
		/// Grass
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_Grass = MyStringId.GetOrCompute("ControlMenuItemLabel_Grass");

		/// <summary>
		/// Grass 02
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_Grass02 = MyStringId.GetOrCompute("ControlMenuItemLabel_Grass02");

		/// <summary>
		/// Grass bare
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_GrassBare = MyStringId.GetOrCompute("ControlMenuItemLabel_GrassBare");

		/// <summary>
		/// Grass old
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_GrassOld = MyStringId.GetOrCompute("ControlMenuItemLabel_GrassOld");

		/// <summary>
		/// Grass old bare
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_GrassOldBare = MyStringId.GetOrCompute("ControlMenuItemLabel_GrassOldBare");

		/// <summary>
		/// Ice 
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_Ice = MyStringId.GetOrCompute("ControlMenuItemLabel_Ice");

		/// <summary>
		/// Ice 01
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_Ice01 = MyStringId.GetOrCompute("ControlMenuItemLabel_Ice01");

		/// <summary>
		/// Ice 02
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_Ice02 = MyStringId.GetOrCompute("ControlMenuItemLabel_Ice02");

		/// <summary>
		/// Ice 03
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_Ice03 = MyStringId.GetOrCompute("ControlMenuItemLabel_Ice03");

		/// <summary>
		/// Ice europa 02
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_IceEuropa2 = MyStringId.GetOrCompute("ControlMenuItemLabel_IceEuropa2");

		/// <summary>
		/// Iron 01
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_Iron01 = MyStringId.GetOrCompute("ControlMenuItemLabel_Iron01");

		/// <summary>
		/// Iron 02
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_Iron_02 = MyStringId.GetOrCompute("ControlMenuItemLabel_Iron_02");

		/// <summary>
		/// Magnesium 01
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_Magnesium01 = MyStringId.GetOrCompute("ControlMenuItemLabel_Magnesium01");

		/// <summary>
		/// Mars rocks
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_MarsRocks = MyStringId.GetOrCompute("ControlMenuItemLabel_MarsRocks");

		/// <summary>
		/// Mars soil
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_MarsSoil = MyStringId.GetOrCompute("ControlMenuItemLabel_MarsSoil");

		/// <summary>
		/// Moon rocks
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_MoonRocks = MyStringId.GetOrCompute("ControlMenuItemLabel_MoonRocks");

		/// <summary>
		/// Moon soil
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_MoonSoil = MyStringId.GetOrCompute("ControlMenuItemLabel_MoonSoil");

		/// <summary>
		/// Nickel 01
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_Nickel01 = MyStringId.GetOrCompute("ControlMenuItemLabel_Nickel01");

		/// <summary>
		/// Platinum 01
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_Platinum01 = MyStringId.GetOrCompute("ControlMenuItemLabel_Platinum01");

		/// <summary>
		/// Rocks grass
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_RocksGrass = MyStringId.GetOrCompute("ControlMenuItemLabel_RocksGrass");

		/// <summary>
		/// Sand 02
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_Sand02 = MyStringId.GetOrCompute("ControlMenuItemLabel_Sand02");

		/// <summary>
		/// Silicon 01
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_Silicon01 = MyStringId.GetOrCompute("ControlMenuItemLabel_Silicon01");

		/// <summary>
		/// Silver 01
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_Silver_01 = MyStringId.GetOrCompute("ControlMenuItemLabel_Silver_01");

		/// <summary>
		/// Small moon rocks
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_SmallMoonRocks = MyStringId.GetOrCompute("ControlMenuItemLabel_SmallMoonRocks");

		/// <summary>
		/// Snow
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_Snow = MyStringId.GetOrCompute("ControlMenuItemLabel_Snow");

		/// <summary>
		/// Soil
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_Soil = MyStringId.GetOrCompute("ControlMenuItemLabel_Soil");

		/// <summary>
		/// Stone
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_Stone = MyStringId.GetOrCompute("ControlMenuItemLabel_Stone");

		/// <summary>
		/// Stone 01
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_Stone01 = MyStringId.GetOrCompute("ControlMenuItemLabel_Stone01");

		/// <summary>
		/// Stone 02
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_Stone02 = MyStringId.GetOrCompute("ControlMenuItemLabel_Stone02");

		/// <summary>
		/// Stone 03
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_Stone03 = MyStringId.GetOrCompute("ControlMenuItemLabel_Stone03");

		/// <summary>
		/// Stone 04
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_Stone04 = MyStringId.GetOrCompute("ControlMenuItemLabel_Stone04");

		/// <summary>
		/// Stone 05
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_Stone05 = MyStringId.GetOrCompute("ControlMenuItemLabel_Stone05");

		/// <summary>
		/// Uraninite 01
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_Uraninite_01 = MyStringId.GetOrCompute("ControlMenuItemLabel_Uraninite_01");

		/// <summary>
		/// Select Terrain Auto-Level
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_VoxelBrushAutoLevel = MyStringId.GetOrCompute("ControlMenuItemLabel_VoxelBrushAutoLevel");

		/// <summary>
		/// Select Box
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_VoxelBrushBox = MyStringId.GetOrCompute("ControlMenuItemLabel_VoxelBrushBox");

		/// <summary>
		/// Select Capsule
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_VoxelBrushCapsule = MyStringId.GetOrCompute("ControlMenuItemLabel_VoxelBrushCapsule");

		/// <summary>
		/// Select Ramp
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_VoxelBrushRamp = MyStringId.GetOrCompute("ControlMenuItemLabel_VoxelBrushRamp");

		/// <summary>
		/// Select Sphere
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_VoxelBrushSphere = MyStringId.GetOrCompute("ControlMenuItemLabel_VoxelBrushSphere");

		/// <summary>
		/// Woods grass
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_WoodsGrass = MyStringId.GetOrCompute("ControlMenuItemLabel_WoodsGrass");

		/// <summary>
		/// Woods grass bare
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_WoodsGrassBare = MyStringId.GetOrCompute("ControlMenuItemLabel_WoodsGrassBare");

		/// <summary>
		/// Alien
		/// </summary>
		public static readonly MyStringId RadialMenuGroupTitle_VoxelAlien = MyStringId.GetOrCompute("RadialMenuGroupTitle_VoxelAlien");

		/// <summary>
		/// Alien grass
		/// </summary>
		public static readonly MyStringId RadialMenuGroupTitle_VoxelAlienGrass = MyStringId.GetOrCompute("RadialMenuGroupTitle_VoxelAlienGrass");

		/// <summary>
		/// Debug
		/// </summary>
		public static readonly MyStringId RadialMenuGroupTitle_VoxelDebug = MyStringId.GetOrCompute("RadialMenuGroupTitle_VoxelDebug");

		/// <summary>
		/// Grass
		/// </summary>
		public static readonly MyStringId RadialMenuGroupTitle_VoxelGrass = MyStringId.GetOrCompute("RadialMenuGroupTitle_VoxelGrass");

		/// <summary>
		/// Voxel hand
		/// </summary>
		public static readonly MyStringId RadialMenuGroupTitle_VoxelHandBrushes = MyStringId.GetOrCompute("RadialMenuGroupTitle_VoxelHandBrushes");

		/// <summary>
		/// Ores
		/// </summary>
		public static readonly MyStringId RadialMenuGroupTitle_VoxelOres = MyStringId.GetOrCompute("RadialMenuGroupTitle_VoxelOres");

		/// <summary>
		/// Ores 2
		/// </summary>
		public static readonly MyStringId RadialMenuGroupTitle_VoxelOres2 = MyStringId.GetOrCompute("RadialMenuGroupTitle_VoxelOres2");

		/// <summary>
		/// Rocks, solids, sands
		/// </summary>
		public static readonly MyStringId RadialMenuGroupTitle_VoxelRockSolidSand = MyStringId.GetOrCompute("RadialMenuGroupTitle_VoxelRockSolidSand");

		/// <summary>
		/// stones
		/// </summary>
		public static readonly MyStringId RadialMenuGroupTitle_VoxelStones = MyStringId.GetOrCompute("RadialMenuGroupTitle_VoxelStones");

		/// <summary>
		/// Use {0} / {1} to add/remove to/from Build planner
		/// </summary>
		public static readonly MyStringId BuildPlannerHint = MyStringId.GetOrCompute("BuildPlannerHint");

		/// <summary>
		/// Planets are not supported on this platform
		/// </summary>
		public static readonly MyStringId Notification_PlanetsNotSupported = MyStringId.GetOrCompute("Notification_PlanetsNotSupported");

		/// <summary>
		/// New planet of type {0} would exceed limits of this scenario
		/// </summary>
		public static readonly MyStringId Notification_PlanetNotWhitelisted = MyStringId.GetOrCompute("Notification_PlanetNotWhitelisted");

<<<<<<< HEAD
		/// <summary>
		/// World contains too many planet types and could not be loaded.
		/// </summary>
		public static readonly MyStringId Notification_TooManyPlanets = MyStringId.GetOrCompute("Notification_TooManyPlanets");

		/// <summary>
		/// World contains too many uncounted PCUs and may be be unstable.
		/// </summary>
		public static readonly MyStringId Notification_TooManyUncounterPCUWarning = MyStringId.GetOrCompute("Notification_TooManyUncounterPCUWarning");

		/// <summary>
		/// World contains too many uncounted PCUs and could not be loaded.
		/// </summary>
		public static readonly MyStringId Notification_TooManyUncounterPCUError = MyStringId.GetOrCompute("Notification_TooManyUncounterPCUError");

		/// <summary>
		/// Do you want to report this world?
		/// </summary>
		public static readonly MyStringId Notification_TooManyUncounterPCUReport = MyStringId.GetOrCompute("Notification_TooManyUncounterPCUReport");

		/// <summary>
		/// Not Available
		/// </summary>
=======
		public static readonly MyStringId Notification_TooManyPlanets = MyStringId.GetOrCompute("Notification_TooManyPlanets");

		public static readonly MyStringId Notification_TooManyUncounterPCUWarning = MyStringId.GetOrCompute("Notification_TooManyUncounterPCUWarning");

		public static readonly MyStringId Notification_TooManyUncounterPCUError = MyStringId.GetOrCompute("Notification_TooManyUncounterPCUError");

		public static readonly MyStringId Notification_TooManyUncounterPCUReport = MyStringId.GetOrCompute("Notification_TooManyUncounterPCUReport");

>>>>>>> d46cf8619665219cc163a7b28984ced59ed9470d
		public static readonly MyStringId Terminal_Factions_DataNotAvailable = MyStringId.GetOrCompute("Terminal_Factions_DataNotAvailable");

		/// <summary>
		/// Undiscovered
		/// </summary>
		public static readonly MyStringId Terminal_Factions_Unknown_Label = MyStringId.GetOrCompute("Terminal_Factions_Unknown_Label");

		/// <summary>
		/// ----
		/// </summary>
		public static readonly MyStringId Terminal_Factions_Unknown_Tag = MyStringId.GetOrCompute("Terminal_Factions_Unknown_Tag");

		/// <summary>
		/// Faction not discovered. Data is not available.
		/// </summary>
		public static readonly MyStringId Terminal_Factions_Unknown_Label_TTIP = MyStringId.GetOrCompute("Terminal_Factions_Unknown_Label_TTIP");

		/// <summary>
		/// Store
		/// </summary>
		public static readonly MyStringId ScreenCaptionStore = MyStringId.GetOrCompute("ScreenCaptionStore");

		/// <summary>
		/// Buy
		/// </summary>
		public static readonly MyStringId StoreScreenBuyHeader = MyStringId.GetOrCompute("StoreScreenBuyHeader");

		/// <summary>
		/// Contracts
		/// </summary>
		public static readonly MyStringId StoreScreenContractsHeader = MyStringId.GetOrCompute("StoreScreenContractsHeader");

		/// <summary>
		/// Sell
		/// </summary>
		public static readonly MyStringId StoreScreenSellHeader = MyStringId.GetOrCompute("StoreScreenSellHeader");

		/// <summary>
		/// Enables economy features.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettingsEconomy = MyStringId.GetOrCompute("ToolTipWorldSettingsEconomy");

<<<<<<< HEAD
		/// <summary>
		/// Enables automatic weather generation on planets.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettingsEnableWeatherSystem = MyStringId.GetOrCompute("ToolTipWorldSettingsEnableWeatherSystem");

		/// <summary>
		/// Enables aim assist for gamepad controllers.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettingsEnableGamepadAimAssist = MyStringId.GetOrCompute("ToolTipWorldSettingsEnableGamepadAimAssist");

		/// <summary>
		/// Enable economy
		/// </summary>
		public static readonly MyStringId WorldSettings_EnableEconomy = MyStringId.GetOrCompute("WorldSettings_EnableEconomy");

		/// <summary>
		/// Enable weather system
		/// </summary>
		public static readonly MyStringId WorldSettings_EnableWeatherSystem = MyStringId.GetOrCompute("WorldSettings_EnableWeatherSystem");

		/// <summary>
		/// Enable aim assist
		/// </summary>
		public static readonly MyStringId WorldSettings_EnableGamepadAimAssist = MyStringId.GetOrCompute("WorldSettings_EnableGamepadAimAssist");

		/// <summary>
		/// Come and browse our selection of the finest ships available to us. We deliver top quality ships made from the highest grade materials.
		/// </summary>
=======
		public static readonly MyStringId ToolTipWorldSettingsEnableWeatherSystem = MyStringId.GetOrCompute("ToolTipWorldSettingsEnableWeatherSystem");

		public static readonly MyStringId WorldSettings_EnableEconomy = MyStringId.GetOrCompute("WorldSettings_EnableEconomy");

		public static readonly MyStringId WorldSettings_EnableWeatherSystem = MyStringId.GetOrCompute("WorldSettings_EnableWeatherSystem");

>>>>>>> d46cf8619665219cc163a7b28984ced59ed9470d
		public static readonly MyStringId EconomyFaction_Description_Builder = MyStringId.GetOrCompute("EconomyFaction_Description_Builder");

		/// <summary>
		/// No. 1 supplier of high grade minerals and gases. Everything to fuel your industrial advancements. 
		/// </summary>
		public static readonly MyStringId EconomyFaction_Description_Miner = MyStringId.GetOrCompute("EconomyFaction_Description_Miner");

		/// <summary>
		/// If you can build with it, we sell it. If you can shoot with it, we sell that too. 
		/// </summary>
		public static readonly MyStringId EconomyFaction_Description_Trader = MyStringId.GetOrCompute("EconomyFaction_Description_Trader");

		/// <summary>
		/// The best choice for reliable ships of industrial grade. We offer the finest quality money can buy.
		/// </summary>
		public static readonly MyStringId EconomyFaction_Description_Builder0 = MyStringId.GetOrCompute("EconomyFaction_Description_Builder0");

		/// <summary>
		/// Top manufacturer of ships for the best prices. We offer excellent service that fit your needs.
		/// </summary>
		public static readonly MyStringId EconomyFaction_Description_Builder1 = MyStringId.GetOrCompute("EconomyFaction_Description_Builder1");

		/// <summary>
		/// Reliable, durable, Safe. These words mark our selection of our terrestrial and extraterrestrial vehicles. 
		/// </summary>
		public static readonly MyStringId EconomyFaction_Description_Builder2 = MyStringId.GetOrCompute("EconomyFaction_Description_Builder2");

		/// <summary>
		/// Cutting edge technologies bring you the best quality through our shipyards, delivering competitive advantage to you over your competitors. 
		/// </summary>
		public static readonly MyStringId EconomyFaction_Description_Builder3 = MyStringId.GetOrCompute("EconomyFaction_Description_Builder3");

		/// <summary>
		/// Number one producer of vehicles for industrial, military, mining and exploration aplications. 
		/// </summary>
		public static readonly MyStringId EconomyFaction_Description_Builder4 = MyStringId.GetOrCompute("EconomyFaction_Description_Builder4");

		/// <summary>
		/// For the highest grade of minerals and gases come visit us. 
		/// </summary>
		public static readonly MyStringId EconomyFaction_Description_Miner0 = MyStringId.GetOrCompute("EconomyFaction_Description_Miner0");

		/// <summary>
		/// We procure all manner of ores and gases, so you don't have to.
		/// </summary>
		public static readonly MyStringId EconomyFaction_Description_Miner1 = MyStringId.GetOrCompute("EconomyFaction_Description_Miner1");

		/// <summary>
		/// Finest ore and purest gases. Nothing but the best for our customers.
		/// </summary>
		public static readonly MyStringId EconomyFaction_Description_Miner2 = MyStringId.GetOrCompute("EconomyFaction_Description_Miner2");

		/// <summary>
		/// We offer every raw material the galaxy has to offer. Except water. No one can seem to find water.
		/// </summary>
		public static readonly MyStringId EconomyFaction_Description_Miner3 = MyStringId.GetOrCompute("EconomyFaction_Description_Miner3");

		/// <summary>
		/// Our industrial equipment and trained personnel bring you the finest quality ores and gases for the best prices.
		/// </summary>
		public static readonly MyStringId EconomyFaction_Description_Miner4 = MyStringId.GetOrCompute("EconomyFaction_Description_Miner4");

		/// <summary>
		/// You want it, we've got it. Top supplier of components, tools and gases.
		/// </summary>
		public static readonly MyStringId EconomyFaction_Description_Trader0 = MyStringId.GetOrCompute("EconomyFaction_Description_Trader0");

		/// <summary>
		/// Our partners deliver us the highest quality components, tools, gases and contracts. From the outer regions of space directly to you.
		/// </summary>
		public static readonly MyStringId EconomyFaction_Description_Trader1 = MyStringId.GetOrCompute("EconomyFaction_Description_Trader1");

		/// <summary>
		/// We deliver durable components and the best quality tools. Our services include fuel, oxygen and contracts from reliable partners. 
		/// </summary>
		public static readonly MyStringId EconomyFaction_Description_Trader2 = MyStringId.GetOrCompute("EconomyFaction_Description_Trader2");

		/// <summary>
		/// Components, Munitions, Tools, and Fuel. You name it. Become a partner for the best offers, we will make it worth your while.
		/// </summary>
		public static readonly MyStringId EconomyFaction_Description_Trader3 = MyStringId.GetOrCompute("EconomyFaction_Description_Trader3");

		/// <summary>
		/// We offer all the essentials for your space industrial advancements and more. 
		/// </summary>
		public static readonly MyStringId EconomyFaction_Description_Trader4 = MyStringId.GetOrCompute("EconomyFaction_Description_Trader4");

		/// <summary>
		/// Reputation:
		/// </summary>
		public static readonly MyStringId TerminalTab_Factions_Reputation = MyStringId.GetOrCompute("TerminalTab_Factions_Reputation");

		/// <summary>
		/// Accepted
		/// </summary>
		public static readonly MyStringId TradeScreenAccepted = MyStringId.GetOrCompute("TradeScreenAccepted");

		/// <summary>
		/// Cancel
		/// </summary>
		public static readonly MyStringId TradeScreenCancel = MyStringId.GetOrCompute("TradeScreenCancel");

		/// <summary>
		/// Not Accepted
		/// </summary>
		public static readonly MyStringId TradeScreenNotAccepted = MyStringId.GetOrCompute("TradeScreenNotAccepted");

		/// <summary>
		/// Offer Submitted
		/// </summary>
		public static readonly MyStringId TradeScreenOfferSubmited = MyStringId.GetOrCompute("TradeScreenOfferSubmited");

		/// <summary>
		/// Do you want to trade with {0}?
		/// </summary>
		public static readonly MyStringId TradeScreenPopupAcceptTrade = MyStringId.GetOrCompute("TradeScreenPopupAcceptTrade");

		/// <summary>
		/// Player is already trading
		/// </summary>
		public static readonly MyStringId TradeScreenPopupAlreadyTrading = MyStringId.GetOrCompute("TradeScreenPopupAlreadyTrading");

		/// <summary>
		/// Player canceled the trade.
		/// </summary>
		public static readonly MyStringId TradeScreenPopupCancel = MyStringId.GetOrCompute("TradeScreenPopupCancel");

		/// <summary>
		/// Player not available
		/// </summary>
		public static readonly MyStringId TradeScreenPopupDead = MyStringId.GetOrCompute("TradeScreenPopupDead");

		/// <summary>
		/// Something went wrong. Try again.
		/// </summary>
		public static readonly MyStringId TradeScreenPopupError = MyStringId.GetOrCompute("TradeScreenPopupError");

		/// <summary>
		/// Trading
		/// </summary>
		public static readonly MyStringId TradeScreenPopupLabel = MyStringId.GetOrCompute("TradeScreenPopupLabel");

		/// <summary>
		/// Player Offline
		/// </summary>
		public static readonly MyStringId TradeScreenPopupOffline = MyStringId.GetOrCompute("TradeScreenPopupOffline");

		/// <summary>
		/// Discovered
		/// </summary>
		public static readonly MyStringId Faction_Filter_Discovered = MyStringId.GetOrCompute("Faction_Filter_Discovered");

		/// <summary>
		/// Players Factions
		/// </summary>
		public static readonly MyStringId Faction_Filter_PlayersFactions = MyStringId.GetOrCompute("Faction_Filter_PlayersFactions");

		/// <summary>
		/// Unknown
		/// </summary>
		public static readonly MyStringId Faction_Filter_Unknown = MyStringId.GetOrCompute("Faction_Filter_Unknown");

		/// <summary>
		/// Lobby Type:
		/// </summary>
		public static readonly MyStringId PlayersScreen_LobbyType = MyStringId.GetOrCompute("PlayersScreen_LobbyType");

		/// <summary>
		/// Trade
		/// </summary>
		public static readonly MyStringId PlayersScreen_TradeBtn = MyStringId.GetOrCompute("PlayersScreen_TradeBtn");

		/// <summary>
		/// Initiate trade with player. Be sure that player is in range of 5 meters from you.
		/// </summary>
		public static readonly MyStringId PlayersScreen_TradeBtn_TTP = MyStringId.GetOrCompute("PlayersScreen_TradeBtn_TTP");

		/// <summary>
		/// Waiting...
		/// </summary>
		public static readonly MyStringId PlayersScreen_TradeBtn_Waiting = MyStringId.GetOrCompute("PlayersScreen_TradeBtn_Waiting");

<<<<<<< HEAD
		/// <summary>
		/// General
		/// </summary>
		public static readonly MyStringId ScreenOptionsGame_GeneralTab = MyStringId.GetOrCompute("ScreenOptionsGame_GeneralTab");

		/// <summary>
		/// UI
		/// </summary>
		public static readonly MyStringId ScreenOptionsGame_UITab = MyStringId.GetOrCompute("ScreenOptionsGame_UITab");

		/// <summary>
		/// Transparency:
		/// </summary>
		public static readonly MyStringId ScreenOptionsGame_CrosshairTransparency = MyStringId.GetOrCompute("ScreenOptionsGame_CrosshairTransparency");

		/// <summary>
		/// Select hit type
		/// </summary>
		public static readonly MyStringId ScreenOptionsGame_HitIndicatorLabel = MyStringId.GetOrCompute("ScreenOptionsGame_HitIndicatorLabel");

		/// <summary>
		/// You can setup crosshair look for each hit types
		/// </summary>
		public static readonly MyStringId ScreenOptionsGame_HitIndicatorTooltip = MyStringId.GetOrCompute("ScreenOptionsGame_HitIndicatorTooltip");

		/// <summary>
		/// Enemy
		/// </summary>
		public static readonly MyStringId ScreenOptionsGame_HitIndicator_Character = MyStringId.GetOrCompute("ScreenOptionsGame_HitIndicator_Character");

		/// <summary>
		/// Friendly
		/// </summary>
		public static readonly MyStringId ScreenOptionsGame_HitIndicator_Friendly = MyStringId.GetOrCompute("ScreenOptionsGame_HitIndicator_Friendly");

		/// <summary>
		/// Headshot
		/// </summary>
		public static readonly MyStringId ScreenOptionsGame_HitIndicator_Headshot = MyStringId.GetOrCompute("ScreenOptionsGame_HitIndicator_Headshot");

		/// <summary>
		/// Kill
		/// </summary>
		public static readonly MyStringId ScreenOptionsGame_HitIndicator_Kill = MyStringId.GetOrCompute("ScreenOptionsGame_HitIndicator_Kill");

		/// <summary>
		/// Grid
		/// </summary>
		public static readonly MyStringId ScreenOptionsGame_HitIndicator_Grid = MyStringId.GetOrCompute("ScreenOptionsGame_HitIndicator_Grid");

		/// <summary>
		/// Crosshair Color
		/// </summary>
		public static readonly MyStringId ScreenOptionsGame_CrosshairColor = MyStringId.GetOrCompute("ScreenOptionsGame_CrosshairColor");

		/// <summary>
		/// Enable Trading
		/// </summary>
=======
		public static readonly MyStringId ScreenOptionsGame_GeneralTab = MyStringId.GetOrCompute("ScreenOptionsGame_GeneralTab");

		public static readonly MyStringId ScreenOptionsGame_UITab = MyStringId.GetOrCompute("ScreenOptionsGame_UITab");

		public static readonly MyStringId ScreenOptionsGame_CrosshairTransparency = MyStringId.GetOrCompute("ScreenOptionsGame_CrosshairTransparency");

		public static readonly MyStringId ScreenOptionsGame_HitIndicatorLabel = MyStringId.GetOrCompute("ScreenOptionsGame_HitIndicatorLabel");

		public static readonly MyStringId ScreenOptionsGame_HitIndicatorTooltip = MyStringId.GetOrCompute("ScreenOptionsGame_HitIndicatorTooltip");

		public static readonly MyStringId ScreenOptionsGame_HitIndicator_Character = MyStringId.GetOrCompute("ScreenOptionsGame_HitIndicator_Character");

		public static readonly MyStringId ScreenOptionsGame_HitIndicator_Friendly = MyStringId.GetOrCompute("ScreenOptionsGame_HitIndicator_Friendly");

		public static readonly MyStringId ScreenOptionsGame_HitIndicator_Headshot = MyStringId.GetOrCompute("ScreenOptionsGame_HitIndicator_Headshot");

		public static readonly MyStringId ScreenOptionsGame_HitIndicator_Kill = MyStringId.GetOrCompute("ScreenOptionsGame_HitIndicator_Kill");

		public static readonly MyStringId ScreenOptionsGame_HitIndicator_Grid = MyStringId.GetOrCompute("ScreenOptionsGame_HitIndicator_Grid");

		public static readonly MyStringId ScreenOptionsGame_CrosshairColor = MyStringId.GetOrCompute("ScreenOptionsGame_CrosshairColor");

>>>>>>> d46cf8619665219cc163a7b28984ced59ed9470d
		public static readonly MyStringId GameOptions_EnableTrading = MyStringId.GetOrCompute("GameOptions_EnableTrading");

		/// <summary>
		/// Enables trading with other players in multiplayer games. If disabled all trade requests are ignored
		/// </summary>
		public static readonly MyStringId GameOptions_EnableTrading_TTIP = MyStringId.GetOrCompute("GameOptions_EnableTrading_TTIP");

		/// <summary>
		/// Package
		/// </summary>
		public static readonly MyStringId DisplayName_Item_Package = MyStringId.GetOrCompute("DisplayName_Item_Package");

		/// <summary>
		/// You discovered {0}
		/// </summary>
		public static readonly MyStringId Faction_Discovered_Info = MyStringId.GetOrCompute("Faction_Discovered_Info");

		/// <summary>
		/// Projects safe zone around itself. Safe zone can be used to protect your assets
		/// </summary>
		public static readonly MyStringId Description_SafeZone = MyStringId.GetOrCompute("Description_SafeZone");

		/// <summary>
		/// Safe Zone
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SafeZone = MyStringId.GetOrCompute("DisplayName_Block_SafeZone");

		/// <summary>
		/// Contracts
		/// </summary>
		public static readonly MyStringId ScreenCaptionContracts = MyStringId.GetOrCompute("ScreenCaptionContracts");

		/// <summary>
		/// Press {0} to open store
		/// </summary>
		public static readonly MyStringId NotificationHintPressToOpenStore = MyStringId.GetOrCompute("NotificationHintPressToOpenStore");

		/// <summary>
		/// Block for contract management
		/// </summary>
		public static readonly MyStringId Description_ContractBlock = MyStringId.GetOrCompute("Description_ContractBlock");

		/// <summary>
		/// Contracts
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Contract = MyStringId.GetOrCompute("DisplayName_Block_Contract");

		/// <summary>
		/// Press {0} to open contract
		/// </summary>
		public static readonly MyStringId NotificationHintPressToOpenContract = MyStringId.GetOrCompute("NotificationHintPressToOpenContract");

		/// <summary>
		/// Economy Stations can appear anywhere in space, on moons, planets and in orbit. These stations offer trade and contracts depending on their respective factions. 
		/// </summary>
		public static readonly MyStringId IngameHelp_EconomyStation_Desc = MyStringId.GetOrCompute("IngameHelp_EconomyStation_Desc");

		/// <summary>
		/// Visit the nearest station
		/// </summary>
		public static readonly MyStringId IngameHelp_EconomyStation_DetailDesc = MyStringId.GetOrCompute("IngameHelp_EconomyStation_DetailDesc");

		/// <summary>
		/// Good.bot: Economy Stations
		/// </summary>
		public static readonly MyStringId IngameHelp_EconomyStation_Title = MyStringId.GetOrCompute("IngameHelp_EconomyStation_Title");

		/// <summary>
		/// *** Description of Economy Deluxe DLC ***
		/// </summary>
		public static readonly MyStringId Description_DLC_EconomyExpansion = MyStringId.GetOrCompute("Description_DLC_EconomyExpansion");

		/// <summary>
		/// Economy Deluxe
		/// </summary>
		public static readonly MyStringId DisplayName_DLC_EconomyExpansion = MyStringId.GetOrCompute("DisplayName_DLC_EconomyExpansion");

		/// <summary>
		/// Economy Deluxe is now available!
		/// </summary>
		public static readonly MyStringId ScreenMainMenu_EconomyDlcLine1 = MyStringId.GetOrCompute("ScreenMainMenu_EconomyDlcLine1");

		/// <summary>
		/// Grab it on {0}!
		/// </summary>
		public static readonly MyStringId ScreenMainMenu_EconomyDlcLine2 = MyStringId.GetOrCompute("ScreenMainMenu_EconomyDlcLine2");

<<<<<<< HEAD
		/// <summary>
		/// {0} is victorious!
		/// </summary>
		public static readonly MyStringId ScreenVictory_Title = MyStringId.GetOrCompute("ScreenVictory_Title");

		/// <summary>
		/// Abandon failed
		/// </summary>
=======
		public static readonly MyStringId ScreenVictory_Title = MyStringId.GetOrCompute("ScreenVictory_Title");

>>>>>>> d46cf8619665219cc163a7b28984ced59ed9470d
		public static readonly MyStringId Contracts_Error_Caption_Abandon = MyStringId.GetOrCompute("Contracts_Error_Caption_Abandon");

		/// <summary>
		/// Accept failed
		/// </summary>
		public static readonly MyStringId Contracts_Error_Caption_Activation = MyStringId.GetOrCompute("Contracts_Error_Caption_Activation");

		/// <summary>
		/// Cannot accept
		/// </summary>
		public static readonly MyStringId Contracts_Error_Caption_ActivationConditionNotMet = MyStringId.GetOrCompute("Contracts_Error_Caption_ActivationConditionNotMet");

		/// <summary>
		/// Cannot accept
		/// </summary>
		public static readonly MyStringId Contracts_Error_Caption_ActivationConditionNotMet_InsufficientFunds = MyStringId.GetOrCompute("Contracts_Error_Caption_ActivationConditionNotMet_InsufficientFunds");

		/// <summary>
		/// Cannot accept
		/// </summary>
		public static readonly MyStringId Contracts_Error_Caption_ActivationConditionNotMet_InsufficientSpace = MyStringId.GetOrCompute("Contracts_Error_Caption_ActivationConditionNotMet_InsufficientSpace");

		/// <summary>
		/// Finish failed
		/// </summary>
		public static readonly MyStringId Contracts_Error_Caption_Finish = MyStringId.GetOrCompute("Contracts_Error_Caption_Finish");

		/// <summary>
		/// Contract finishing failed
		/// </summary>
		public static readonly MyStringId Contracts_Error_Caption_FinishCondition_IncorrectGrid = MyStringId.GetOrCompute("Contracts_Error_Caption_FinishCondition_IncorrectGrid");

		/// <summary>
		/// Contract finishing failed
		/// </summary>
		public static readonly MyStringId Contracts_Error_Caption_FinishCondition_MissingPackage = MyStringId.GetOrCompute("Contracts_Error_Caption_FinishCondition_MissingPackage");

		/// <summary>
		/// Contract finishing failed
		/// </summary>
		public static readonly MyStringId Contracts_Error_Caption_FinishingCondition = MyStringId.GetOrCompute("Contracts_Error_Caption_FinishingCondition");

		/// <summary>
		/// Contract cannot be abandoned as it has been deleted or finished by someone else.
		/// </summary>
		public static readonly MyStringId Contracts_Error_Text_Abandon = MyStringId.GetOrCompute("Contracts_Error_Text_Abandon");

		/// <summary>
		/// Contract cannot be accepted because it has been deleted or already accepted by someone else.
		/// </summary>
		public static readonly MyStringId Contracts_Error_Text_Activation = MyStringId.GetOrCompute("Contracts_Error_Text_Activation");

		/// <summary>
		/// You do not meet requirements to accept this contract.
		/// </summary>
		public static readonly MyStringId Contracts_Error_Text_ActivationconditionNotMet = MyStringId.GetOrCompute("Contracts_Error_Text_ActivationconditionNotMet");

		/// <summary>
		/// You do not meet requirements to accept this contract. You have not enough money.
		/// </summary>
		public static readonly MyStringId Contracts_Error_Text_ActivationConditionNotMet_InsufficientFunds = MyStringId.GetOrCompute("Contracts_Error_Text_ActivationConditionNotMet_InsufficientFunds");

		/// <summary>
		/// You do not meet requirements to accept this contract. You have not enough space in inventory.
		/// </summary>
		public static readonly MyStringId Contracts_Error_Text_ActivationConditionNotMet_InsufficientSpace = MyStringId.GetOrCompute("Contracts_Error_Text_ActivationConditionNotMet_InsufficientSpace");

		/// <summary>
		/// Contract cannot be finished as it has been deleted or already finished by someone else.
		/// </summary>
		public static readonly MyStringId Contracts_Error_Text_Finish = MyStringId.GetOrCompute("Contracts_Error_Text_Finish");

		/// <summary>
		/// Contract could not be finished as selected ship was invalid.
		/// </summary>
		public static readonly MyStringId Contracts_Error_Text_FinishCondition_IncorrectGrid = MyStringId.GetOrCompute("Contracts_Error_Text_FinishCondition_IncorrectGrid");

		/// <summary>
		/// Contract could not be finished. You must carry the package in your inventory.
		/// </summary>
		public static readonly MyStringId Contracts_Error_Text_FinishCondition_MissingPackage = MyStringId.GetOrCompute("Contracts_Error_Text_FinishCondition_MissingPackage");

		/// <summary>
		/// Contract could not be finished.
		/// </summary>
		public static readonly MyStringId Contracts_Error_Text_FinishingCondition = MyStringId.GetOrCompute("Contracts_Error_Text_FinishingCondition");

		/// <summary>
		/// Cannot Access
		/// </summary>
		public static readonly MyStringId Contracts_Error_Caption_NoAccess = MyStringId.GetOrCompute("Contracts_Error_Caption_NoAccess");

		/// <summary>
		/// You don't have access to this block.
		/// </summary>
		public static readonly MyStringId Contracts_Error_Text_NoAccess = MyStringId.GetOrCompute("Contracts_Error_Text_NoAccess");

		/// <summary>
		/// Contract finishing failed
		/// </summary>
		public static readonly MyStringId Contracts_Error_Caption_FinishCondition_NotEnoughItems = MyStringId.GetOrCompute("Contracts_Error_Caption_FinishCondition_NotEnoughItems");

		/// <summary>
		/// Contract could not be finished. Selected ship does not contain enough items.
		/// </summary>
		public static readonly MyStringId Contracts_Error_Text_FinishCondition_NotEnoughItems = MyStringId.GetOrCompute("Contracts_Error_Text_FinishCondition_NotEnoughItems");

		/// <summary>
		/// Transaction Failed
		/// </summary>
		public static readonly MyStringId StoreBuy_Error_Caption_ItemNotFound = MyStringId.GetOrCompute("StoreBuy_Error_Caption_ItemNotFound");

		/// <summary>
		/// Transaction Failed
		/// </summary>
		public static readonly MyStringId StoreBuy_Error_Caption_ItemsTimeout = MyStringId.GetOrCompute("StoreBuy_Error_Caption_ItemsTimeout");

		/// <summary>
		/// Transaction Failed
		/// </summary>
		public static readonly MyStringId StoreBuy_Error_Caption_NotEnoughMoney = MyStringId.GetOrCompute("StoreBuy_Error_Caption_NotEnoughMoney");

		/// <summary>
		/// Transaction Failed
		/// </summary>
		public static readonly MyStringId StoreBuy_Error_Caption_WrongAmount = MyStringId.GetOrCompute("StoreBuy_Error_Caption_WrongAmount");

		/// <summary>
		/// Item no longer exists.
		/// </summary>
		public static readonly MyStringId StoreBuy_Error_Text_ItemNotFound = MyStringId.GetOrCompute("StoreBuy_Error_Text_ItemNotFound");

		/// <summary>
		/// Store list was updated, because it was not up to date.
		/// </summary>
		public static readonly MyStringId StoreBuy_Error_Text_ItemsTimeout = MyStringId.GetOrCompute("StoreBuy_Error_Text_ItemsTimeout");

		/// <summary>
		/// Transaction failed. You don't have enough money.
		/// </summary>
		public static readonly MyStringId StoreBuy_Error_Text_NotEnoughMoney = MyStringId.GetOrCompute("StoreBuy_Error_Text_NotEnoughMoney");

		/// <summary>
		/// You have entered wrong amount.
		/// </summary>
		public static readonly MyStringId StoreBuy_Error_Text_WrongAmount = MyStringId.GetOrCompute("StoreBuy_Error_Text_WrongAmount");

		/// <summary>
		/// Transaction Failed
		/// </summary>
		public static readonly MyStringId StoreBuy_Error_Caption_NotEnoughInventorySpace = MyStringId.GetOrCompute("StoreBuy_Error_Caption_NotEnoughInventorySpace");

		/// <summary>
		/// There is not enough space in selected inventory.
		/// </summary>
		public static readonly MyStringId StoreBuy_Error_Text_NotEnoughInventorySpace = MyStringId.GetOrCompute("StoreBuy_Error_Text_NotEnoughInventorySpace");

		/// <summary>
		/// Transaction Failed
		/// </summary>
		public static readonly MyStringId StoreBuy_Error_Caption_WrongInventory = MyStringId.GetOrCompute("StoreBuy_Error_Caption_WrongInventory");

		/// <summary>
		/// Selected inventory can not be used to buy this item.
		/// </summary>
		public static readonly MyStringId StoreBuy_Error_Text_WrongInventory = MyStringId.GetOrCompute("StoreBuy_Error_Text_WrongInventory");

		/// <summary>
		/// Abandon
		/// </summary>
		public static readonly MyStringId ContractScreen_Button_Abandon = MyStringId.GetOrCompute("ContractScreen_Button_Abandon");

		/// <summary>
		/// Accept
		/// </summary>
		public static readonly MyStringId ContractScreen_Button_Accept = MyStringId.GetOrCompute("ContractScreen_Button_Accept");

		/// <summary>
		/// Confirm
		/// </summary>
		public static readonly MyStringId ContractScreen_Button_Confirm = MyStringId.GetOrCompute("ContractScreen_Button_Confirm");

		/// <summary>
		/// Finish
		/// </summary>
		public static readonly MyStringId ContractScreen_Button_Finish = MyStringId.GetOrCompute("ContractScreen_Button_Finish");

		/// <summary>
		/// Refresh
		/// </summary>
		public static readonly MyStringId ContractScreen_Button_Refresh = MyStringId.GetOrCompute("ContractScreen_Button_Refresh");

		/// <summary>
		/// Icon
		/// </summary>
		public static readonly MyStringId ContractScreen_Column_Icon = MyStringId.GetOrCompute("ContractScreen_Column_Icon");

		/// <summary>
		/// Name
		/// </summary>
		public static readonly MyStringId ContractScreen_Column_Name = MyStringId.GetOrCompute("ContractScreen_Column_Name");

		/// <summary>
		/// SC reward
		/// </summary>
		public static readonly MyStringId ContractScreen_Column_RewardCurrency = MyStringId.GetOrCompute("ContractScreen_Column_RewardCurrency");

		/// <summary>
		/// Reputation reward
		/// </summary>
		public static readonly MyStringId ContractScreen_Column_RewardReputation = MyStringId.GetOrCompute("ContractScreen_Column_RewardReputation");

		/// <summary>
		/// Time limit
		/// </summary>
		public static readonly MyStringId ContractScreen_Column_TimeLimit = MyStringId.GetOrCompute("ContractScreen_Column_TimeLimit");

		/// <summary>
		/// Deliver Items {0}
		/// </summary>
		public static readonly MyStringId ContractScreen_Condition_Name_DeliverItem = MyStringId.GetOrCompute("ContractScreen_Condition_Name_DeliverItem");

		/// <summary>
		/// Deliver Package {0}
		/// </summary>
		public static readonly MyStringId ContractScreen_Condition_Name_DeliverPackage = MyStringId.GetOrCompute("ContractScreen_Condition_Name_DeliverPackage");

		/// <summary>
		/// Hauling Contract ({0})
		/// </summary>
		public static readonly MyStringId ContractScreen_Contract_Name_Deliver_WithId = MyStringId.GetOrCompute("ContractScreen_Contract_Name_Deliver_WithId");

		/// <summary>
		/// Escort Contract ({0})
		/// </summary>
		public static readonly MyStringId ContractScreen_Contract_Name_Escort_WithId = MyStringId.GetOrCompute("ContractScreen_Contract_Name_Escort_WithId");

		/// <summary>
		/// Search Contract ({0})
		/// </summary>
		public static readonly MyStringId ContractScreen_Contract_Name_Find_WithId = MyStringId.GetOrCompute("ContractScreen_Contract_Name_Find_WithId");

		/// <summary>
		/// Bounty Contract ({0})
		/// </summary>
		public static readonly MyStringId ContractScreen_Contract_Name_Hunt_WithId = MyStringId.GetOrCompute("ContractScreen_Contract_Name_Hunt_WithId");

		/// <summary>
		/// Acquisition Contract ({0})
		/// </summary>
		public static readonly MyStringId ContractScreen_Contract_Name_ObtainAndDeliver_WithId = MyStringId.GetOrCompute("ContractScreen_Contract_Name_ObtainAndDeliver_WithId");

		/// <summary>
		/// None
		/// </summary>
		public static readonly MyStringId ContractScreen_Formating_Deposit_None = MyStringId.GetOrCompute("ContractScreen_Formating_Deposit_None");

		/// <summary>
		/// None
		/// </summary>
		public static readonly MyStringId ContractScreen_Formating_RepPenalty_None = MyStringId.GetOrCompute("ContractScreen_Formating_RepPenalty_None");

		/// <summary>
		/// {0} d  {1:00} h  {2:00} min
		/// </summary>
		public static readonly MyStringId ContractScreen_Formating_TimeLimit_Days = MyStringId.GetOrCompute("ContractScreen_Formating_TimeLimit_Days");

		/// <summary>
		/// {0:00} h  {1:00} min
		/// </summary>
		public static readonly MyStringId ContractScreen_Formating_TimeLimit_Hours = MyStringId.GetOrCompute("ContractScreen_Formating_TimeLimit_Hours");

		/// <summary>
		/// {0:00} min
		/// </summary>
		public static readonly MyStringId ContractScreen_Formating_TimeLimit_Mins = MyStringId.GetOrCompute("ContractScreen_Formating_TimeLimit_Mins");

		/// <summary>
		/// No limit
		/// </summary>
		public static readonly MyStringId ContractScreen_Formating_TimeLimit_No = MyStringId.GetOrCompute("ContractScreen_Formating_TimeLimit_No");

		/// <summary>
		/// Not started
		/// </summary>
		public static readonly MyStringId ContractScreen_Formating_TimeLimit_NotStarted = MyStringId.GetOrCompute("ContractScreen_Formating_TimeLimit_NotStarted");

		/// <summary>
		/// {0:00} s
		/// </summary>
		public static readonly MyStringId ContractScreen_Formating_TimeLimit_Secs = MyStringId.GetOrCompute("ContractScreen_Formating_TimeLimit_Secs");

		/// <summary>
		/// Time's out
		/// </summary>
		public static readonly MyStringId ContractScreen_Formating_TimeLimit_TimeOut = MyStringId.GetOrCompute("ContractScreen_Formating_TimeLimit_TimeOut");

		/// <summary>
		/// Vehicle/Character inventory selection
		/// </summary>
		public static readonly MyStringId ContractScreen_GridSelection_Caption = MyStringId.GetOrCompute("ContractScreen_GridSelection_Caption");

		/// <summary>
		/// Select vehicle or character whose inventory contains items for this contract. Items will be removed from inventories of the selected one. You may select only yourself or vehicles you own.
		/// </summary>
		public static readonly MyStringId ContractScreen_GridSelection_Text = MyStringId.GetOrCompute("ContractScreen_GridSelection_Text");

		/// <summary>
		/// Accepted Contracts
		/// </summary>
		public static readonly MyStringId ContractScreen_Tab_AcceptedContracts = MyStringId.GetOrCompute("ContractScreen_Tab_AcceptedContracts");

		/// <summary>
		/// Administration
		/// </summary>
		public static readonly MyStringId ContractScreen_Tab_Administration = MyStringId.GetOrCompute("ContractScreen_Tab_Administration");

		/// <summary>
		/// Available Contracts
		/// </summary>
		public static readonly MyStringId ContractScreen_Tab_AvailableContracts = MyStringId.GetOrCompute("ContractScreen_Tab_AvailableContracts");

		/// <summary>
		/// Payment: 
		/// </summary>
		public static readonly MyStringId ContractScreen_Tooltip_Currency = MyStringId.GetOrCompute("ContractScreen_Tooltip_Currency");

		/// <summary>
		/// Duration: 
		/// </summary>
		public static readonly MyStringId ContractScreen_Tooltip_Duration = MyStringId.GetOrCompute("ContractScreen_Tooltip_Duration");

		/// <summary>
		/// Fail reputation penalty: 
		/// </summary>
		public static readonly MyStringId ContractScreen_Tooltip_FailReputationPenalty = MyStringId.GetOrCompute("ContractScreen_Tooltip_FailReputationPenalty");

		/// <summary>
		/// Collateral:
		/// </summary>
		public static readonly MyStringId ContractScreen_Tooltip_InitialDeposit = MyStringId.GetOrCompute("ContractScreen_Tooltip_InitialDeposit");

		/// <summary>
		/// Name: 
		/// </summary>
		public static readonly MyStringId ContractScreen_Tooltip_Name = MyStringId.GetOrCompute("ContractScreen_Tooltip_Name");

		/// <summary>
		/// Reputation reward: 
		/// </summary>
		public static readonly MyStringId ContractScreen_Tooltip_Reputation = MyStringId.GetOrCompute("ContractScreen_Tooltip_Reputation");

		/// <summary>
		/// Cannot accept
		/// </summary>
		public static readonly MyStringId Contracts_Error_Caption_ActivationConditionNotMet_ContractLimitReached = MyStringId.GetOrCompute("Contracts_Error_Caption_ActivationConditionNotMet_ContractLimitReached");

		/// <summary>
		/// You have too many contracts. Finish or abandon some before you can accept another.
		/// </summary>
		public static readonly MyStringId Contracts_Error_Text_ActivationConditionNotMet_ContractLimitReached = MyStringId.GetOrCompute("Contracts_Error_Text_ActivationConditionNotMet_ContractLimitReached");

		/// <summary>
		/// Contract failed.
		/// </summary>
		public static readonly MyStringId ContractSystem_Notifications_ContractFailed = MyStringId.GetOrCompute("ContractSystem_Notifications_ContractFailed");

		/// <summary>
		/// Contract was successfully finished.
		/// </summary>
		public static readonly MyStringId ContractSystem_Notifications_ContractSuccess = MyStringId.GetOrCompute("ContractSystem_Notifications_ContractSuccess");

		/// <summary>
		/// Cannot accept
		/// </summary>
		public static readonly MyStringId Contracts_Error_Caption_ActivationConditionNotMet_TargetOffline = MyStringId.GetOrCompute("Contracts_Error_Caption_ActivationConditionNotMet_TargetOffline");

		/// <summary>
		/// You cannot accept this contract as target is currently not online.
		/// </summary>
		public static readonly MyStringId Contracts_Error_Text_ActivationConditionNotMet_TargetOffline = MyStringId.GetOrCompute("Contracts_Error_Text_ActivationConditionNotMet_TargetOffline");

		/// <summary>
		/// Transaction Failed
		/// </summary>
		public static readonly MyStringId StoreSell_Error_Caption_NotEnoughAmount = MyStringId.GetOrCompute("StoreSell_Error_Caption_NotEnoughAmount");

		/// <summary>
		/// Transaction Failed
		/// </summary>
		public static readonly MyStringId StoreSell_Error_Caption_WrongAmount = MyStringId.GetOrCompute("StoreSell_Error_Caption_WrongAmount");

		/// <summary>
		/// You don't have specified amount of that item.
		/// </summary>
		public static readonly MyStringId StoreSell_Error_Text_NotEnoughAmount = MyStringId.GetOrCompute("StoreSell_Error_Text_NotEnoughAmount");

		/// <summary>
		/// You are trying to sell more than current amount of the store item.
		/// </summary>
		public static readonly MyStringId StoreSell_Error_Text_WrongAmount = MyStringId.GetOrCompute("StoreSell_Error_Text_WrongAmount");

		/// <summary>
		/// Administration
		/// </summary>
		public static readonly MyStringId StoreAdministration = MyStringId.GetOrCompute("StoreAdministration");

		/// <summary>
		/// Amount
		/// </summary>
		public static readonly MyStringId StoreBlock_Column_Amount = MyStringId.GetOrCompute("StoreBlock_Column_Amount");

		/// <summary>
		/// Name
		/// </summary>
		public static readonly MyStringId StoreBlock_Column_Name = MyStringId.GetOrCompute("StoreBlock_Column_Name");

		/// <summary>
		/// Price per Unit
		/// </summary>
		public static readonly MyStringId StoreBlock_Column_PricePerUnit = MyStringId.GetOrCompute("StoreBlock_Column_PricePerUnit");

		/// <summary>
		/// Total Price
		/// </summary>
		public static readonly MyStringId StoreBlock_Column_TotalPrice = MyStringId.GetOrCompute("StoreBlock_Column_TotalPrice");

		/// <summary>
		/// Cancel
		/// </summary>
		public static readonly MyStringId ButtonEditFactionBanner_Cancel = MyStringId.GetOrCompute("ButtonEditFactionBanner_Cancel");

		/// <summary>
		/// Ok
		/// </summary>
		public static readonly MyStringId ButtonEditFactionBanner_OK = MyStringId.GetOrCompute("ButtonEditFactionBanner_OK");

		/// <summary>
		/// Edit logo
		/// </summary>
		public static readonly MyStringId ScreenCaptionEditFaction = MyStringId.GetOrCompute("ScreenCaptionEditFaction");

		/// <summary>
		/// Transaction Failed
		/// </summary>
		public static readonly MyStringId StoreBuy_Error_Caption_FreePositionNotFound = MyStringId.GetOrCompute("StoreBuy_Error_Caption_FreePositionNotFound");

		/// <summary>
		/// Transaction Failed
		/// </summary>
		public static readonly MyStringId StoreBuy_Error_Caption_SpawnFailed = MyStringId.GetOrCompute("StoreBuy_Error_Caption_SpawnFailed");

		/// <summary>
		/// There is not enough free space around the station to spawn the vehicle.
		/// </summary>
		public static readonly MyStringId StoreBuy_Error_Text_FreePositionNotFound = MyStringId.GetOrCompute("StoreBuy_Error_Text_FreePositionNotFound");

		/// <summary>
		/// Vehicle was not unable to spawn.
		/// </summary>
		public static readonly MyStringId StoreBuy_Error_Text_SpawnFailed = MyStringId.GetOrCompute("StoreBuy_Error_Text_SpawnFailed");

		/// <summary>
		/// {0} - Station
		/// </summary>
		public static readonly MyStringId Datapad_GPS_Data = MyStringId.GetOrCompute("Datapad_GPS_Data");

		/// <summary>
		/// GPS {0} - Station
		/// </summary>
		public static readonly MyStringId Datapad_GPS_Name = MyStringId.GetOrCompute("Datapad_GPS_Name");

		/// <summary>
		/// Hue:
		/// </summary>
		public static readonly MyStringId EditFaction_HueSliderText = MyStringId.GetOrCompute("EditFaction_HueSliderText");

		/// <summary>
		/// Saturation:
		/// </summary>
		public static readonly MyStringId EditFaction_SaturationSliderText = MyStringId.GetOrCompute("EditFaction_SaturationSliderText");

		/// <summary>
		/// Value:
		/// </summary>
		public static readonly MyStringId EditFaction_ValueSliderText = MyStringId.GetOrCompute("EditFaction_ValueSliderText");

		/// <summary>
		/// Money:
		/// </summary>
		public static readonly MyStringId TradeScreenMoney = MyStringId.GetOrCompute("TradeScreenMoney");

		/// <summary>
		/// Offer State:
		/// </summary>
		public static readonly MyStringId TradeScreenOfferState = MyStringId.GetOrCompute("TradeScreenOfferState");

		/// <summary>
		/// PCU:
		/// </summary>
		public static readonly MyStringId TradeScreenPcu = MyStringId.GetOrCompute("TradeScreenPcu");

		/// <summary>
		/// Contract Accepted
		/// </summary>
		public static readonly MyStringId Contracts_Accepted_Caption = MyStringId.GetOrCompute("Contracts_Accepted_Caption");

		/// <summary>
		/// By accepting this contract you are bound to fulfill all conditions of this contract in timely manner. Failing to do so may lead to negative feedback and loss of assets.
		/// </summary>
		public static readonly MyStringId Contracts_Accepted_Text = MyStringId.GetOrCompute("Contracts_Accepted_Text");

		/// <summary>
		/// Contract Completed
		/// </summary>
		public static readonly MyStringId Contracts_Completed_Caption = MyStringId.GetOrCompute("Contracts_Completed_Caption");

		/// <summary>
		/// Thanks for doing the job. Here is your reward: Reputation: {0} Payment: {1}
		/// </summary>
		public static readonly MyStringId Contracts_Completed_Text = MyStringId.GetOrCompute("Contracts_Completed_Text");

		/// <summary>
		/// All inventories
		/// </summary>
		public static readonly MyStringId InventorySelection_All = MyStringId.GetOrCompute("InventorySelection_All");

		/// <summary>
		/// Character inventory
		/// </summary>
		public static readonly MyStringId InventorySelection_Character = MyStringId.GetOrCompute("InventorySelection_Character");

		/// <summary>
		/// Distance:
		/// </summary>
		public static readonly MyStringId ContractScreen_Deliver_Distance = MyStringId.GetOrCompute("ContractScreen_Deliver_Distance");

		/// <summary>
		/// Target:
		/// </summary>
		public static readonly MyStringId ContractScreen_Hunt_Target = MyStringId.GetOrCompute("ContractScreen_Hunt_Target");

		/// <summary>
		/// Amount:
		/// </summary>
		public static readonly MyStringId ContractScreen_ObtainDeliver_ItemAmount = MyStringId.GetOrCompute("ContractScreen_ObtainDeliver_ItemAmount");

		/// <summary>
		/// Reputation:
		/// </summary>
		public static readonly MyStringId ContractScreen_RepChange_Hint = MyStringId.GetOrCompute("ContractScreen_RepChange_Hint");

		/// <summary>
		/// A priority package is to be delivered to a client of us and we are looking for the right person for the job. You will pay a mandatory collateral upon accepting this contract. Failing to complete the contract within the time limit will result our client being quite unpleased with our services and your collateral will be lost.  We are sure you are up to the task.
		/// </summary>
		public static readonly MyStringId ContractScreen_Deliver_Description_0 = MyStringId.GetOrCompute("ContractScreen_Deliver_Description_0");

		/// <summary>
		/// One of our cargo ship operators reported potential threats and is unable to proceed.  We are in need of a pilot with the right equipment to escort this cargo ship safely until the treat has subsided. You will be paid appropriately. Are you up for the job?
		/// </summary>
		public static readonly MyStringId ContractScreen_Escort_Description_0 = MyStringId.GetOrCompute("ContractScreen_Escort_Description_0");

		/// <summary>
		/// A container got lost during transit and a client of ours is eager to see it returned. Go to it's last known location and find this container.
		/// </summary>
		public static readonly MyStringId ContractScreen_Find_Description_0 = MyStringId.GetOrCompute("ContractScreen_Find_Description_0");

		/// <summary>
		/// With the absence of organized law enforcement the responsibility falls to individual factions to make sure that criminals do not go unpunished. With that said, we have received reports of the location of one such culprit and we need you to make an example of them, so that others are not tempted down the same path.  Find and take the target down. Use hand-held weapons or tools for the full reward. You will be kept up to date of the latest reported position of your target.
		/// </summary>
		public static readonly MyStringId ContractScreen_Hunt_Description_0 = MyStringId.GetOrCompute("ContractScreen_Hunt_Description_0");

		/// <summary>
		/// A client of ours has requested some specific goods they wish delivered to this station for pickup. Obtain the goods and then deliver them to us. We will ensure you are adequately rewarded.
		/// </summary>
		public static readonly MyStringId ContractScreen_ObtainDeliver_Description_0 = MyStringId.GetOrCompute("ContractScreen_ObtainDeliver_Description_0");

		/// <summary>
		/// Hauling Contract
		/// </summary>
		public static readonly MyStringId ContractScreen_Contract_Name_Deliver = MyStringId.GetOrCompute("ContractScreen_Contract_Name_Deliver");

		/// <summary>
		/// Escort Contract
		/// </summary>
		public static readonly MyStringId ContractScreen_Contract_Name_Escort = MyStringId.GetOrCompute("ContractScreen_Contract_Name_Escort");

		/// <summary>
		/// Search Contract
		/// </summary>
		public static readonly MyStringId ContractScreen_Contract_Name_Find = MyStringId.GetOrCompute("ContractScreen_Contract_Name_Find");

		/// <summary>
		/// Bounty Contract
		/// </summary>
		public static readonly MyStringId ContractScreen_Contract_Name_Hunt = MyStringId.GetOrCompute("ContractScreen_Contract_Name_Hunt");

		/// <summary>
		/// Acquisition Contract
		/// </summary>
		public static readonly MyStringId ContractScreen_Contract_Name_ObtainAndDeliver = MyStringId.GetOrCompute("ContractScreen_Contract_Name_ObtainAndDeliver");

		/// <summary>
		/// Transaction Failed
		/// </summary>
		public static readonly MyStringId StoreBuy_Error_Caption_NotEnoughAmount = MyStringId.GetOrCompute("StoreBuy_Error_Caption_NotEnoughAmount");

		/// <summary>
		/// Transaction Failed
		/// </summary>
		public static readonly MyStringId StoreBuy_Error_Caption_NotEnoughStoreBlockInventorySpace = MyStringId.GetOrCompute("StoreBuy_Error_Caption_NotEnoughStoreBlockInventorySpace");

		/// <summary>
		/// There is not enough amount of the item.
		/// </summary>
		public static readonly MyStringId StoreBuy_Error_Text_NotEnoughAmount = MyStringId.GetOrCompute("StoreBuy_Error_Text_NotEnoughAmount");

		/// <summary>
		/// There is not enough space in the store block inventory to complete transaction.
		/// </summary>
		public static readonly MyStringId StoreBuy_Error_Text_NotEnoughStoreBlockInventorySpace = MyStringId.GetOrCompute("StoreBuy_Error_Text_NotEnoughStoreBlockInventorySpace");

		/// <summary>
		/// Amount:
		/// </summary>
		public static readonly MyStringId StoreBlockView_AmountLabel = MyStringId.GetOrCompute("StoreBlockView_AmountLabel");

		/// <summary>
		/// Create Offer
		/// </summary>
		public static readonly MyStringId StoreBlockView_CreateOfferButton = MyStringId.GetOrCompute("StoreBlockView_CreateOfferButton");

		/// <summary>
		/// Create Order
		/// </summary>
		public static readonly MyStringId StoreBlockView_CreateOrderButton = MyStringId.GetOrCompute("StoreBlockView_CreateOrderButton");

		/// <summary>
		/// Price per Unit:
		/// </summary>
		public static readonly MyStringId StoreBlockView_PricePerUnitLabel = MyStringId.GetOrCompute("StoreBlockView_PricePerUnitLabel");

		/// <summary>
		/// Total Price:
		/// </summary>
		public static readonly MyStringId StoreBlockView_TotalPriceLabel = MyStringId.GetOrCompute("StoreBlockView_TotalPriceLabel");

		/// <summary>
		/// Contract finishing failed
		/// </summary>
		public static readonly MyStringId Contracts_Error_Caption_FinishCondition_NotEnoughSpace = MyStringId.GetOrCompute("Contracts_Error_Caption_FinishCondition_NotEnoughSpace");

		/// <summary>
		/// Contract could not be finished. There is not enough space for transfered items.
		/// </summary>
		public static readonly MyStringId Contracts_Error_Text_FinishCondition_NotEnoughSpace = MyStringId.GetOrCompute("Contracts_Error_Text_FinishCondition_NotEnoughSpace");

		/// <summary>
		/// A partnered station has not been able to supply one of its customers due to a shortage. They have requested that we will fill the gap and deliver the order as soon as possible. Accepting this contract will require collateral and said collateral will be forfeit if you fail to complete the assignment in time.
		/// </summary>
		public static readonly MyStringId ContractScreen_Deliver_Description_1 = MyStringId.GetOrCompute("ContractScreen_Deliver_Description_1");

		/// <summary>
		/// We are looking for skilled couriers capable of handling jobs within a tight schedule.  We require a mandatory collateral upon accepting this contract. You will be reimbursed and rewarded upon completing the contract but failing to do so will forfeit the collateral.  Time is key, are you up for it?
		/// </summary>
		public static readonly MyStringId ContractScreen_Deliver_Description_2 = MyStringId.GetOrCompute("ContractScreen_Deliver_Description_2");

		/// <summary>
		/// A nearby transport requested assistance after detecting hostile activity in it's vicinity.  Go to the transport and make sure it gets through in one piece.  Your feats will dictate your compensation.
		/// </summary>
		public static readonly MyStringId ContractScreen_Escort_Description_1 = MyStringId.GetOrCompute("ContractScreen_Escort_Description_1");

		/// <summary>
		/// It looks like one of our competitors decided to resort to less conventional ways to beat the competition.  Report to our cargo ship and keep it safe. Let them know we mean business.  You will be rewarded based on your performance.
		/// </summary>
		public static readonly MyStringId ContractScreen_Escort_Description_2 = MyStringId.GetOrCompute("ContractScreen_Escort_Description_2");

		/// <summary>
		/// Due to a navigational error a cargo capsule was misdelivered and we only know it's rough whereabouts. We need someone capable of finding it before someone else does. Are you up for it?
		/// </summary>
		public static readonly MyStringId ContractScreen_Find_Description_1 = MyStringId.GetOrCompute("ContractScreen_Find_Description_1");

		/// <summary>
		/// We need someone to pick up a discreet package whose exact position is unknown. Locate this package for us and there will be a reward for you.
		/// </summary>
		public static readonly MyStringId ContractScreen_Find_Description_2 = MyStringId.GetOrCompute("ContractScreen_Find_Description_2");

		/// <summary>
		/// It seems like someone has made a bit of a name for themselves at the expense of others and in doing so made some of our clients quite unhappy.  We just received reports detailing this person's last known position. We will happily compensate you if you can track them down and take them out.  To ensure proper identification of your target we would prefer you take them down with either weapons or hand tools, if you prefer. You will be more highly rewarded for doing so. We will make sure you are updated with the last known location of the target. Are you up to the job?
		/// </summary>
		public static readonly MyStringId ContractScreen_Hunt_Description_1 = MyStringId.GetOrCompute("ContractScreen_Hunt_Description_1");

		/// <summary>
		/// Someone has been causing a lot of trouble lately and we need someone who isn't afraid to deal with it.  We will relay the target's last known position to you. Go there, find the troublemaker, and take them out. You will receive the full reward if the contract is completed by means of hand-held weaponry.
		/// </summary>
		public static readonly MyStringId ContractScreen_Hunt_Description_2 = MyStringId.GetOrCompute("ContractScreen_Hunt_Description_2");

		/// <summary>
		/// This station is in need of maintenance but we are in short supply.  Get us the required materials and you will be paid in full.
		/// </summary>
		public static readonly MyStringId ContractScreen_ObtainDeliver_Description_1 = MyStringId.GetOrCompute("ContractScreen_ObtainDeliver_Description_1");

		/// <summary>
		/// As a result of a miscommunication with a distributor we find ourselves short on some supplies. Find us these supplies, bring them here and you will be compensated for your services.
		/// </summary>
		public static readonly MyStringId ContractScreen_ObtainDeliver_Description_2 = MyStringId.GetOrCompute("ContractScreen_ObtainDeliver_Description_2");

		/// <summary>
		/// Buy
		/// </summary>
		public static readonly MyStringId StoreScreen_BuyButton = MyStringId.GetOrCompute("StoreScreen_BuyButton");

		/// <summary>
		/// Delete
		/// </summary>
		public static readonly MyStringId StoreScreen_CancelButton = MyStringId.GetOrCompute("StoreScreen_CancelButton");

		/// <summary>
		/// Sell
		/// </summary>
		public static readonly MyStringId StoreScreen_SellButton = MyStringId.GetOrCompute("StoreScreen_SellButton");

		/// <summary>
		/// Hauling
		/// </summary>
		public static readonly MyStringId ContractTypeNames_Deliver = MyStringId.GetOrCompute("ContractTypeNames_Deliver");

		/// <summary>
		/// Search
		/// </summary>
		public static readonly MyStringId ContractTypeNames_Find = MyStringId.GetOrCompute("ContractTypeNames_Find");

		/// <summary>
		/// Acquisition
		/// </summary>
		public static readonly MyStringId ContractTypeNames_ObtainAndDeliver = MyStringId.GetOrCompute("ContractTypeNames_ObtainAndDeliver");

		/// <summary>
		/// Transaction Failed
		/// </summary>
		public static readonly MyStringId StoreSell_Error_Caption_NotEnoughMoney = MyStringId.GetOrCompute("StoreSell_Error_Caption_NotEnoughMoney");

		/// <summary>
		/// The owner of this store does not have enough money.
		/// </summary>
		public static readonly MyStringId StoreSell_Error_Text_NotEnoughMoney = MyStringId.GetOrCompute("StoreSell_Error_Text_NotEnoughMoney");

		/// <summary>
		/// Transaction Failed
		/// </summary>
		public static readonly MyStringId StoreSell_Error_Caption_NotEnoughInventorySpace = MyStringId.GetOrCompute("StoreSell_Error_Caption_NotEnoughInventorySpace");

		/// <summary>
		/// There is not enough space in store's grid inventories.
		/// </summary>
		public static readonly MyStringId StoreSell_Error_Text_NotEnoughInventorySpace = MyStringId.GetOrCompute("StoreSell_Error_Text_NotEnoughInventorySpace");

		/// <summary>
		/// Select Contract block
		/// </summary>
		public static readonly MyStringId ContractScreen_Administration_SelectionCaption_DeliverBlock = MyStringId.GetOrCompute("ContractScreen_Administration_SelectionCaption_DeliverBlock");

		/// <summary>
		/// Select grid to find
		/// </summary>
		public static readonly MyStringId ContractScreen_Administration_SelectionCaption_FindGrid = MyStringId.GetOrCompute("ContractScreen_Administration_SelectionCaption_FindGrid");

		/// <summary>
		/// Select Contract block
		/// </summary>
		public static readonly MyStringId ContractScreen_Administration_SelectionCaption_ObtainAndDeliverBlock = MyStringId.GetOrCompute("ContractScreen_Administration_SelectionCaption_ObtainAndDeliverBlock");

		/// <summary>
		/// Select one of your contract block that will serve as deliver point for package
		/// </summary>
		public static readonly MyStringId ContractScreen_Administration_SelectionText_DeliverBlock = MyStringId.GetOrCompute("ContractScreen_Administration_SelectionText_DeliverBlock");

		/// <summary>
		/// Select one of your grid that will be searched in contract
		/// </summary>
		public static readonly MyStringId ContractScreen_Administration_SelectionText_FindGrid = MyStringId.GetOrCompute("ContractScreen_Administration_SelectionText_FindGrid");

		/// <summary>
		/// Select one of your contract block that will serve as deliver point for items
		/// </summary>
		public static readonly MyStringId ContractScreen_Administration_SelectionText_ObtainAndDeliverBlock = MyStringId.GetOrCompute("ContractScreen_Administration_SelectionText_ObtainAndDeliverBlock");

		/// <summary>
		/// No selection
		/// </summary>
		public static readonly MyStringId ContractScreen_Administration_NoSelection = MyStringId.GetOrCompute("ContractScreen_Administration_NoSelection");

		/// <summary>
		/// New Offer
		/// </summary>
		public static readonly MyStringId StoreAdministration_NewOffer = MyStringId.GetOrCompute("StoreAdministration_NewOffer");

		/// <summary>
		/// New Order
		/// </summary>
		public static readonly MyStringId StoreAdministration_NewOrder = MyStringId.GetOrCompute("StoreAdministration_NewOrder");

		/// <summary>
		/// Listing Fee:
		/// </summary>
		public static readonly MyStringId StoreBlockView_ListingFee = MyStringId.GetOrCompute("StoreBlockView_ListingFee");

		/// <summary>
		/// Transaction Fee:
		/// </summary>
		public static readonly MyStringId StoreBlockView_TransactionFee = MyStringId.GetOrCompute("StoreBlockView_TransactionFee");

		/// <summary>
		/// Failure
		/// </summary>
		public static readonly MyStringId ContractScreen_Aministration_CreatinResultCaption_BlockNotFound = MyStringId.GetOrCompute("ContractScreen_Aministration_CreatinResultCaption_BlockNotFound");

		/// <summary>
		/// Error
		/// </summary>
		public static readonly MyStringId ContractScreen_Aministration_CreatinResultCaption_Error = MyStringId.GetOrCompute("ContractScreen_Aministration_CreatinResultCaption_Error");

		/// <summary>
		/// Failure
		/// </summary>
		public static readonly MyStringId ContractScreen_Aministration_CreatinResultCaption_Fail = MyStringId.GetOrCompute("ContractScreen_Aministration_CreatinResultCaption_Fail");

		/// <summary>
		/// Failure
		/// </summary>
		public static readonly MyStringId ContractScreen_Aministration_CreatinResultCaption_GridNotFound = MyStringId.GetOrCompute("ContractScreen_Aministration_CreatinResultCaption_GridNotFound");

		/// <summary>
		/// Failure
		/// </summary>
		public static readonly MyStringId ContractScreen_Aministration_CreatinResultCaption_NotAnOwnerOfBlock = MyStringId.GetOrCompute("ContractScreen_Aministration_CreatinResultCaption_NotAnOwnerOfBlock");

		/// <summary>
		/// Failure
		/// </summary>
		public static readonly MyStringId ContractScreen_Aministration_CreatinResultCaption_NotAnOwnerOfGrid = MyStringId.GetOrCompute("ContractScreen_Aministration_CreatinResultCaption_NotAnOwnerOfGrid");

		/// <summary>
		/// Success
		/// </summary>
		public static readonly MyStringId ContractScreen_Aministration_CreatinResultCaption_Success = MyStringId.GetOrCompute("ContractScreen_Aministration_CreatinResultCaption_Success");

		/// <summary>
		/// Contract creation failed. Target block was not found.
		/// </summary>
		public static readonly MyStringId ContractScreen_Aministration_CreatinResultText_BlockNotFound = MyStringId.GetOrCompute("ContractScreen_Aministration_CreatinResultText_BlockNotFound");

		/// <summary>
		/// Contract creation failed due to an error.
		/// </summary>
		public static readonly MyStringId ContractScreen_Aministration_CreatinResultText_Error = MyStringId.GetOrCompute("ContractScreen_Aministration_CreatinResultText_Error");

		/// <summary>
		/// Contract creation failed.
		/// </summary>
		public static readonly MyStringId ContractScreen_Aministration_CreatinResultText_Fail = MyStringId.GetOrCompute("ContractScreen_Aministration_CreatinResultText_Fail");

		/// <summary>
		/// Contract creation failed. Target grid was not found.
		/// </summary>
		public static readonly MyStringId ContractScreen_Aministration_CreatinResultText_GridNotFound = MyStringId.GetOrCompute("ContractScreen_Aministration_CreatinResultText_GridNotFound");

		/// <summary>
		/// Contract creation failed. You are not and owner of targeted block.
		/// </summary>
		public static readonly MyStringId ContractScreen_Aministration_CreatinResultText_NotAnOwnerOfBlock = MyStringId.GetOrCompute("ContractScreen_Aministration_CreatinResultText_NotAnOwnerOfBlock");

		/// <summary>
		/// Contract creation failed. You are not and owner of targeted grid.
		/// </summary>
		public static readonly MyStringId ContractScreen_Aministration_CreatinResultText_NotAnOwnerOfGrid = MyStringId.GetOrCompute("ContractScreen_Aministration_CreatinResultText_NotAnOwnerOfGrid");

		/// <summary>
		/// Contract was successfully created.
		/// </summary>
		public static readonly MyStringId ContractScreen_Aministration_CreatinResultText_Success = MyStringId.GetOrCompute("ContractScreen_Aministration_CreatinResultText_Success");

		/// <summary>
		/// Invalid value
		/// </summary>
		public static readonly MyStringId ContractScreen_Aministration_FailCaption_IsNaN_Duration = MyStringId.GetOrCompute("ContractScreen_Aministration_FailCaption_IsNaN_Duration");

		/// <summary>
		/// Invalid value
		/// </summary>
		public static readonly MyStringId ContractScreen_Aministration_FailCaption_IsNaN_ItemAmount = MyStringId.GetOrCompute("ContractScreen_Aministration_FailCaption_IsNaN_ItemAmount");

		/// <summary>
		/// Invalid value
		/// </summary>
		public static readonly MyStringId ContractScreen_Aministration_FailCaption_IsNaN_MoneyReward = MyStringId.GetOrCompute("ContractScreen_Aministration_FailCaption_IsNaN_MoneyReward");

		/// <summary>
		/// Invalid value
		/// </summary>
		public static readonly MyStringId ContractScreen_Aministration_FailCaption_IsNaN_SearchRadius = MyStringId.GetOrCompute("ContractScreen_Aministration_FailCaption_IsNaN_SearchRadius");

		/// <summary>
		/// Invalid value
		/// </summary>
		public static readonly MyStringId ContractScreen_Aministration_FailCaption_IsNaN_StartingDeposit = MyStringId.GetOrCompute("ContractScreen_Aministration_FailCaption_IsNaN_StartingDeposit");

		/// <summary>
		/// Value not selected
		/// </summary>
		public static readonly MyStringId ContractScreen_Aministration_FailCaption_ItemTypeNotSelected = MyStringId.GetOrCompute("ContractScreen_Aministration_FailCaption_ItemTypeNotSelected");

		/// <summary>
		/// Value not selected
		/// </summary>
		public static readonly MyStringId ContractScreen_Aministration_FailCaption_TargetContractBlockNotSelected = MyStringId.GetOrCompute("ContractScreen_Aministration_FailCaption_TargetContractBlockNotSelected");

		/// <summary>
		/// Value not selected
		/// </summary>
		public static readonly MyStringId ContractScreen_Aministration_FailCaption_TargetGridNotSelected = MyStringId.GetOrCompute("ContractScreen_Aministration_FailCaption_TargetGridNotSelected");

		/// <summary>
		/// Duration has invalid value. Must be non-negative number.
		/// </summary>
		public static readonly MyStringId ContractScreen_Aministration_FailText_IsNaN_Duration = MyStringId.GetOrCompute("ContractScreen_Aministration_FailText_IsNaN_Duration");

		/// <summary>
		/// Item amount has invalid value. Must be positive number.
		/// </summary>
		public static readonly MyStringId ContractScreen_Aministration_FailText_IsNaN_ItemAmount = MyStringId.GetOrCompute("ContractScreen_Aministration_FailText_IsNaN_ItemAmount");

		/// <summary>
		/// Currency reward has invalid value. Must be non-negative number.
		/// </summary>
		public static readonly MyStringId ContractScreen_Aministration_FailText_IsNaN_MoneyReward = MyStringId.GetOrCompute("ContractScreen_Aministration_FailText_IsNaN_MoneyReward");

		/// <summary>
		/// Search radius has invalid value. Must be positive number.
		/// </summary>
		public static readonly MyStringId ContractScreen_Aministration_FailText_IsNaN_SearchRadius = MyStringId.GetOrCompute("ContractScreen_Aministration_FailText_IsNaN_SearchRadius");

		/// <summary>
		/// Collateral has invalid value. Must be non-negative number.
		/// </summary>
		public static readonly MyStringId ContractScreen_Aministration_FailText_IsNaN_StartingDeposit = MyStringId.GetOrCompute("ContractScreen_Aministration_FailText_IsNaN_StartingDeposit");

		/// <summary>
		/// Item type for delivery must be selected.
		/// </summary>
		public static readonly MyStringId ContractScreen_Aministration_FailText_ItemTypeNotSelected = MyStringId.GetOrCompute("ContractScreen_Aministration_FailText_ItemTypeNotSelected");

		/// <summary>
		/// Contract block for item delivery must be selected.
		/// </summary>
		public static readonly MyStringId ContractScreen_Aministration_FailText_TargetContractBlockNotSelected = MyStringId.GetOrCompute("ContractScreen_Aministration_FailText_TargetContractBlockNotSelected");

		/// <summary>
		/// You must select grid to be searched for.
		/// </summary>
		public static readonly MyStringId ContractScreen_Aministration_FailText_TargetGridNotSelected = MyStringId.GetOrCompute("ContractScreen_Aministration_FailText_TargetGridNotSelected");

		/// <summary>
		/// Failure
		/// </summary>
		public static readonly MyStringId ContractScreen_Aministration_CreatinResultCaption_NotEnoughFunds = MyStringId.GetOrCompute("ContractScreen_Aministration_CreatinResultCaption_NotEnoughFunds");

		/// <summary>
		/// Contract creation failed. You don't have enough funds to pay reward.
		/// </summary>
		public static readonly MyStringId ContractScreen_Aministration_CreatinResultText_NotEnoughFunds = MyStringId.GetOrCompute("ContractScreen_Aministration_CreatinResultText_NotEnoughFunds");

		/// <summary>
		/// Create
		/// </summary>
		public static readonly MyStringId ContractScreen_Button_CreateContract = MyStringId.GetOrCompute("ContractScreen_Button_CreateContract");

		/// <summary>
		/// Delete
		/// </summary>
		public static readonly MyStringId ContractScreen_Button_DeleteContract = MyStringId.GetOrCompute("ContractScreen_Button_DeleteContract");

		/// <summary>
		/// Refresh
		/// </summary>
		public static readonly MyStringId ContractScreen_Button_RefreshContracts = MyStringId.GetOrCompute("ContractScreen_Button_RefreshContracts");

		/// <summary>
		/// Select Block
		/// </summary>
		public static readonly MyStringId ContractScreen_Button_SelectBlock = MyStringId.GetOrCompute("ContractScreen_Button_SelectBlock");

		/// <summary>
		/// Select Grid
		/// </summary>
		public static readonly MyStringId ContractScreen_Button_SelectGrid = MyStringId.GetOrCompute("ContractScreen_Button_SelectGrid");

		/// <summary>
		/// Account Balance:
		/// </summary>
		public static readonly MyStringId ContractScreen_Text_CurrentMoney = MyStringId.GetOrCompute("ContractScreen_Text_CurrentMoney");

		/// <summary>
		/// Duration [min]:
		/// </summary>
		public static readonly MyStringId ContractScreen_Text_Duration = MyStringId.GetOrCompute("ContractScreen_Text_Duration");

		/// <summary>
		/// Item amount:
		/// </summary>
		public static readonly MyStringId ContractScreen_Text_ItemAmount = MyStringId.GetOrCompute("ContractScreen_Text_ItemAmount");

		/// <summary>
		/// Item type:
		/// </summary>
		public static readonly MyStringId ContractScreen_Text_ItemType = MyStringId.GetOrCompute("ContractScreen_Text_ItemType");

		/// <summary>
		/// Payment:
		/// </summary>
		public static readonly MyStringId ContractScreen_Text_MoneyReward = MyStringId.GetOrCompute("ContractScreen_Text_MoneyReward");

		/// <summary>
		/// New Contract
		/// </summary>
		public static readonly MyStringId ContractScreen_Text_NewContract = MyStringId.GetOrCompute("ContractScreen_Text_NewContract");

		/// <summary>
		/// Search radius:
		/// </summary>
		public static readonly MyStringId ContractScreen_Text_SearchRadius = MyStringId.GetOrCompute("ContractScreen_Text_SearchRadius");

		/// <summary>
		/// Collateral:
		/// </summary>
		public static readonly MyStringId ContractScreen_Text_StartingDeposit = MyStringId.GetOrCompute("ContractScreen_Text_StartingDeposit");

		/// <summary>
		/// Target block:
		/// </summary>
		public static readonly MyStringId ContractScreen_Text_TargetBlock = MyStringId.GetOrCompute("ContractScreen_Text_TargetBlock");

		/// <summary>
		/// Target grid:
		/// </summary>
		public static readonly MyStringId ContractScreen_Text_TargetGrid = MyStringId.GetOrCompute("ContractScreen_Text_TargetGrid");

		/// <summary>
		/// Type:
		/// </summary>
		public static readonly MyStringId ContractScreen_Text_Type = MyStringId.GetOrCompute("ContractScreen_Text_Type");

		/// <summary>
		/// {0} CEO
		/// </summary>
		public static readonly MyStringId Economy_FactionLeader_Formated = MyStringId.GetOrCompute("Economy_FactionLeader_Formated");

		/// <summary>
		/// Character Inventory
		/// </summary>
		public static readonly MyStringId Economy_CharacterSelection = MyStringId.GetOrCompute("Economy_CharacterSelection");

		/// <summary>
		/// Transaction Failed
		/// </summary>
		public static readonly MyStringId StoreBuy_Error_Caption_WrongOfferPricePerUnit = MyStringId.GetOrCompute("StoreBuy_Error_Caption_WrongOfferPricePerUnit");

		/// <summary>
		/// Price per unit is lower than minimum. Minimum is {0}.
		/// </summary>
		public static readonly MyStringId StoreBuy_Error_Text_WrongOfferPricePerUnit = MyStringId.GetOrCompute("StoreBuy_Error_Text_WrongOfferPricePerUnit");

		/// <summary>
		/// Your ship will be unlocked in: {0} min {1} s 
		/// </summary>
		public static readonly MyStringId Connector_AutoUnlockWarning = MyStringId.GetOrCompute("Connector_AutoUnlockWarning");

		/// <summary>
		/// {0}
		/// </summary>
		public static readonly MyStringId Format_OneParameter = MyStringId.GetOrCompute("Format_OneParameter");

		/// <summary>
		/// Friendly relation From {0} to {1} reputation. Able to interact. Bonus deals. {2}% discount (up to {4}%), {3}% sell bonus (up to {5}%). 
		/// </summary>
		public static readonly MyStringId ReputationBat_Tooltip_Friendly = MyStringId.GetOrCompute("ReputationBat_Tooltip_Friendly");

		/// <summary>
		/// Hostile relation From {0} to {1} reputation. Unable to interact, attacked on sight.
		/// </summary>
		public static readonly MyStringId ReputationBat_Tooltip_Hostile = MyStringId.GetOrCompute("ReputationBat_Tooltip_Hostile");

		/// <summary>
		/// Neutral relation From {0} to {1} reputation. Able to interact.
		/// </summary>
		public static readonly MyStringId ReputationBat_Tooltip_Neutral = MyStringId.GetOrCompute("ReputationBat_Tooltip_Neutral");

		/// <summary>
		/// One of our transports is experiencing technical difficulties and some vultures seemed to have taken notice.  Go out there and protect the transport. Make them think twice. You will be rewarded based on how well you performed.
		/// </summary>
		public static readonly MyStringId ContractScreen_Escort_Description_3 = MyStringId.GetOrCompute("ContractScreen_Escort_Description_3");

		/// <summary>
		/// Some of our stock has not been able to keep up with demand. Help us resupply and you will be paid a fair price.
		/// </summary>
		public static readonly MyStringId ContractScreen_ObtainDeliver_Description_3 = MyStringId.GetOrCompute("ContractScreen_ObtainDeliver_Description_3");

		/// <summary>
		/// We have several buyers interested in products not currently available to us.  Help find these products and you will receive a sizeable cut.
		/// </summary>
		public static readonly MyStringId ContractScreen_ObtainDeliver_Description_4 = MyStringId.GetOrCompute("ContractScreen_ObtainDeliver_Description_4");

		/// <summary>
		/// These commodities have been in high demand lately and we are running low.  Interested in helping out? You will be adequately compensated.
		/// </summary>
		public static readonly MyStringId ContractScreen_ObtainDeliver_Description_5 = MyStringId.GetOrCompute("ContractScreen_ObtainDeliver_Description_5");

		/// <summary>
		/// I happen to know a guy who knows a guy with some good deals. The real quality stuff you know?  But it doesn't look like I will be getting anywhere near this place to profit from these deals so I will sell you the data if you are interested.
		/// </summary>
		public static readonly MyStringId Datapad_Station_GPS_Content_0 = MyStringId.GetOrCompute("Datapad_Station_GPS_Content_0");

		/// <summary>
		/// A friend of mine who works on a remote station called in saying he has some contracts ready.  They pay a good amount so if you are looking for a job then that's the place to go. Good luck!
		/// </summary>
		public static readonly MyStringId Datapad_Station_GPS_Content_1 = MyStringId.GetOrCompute("Datapad_Station_GPS_Content_1");

		/// <summary>
		/// So you are looking for more jobs or trade? Sure we can sort you out.  Take a look at this place. It is a bit remote but rumor goes that pilots find good opportunities here.
		/// </summary>
		public static readonly MyStringId Datapad_Station_GPS_Content_2 = MyStringId.GetOrCompute("Datapad_Station_GPS_Content_2");

		/// <summary>
		/// Some conflict between two factions left a field of debris and salvager are plucking the fruits by selling their findings to a nearby station that now has their stocks overflowing.  If you are looking for good deals or work then this is the place to go.
		/// </summary>
		public static readonly MyStringId Datapad_Station_GPS_Content_3 = MyStringId.GetOrCompute("Datapad_Station_GPS_Content_3");

		/// <summary>
		/// There is plenty of work available if you know where to look. You should investigate this place, I heard there is a shortage on couriers.
		/// </summary>
		public static readonly MyStringId Datapad_Station_GPS_Content_4 = MyStringId.GetOrCompute("Datapad_Station_GPS_Content_4");

		/// <summary>
		/// Some Merchant keeps bragging about some really good deals at a station he has been visiting but would not spill the details.  However, I happened to "stumble" on his navigation computer during my maintenance shift and this position kept popping up. Go see if there is any truth in what that merchant said.
		/// </summary>
		public static readonly MyStringId Datapad_Station_GPS_Content_5 = MyStringId.GetOrCompute("Datapad_Station_GPS_Content_5");

		/// <summary>
		/// I used to visit this place at a regular basis during my engineering days and they always had some good deals available. Go see if they are still at it.
		/// </summary>
		public static readonly MyStringId Datapad_Station_GPS_Content_6 = MyStringId.GetOrCompute("Datapad_Station_GPS_Content_6");

		/// <summary>
		/// A station lost some its client's due to some conflict of interest between factions and is now looking for new hires. Interested? This is where you should go.
		/// </summary>
		public static readonly MyStringId Datapad_Station_GPS_Content_7 = MyStringId.GetOrCompute("Datapad_Station_GPS_Content_7");

		/// <summary>
		/// Looking for Reliable contracts? Good trades? Or just making good money? You are in luck! Opportunity awaits at these coordinates!
		/// </summary>
		public static readonly MyStringId Datapad_Station_GPS_Content_8 = MyStringId.GetOrCompute("Datapad_Station_GPS_Content_8");

		/// <summary>
		/// This is location of the nearest trading station, where you can buy/sell various items.
		/// </summary>
		public static readonly MyStringId IngameHelp_Economy_GPSDesc = MyStringId.GetOrCompute("IngameHelp_Economy_GPSDesc");

		/// <summary>
		/// Trading Station
		/// </summary>
		public static readonly MyStringId IngameHelp_Economy_GPSName = MyStringId.GetOrCompute("IngameHelp_Economy_GPSName");

		/// <summary>
		/// Enables bounty contracts being available on stations.
		/// </summary>
		public static readonly MyStringId ToolTipWorldSettingsBountyContracts = MyStringId.GetOrCompute("ToolTipWorldSettingsBountyContracts");

		/// <summary>
		/// Enable bounty contracts
		/// </summary>
		public static readonly MyStringId WorldSettings_EnableBountyContracts = MyStringId.GetOrCompute("WorldSettings_EnableBountyContracts");

		/// <summary>
		/// PCU:
		/// </summary>
		public static readonly MyStringId StoreScreen_GridTooltip_Pcu = MyStringId.GetOrCompute("StoreScreen_GridTooltip_Pcu");

		/// <summary>
		/// Transaction Failed
		/// </summary>
		public static readonly MyStringId StoreBuy_Error_Caption_NotEnoughPCU = MyStringId.GetOrCompute("StoreBuy_Error_Caption_NotEnoughPCU");

		/// <summary>
		/// You don't have enough PCU to buy this item.
		/// </summary>
		public static readonly MyStringId StoreBuy_Error_Text_NotEnoughPCU = MyStringId.GetOrCompute("StoreBuy_Error_Text_NotEnoughPCU");

		/// <summary>
		/// {0} {1} {2}
		/// </summary>
		public static readonly MyStringId Grid_Name_Station = MyStringId.GetOrCompute("Grid_Name_Station");

		/// <summary>
		/// {0} Safe Zone {1}
		/// </summary>
		public static readonly MyStringId SafeZone_Name_Station = MyStringId.GetOrCompute("SafeZone_Name_Station");

		/// <summary>
		/// Cannot accept
		/// </summary>
		public static readonly MyStringId Contracts_Error_Caption_ActivationConditionNotMet_YouAreTargetOfThisHunt = MyStringId.GetOrCompute("Contracts_Error_Caption_ActivationConditionNotMet_YouAreTargetOfThisHunt");

		/// <summary>
		/// You do not meet requirements to accept this contract. You are the target.
		/// </summary>
		public static readonly MyStringId Contracts_Error_Text_ActivationConditionNotMet_YouAreTargetOfThisHunt = MyStringId.GetOrCompute("Contracts_Error_Text_ActivationConditionNotMet_YouAreTargetOfThisHunt");

		/// <summary>
		/// Do you accept this contract?
		/// </summary>
		public static readonly MyStringId Contracts_AcceptConfirmation_Caption = MyStringId.GetOrCompute("Contracts_AcceptConfirmation_Caption");

		/// <summary>
		/// By accepting this contract you are bound to fulfill all conditions of this contract in timely manner. Failing to do so may lead to negative feedback and loss of assets.
		/// </summary>
		public static readonly MyStringId Contracts_AcceptConfirmation_Text = MyStringId.GetOrCompute("Contracts_AcceptConfirmation_Text");

		/// <summary>
		/// Amount:
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_AddCurrency_ChangeBalance = MyStringId.GetOrCompute("ScreenDebugAdminMenu_AddCurrency_ChangeBalance");

		/// <summary>
		/// Change
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_AddCurrency_CoonfirmButton = MyStringId.GetOrCompute("ScreenDebugAdminMenu_AddCurrency_CoonfirmButton");

		/// <summary>
		/// Current balance:
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_AddCurrency_CurrentBalance = MyStringId.GetOrCompute("ScreenDebugAdminMenu_AddCurrency_CurrentBalance");

		/// <summary>
		/// Final balance:
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_AddCurrency_FinalBalance = MyStringId.GetOrCompute("ScreenDebugAdminMenu_AddCurrency_FinalBalance");

		/// <summary>
		/// Change balance of player
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_AddCurrency_Label = MyStringId.GetOrCompute("ScreenDebugAdminMenu_AddCurrency_Label");

		/// <summary>
		/// You do not have any Contract active.
		/// </summary>
		public static readonly MyStringId ContractScreen_Text_NoActiveContracts = MyStringId.GetOrCompute("ContractScreen_Text_NoActiveContracts");

		/// <summary>
		/// There are no custom contracts.
		/// </summary>
		public static readonly MyStringId ContractScreen_Text_NoAdministrableContracts = MyStringId.GetOrCompute("ContractScreen_Text_NoAdministrableContracts");

		/// <summary>
		/// There are no contracts available.
		/// </summary>
		public static readonly MyStringId ContractScreen_Text_NoAvailableContracts = MyStringId.GetOrCompute("ContractScreen_Text_NoAvailableContracts");

		/// <summary>
		/// Do you really want to abandon this contract?
		/// </summary>
		public static readonly MyStringId Contracts_AbandonConfirmation_Caption = MyStringId.GetOrCompute("Contracts_AbandonConfirmation_Caption");

		/// <summary>
		/// By abandoning this contract you will lose all collateral you have paid and you may lose some reputation in process.
		/// </summary>
		public static readonly MyStringId Contracts_AbandonConfirmation_Text = MyStringId.GetOrCompute("Contracts_AbandonConfirmation_Text");

		/// <summary>
		/// Cannot accept
		/// </summary>
		public static readonly MyStringId Contracts_Error_Caption_ActivationConditionNotMet_ContractLimitReachedSoft = MyStringId.GetOrCompute("Contracts_Error_Caption_ActivationConditionNotMet_ContractLimitReachedSoft");

		/// <summary>
		/// Active contracts
		/// </summary>
		public static readonly MyStringId ScreenCaptionActiveContracts = MyStringId.GetOrCompute("ScreenCaptionActiveContracts");

		/// <summary>
		/// Failure
		/// </summary>
		public static readonly MyStringId ContractScreen_Aministration_CreatinResultCaption_CreationLimitHard = MyStringId.GetOrCompute("ContractScreen_Aministration_CreatinResultCaption_CreationLimitHard");

		/// <summary>
		/// Failure
		/// </summary>
		public static readonly MyStringId ContractScreen_Aministration_CreatinResultCaption_CreationLimitSoft = MyStringId.GetOrCompute("ContractScreen_Aministration_CreatinResultCaption_CreationLimitSoft");

		/// <summary>
		/// Contract creation failed. You have reached limit amount of contracts for this block.
		/// </summary>
		public static readonly MyStringId ContractScreen_Aministration_CreatinResultText_CreationLimitHard = MyStringId.GetOrCompute("ContractScreen_Aministration_CreatinResultText_CreationLimitHard");

		/// <summary>
		/// Failure
		/// </summary>
		public static readonly MyStringId Store_Error_Caption_OrderOfferLimitReachedHard = MyStringId.GetOrCompute("Store_Error_Caption_OrderOfferLimitReachedHard");

		/// <summary>
		/// Failure
		/// </summary>
		public static readonly MyStringId Store_Error_Caption_OrderOfferLimitReachedSoft = MyStringId.GetOrCompute("Store_Error_Caption_OrderOfferLimitReachedSoft");

		/// <summary>
		/// Failed to create order/offer. You have reached order/offer limit for this block.
		/// </summary>
		public static readonly MyStringId Store_Error_Text_OrderOfferLimitReachedHard = MyStringId.GetOrCompute("Store_Error_Text_OrderOfferLimitReachedHard");

		/// <summary>
		/// Transaction Failed
		/// </summary>
		public static readonly MyStringId StoreBuy_Error_Caption_NotEnoughSpaceInTank = MyStringId.GetOrCompute("StoreBuy_Error_Caption_NotEnoughSpaceInTank");

		/// <summary>
		/// Transfer of gas failed. Tank does not have enough free capacity.
		/// </summary>
		public static readonly MyStringId StoreBuy_Error_Text_NotEnoughSpaceInTank = MyStringId.GetOrCompute("StoreBuy_Error_Text_NotEnoughSpaceInTank");

		/// <summary>
		/// Select inventory:
		/// </summary>
		public static readonly MyStringId StoreScreen_SelectInventory = MyStringId.GetOrCompute("StoreScreen_SelectInventory");

		/// <summary>
		/// This contract cannot be finished through contract block. It has different objective.
		/// </summary>
		public static readonly MyStringId Economy_Contract_FinishTooltip_CannotFinishInBlock = MyStringId.GetOrCompute("Economy_Contract_FinishTooltip_CannotFinishInBlock");

		/// <summary>
		/// This contract cannot be finished at this station.
		/// </summary>
		public static readonly MyStringId Economy_Contract_FinishTooltip_NotAFinishPoint = MyStringId.GetOrCompute("Economy_Contract_FinishTooltip_NotAFinishPoint");

		/// <summary>
		/// Press to finish your contract.
		/// </summary>
		public static readonly MyStringId Economy_Contract_FinishTooltip_YouCanFinish = MyStringId.GetOrCompute("Economy_Contract_FinishTooltip_YouCanFinish");

		/// <summary>
		/// Reputation with {0} dropped by {1}
		/// </summary>
		public static readonly MyStringId Economy_Notification_ReputationDecreased = MyStringId.GetOrCompute("Economy_Notification_ReputationDecreased");

		/// <summary>
		/// Reputation with {0} raised by {1}
		/// </summary>
		public static readonly MyStringId Economy_Notification_ReputationIncreased = MyStringId.GetOrCompute("Economy_Notification_ReputationIncreased");

		/// <summary>
		/// Create Gps Marker
		/// </summary>
		public static readonly MyStringId GUI_Datapad_CreateGPSCoord = MyStringId.GetOrCompute("GUI_Datapad_CreateGPSCoord");

		/// <summary>
		/// Press to create gps coordinate marker.
		/// </summary>
		public static readonly MyStringId GUI_Datapad_CreateGPSCoord_TTIP = MyStringId.GetOrCompute("GUI_Datapad_CreateGPSCoord_TTIP");

		/// <summary>
		/// Click to select icon.
		/// </summary>
		public static readonly MyStringId Economy_FactionIcon_Tooltip_Allowed = MyStringId.GetOrCompute("Economy_FactionIcon_Tooltip_Allowed");

		/// <summary>
		/// Buy Economy DLC to unlock these faction icons
		/// </summary>
		public static readonly MyStringId Economy_FactionIcon_Tooltip_BuyEconomy = MyStringId.GetOrCompute("Economy_FactionIcon_Tooltip_BuyEconomy");

		/// <summary>
		/// I can see you have a datapad in your inventory. Datapad can hold important information you wish to store there. For example, datapad bought on stations contain coordinates of other stations.
		/// </summary>
		public static readonly MyStringId IngameHelp_Datapad_Desc = MyStringId.GetOrCompute("IngameHelp_Datapad_Desc");

		/// <summary>
		/// {0} on datapad to open it.
		/// </summary>
		public static readonly MyStringId IngameHelp_Datapad_Detail1 = MyStringId.GetOrCompute("IngameHelp_Datapad_Detail1");

		/// <summary>
		/// Open datapad
		/// </summary>
		public static readonly MyStringId IngameHelp_Datapad_Title = MyStringId.GetOrCompute("IngameHelp_Datapad_Title");

		/// <summary>
		/// Repair this ship
		/// </summary>
		public static readonly MyStringId Contract_Repair_GpsDescription = MyStringId.GetOrCompute("Contract_Repair_GpsDescription");

		/// <summary>
		/// ---&gt; REPAIR HERE&lt;---
		/// </summary>
		public static readonly MyStringId Contract_Repair_GpsName = MyStringId.GetOrCompute("Contract_Repair_GpsName");

		/// <summary>
		/// Repair Contract
		/// </summary>
		public static readonly MyStringId ContractScreen_Contract_Name_Repair = MyStringId.GetOrCompute("ContractScreen_Contract_Name_Repair");

		/// <summary>
		/// Repair Contract ({0})
		/// </summary>
		public static readonly MyStringId ContractScreen_Contract_Name_Repair_WithId = MyStringId.GetOrCompute("ContractScreen_Contract_Name_Repair_WithId");

		/// <summary>
		/// Our equipment has sustained serious damage as result of a recent meteor shower and is in need of repairs.  Go out there and make sure all is back in working order.
		/// </summary>
		public static readonly MyStringId ContractScreen_Repair_Description_0 = MyStringId.GetOrCompute("ContractScreen_Repair_Description_0");

		/// <summary>
		/// We lost contact with our equipment recently. Check and repair any damage you can find and you will be well endorsed.
		/// </summary>
		public static readonly MyStringId ContractScreen_Repair_Description_1 = MyStringId.GetOrCompute("ContractScreen_Repair_Description_1");

		/// <summary>
		/// Scavengers have been targeting our equipment lately. Check our equipment for damage and return it to top condition.
		/// </summary>
		public static readonly MyStringId ContractScreen_Repair_Description_2 = MyStringId.GetOrCompute("ContractScreen_Repair_Description_2");

		/// <summary>
		/// Select grid to repair
		/// </summary>
		public static readonly MyStringId ContractScreen_Administration_SelectionCaption_Repair = MyStringId.GetOrCompute("ContractScreen_Administration_SelectionCaption_Repair");

		/// <summary>
		/// Select the grid that shall be rapaired in this contract
		/// </summary>
		public static readonly MyStringId ContractScreen_Administration_SelectionText_Repair = MyStringId.GetOrCompute("ContractScreen_Administration_SelectionText_Repair");

		/// <summary>
		/// Repair
		/// </summary>
		public static readonly MyStringId ContractTypeNames_Repair = MyStringId.GetOrCompute("ContractTypeNames_Repair");

		/// <summary>
		/// Icon Hue:
		/// </summary>
		public static readonly MyStringId EditFaction_HueIconSliderText = MyStringId.GetOrCompute("EditFaction_HueIconSliderText");

		/// <summary>
		/// Icon Saturation:
		/// </summary>
		public static readonly MyStringId EditFaction_SaturationIconSliderText = MyStringId.GetOrCompute("EditFaction_SaturationIconSliderText");

		/// <summary>
		/// Icon Value:
		/// </summary>
		public static readonly MyStringId EditFaction_ValueIconSliderText = MyStringId.GetOrCompute("EditFaction_ValueIconSliderText");

		/// <summary>
		/// A navigation error resulted into a cargo ship colliding with our equipment. Check for damage and repair any that you can find. You will be compensated for the components.
		/// </summary>
		public static readonly MyStringId ContractScreen_Repair_Description_3 = MyStringId.GetOrCompute("ContractScreen_Repair_Description_3");

		/// <summary>
		/// We would like to recommission some of our equipment but it is in no functional condition right now. Check out what is missing or damaged, fix it and you will be paid for the components.
		/// </summary>
		public static readonly MyStringId ContractScreen_Repair_Description_4 = MyStringId.GetOrCompute("ContractScreen_Repair_Description_4");

		/// <summary>
		/// Our Equipment needs inspection. Find it, perform a full checkup and repair any damage you can find.
		/// </summary>
		public static readonly MyStringId ContractScreen_Repair_Description_5 = MyStringId.GetOrCompute("ContractScreen_Repair_Description_5");

		/// <summary>
		/// Changes color of the safe zone sphere.
		/// </summary>
		public static readonly MyStringId SafeZone_Color_TTP = MyStringId.GetOrCompute("SafeZone_Color_TTP");

		/// <summary>
		/// s
		/// </summary>
		public static readonly MyStringId Beacon_SafeZone_ToolTip_PluralSuffix_Activation = MyStringId.GetOrCompute("Beacon_SafeZone_ToolTip_PluralSuffix_Activation");

		/// <summary>
		/// s
		/// </summary>
		public static readonly MyStringId Beacon_SafeZone_ToolTip_PluralSuffix_Minutes = MyStringId.GetOrCompute("Beacon_SafeZone_ToolTip_PluralSuffix_Minutes");

		/// <summary>
		/// s
		/// </summary>
		public static readonly MyStringId Beacon_SafeZone_ToolTip_PluralSuffix_ZoneChips = MyStringId.GetOrCompute("Beacon_SafeZone_ToolTip_PluralSuffix_ZoneChips");

		/// <summary>
		/// Economy
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_Economy = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Economy");

<<<<<<< HEAD
		/// <summary>
		/// Weather
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_Weather = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Weather");

		/// <summary>
		/// Force Random Weather
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_Weather_Generate = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Weather_Generate");

		/// <summary>
		/// Create Lightning
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_Weather_Lightning = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Weather_Lightning");

		/// <summary>
		/// Creates lightning where you are looking
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_Weather_Lightning_Tooltip = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Weather_Lightning_Tooltip");

		/// <summary>
		/// Forces a random weather using planet's weather system
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_Weather_Generate_Tooltip = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Weather_Generate_Tooltip");

		/// <summary>
		/// Create Weather
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_Weather_Create = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Weather_Create");

		/// <summary>
		/// Modify Weather
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_Weather_Modify = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Weather_Modify");

		/// <summary>
		/// Creates the selected weather
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_Weather_Create_Tooltip = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Weather_Create_Tooltip");

		/// <summary>
		/// Weather to create
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_Weather_CreateCombo_Tooltip = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Weather_CreateCombo_Tooltip");

		/// <summary>
		/// Current Weather
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_Weather_Current = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Weather_Current");

		/// <summary>
		/// Current Weather Intensity
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_Weather_CurrentIntensity = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Weather_CurrentIntensity");

		/// <summary>
		/// Current Temperature
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_Weather_CurrentTemperature = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Weather_CurrentTemperature");

		/// <summary>
		/// Replace Weather
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_Weather_Replace = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Weather_Replace");

		/// <summary>
		/// Replaces the current Weather with the selected weather
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_Weather_Replace_Tooltip = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Weather_Replace_Tooltip");

		/// <summary>
		/// Next Weather
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_Weather_Next = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Weather_Next");

		/// <summary>
		/// Remove Weather
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_Weather_Remove = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Weather_Remove");

		/// <summary>
		/// Removes the current Weather
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_Weather_Remove_Tooltip = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Weather_Remove_Tooltip");

		/// <summary>
		/// Incoming Weather
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_Weather_Incoming = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Weather_Incoming");

		/// <summary>
		/// A client of ours listed a reward for the one who can retrieve a lost drop pod in time. A fast vehicle and keen eye is recommended.
		/// </summary>
=======
		public static readonly MyStringId ScreenDebugAdminMenu_Weather = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Weather");

		public static readonly MyStringId ScreenDebugAdminMenu_Weather_Generate = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Weather_Generate");

		public static readonly MyStringId ScreenDebugAdminMenu_Weather_Lightning = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Weather_Lightning");

		public static readonly MyStringId ScreenDebugAdminMenu_Weather_Lightning_Tooltip = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Weather_Lightning_Tooltip");

		public static readonly MyStringId ScreenDebugAdminMenu_Weather_Generate_Tooltip = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Weather_Generate_Tooltip");

		public static readonly MyStringId ScreenDebugAdminMenu_Weather_Create = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Weather_Create");

		public static readonly MyStringId ScreenDebugAdminMenu_Weather_Modify = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Weather_Modify");

		public static readonly MyStringId ScreenDebugAdminMenu_Weather_Create_Tooltip = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Weather_Create_Tooltip");

		public static readonly MyStringId ScreenDebugAdminMenu_Weather_CreateCombo_Tooltip = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Weather_CreateCombo_Tooltip");

		public static readonly MyStringId ScreenDebugAdminMenu_Weather_Current = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Weather_Current");

		public static readonly MyStringId ScreenDebugAdminMenu_Weather_CurrentIntensity = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Weather_CurrentIntensity");

		public static readonly MyStringId ScreenDebugAdminMenu_Weather_CurrentTemperature = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Weather_CurrentTemperature");

		public static readonly MyStringId ScreenDebugAdminMenu_Weather_Replace = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Weather_Replace");

		public static readonly MyStringId ScreenDebugAdminMenu_Weather_Replace_Tooltip = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Weather_Replace_Tooltip");

		public static readonly MyStringId ScreenDebugAdminMenu_Weather_Next = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Weather_Next");

		public static readonly MyStringId ScreenDebugAdminMenu_Weather_Remove = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Weather_Remove");

		public static readonly MyStringId ScreenDebugAdminMenu_Weather_Remove_Tooltip = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Weather_Remove_Tooltip");

		public static readonly MyStringId ScreenDebugAdminMenu_Weather_Incoming = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Weather_Incoming");

>>>>>>> d46cf8619665219cc163a7b28984ced59ed9470d
		public static readonly MyStringId ContractScreen_Find_Description_3 = MyStringId.GetOrCompute("ContractScreen_Find_Description_3");

		/// <summary>
		/// A courier dropped a transport container to distract his pursuers. It did not work but we are interested in seeing it's contents returned. Locate this container and mark it for pickup.
		/// </summary>
		public static readonly MyStringId ContractScreen_Find_Description_4 = MyStringId.GetOrCompute("ContractScreen_Find_Description_4");

		/// <summary>
		/// Select Zone Texture:
		/// </summary>
		public static readonly MyStringId SafeZone_Texture = MyStringId.GetOrCompute("SafeZone_Texture");

		/// <summary>
		/// Aura
		/// </summary>
		public static readonly MyStringId SafeZone_Texture_Aura = MyStringId.GetOrCompute("SafeZone_Texture_Aura");

		/// <summary>
		/// Noise
		/// </summary>
		public static readonly MyStringId SafeZone_Texture_Noise = MyStringId.GetOrCompute("SafeZone_Texture_Noise");

		/// <summary>
		/// Organic
		/// </summary>
		public static readonly MyStringId SafeZone_Texture_Organic = MyStringId.GetOrCompute("SafeZone_Texture_Organic");

		/// <summary>
		/// Disco
		/// </summary>
		public static readonly MyStringId SafeZone_Texture_Disco = MyStringId.GetOrCompute("SafeZone_Texture_Disco");

		/// <summary>
		/// Dots
		/// </summary>
		public static readonly MyStringId SafeZone_Texture_Dots = MyStringId.GetOrCompute("SafeZone_Texture_Dots");

		/// <summary>
		/// Rain
		/// </summary>
		public static readonly MyStringId SafeZone_Texture_Rain = MyStringId.GetOrCompute("SafeZone_Texture_Rain");

		/// <summary>
		/// Default
		/// </summary>
		public static readonly MyStringId SafeZone_Texture_Default = MyStringId.GetOrCompute("SafeZone_Texture_Default");

		/// <summary>
		/// Disabled
		/// </summary>
		public static readonly MyStringId SafeZone_Texture_Disabled = MyStringId.GetOrCompute("SafeZone_Texture_Disabled");

		/// <summary>
		/// Economy DLC Required. Changes texture of safe zone.
		/// </summary>
		public static readonly MyStringId SafeZone_Texture_DLCReq_TTIP = MyStringId.GetOrCompute("SafeZone_Texture_DLCReq_TTIP");

		/// <summary>
		/// Hexagon
		/// </summary>
		public static readonly MyStringId SafeZone_Texture_Hexagon = MyStringId.GetOrCompute("SafeZone_Texture_Hexagon");

		/// <summary>
		/// Lines
		/// </summary>
		public static readonly MyStringId SafeZone_Texture_Lines = MyStringId.GetOrCompute("SafeZone_Texture_Lines");

		/// <summary>
		/// Digital
		/// </summary>
		public static readonly MyStringId SafeZone_Texture_Digital = MyStringId.GetOrCompute("SafeZone_Texture_Digital");

		/// <summary>
		/// Restricted
		/// </summary>
		public static readonly MyStringId SafeZone_Texture_Restricted = MyStringId.GetOrCompute("SafeZone_Texture_Restricted");

		/// <summary>
		/// Gloura
		/// </summary>
		public static readonly MyStringId SafeZone_Texture_Gloura = MyStringId.GetOrCompute("SafeZone_Texture_Gloura");

		/// <summary>
		/// Clang
		/// </summary>
		public static readonly MyStringId SafeZone_Texture_Clang = MyStringId.GetOrCompute("SafeZone_Texture_Clang");

		/// <summary>
		/// KeenSWH Logo
		/// </summary>
		public static readonly MyStringId SafeZone_Texture_KeenSWH = MyStringId.GetOrCompute("SafeZone_Texture_KeenSWH");

		/// <summary>
		/// Voronoi
		/// </summary>
		public static readonly MyStringId SafeZone_Texture_Voronoi = MyStringId.GetOrCompute("SafeZone_Texture_Voronoi");

		/// <summary>
		/// Changes texture of safe zone.
		/// </summary>
		public static readonly MyStringId SafeZone_Texture_TTIP = MyStringId.GetOrCompute("SafeZone_Texture_TTIP");

		/// <summary>
		/// Ignore Safe Zones
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_IgnoreSafeZones = MyStringId.GetOrCompute("ScreenDebugAdminMenu_IgnoreSafeZones");

		/// <summary>
		/// When enabled you will be completely immune to the effects of safezone. WARNING: This affects only your characters. Grids will still be affected.
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_IgnoreSafeZonesTip = MyStringId.GetOrCompute("ScreenDebugAdminMenu_IgnoreSafeZonesTip");

		/// <summary>
		/// Amount:
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_AddReputation_ChangeReputation = MyStringId.GetOrCompute("ScreenDebugAdminMenu_AddReputation_ChangeReputation");

		/// <summary>
		/// Change
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_AddReputation_ConfirmButton = MyStringId.GetOrCompute("ScreenDebugAdminMenu_AddReputation_ConfirmButton");

		/// <summary>
		/// Current reputation:
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_AddReputation_CurrentReputation = MyStringId.GetOrCompute("ScreenDebugAdminMenu_AddReputation_CurrentReputation");

		/// <summary>
		/// with faction
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_AddReputation_FactionLabel = MyStringId.GetOrCompute("ScreenDebugAdminMenu_AddReputation_FactionLabel");

		/// <summary>
		/// Final reputation:
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_AddReputation_FinalReputation = MyStringId.GetOrCompute("ScreenDebugAdminMenu_AddReputation_FinalReputation");

		/// <summary>
		/// Change reputation of player
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_AddReputation_PlayerLabel = MyStringId.GetOrCompute("ScreenDebugAdminMenu_AddReputation_PlayerLabel");

		/// <summary>
		/// Propagate reputation
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_AddReputation_ReputationPropagate = MyStringId.GetOrCompute("ScreenDebugAdminMenu_AddReputation_ReputationPropagate");

		/// <summary>
		/// Propagate reputation to friends and enemies of faction.  Warning: Propagation of positive and negative reputation is not symmetric. Propagating 1000 and then -1000 won't have zero sum for friends and foes of the faction.
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_AddReputation_ReputationPropagate_Tooltip = MyStringId.GetOrCompute("ScreenDebugAdminMenu_AddReputation_ReputationPropagate_Tooltip");

		/// <summary>
		/// Safe zones can be enabled  only on stations.
		/// </summary>
		public static readonly MyStringId TerminalSafeZoneNeedsStation = MyStringId.GetOrCompute("TerminalSafeZoneNeedsStation");

		/// <summary>
		/// Unlimited
		/// </summary>
		public static readonly MyStringId ScreenTerminalInventory_UnlimitedVolume = MyStringId.GetOrCompute("ScreenTerminalInventory_UnlimitedVolume");

		/// <summary>
		/// When enabled, you will completely ignore all PCU limits. This may cause you to go into negative PCUs.
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_IgnorePcuTip = MyStringId.GetOrCompute("ScreenDebugAdminMenu_IgnorePcuTip");

		/// <summary>
		/// Ignore PCU limits
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_Pcu = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Pcu");

		/// <summary>
		/// Please note: If you remain inactive for 1 minute you will be disconnected.
		/// </summary>
		public static readonly MyStringId Trash_KickAFKWarning = MyStringId.GetOrCompute("Trash_KickAFKWarning");

		/// <summary>
		/// Removal not allowed
		/// </summary>
		public static readonly MyStringId Economy_CantRemoveStation_Caption = MyStringId.GetOrCompute("Economy_CantRemoveStation_Caption");

		/// <summary>
		/// Economy stations are handled by Economy system. You may not remove them.
		/// </summary>
		public static readonly MyStringId Economy_CantRemoveStation_Text = MyStringId.GetOrCompute("Economy_CantRemoveStation_Text");

		/// <summary>
		/// Color
		/// </summary>
		public static readonly MyStringId ScreenAdmin_Safezone_ColorLabel = MyStringId.GetOrCompute("ScreenAdmin_Safezone_ColorLabel");

		/// <summary>
		/// Texture and Color:
		/// </summary>
		public static readonly MyStringId ScreenAdmin_Safezone_TextureColorLabel = MyStringId.GetOrCompute("ScreenAdmin_Safezone_TextureColorLabel");

		/// <summary>
		/// Offer
		/// </summary>
		public static readonly MyStringId StoreBlockView_OfferItem = MyStringId.GetOrCompute("StoreBlockView_OfferItem");

		/// <summary>
		/// Order
		/// </summary>
		public static readonly MyStringId StoreBlockView_OrderItem = MyStringId.GetOrCompute("StoreBlockView_OrderItem");

		/// <summary>
		/// All
		/// </summary>
		public static readonly MyStringId StoreScreen_AllButton = MyStringId.GetOrCompute("StoreScreen_AllButton");

		/// <summary>
		/// Activity Log
		/// </summary>
		public static readonly MyStringId Transaction_Form_ActivityLogLabel = MyStringId.GetOrCompute("Transaction_Form_ActivityLogLabel");

		/// <summary>
		/// Amount
		/// </summary>
		public static readonly MyStringId Transaction_Form_Log_AmountHeader = MyStringId.GetOrCompute("Transaction_Form_Log_AmountHeader");

		/// <summary>
		/// Date
		/// </summary>
		public static readonly MyStringId Transaction_Form_Log_DateHeader = MyStringId.GetOrCompute("Transaction_Form_Log_DateHeader");

		/// <summary>
		/// Name
		/// </summary>
		public static readonly MyStringId Transaction_Form_Log_NameHeader = MyStringId.GetOrCompute("Transaction_Form_Log_NameHeader");

		/// <summary>
		/// Volume: 
		/// </summary>
		public static readonly MyStringId ContractScreen_ObtainDeliver_ItemVolume = MyStringId.GetOrCompute("ContractScreen_ObtainDeliver_ItemVolume");

		/// <summary>
		/// Medkit
		/// </summary>
		public static readonly MyStringId DisplayName_Item_Medkit = MyStringId.GetOrCompute("DisplayName_Item_Medkit");

		/// <summary>
		/// Consumables
		/// </summary>
		public static readonly MyStringId DisplayName_Category_Consumables = MyStringId.GetOrCompute("DisplayName_Category_Consumables");

		/// <summary>
		/// Powerkit
		/// </summary>
		public static readonly MyStringId DisplayName_Item_Powerkit = MyStringId.GetOrCompute("DisplayName_Item_Powerkit");

		/// <summary>
		/// Space Credit
		/// </summary>
		public static readonly MyStringId DisplayName_Item_SpaceCredit = MyStringId.GetOrCompute("DisplayName_Item_SpaceCredit");

		/// <summary>
		/// Cashback:
		/// </summary>
		public static readonly MyStringId StoreBlockView_CashBack = MyStringId.GetOrCompute("StoreBlockView_CashBack");

		/// <summary>
		/// Maximum GPS deviation:
		/// </summary>
		public static readonly MyStringId ContractScreen_Tooltip_MaxGpsOffset = MyStringId.GetOrCompute("ContractScreen_Tooltip_MaxGpsOffset");

		/// <summary>
		/// Show Preview
		/// </summary>
		public static readonly MyStringId StoreScreen_Preview = MyStringId.GetOrCompute("StoreScreen_Preview");

		/// <summary>
		/// Show: 
		/// </summary>
		public static readonly MyStringId ContractScreen_ContractFilterTitle = MyStringId.GetOrCompute("ContractScreen_ContractFilterTitle");

		/// <summary>
		/// All
		/// </summary>
		public static readonly MyStringId ContractType_NameLocalizationKey_All = MyStringId.GetOrCompute("ContractType_NameLocalizationKey_All");

		/// <summary>
		/// Hauling
		/// </summary>
		public static readonly MyStringId ContractType_NameLocalizationKey_Deliver = MyStringId.GetOrCompute("ContractType_NameLocalizationKey_Deliver");

		/// <summary>
		/// Escort
		/// </summary>
		public static readonly MyStringId ContractType_NameLocalizationKey_Escort = MyStringId.GetOrCompute("ContractType_NameLocalizationKey_Escort");

		/// <summary>
		/// Search
		/// </summary>
		public static readonly MyStringId ContractType_NameLocalizationKey_Find = MyStringId.GetOrCompute("ContractType_NameLocalizationKey_Find");

		/// <summary>
		/// Bounty
		/// </summary>
		public static readonly MyStringId ContractType_NameLocalizationKey_Hunt = MyStringId.GetOrCompute("ContractType_NameLocalizationKey_Hunt");

		/// <summary>
		/// Acquisition
		/// </summary>
		public static readonly MyStringId ContractType_NameLocalizationKey_ObtainAndDeliver = MyStringId.GetOrCompute("ContractType_NameLocalizationKey_ObtainAndDeliver");

		/// <summary>
		/// Repair
		/// </summary>
		public static readonly MyStringId ContractType_NameLocalizationKey_Repair = MyStringId.GetOrCompute("ContractType_NameLocalizationKey_Repair");

		/// <summary>
		/// A datapad is an electronic device used to store and display information.
		/// </summary>
		public static readonly MyStringId Description_Datapad = MyStringId.GetOrCompute("Description_Datapad");

		/// <summary>
		/// A medkit is a case containing medical supplies for healing astronaut.
		/// </summary>
		public static readonly MyStringId Description_Medkit = MyStringId.GetOrCompute("Description_Medkit");

		/// <summary>
		/// A package is a box used for storing items for Hauling contract.
		/// </summary>
		public static readonly MyStringId Description_Package = MyStringId.GetOrCompute("Description_Package");

		/// <summary>
		/// A powerkit is a portable battery pack for recharging suit of an astronaut.
		/// </summary>
		public static readonly MyStringId Description_Powerkit = MyStringId.GetOrCompute("Description_Powerkit");

		/// <summary>
		/// A Space Credit is a currency used for trading.
		/// </summary>
		public static readonly MyStringId Description_SpaceCredit = MyStringId.GetOrCompute("Description_SpaceCredit");

		/// <summary>
		/// Badge
		/// </summary>
		public static readonly MyStringId LCD_Economy_Badge = MyStringId.GetOrCompute("LCD_Economy_Badge");

		/// <summary>
		/// Blueprint 2
		/// </summary>
		public static readonly MyStringId LCD_Economy_Blueprint_2 = MyStringId.GetOrCompute("LCD_Economy_Blueprint_2");

		/// <summary>
		/// Blueprint 3
		/// </summary>
		public static readonly MyStringId LCD_Economy_Blueprint_3 = MyStringId.GetOrCompute("LCD_Economy_Blueprint_3");

		/// <summary>
		/// Charts
		/// </summary>
		public static readonly MyStringId LCD_Economy_Charts = MyStringId.GetOrCompute("LCD_Economy_Charts");

		/// <summary>
		/// Clear
		/// </summary>
		public static readonly MyStringId LCD_Economy_Clear = MyStringId.GetOrCompute("LCD_Economy_Clear");

		/// <summary>
		/// Coins
		/// </summary>
		public static readonly MyStringId LCD_Economy_Coins = MyStringId.GetOrCompute("LCD_Economy_Coins");

		/// <summary>
		/// Faction
		/// </summary>
		public static readonly MyStringId LCD_Economy_Faction_1 = MyStringId.GetOrCompute("LCD_Economy_Faction_1");

		/// <summary>
		/// Graph 1
		/// </summary>
		public static readonly MyStringId LCD_Economy_Graph_1 = MyStringId.GetOrCompute("LCD_Economy_Graph_1");

		/// <summary>
		/// Graph 2
		/// </summary>
		public static readonly MyStringId LCD_Economy_Graph_2 = MyStringId.GetOrCompute("LCD_Economy_Graph_2");

		/// <summary>
		/// Graph 3
		/// </summary>
		public static readonly MyStringId LCD_Economy_Graph_3 = MyStringId.GetOrCompute("LCD_Economy_Graph_3");

		/// <summary>
		/// Graph 4
		/// </summary>
		public static readonly MyStringId LCD_Economy_Graph_4 = MyStringId.GetOrCompute("LCD_Economy_Graph_4");

		/// <summary>
		/// Graph 5
		/// </summary>
		public static readonly MyStringId LCD_Economy_Graph_5 = MyStringId.GetOrCompute("LCD_Economy_Graph_5");

		/// <summary>
		/// Keen SWH
		/// </summary>
		public static readonly MyStringId LCD_Economy_KeenSWH = MyStringId.GetOrCompute("LCD_Economy_KeenSWH");

		/// <summary>
		/// Poster
		/// </summary>
		public static readonly MyStringId LCD_Economy_Poster_1 = MyStringId.GetOrCompute("LCD_Economy_Poster_1");

		/// <summary>
		/// SC Here
		/// </summary>
		public static readonly MyStringId LCD_Economy_SC_Here = MyStringId.GetOrCompute("LCD_Economy_SC_Here");

		/// <summary>
		/// SC Logo 1
		/// </summary>
		public static readonly MyStringId LCD_Economy_SC_Logo = MyStringId.GetOrCompute("LCD_Economy_SC_Logo");

		/// <summary>
		/// SE Logo 1
		/// </summary>
		public static readonly MyStringId LCD_Economy_SE_Logo_1 = MyStringId.GetOrCompute("LCD_Economy_SE_Logo_1");

		/// <summary>
		/// SE Logo 2
		/// </summary>
		public static readonly MyStringId LCD_Economy_SE_Logo_2 = MyStringId.GetOrCompute("LCD_Economy_SE_Logo_2");

		/// <summary>
		/// Single Coin
		/// </summary>
		public static readonly MyStringId LCD_Economy_SingleCoin = MyStringId.GetOrCompute("LCD_Economy_SingleCoin");

		/// <summary>
		/// Store
		/// </summary>
		public static readonly MyStringId LCD_Economy_StoreBlock = MyStringId.GetOrCompute("LCD_Economy_StoreBlock");

		/// <summary>
		/// Trade
		/// </summary>
		public static readonly MyStringId LCD_Economy_Trade = MyStringId.GetOrCompute("LCD_Economy_Trade");

		/// <summary>
		/// Trinity
		/// </summary>
		public static readonly MyStringId LCD_Economy_Trinity = MyStringId.GetOrCompute("LCD_Economy_Trinity");

		/// <summary>
		/// Blueprint 1
		/// </summary>
		public static readonly MyStringId LCD_SC_Blueprint = MyStringId.GetOrCompute("LCD_SC_Blueprint");

		/// <summary>
		/// SC Logo 2
		/// </summary>
		public static readonly MyStringId LCD_SC_Logo_2 = MyStringId.GetOrCompute("LCD_SC_Logo_2");

		/// <summary>
		/// Player or faction whose currency will be modified.
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_AddCurrency_Player_Tooltip = MyStringId.GetOrCompute("ScreenDebugAdminMenu_AddCurrency_Player_Tooltip");

		/// <summary>
		/// Faction whose relation will be modified.
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_AddReputation_Faction_Tooltip = MyStringId.GetOrCompute("ScreenDebugAdminMenu_AddReputation_Faction_Tooltip");

		/// <summary>
		/// Player whose relation will be modified.
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_AddReputation_Player_Tooltip = MyStringId.GetOrCompute("ScreenDebugAdminMenu_AddReputation_Player_Tooltip");

		/// <summary>
		/// Automated Teller Machine
		/// </summary>
		public static readonly MyStringId Description_AtmBlock = MyStringId.GetOrCompute("Description_AtmBlock");

		/// <summary>
		/// ATM
		/// </summary>
		public static readonly MyStringId DisplayName_Block_ATM = MyStringId.GetOrCompute("DisplayName_Block_ATM");

		/// <summary>
		/// Press {0} to access ATM
		/// </summary>
		public static readonly MyStringId NotificationHintPressToAccessAtm = MyStringId.GetOrCompute("NotificationHintPressToAccessAtm");

		/// <summary>
		/// ATM
		/// </summary>
		public static readonly MyStringId ScreenCaptionATM = MyStringId.GetOrCompute("ScreenCaptionATM");

		/// <summary>
		/// Allows displaying and selling of items.
		/// </summary>
		public static readonly MyStringId Description_VendingMachine = MyStringId.GetOrCompute("Description_VendingMachine");

		/// <summary>
		/// Vending Machine
		/// </summary>
		public static readonly MyStringId DisplayName_Block_VendingMachine = MyStringId.GetOrCompute("DisplayName_Block_VendingMachine");

		/// <summary>
		/// Press {0} to Buy item
		/// </summary>
		public static readonly MyStringId NotificationHintBuyItem = MyStringId.GetOrCompute("NotificationHintBuyItem");

		/// <summary>
		/// Press {0} for Next item
		/// </summary>
		public static readonly MyStringId NotificationHintNextItem = MyStringId.GetOrCompute("NotificationHintNextItem");

		/// <summary>
		/// Press {0} for Previous item
		/// </summary>
		public static readonly MyStringId NotificationHintPreviewsItem = MyStringId.GetOrCompute("NotificationHintPreviewsItem");

		/// <summary>
		/// Seaching for available offers
		/// </summary>
		public static readonly MyStringId VendingMachine_Script_ConnectingToServer = MyStringId.GetOrCompute("VendingMachine_Script_ConnectingToServer");

		/// <summary>
		/// Data unavailable
		/// </summary>
		public static readonly MyStringId VendingMachine_Script_DataUnavailable = MyStringId.GetOrCompute("VendingMachine_Script_DataUnavailable");

		/// <summary>
		/// Amount:
		/// </summary>
		public static readonly MyStringId VendingMachine_Script_ItemAmount = MyStringId.GetOrCompute("VendingMachine_Script_ItemAmount");

		/// <summary>
		/// Thank You for purchase!
		/// </summary>
		public static readonly MyStringId VendingMachine_Script_MessageBuy = MyStringId.GetOrCompute("VendingMachine_Script_MessageBuy");

		/// <summary>
		/// Transaction failed
		/// </summary>
		public static readonly MyStringId VendingMachine_Script_MessageError = MyStringId.GetOrCompute("VendingMachine_Script_MessageError");

		/// <summary>
		/// Price:
		/// </summary>
		public static readonly MyStringId VendingMachine_Script_PricePerUnit = MyStringId.GetOrCompute("VendingMachine_Script_PricePerUnit");

		/// <summary>
		/// Vending Machine GUI
		/// </summary>
		public static readonly MyStringId DisplayName_TSS_VendingMachine = MyStringId.GetOrCompute("DisplayName_TSS_VendingMachine");

		/// <summary>
		/// Jukebox GUI
		/// </summary>
		public static readonly MyStringId DisplayName_TSS_Jukebox = MyStringId.GetOrCompute("DisplayName_TSS_Jukebox");

		/// <summary>
		/// (Contact system administrator of this machine)
		/// </summary>
		public static readonly MyStringId VendingMachine_Script_ContactAdmin = MyStringId.GetOrCompute("VendingMachine_Script_ContactAdmin");

		/// <summary>
		/// Updating... Try again
		/// </summary>
		public static readonly MyStringId VendingMachine_Script_ItemsTimeout = MyStringId.GetOrCompute("VendingMachine_Script_ItemsTimeout");

		/// <summary>
		/// Insufficient funds
		/// </summary>
		public static readonly MyStringId VendingMachine_Script_NoMoney = MyStringId.GetOrCompute("VendingMachine_Script_NoMoney");

		/// <summary>
		/// Inventory full
		/// </summary>
		public static readonly MyStringId VendingMachine_Script_NotEnoughSpace = MyStringId.GetOrCompute("VendingMachine_Script_NotEnoughSpace");

		/// <summary>
		/// Out of stock
		/// </summary>
		public static readonly MyStringId VendingMachine_Script_OutOfStock = MyStringId.GetOrCompute("VendingMachine_Script_OutOfStock");

		/// <summary>
		/// Safe zone collision. Reduce radius until no safezones are overlapping.
		/// </summary>
		public static readonly MyStringId AdminScreen_Safezone_Collision = MyStringId.GetOrCompute("AdminScreen_Safezone_Collision");

		/// <summary>
		/// Safe zone collision. Reduce radius or move it
		/// </summary>
		public static readonly MyStringId SafeZoneBlock_Safezone_Collision = MyStringId.GetOrCompute("SafeZoneBlock_Safezone_Collision");

		/// <summary>
		/// Discount:
		/// </summary>
		public static readonly MyStringId StoreBlock_OfferDiscount = MyStringId.GetOrCompute("StoreBlock_OfferDiscount");

		/// <summary>
		/// Connection failed. Connector will unblock in {0} seconds.
		/// </summary>
		public static readonly MyStringId Connector_TemporaryBlock = MyStringId.GetOrCompute("Connector_TemporaryBlock");

		/// <summary>
		/// Faction Icon
		/// </summary>
		public static readonly MyStringId DisplayName_TSS_FactionIcon = MyStringId.GetOrCompute("DisplayName_TSS_FactionIcon");

		/// <summary>
		/// No Faction Found
		/// </summary>
		public static readonly MyStringId TSS_FactionIcon_Error = MyStringId.GetOrCompute("TSS_FactionIcon_Error");

		/// <summary>
		/// Set Width
		/// </summary>
		public static readonly MyStringId SafeZone_Size_X = MyStringId.GetOrCompute("SafeZone_Size_X");

		/// <summary>
		/// Set Height
		/// </summary>
		public static readonly MyStringId SafeZone_Size_Y = MyStringId.GetOrCompute("SafeZone_Size_Y");

		/// <summary>
		/// Set Depth
		/// </summary>
		public static readonly MyStringId SafeZone_Size_Z = MyStringId.GetOrCompute("SafeZone_Size_Z");

		/// <summary>
		/// A Contract block lets you set up your own contracts for other players to complete. You can also accept contracts from Trading stations.
		/// </summary>
		public static readonly MyStringId Description_FAQ_ContractBlock = MyStringId.GetOrCompute("Description_FAQ_ContractBlock");

		/// <summary>
		/// Contracts can be accepted trough contract blocks and are a good income of space credit. They can be found at trading stations or from other players with contract blocks.
		/// </summary>
		public static readonly MyStringId Description_FAQ_Contracts = MyStringId.GetOrCompute("Description_FAQ_Contracts");

		/// <summary>
		/// The safe zone block projects a configurable zone to protect your base. The safe zone block requires power and zone chips to function. Zone chips can be bought from trading stations.
		/// </summary>
		public static readonly MyStringId Description_FAQ_SafeZoneBlock = MyStringId.GetOrCompute("Description_FAQ_SafeZoneBlock");

		/// <summary>
		/// Space Credit is the universal currency used to trade with stations and other players. You can withdraw or deposit space credits from store blocks.
		/// </summary>
		public static readonly MyStringId Description_FAQ_SpaceCredit = MyStringId.GetOrCompute("Description_FAQ_SpaceCredit");

		/// <summary>
		/// You can use a store block to trade with players or other factions. Trading can be done from ship inventories when using connectors with trade functions enabled.
		/// </summary>
		public static readonly MyStringId Description_FAQ_StoreBlock = MyStringId.GetOrCompute("Description_FAQ_StoreBlock");

		/// <summary>
		/// Trade stations can spawn on planets, moons in orbit or in deep space. Depending on what faction owns the trade station it can sell Ores, components, amunitions, fuel and ships and let you do contracts for them.
		/// </summary>
		public static readonly MyStringId Description_FAQ_TradeStations = MyStringId.GetOrCompute("Description_FAQ_TradeStations");

		/// <summary>
		/// You can trade with players and stations using Store blocks. Trading with players can be done directly by pressing F3.
		/// </summary>
		public static readonly MyStringId Description_FAQ_Trading = MyStringId.GetOrCompute("Description_FAQ_Trading");

		/// <summary>
		/// Build
		/// </summary>
		public static readonly MyStringId RadialMenuGroupTitle_Build = MyStringId.GetOrCompute("RadialMenuGroupTitle_Build");

		/// <summary>
		/// Recent Blocks
		/// </summary>
		public static readonly MyStringId RadialMenuGroupTitle_LastUsed = MyStringId.GetOrCompute("RadialMenuGroupTitle_LastUsed");

<<<<<<< HEAD
		/// <summary>
		/// Recent Voxels
		/// </summary>
		public static readonly MyStringId RadialMenuGroupTitle_LastUsedVoxels = MyStringId.GetOrCompute("RadialMenuGroupTitle_LastUsedVoxels");

		/// <summary>
		/// {0} Close
		/// </summary>
=======
		public static readonly MyStringId RadialMenuGroupTitle_LastUsedVoxels = MyStringId.GetOrCompute("RadialMenuGroupTitle_LastUsedVoxels");

>>>>>>> d46cf8619665219cc163a7b28984ced59ed9470d
		public static readonly MyStringId RadialMenu_HintClose = MyStringId.GetOrCompute("RadialMenu_HintClose");

		/// <summary>
		/// {0} Confirm
		/// </summary>
		public static readonly MyStringId RadialMenu_HintConfirm = MyStringId.GetOrCompute("RadialMenu_HintConfirm");

		/// <summary>
		/// {0} Cycle blocks in group
		/// </summary>
		public static readonly MyStringId RadialMenu_HintCycleBlocks = MyStringId.GetOrCompute("RadialMenu_HintCycleBlocks");

		/// <summary>
		/// You don't own selected skin. Do you want to visit DLC store?
		/// </summary>
		public static readonly MyStringId SkinNotOwned = MyStringId.GetOrCompute("SkinNotOwned");

		/// <summary>
		/// Did you know?  {0} and {1} are modifier keys. Try holding them while performing any action in-game. And most of the times the action will do something slightly different.
		/// </summary>
		public static readonly MyStringId HintGamepadOnly01Text = MyStringId.GetOrCompute("HintGamepadOnly01Text");

		/// <summary>
		/// Did you know?  If you make mistake while placing blocks in survival mode you can press {0} to switch to Grinder tool. When you have Grinder equipped you can press {0} to switch to the last equipped block.
		/// </summary>
		public static readonly MyStringId HintGamepadOnly02Text = MyStringId.GetOrCompute("HintGamepadOnly02Text");

		/// <summary>
		/// Did you know?  You can move through complicated windows more easily with {0}.
		/// </summary>
		public static readonly MyStringId HintGamepadOnly03Text = MyStringId.GetOrCompute("HintGamepadOnly03Text");

		/// <summary>
		/// Did you know?  Hold {0}+{1} and move {2} and {3} to move camera around your character or ship.
		/// </summary>
		public static readonly MyStringId HintGamepadOnly04Text = MyStringId.GetOrCompute("HintGamepadOnly04Text");

		/// <summary>
		/// Did you know?  If you are building a symmetrical ship, you can activate Symmetry Building Mode through System Radial Menu.
		/// </summary>
		public static readonly MyStringId HintGamepadOnly07Text = MyStringId.GetOrCompute("HintGamepadOnly07Text");

		/// <summary>
		/// Did you know?  You can trigger Emotes Toolbar by holding {0}+{1}.
		/// </summary>
		public static readonly MyStringId HintGamepadOnly09Text = MyStringId.GetOrCompute("HintGamepadOnly09Text");

		/// <summary>
		/// Did you know?  You can modify voxels with Voxel Hand Tool, which can be accesed from System Radial Menu in Creative Mode. You can then place, remove, revert and paint voxels with {GAMEPAD_CONTROL:VOXEL:PRIMARY_TOOL_ACTION}, {GAMEPAD_CONTROL:VOXEL:SECONDARY_TOOL_ACTION}, {GAMEPAD_CONTROL:VOXEL:VOXEL_REVERT} and {GAMEPAD_CONTROL:VOXEL:VOXEL_PAINT} respectively.
		/// </summary>
		public static readonly MyStringId HintGamepadOnly10Text = MyStringId.GetOrCompute("HintGamepadOnly10Text");

		/// <summary>
		/// BUILD:CUBE_DEFAULT_MOUNTPOINT
		/// </summary>
		public static readonly MyStringId HintGamepadOnly11Control0 = MyStringId.GetOrCompute("HintGamepadOnly11Control0");

		/// <summary>
		/// Did you know?  You can toggle off the block auto rotation function with {0}
		/// </summary>
		public static readonly MyStringId HintGamepadOnly11Text = MyStringId.GetOrCompute("HintGamepadOnly11Text");

		/// <summary>
		/// SPACESHIP:FAKE_RS
		/// </summary>
		public static readonly MyStringId HintGamepadOnly12Control0 = MyStringId.GetOrCompute("HintGamepadOnly12Control0");

		/// <summary>
		/// Did you know?  You can steer vehicles from a turret if the cockpit is set to main cockpit. Hold {0} to control turning around.
		/// </summary>
		public static readonly MyStringId HintGamepadOnly12Text = MyStringId.GetOrCompute("HintGamepadOnly12Text");

		/// <summary>
		/// TOOLS:SECONDARY_TOOL_ACTION
		/// </summary>
		public static readonly MyStringId HintGamepadOnly13Control0 = MyStringId.GetOrCompute("HintGamepadOnly13Control0");

		/// <summary>
		/// Did you know?  You can dig tunnels quickly without producing ore by using {0} with your drill.
		/// </summary>
		public static readonly MyStringId HintGamepadOnly13Text = MyStringId.GetOrCompute("HintGamepadOnly13Text");

		/// <summary>
		/// CLIPBOARD:SWITCH_BUILDING_MODE
		/// </summary>
		public static readonly MyStringId HintGamepadOnly00Control0 = MyStringId.GetOrCompute("HintGamepadOnly00Control0");

		/// <summary>
		/// Did you know?  While holding a blueprint in creative mode, you can use {0} to align them to a planet's Gravity.
		/// </summary>
		public static readonly MyStringId HintGamepadOnly00Text = MyStringId.GetOrCompute("HintGamepadOnly00Text");

		/// <summary>
		/// BASE:FAKE_MODIFIER_RB
		/// </summary>
		public static readonly MyStringId HintGamepadOnly08Control1 = MyStringId.GetOrCompute("HintGamepadOnly08Control1");

		/// <summary>
		/// Did you know?  Holding {0}, {1} or {0}-{1} enables you to move stacks of items by 10, 100 and 1000 at the time.
		/// </summary>
		public static readonly MyStringId HintGamepadOnly08Text = MyStringId.GetOrCompute("HintGamepadOnly08Text");

		/// <summary>
		/// SPACESHIP:FAKE_LS
		/// </summary>
		public static readonly MyStringId HintGamepadOnly05Control0 = MyStringId.GetOrCompute("HintGamepadOnly05Control0");

		/// <summary>
		/// Did you know?  You can zoom in and out while using a camera or turret with {0}.
		/// </summary>
		public static readonly MyStringId HintGamepadOnly05Text = MyStringId.GetOrCompute("HintGamepadOnly05Text");

		/// <summary>
		/// Did you know? You can change the way GPS coordinates and Antennas are displayed on your HUD through System Radial Menu.
		/// </summary>
		public static readonly MyStringId HintGamepadOnly06Text = MyStringId.GetOrCompute("HintGamepadOnly06Text");

		/// <summary>
		/// Disabled for this World.
		/// </summary>
		public static readonly MyStringId RadialMenu_Label_VoxelHand_Disabled = MyStringId.GetOrCompute("RadialMenu_Label_VoxelHand_Disabled");

		/// <summary>
		/// Available only in Creative mode or with creative tools.
		/// </summary>
		public static readonly MyStringId RadialMenu_Label_VoxelHand_Survival = MyStringId.GetOrCompute("RadialMenu_Label_VoxelHand_Survival");

		/// <summary>
		/// BASE:FAKE_MODIFIER_LB
		/// </summary>
		public static readonly MyStringId HintGamepadOnly01Control0 = MyStringId.GetOrCompute("HintGamepadOnly01Control0");

		/// <summary>
		/// BASE:FAKE_MODIFIER_RB
		/// </summary>
		public static readonly MyStringId HintGamepadOnly01Control1 = MyStringId.GetOrCompute("HintGamepadOnly01Control1");

		/// <summary>
		/// BUILD:SECONDARY_TOOL_ACTION
		/// </summary>
		public static readonly MyStringId HintGamepadOnly02Control0 = MyStringId.GetOrCompute("HintGamepadOnly02Control0");

		/// <summary>
		/// GUI:FAKE_RS
		/// </summary>
		public static readonly MyStringId HintGamepadOnly03Control0 = MyStringId.GetOrCompute("HintGamepadOnly03Control0");

		/// <summary>
		/// BASE:FAKE_MODIFIER_LB
		/// </summary>
		public static readonly MyStringId HintGamepadOnly04Control0 = MyStringId.GetOrCompute("HintGamepadOnly04Control0");

		/// <summary>
		/// BASE:FAKE_MODIFIER_RB
		/// </summary>
		public static readonly MyStringId HintGamepadOnly04Control1 = MyStringId.GetOrCompute("HintGamepadOnly04Control1");

		/// <summary>
		/// BASE:FAKE_LS
		/// </summary>
		public static readonly MyStringId HintGamepadOnly04Control2 = MyStringId.GetOrCompute("HintGamepadOnly04Control2");

		/// <summary>
		/// BASE:FAKE_RS
		/// </summary>
		public static readonly MyStringId HintGamepadOnly04Control3 = MyStringId.GetOrCompute("HintGamepadOnly04Control3");

		/// <summary>
		/// BASE:FAKE_MODIFIER_LB
		/// </summary>
		public static readonly MyStringId HintGamepadOnly09Control0 = MyStringId.GetOrCompute("HintGamepadOnly09Control0");

		/// <summary>
		/// BASE:FAKE_MODIFIER_RB
		/// </summary>
		public static readonly MyStringId HintGamepadOnly09Control1 = MyStringId.GetOrCompute("HintGamepadOnly09Control1");

		/// <summary>
		/// VOXEL:PRIMARY_TOOL_ACTION
		/// </summary>
		public static readonly MyStringId HintGamepadOnly10Control0 = MyStringId.GetOrCompute("HintGamepadOnly10Control0");

		/// <summary>
		/// VOXEL:SECONDARY_TOOL_ACTION
		/// </summary>
		public static readonly MyStringId HintGamepadOnly10Control1 = MyStringId.GetOrCompute("HintGamepadOnly10Control1");

		/// <summary>
		/// VOXEL:VOXEL_REVERT
		/// </summary>
		public static readonly MyStringId HintGamepadOnly10Control2 = MyStringId.GetOrCompute("HintGamepadOnly10Control2");

		/// <summary>
		/// BASE:FAKE_MODIFIER_LB
		/// </summary>
		public static readonly MyStringId HintGamepadOnly08Control0 = MyStringId.GetOrCompute("HintGamepadOnly08Control0");

		/// <summary>
		/// VOXEL:VOXEL_PAINT
		/// </summary>
		public static readonly MyStringId HintGamepadOnly10Control3 = MyStringId.GetOrCompute("HintGamepadOnly10Control3");

		/// <summary>
		/// Disabled for this world.
		/// </summary>
		public static readonly MyStringId RadialMenu_Label_DisabledWorld = MyStringId.GetOrCompute("RadialMenu_Label_DisabledWorld");

		/// <summary>
		/// Available only in creative mode or with creative tools.
		/// </summary>
		public static readonly MyStringId RadialMenu_Label_CreativeOnly = MyStringId.GetOrCompute("RadialMenu_Label_CreativeOnly");

		/// <summary>
		/// Available only for admins.
		/// </summary>
		public static readonly MyStringId RadialMenu_Label_AdminOnly = MyStringId.GetOrCompute("RadialMenu_Label_AdminOnly");

		/// <summary>
		/// Available only in survival mode.
		/// </summary>
		public static readonly MyStringId RadialMenu_Label_SurvivalOnly = MyStringId.GetOrCompute("RadialMenu_Label_SurvivalOnly");

		/// <summary>
		/// Creative
		/// </summary>
		public static readonly MyStringId RadialMenuGroupTitle_Creative = MyStringId.GetOrCompute("RadialMenuGroupTitle_Creative");

		/// <summary>
		/// View
		/// </summary>
		public static readonly MyStringId RadialMenuGroupTitle_View = MyStringId.GetOrCompute("RadialMenuGroupTitle_View");

		/// <summary>
		/// Selected sounds
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_JukeboxScreenSelectedSounds = MyStringId.GetOrCompute("BlockPropertyTitle_JukeboxScreenSelectedSounds");

		/// <summary>
		/// Add to selection
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_JukeboxScreenSelectSounds = MyStringId.GetOrCompute("BlockPropertyTitle_JukeboxScreenSelectSounds");

		/// <summary>
		/// Remove selected
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_JukeboxScreenRemoveSelectedSounds = MyStringId.GetOrCompute("BlockPropertyTitle_JukeboxScreenRemoveSelectedSounds");

		/// <summary>
		/// Press {0} to play/stop music
		/// </summary>
		public static readonly MyStringId NotificationHintJukeboxPlay = MyStringId.GetOrCompute("NotificationHintJukeboxPlay");

		/// <summary>
		/// Press {0} to play previous track
		/// </summary>
		public static readonly MyStringId NotificationHintJukeboxPlayPrevious = MyStringId.GetOrCompute("NotificationHintJukeboxPlayPrevious");

		/// <summary>
		/// Press {0} to play next track
		/// </summary>
		public static readonly MyStringId NotificationHintJukeboxPlayNext = MyStringId.GetOrCompute("NotificationHintJukeboxPlayNext");

		/// <summary>
		/// Calm Music 01
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusCalm_01 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusCalm_01");

		/// <summary>
		/// Calm Music 02
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusCalm_02 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusCalm_02");

		/// <summary>
		/// Calm Music 03
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusCalm_03 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusCalm_03");

		/// <summary>
		/// Calm Music 04
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusCalm_04 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusCalm_04");

		/// <summary>
		/// Calm Music 05
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusCalm_05 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusCalm_05");

		/// <summary>
		/// Calm Music 06
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusCalm_06 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusCalm_06");

		/// <summary>
		/// Calm Music 07
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusCalm_07 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusCalm_07");

		/// <summary>
		/// Calm Music 08
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusCalm_08 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusCalm_08");

		/// <summary>
		/// Calm Music 09
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusCalm_09 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusCalm_09");

		/// <summary>
		/// Calm Music 10
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusCalm_10 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusCalm_10");

		/// <summary>
		/// Calm Music 11
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusCalm_11 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusCalm_11");

		/// <summary>
		/// Calm Music 12
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusCalm_12 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusCalm_12");

		/// <summary>
		/// Calm Music 13
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusCalm_13 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusCalm_13");

		/// <summary>
		/// Mystery Music 01
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusMystery_01 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusMystery_01");

		/// <summary>
		/// Mystery Music 02
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusMystery_02 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusMystery_02");

		/// <summary>
		/// Mystery Music 03
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusMystery_03 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusMystery_03");

		/// <summary>
		/// Mystery Music 04
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusMystery_04 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusMystery_04");

		/// <summary>
		/// Mystery Music 05
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusMystery_05 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusMystery_05");

		/// <summary>
		/// Mystery Music 06
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusMystery_06 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusMystery_06");

		/// <summary>
		/// Mystery Music 07
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusMystery_07 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusMystery_07");

		/// <summary>
		/// Mystery Music 08
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusMystery_08 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusMystery_08");

		/// <summary>
		/// Build Music 01
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusBuild_01 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusBuild_01");

		/// <summary>
		/// Build Music 02
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusBuild_02 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusBuild_02");

		/// <summary>
		/// Build Music 03
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusBuild_03 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusBuild_03");

		/// <summary>
		/// Build Music 04
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusBuild_04 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusBuild_04");

		/// <summary>
		/// Build Music 05
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusBuild_05 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusBuild_05");

		/// <summary>
		/// Build Music 06
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusBuild_06 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusBuild_06");

		/// <summary>
		/// Build Music 07
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusBuild_07 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusBuild_07");

		/// <summary>
		/// Space Music 01
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusSpace_01 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusSpace_01");

		/// <summary>
		/// Space Music 02
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusSpace_02 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusSpace_02");

		/// <summary>
		/// Space Music 03
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusSpace_03 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusSpace_03");

		/// <summary>
		/// Space Music 04
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusSpace_04 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusSpace_04");

		/// <summary>
		/// Space Music 05
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusSpace_05 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusSpace_05");

		/// <summary>
		/// Space Music 06
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusSpace_06 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusSpace_06");

		/// <summary>
		/// Space Music 07
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusSpace_07 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusSpace_07");

		/// <summary>
		/// Space Music 08
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusSpace_08 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusSpace_08");

		/// <summary>
		/// Space Music 09
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusSpace_09 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusSpace_09");

		/// <summary>
		/// Space Music 10
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusSpace_10 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusSpace_10");

		/// <summary>
		/// Space Music 11
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusSpace_11 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusSpace_11");

		/// <summary>
		/// Space Music 12
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusSpace_12 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusSpace_12");

		/// <summary>
		/// Light Fight Music 01
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusLightFight_01 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusLightFight_01");

		/// <summary>
		/// Light Fight Music 02
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusLightFight_02 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusLightFight_02");

		/// <summary>
		/// Light Fight Music 03
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusLightFight_03 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusLightFight_03");

		/// <summary>
		/// Light Fight Music 04
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusLightFight_04 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusLightFight_04");

		/// <summary>
		/// Light Fight Music 05
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusLightFight_05 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusLightFight_05");

		/// <summary>
		/// Light Fight Music 06
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusLightFight_06 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusLightFight_06");

		/// <summary>
		/// Light Fight Music 07
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusLightFight_07 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusLightFight_07");

		/// <summary>
		/// Light Fight Music 08
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusLightFight_08 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusLightFight_08");

		/// <summary>
		/// Light Fight Music 09
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusLightFight_09 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusLightFight_09");

		/// <summary>
		/// Light Fight Music 10
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusLightFight_10 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusLightFight_10");

		/// <summary>
		/// Light Fight Music 11
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusLightFight_11 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusLightFight_11");

		/// <summary>
		/// Light Fight Music 12
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusLightFight_12 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusLightFight_12");

		/// <summary>
		/// Light Fight Music 13
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusLightFight_13 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusLightFight_13");

		/// <summary>
		/// Light Fight Music 14
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusLightFight_14 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusLightFight_14");

		/// <summary>
		/// Heavy Fight Music 01
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusHeavyFight_01 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusHeavyFight_01");

		/// <summary>
		/// Heavy Fight Music 02
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusHeavyFight_02 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusHeavyFight_02");

		/// <summary>
		/// Heavy Fight Music 03
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusHeavyFight_03 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusHeavyFight_03");

		/// <summary>
		/// Heavy Fight Music 04
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusHeavyFight_04 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusHeavyFight_04");

		/// <summary>
		/// Heavy Fight Music 05
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusHeavyFight_05 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusHeavyFight_05");

		/// <summary>
		/// Heavy Fight Music 06
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusHeavyFight_06 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusHeavyFight_06");

		/// <summary>
		/// Heavy Fight Music 07
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusHeavyFight_07 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusHeavyFight_07");

		/// <summary>
		/// Heavy Fight Music 08
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusHeavyFight_08 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusHeavyFight_08");

		/// <summary>
		/// Heavy Fight Music 09
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusHeavyFight_09 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusHeavyFight_09");

		/// <summary>
		/// Heavy Fight Music 10
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusHeavyFight_10 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusHeavyFight_10");

		/// <summary>
		/// Heavy Fight Music 11
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusHeavyFight_11 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusHeavyFight_11");

		/// <summary>
		/// Heavy Fight Music 12
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusHeavyFight_12 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusHeavyFight_12");

		/// <summary>
		/// Heavy Fight Music 13
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusHeavyFight_13 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusHeavyFight_13");

		/// <summary>
		/// Heavy Fight Music 14
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusHeavyFight_14 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusHeavyFight_14");

		/// <summary>
		/// Danger Music 01
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusDanger_01 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusDanger_01");

		/// <summary>
		/// Danger Music 02
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusDanger_02 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusDanger_02");

		/// <summary>
		/// Danger Music 03
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusDanger_03 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusDanger_03");

		/// <summary>
		/// Danger Music 04
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusDanger_04 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusDanger_04");

		/// <summary>
		/// Danger Music 05
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusDanger_05 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusDanger_05");

		/// <summary>
		/// Danger Music 06
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusDanger_06 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusDanger_06");

		/// <summary>
		/// EarthLike Music 01
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusEarthlike_01 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusEarthlike_01");

		/// <summary>
		/// EarthLike Music 02
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusEarthlike_02 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusEarthlike_02");

		/// <summary>
		/// EarthLike Music 03
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusEarthlike_03 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusEarthlike_03");

		/// <summary>
		/// EarthLike Music 04
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusEarthlike_04 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusEarthlike_04");

		/// <summary>
		/// EarthLike Music 05
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusEarthlike_05 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusEarthlike_05");

		/// <summary>
		/// EarthLike Music 06
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusEarthlike_06 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusEarthlike_06");

		/// <summary>
		/// Planet Music 01
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusPlanet_01 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusPlanet_01");

		/// <summary>
		/// Planet Music 02
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusPlanet_02 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusPlanet_02");

		/// <summary>
		/// Planet Music 03
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusPlanet_03 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusPlanet_03");

		/// <summary>
		/// Planet Music 04
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusPlanet_04 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusPlanet_04");

		/// <summary>
		/// Planet Music 05
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusPlanet_05 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusPlanet_05");

		/// <summary>
		/// Planet Music 06
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusPlanet_06 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusPlanet_06");

		/// <summary>
		/// Alien Music 01
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusAlien_01 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusAlien_01");

		/// <summary>
		/// Alien Music 02
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusAlien_02 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusAlien_02");

		/// <summary>
		/// Alien Music 03
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusAlien_03 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusAlien_03");

		/// <summary>
		/// Alien Music 04
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusAlien_04 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusAlien_04");

		/// <summary>
		/// Alien Music 05
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusAlien_05 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusAlien_05");

		/// <summary>
		/// Fun Music
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusFun = MyStringId.GetOrCompute("SoundBlock_SoundName_MusFun");

		/// <summary>
		/// Playing
		/// </summary>
		public static readonly MyStringId Jukebox_Script_Playing = MyStringId.GetOrCompute("Jukebox_Script_Playing");

		/// <summary>
		/// Stopped
		/// </summary>
		public static readonly MyStringId Jukebox_Script_Stopped = MyStringId.GetOrCompute("Jukebox_Script_Stopped");

		/// <summary>
		/// No tracks available
		/// </summary>
		public static readonly MyStringId Jukebox_Script_NoTracksAvailable = MyStringId.GetOrCompute("Jukebox_Script_NoTracksAvailable");

		/// <summary>
		/// Select tracks to play in terminal screen
		/// </summary>
		public static readonly MyStringId Jukebox_Script_SelectInTerminal = MyStringId.GetOrCompute("Jukebox_Script_SelectInTerminal");

		/// <summary>
		/// Clang Kola
		/// </summary>
		public static readonly MyStringId DisplayName_Item_ClangCola = MyStringId.GetOrCompute("DisplayName_Item_ClangCola");

		/// <summary>
		/// Cosmic Coffee
		/// </summary>
		public static readonly MyStringId DisplayName_Item_CosmicCoffee = MyStringId.GetOrCompute("DisplayName_Item_CosmicCoffee");

		/// <summary>
		/// Surprisingly strong kola. The recipe for this delicious beverage remains the best kept secret in the solar system.
		/// </summary>
		public static readonly MyStringId Description_ClangKola = MyStringId.GetOrCompute("Description_ClangKola");

		/// <summary>
		/// Brewed with the utmost care by Martian coffee growers, it's guaranteed to help you stay awake in space.
		/// </summary>
		public static readonly MyStringId Description_CosmicCoffee = MyStringId.GetOrCompute("Description_CosmicCoffee");

		/// <summary>
		/// Modded #{0}
		/// </summary>
		public static readonly MyStringId RadialMenuSectionTitle_Modded = MyStringId.GetOrCompute("RadialMenuSectionTitle_Modded");

		/// <summary>
		/// Can respawn only when in character.
		/// </summary>
		public static readonly MyStringId RadialMenu_Label_CharacterOnly = MyStringId.GetOrCompute("RadialMenu_Label_CharacterOnly");

<<<<<<< HEAD
		/// <summary>
		/// {CONTROL:GUI:CANCEL} Back
		/// </summary>
		public static readonly MyStringId Gamepad_Help_Back = MyStringId.GetOrCompute("Gamepad_Help_Back");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_X} Buy
		/// </summary>
		public static readonly MyStringId StoreScreen_Help_Buy = MyStringId.GetOrCompute("StoreScreen_Help_Buy");

		/// <summary>
		/// {CONTROL:GUI:MOVE_LEFT}{CONTROL:GUI:MOVE_RIGHT} Change Amount
		/// </summary>
		public static readonly MyStringId StoreScreen_Help_ChangeAmount = MyStringId.GetOrCompute("StoreScreen_Help_ChangeAmount");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_X} Deposit
		/// </summary>
		public static readonly MyStringId StoreScreen_Help_Deposit = MyStringId.GetOrCompute("StoreScreen_Help_Deposit");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_Y} Refresh
		/// </summary>
		public static readonly MyStringId StoreScreen_Help_Refresh = MyStringId.GetOrCompute("StoreScreen_Help_Refresh");

		/// <summary>
		/// {CONTROL:GUI:LEFT_STICK_BUTTON} Sorted by 
		/// </summary>
		public static readonly MyStringId StoreScreen_Help_SortBy = MyStringId.GetOrCompute("StoreScreen_Help_SortBy");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_Y} Withdraw
		/// </summary>
		public static readonly MyStringId StoreScreen_Help_Withdraw = MyStringId.GetOrCompute("StoreScreen_Help_Withdraw");

		/// <summary>
		/// {CONTROL:GUI:LEFT_BUTTON}{CONTROL:GUI:RIGHT_BUTTON} Change Inventory
		/// </summary>
		public static readonly MyStringId StoreScreen_Help_ChangeInventory = MyStringId.GetOrCompute("StoreScreen_Help_ChangeInventory");

		/// <summary>
		/// BLUEPRINT PUBLISHED
		/// </summary>
		public static readonly MyStringId BlueprintPublished = MyStringId.GetOrCompute("BlueprintPublished");

		/// <summary>
		/// Error accessing service.
		/// </summary>
		public static readonly MyStringId WorkshopError = MyStringId.GetOrCompute("WorkshopError");

		/// <summary>
		/// Publishing Workshop Items is not possible because of privacy settings.
		/// </summary>
		public static readonly MyStringId WorkshopPublishRestricted = MyStringId.GetOrCompute("WorkshopPublishRestricted");

		/// <summary>
		/// Subscribed Workshop Items are not available because of privacy settings.
		/// </summary>
		public static readonly MyStringId WorkshopRestricted = MyStringId.GetOrCompute("WorkshopRestricted");

		/// <summary>
		/// Subscribed Workshop Items are not available because no user is logged in.
		/// </summary>
		public static readonly MyStringId WorkshopNoUser = MyStringId.GetOrCompute("WorkshopNoUser");

		/// <summary>
		/// The workshop is not available due to age restrictions. Your account or a guest user account is age restricted.
		/// </summary>
		public static readonly MyStringId WorkshopAgeRestricted = MyStringId.GetOrCompute("WorkshopAgeRestricted");

		/// <summary>
		/// Offroad Wheel 5x5
		/// </summary>
		public static readonly MyStringId DisplayName_Block_OffroadWheel5x5mirrored = MyStringId.GetOrCompute("DisplayName_Block_OffroadWheel5x5mirrored");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_Y} Refresh
		/// </summary>
		public static readonly MyStringId ActiveContractsScreen_Help_Refresh = MyStringId.GetOrCompute("ActiveContractsScreen_Help_Refresh");

		/// <summary>
		/// Show Active Contracts
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_ActiveContracts = MyStringId.GetOrCompute("ControlMenuItemLabel_ActiveContracts");

		/// <summary>
		/// {CONTROL:GUI:ACCEPT} Select
		/// </summary>
		public static readonly MyStringId MainMenuScreen_Help_Menu = MyStringId.GetOrCompute("MainMenuScreen_Help_Menu");

		/// <summary>
		/// N/A
		/// </summary>
		public static readonly MyStringId RadialMenuAction_EnableBroadcasting_None = MyStringId.GetOrCompute("RadialMenuAction_EnableBroadcasting_None");

		/// <summary>
		/// Off
		/// </summary>
		public static readonly MyStringId RadialMenuAction_EnableBroadcasting_Off = MyStringId.GetOrCompute("RadialMenuAction_EnableBroadcasting_Off");

		/// <summary>
		/// On
		/// </summary>
		public static readonly MyStringId RadialMenuAction_EnableBroadcasting_On = MyStringId.GetOrCompute("RadialMenuAction_EnableBroadcasting_On");

		/// <summary>
		/// N/A
		/// </summary>
		public static readonly MyStringId RadialMenuAction_EnabledConnectors_None = MyStringId.GetOrCompute("RadialMenuAction_EnabledConnectors_None");

		/// <summary>
		/// Off
		/// </summary>
		public static readonly MyStringId RadialMenuAction_EnabledConnectors_Off = MyStringId.GetOrCompute("RadialMenuAction_EnabledConnectors_Off");

		/// <summary>
		/// On
		/// </summary>
		public static readonly MyStringId RadialMenuAction_EnabledConnectors_On = MyStringId.GetOrCompute("RadialMenuAction_EnabledConnectors_On");

		/// <summary>
		/// N/A
		/// </summary>
		public static readonly MyStringId RadialMenuAction_EnabledDampeners_None = MyStringId.GetOrCompute("RadialMenuAction_EnabledDampeners_None");

		/// <summary>
		/// Off
		/// </summary>
		public static readonly MyStringId RadialMenuAction_EnabledDampeners_Off = MyStringId.GetOrCompute("RadialMenuAction_EnabledDampeners_Off");

		/// <summary>
		/// On
		/// </summary>
		public static readonly MyStringId RadialMenuAction_EnabledDampeners_On = MyStringId.GetOrCompute("RadialMenuAction_EnabledDampeners_On");

		/// <summary>
		/// N/A
		/// </summary>
		public static readonly MyStringId RadialMenuAction_EnabledLights_None = MyStringId.GetOrCompute("RadialMenuAction_EnabledLights_None");

		/// <summary>
		/// Off
		/// </summary>
		public static readonly MyStringId RadialMenuAction_EnabledLights_Off = MyStringId.GetOrCompute("RadialMenuAction_EnabledLights_Off");

		/// <summary>
		/// On
		/// </summary>
		public static readonly MyStringId RadialMenuAction_EnabledLights_On = MyStringId.GetOrCompute("RadialMenuAction_EnabledLights_On");

		/// <summary>
		/// N/A
		/// </summary>
		public static readonly MyStringId RadialMenuAction_EnablePower_None = MyStringId.GetOrCompute("RadialMenuAction_EnablePower_None");

		/// <summary>
		/// Off
		/// </summary>
		public static readonly MyStringId RadialMenuAction_EnablePower_Off = MyStringId.GetOrCompute("RadialMenuAction_EnablePower_Off");

		/// <summary>
		/// On
		/// </summary>
		public static readonly MyStringId RadialMenuAction_EnablePower_On = MyStringId.GetOrCompute("RadialMenuAction_EnablePower_On");

		/// <summary>
		/// Hidden
		/// </summary>
		public static readonly MyStringId RadialMenuAction_Hud_Hidden = MyStringId.GetOrCompute("RadialMenuAction_Hud_Hidden");

		/// <summary>
		/// Visible
		/// </summary>
		public static readonly MyStringId RadialMenuAction_Hud_Visible = MyStringId.GetOrCompute("RadialMenuAction_Hud_Visible");

		/// <summary>
		/// Rotation disabled
		/// </summary>
		public static readonly MyStringId RadialMenuAction_PlacementMode_ClipboardRoattion_Disabled = MyStringId.GetOrCompute("RadialMenuAction_PlacementMode_ClipboardRoattion_Disabled");

		/// <summary>
		/// Rotation enabled
		/// </summary>
		public static readonly MyStringId RadialMenuAction_PlacementMode_ClipboardRoattion_Enabled = MyStringId.GetOrCompute("RadialMenuAction_PlacementMode_ClipboardRoattion_Enabled");

		/// <summary>
		/// Free placement
		/// </summary>
		public static readonly MyStringId RadialMenuAction_PlacementMode_Grid_Free = MyStringId.GetOrCompute("RadialMenuAction_PlacementMode_Grid_Free");

		/// <summary>
		/// Gravity aligned
		/// </summary>
		public static readonly MyStringId RadialMenuAction_PlacementMode_Grid_Gravity = MyStringId.GetOrCompute("RadialMenuAction_PlacementMode_Grid_Gravity");

		/// <summary>
		/// Local coordinates
		/// </summary>
		public static readonly MyStringId RadialMenuAction_PlacementMode_Grid_Local = MyStringId.GetOrCompute("RadialMenuAction_PlacementMode_Grid_Local");

		/// <summary>
		/// Default
		/// </summary>
		public static readonly MyStringId RadialMenuAction_Signal_Default = MyStringId.GetOrCompute("RadialMenuAction_Signal_Default");

		/// <summary>
		/// Full
		/// </summary>
		public static readonly MyStringId RadialMenuAction_Signal_Full = MyStringId.GetOrCompute("RadialMenuAction_Signal_Full");

		/// <summary>
		/// Max Signals
		/// </summary>
		public static readonly MyStringId RadialMenuAction_Signal_MaxSignals = MyStringId.GetOrCompute("RadialMenuAction_Signal_MaxSignals");

		/// <summary>
		/// No names
		/// </summary>
		public static readonly MyStringId RadialMenuAction_Signal_NoNames = MyStringId.GetOrCompute("RadialMenuAction_Signal_NoNames");

		/// <summary>
		/// Off
		/// </summary>
		public static readonly MyStringId RadialMenuAction_Signal_Off = MyStringId.GetOrCompute("RadialMenuAction_Signal_Off");

		/// <summary>
		/// First person
		/// </summary>
		public static readonly MyStringId RadialMenuAction_SwitchCamera_FirstPerson = MyStringId.GetOrCompute("RadialMenuAction_SwitchCamera_FirstPerson");

		/// <summary>
		/// N/A
		/// </summary>
		public static readonly MyStringId RadialMenuAction_SwitchCamera_None = MyStringId.GetOrCompute("RadialMenuAction_SwitchCamera_None");

		/// <summary>
		/// Third person
		/// </summary>
		public static readonly MyStringId RadialMenuAction_SwitchCamera_ThirdPerson = MyStringId.GetOrCompute("RadialMenuAction_SwitchCamera_ThirdPerson");

		/// <summary>
		/// Off
		/// </summary>
		public static readonly MyStringId RadialMenuAction_Symmetry_Off = MyStringId.GetOrCompute("RadialMenuAction_Symmetry_Off");

		/// <summary>
		/// On
		/// </summary>
		public static readonly MyStringId RadialMenuAction_Symmetry_On = MyStringId.GetOrCompute("RadialMenuAction_Symmetry_On");

		/// <summary>
		/// Off
		/// </summary>
		public static readonly MyStringId RadialMenuAction_ToggleAutoRotation_Off = MyStringId.GetOrCompute("RadialMenuAction_ToggleAutoRotation_Off");

		/// <summary>
		/// On
		/// </summary>
		public static readonly MyStringId RadialMenuAction_ToggleAutoRotation_On = MyStringId.GetOrCompute("RadialMenuAction_ToggleAutoRotation_On");

		/// <summary>
		/// Off
		/// </summary>
		public static readonly MyStringId RadialMenuAction_Visor_Off = MyStringId.GetOrCompute("RadialMenuAction_Visor_Off");

		/// <summary>
		/// On
		/// </summary>
		public static readonly MyStringId RadialMenuAction_Visor_On = MyStringId.GetOrCompute("RadialMenuAction_Visor_On");

		/// <summary>
		/// {GAMEPAD_CONTROL:ABASE:ADMIN_MENU}
		/// </summary>
		public static readonly MyStringId RadialMenuAction_Shortcut_AdminMenu = MyStringId.GetOrCompute("RadialMenuAction_Shortcut_AdminMenu");

		/// <summary>
		/// {GAMEPAD_CONTROL:ABASE:BLUEPRINTS_MENU}
		/// </summary>
		public static readonly MyStringId RadialMenuAction_Shortcut_BlueprintScreen = MyStringId.GetOrCompute("RadialMenuAction_Shortcut_BlueprintScreen");

		/// <summary>
		/// {GAMEPAD_CONTROL:CHARACTER:COLOR_TOOL}
		/// </summary>
		public static readonly MyStringId RadialMenuAction_Shortcut_ColorTool = MyStringId.GetOrCompute("RadialMenuAction_Shortcut_ColorTool");

		/// <summary>
		/// {GAMEPAD_CONTROL:BUILD:FREE_ROTATION}
		/// </summary>
		public static readonly MyStringId RadialMenuAction_Shortcut_PlacementMode = MyStringId.GetOrCompute("RadialMenuAction_Shortcut_PlacementMode");

		/// <summary>
		/// {GAMEPAD_CONTROL:ABASE:PROGRESSION_MENU}
		/// </summary>
		public static readonly MyStringId RadialMenuAction_Shortcut_ShowProgressionTree = MyStringId.GetOrCompute("RadialMenuAction_Shortcut_ShowProgressionTree");

		/// <summary>
		/// {GAMEPAD_CONTROL:BASE:CAMERA_MODE}
		/// </summary>
		public static readonly MyStringId RadialMenuAction_Shortcut_SwitchCamera = MyStringId.GetOrCompute("RadialMenuAction_Shortcut_SwitchCamera");

		/// <summary>
		/// {GAMEPAD_CONTROL:BUILD:CUBE_DEFAULT_MOUNTPOINT}
		/// </summary>
		public static readonly MyStringId RadialMenuAction_Shortcut_ToggleAutoRotation = MyStringId.GetOrCompute("RadialMenuAction_Shortcut_ToggleAutoRotation");

		/// <summary>
		/// {GAMEPAD_CONTROL:TOOLS:BROADCASTING}
		/// </summary>
		public static readonly MyStringId RadialMenuAction_Shortcut_ToggleBroadcasting = MyStringId.GetOrCompute("RadialMenuAction_Shortcut_ToggleBroadcasting");

		/// <summary>
		/// {GAMEPAD_CONTROL:SPACESHIP:LANDING_GEAR}
		/// </summary>
		public static readonly MyStringId RadialMenuAction_Shortcut_ToggleConnectors = MyStringId.GetOrCompute("RadialMenuAction_Shortcut_ToggleConnectors");

		/// <summary>
		/// {GAMEPAD_CONTROL:BASE:DAMPING}
		/// </summary>
		public static readonly MyStringId RadialMenuAction_Shortcut_ToggleDampeners = MyStringId.GetOrCompute("RadialMenuAction_Shortcut_ToggleDampeners");

		/// <summary>
		/// {GAMEPAD_CONTROL:BASE:HEADLIGHTS}
		/// </summary>
		public static readonly MyStringId RadialMenuAction_Shortcut_ToggleLights = MyStringId.GetOrCompute("RadialMenuAction_Shortcut_ToggleLights");

		/// <summary>
		/// {GAMEPAD_CONTROL:SPACESHIP:TOGGLE_REACTORS}
		/// </summary>
		public static readonly MyStringId RadialMenuAction_Shortcut_TogglePower = MyStringId.GetOrCompute("RadialMenuAction_Shortcut_TogglePower");

		/// <summary>
		/// {GAMEPAD_CONTROL:ABASE:TOGGLE_SIGNALS}
		/// </summary>
		public static readonly MyStringId RadialMenuAction_Shortcut_ToggleSignals = MyStringId.GetOrCompute("RadialMenuAction_Shortcut_ToggleSignals");

		/// <summary>
		/// {GAMEPAD_CONTROL:BUILD:USE_SYMMETRY}
		/// </summary>
		public static readonly MyStringId RadialMenuAction_Shortcut_ToggleSymmetry = MyStringId.GetOrCompute("RadialMenuAction_Shortcut_ToggleSymmetry");

		/// <summary>
		/// {GAMEPAD_CONTROL:CHARACTER:HELMET}
		/// </summary>
		public static readonly MyStringId RadialMenuAction_Shortcut_ToggleVisor = MyStringId.GetOrCompute("RadialMenuAction_Shortcut_ToggleVisor");

		/// <summary>
		/// {GAMEPAD_CONTROL:TOOLS:SLOT0}
		/// </summary>
		public static readonly MyStringId RadialMenuAction_Shortcut_Unequip = MyStringId.GetOrCompute("RadialMenuAction_Shortcut_Unequip");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_X} Exit to Windows
		/// </summary>
		public static readonly MyStringId MainMenuScreen_Help_Exit = MyStringId.GetOrCompute("MainMenuScreen_Help_Exit");

		/// <summary>
		/// {CONTROL:GUI:ACCEPT} Select
		/// </summary>
		public static readonly MyStringId OptionsScreen_Help_Menu = MyStringId.GetOrCompute("OptionsScreen_Help_Menu");

		/// <summary>
		/// {CONTROL:GUI:ACCEPT} Select
		/// </summary>
		public static readonly MyStringId BannerControl_Help_Next = MyStringId.GetOrCompute("BannerControl_Help_Next");

		/// <summary>
		/// {CONTROL:GUI:ACCEPT} Select
		/// </summary>
		public static readonly MyStringId BannerControl_Help_Open = MyStringId.GetOrCompute("BannerControl_Help_Open");

		/// <summary>
		/// {CONTROL:GUI:ACCEPT} Select
		/// </summary>
		public static readonly MyStringId BannerControl_Help_Previous = MyStringId.GetOrCompute("BannerControl_Help_Previous");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_Y} Show help   {CONTROL:GUI:CANCEL} Resume game
		/// </summary>
		public static readonly MyStringId MainMenuScreen_Help_ScreenIngame = MyStringId.GetOrCompute("MainMenuScreen_Help_ScreenIngame");

		/// <summary>
		/// {CONTROL:GUI:ACCEPT} Select
		/// </summary>
		public static readonly MyStringId NewsControl_Help_Next = MyStringId.GetOrCompute("NewsControl_Help_Next");

		/// <summary>
		/// {CONTROL:GUI:ACCEPT} Select
		/// </summary>
		public static readonly MyStringId NewsControl_Help_Previous = MyStringId.GetOrCompute("NewsControl_Help_Previous");

		/// <summary>
		/// {CONTROL:GUI:MOVE_LEFT}{CONTROL:GUI:MOVE_RIGHT} Change Color
		/// </summary>
		public static readonly MyStringId EditFactionLogoScreen_Help_ChangeColor = MyStringId.GetOrCompute("EditFactionLogoScreen_Help_ChangeColor");

		/// <summary>
		/// {CONTROL:GUI:ACCEPT} OK
		/// </summary>
		public static readonly MyStringId EditFactionLogoScreen_Help_Selection = MyStringId.GetOrCompute("EditFactionLogoScreen_Help_Selection");

		/// <summary>
		/// Remove plane
		/// </summary>
		public static readonly MyStringId HelpScreen_ResetPlane = MyStringId.GetOrCompute("HelpScreen_ResetPlane");

		/// <summary>
		/// Add plane
		/// </summary>
		public static readonly MyStringId HelpScreen_SetPlane = MyStringId.GetOrCompute("HelpScreen_SetPlane");

		/// <summary>
		/// Next plane
		/// </summary>
		public static readonly MyStringId HelpScreen_SymmetryNextPlane = MyStringId.GetOrCompute("HelpScreen_SymmetryNextPlane");

		/// <summary>
		/// Turn off setup
		/// </summary>
		public static readonly MyStringId HelpScreen_SymmetryTurnOffSetup = MyStringId.GetOrCompute("HelpScreen_SymmetryTurnOffSetup");

		/// <summary>
		/// Unequip
		/// </summary>
		public static readonly MyStringId HelpScreen_SymmetryUnequip = MyStringId.GetOrCompute("HelpScreen_SymmetryUnequip");

		/// <summary>
		/// Control Gyros
		/// </summary>
		public static readonly MyStringId TerminalControlPanel_Cockpit_ControlGyros = MyStringId.GetOrCompute("TerminalControlPanel_Cockpit_ControlGyros");

		/// <summary>
		/// Enable gyro control for this cockpit.
		/// </summary>
		public static readonly MyStringId TerminalControlPanel_Cockpit_ControlGyros_Tooltip = MyStringId.GetOrCompute("TerminalControlPanel_Cockpit_ControlGyros_Tooltip");

		/// <summary>
		/// Line
		/// </summary>
		public static readonly MyStringId RadialMenuAction_BuildingMode_Line = MyStringId.GetOrCompute("RadialMenuAction_BuildingMode_Line");

		/// <summary>
		/// Plane
		/// </summary>
		public static readonly MyStringId RadialMenuAction_BuildingMode_Plane = MyStringId.GetOrCompute("RadialMenuAction_BuildingMode_Plane");

		/// <summary>
		/// Single block
		/// </summary>
		public static readonly MyStringId RadialMenuAction_BuildingMode_Single = MyStringId.GetOrCompute("RadialMenuAction_BuildingMode_Single");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_X} OK   {CONTROL:GUI:CANCEL} Back
		/// </summary>
		public static readonly MyStringId AudioOptions_Help_Screen = MyStringId.GetOrCompute("AudioOptions_Help_Screen");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_X} OK   {CONTROL:GUI:CANCEL} Back
		/// </summary>
		public static readonly MyStringId ControlsOptions_Help_Screen = MyStringId.GetOrCompute("ControlsOptions_Help_Screen");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_X} OK   {CONTROL:GUI:CANCEL} Back
		/// </summary>
		public static readonly MyStringId DisplayOptions_Help_Screen = MyStringId.GetOrCompute("DisplayOptions_Help_Screen");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_Y} Reset Good.bot hints   {CONTROL:GUI:BUTTON_X} OK   {CONTROL:GUI:CANCEL} Back
		/// </summary>
		public static readonly MyStringId GameOptions_Help_Screen_TabGeneral = MyStringId.GetOrCompute("GameOptions_Help_Screen_TabGeneral");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_X} OK   {CONTROL:GUI:CANCEL} Back
		/// </summary>
		public static readonly MyStringId GameOptions_Help_Screen_TabCrosshair = MyStringId.GetOrCompute("GameOptions_Help_Screen_TabCrosshair");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_X} OK   {CONTROL:GUI:CANCEL} Back
		/// </summary>
		public static readonly MyStringId GraphicsOptions_Help_Screen = MyStringId.GetOrCompute("GraphicsOptions_Help_Screen");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_X} OK   {CONTROL:GUI:CANCEL} Back
		/// </summary>
		public static readonly MyStringId AdvancedWorldSettings_Help_Screen = MyStringId.GetOrCompute("AdvancedWorldSettings_Help_Screen");

		/// <summary>
		/// {CONTROL:GUI:VIEW} Backups   {CONTROL:GUI:MAIN_MENU} Publish   {CONTROL:GUI:RIGHT_STICK_BUTTON} Save As   {CONTROL:GUI:BUTTON_Y} Delete   {CONTROL:GUI:BUTTON_X} Edit Settings   {CONTROL:GUI:MODIF_R} + {CONTROL:GUI:BUTTON_A} Select range   {CONTROL:GUI:CANCEL} Back
		/// </summary>
		public static readonly MyStringId LoadScreen_Help_Screen = MyStringId.GetOrCompute("LoadScreen_Help_Screen");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_Y} Advanced   {CONTROL:GUI:MAIN_MENU} Mods   {CONTROL:GUI:BUTTON_X} OK   {CONTROL:GUI:CANCEL} Back
		/// </summary>
		public static readonly MyStringId WorldSettings_Help_Screen = MyStringId.GetOrCompute("WorldSettings_Help_Screen");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_Y} Refresh   {CONTROL:GUI:VIEW} Direct Connect   {CONTROL:GUI:MAIN_MENU} Search Filter   {CONTROL:GUI:BUTTON_X} Server Details   {CONTROL:GUI:CANCEL} Back  {CONTROL:GUI:LEFT_BUTTON} Server Provider   {CONTROL:GUI:RIGHT_BUTTON} Network Type
		/// </summary>
		public static readonly MyStringId JoinGameScreen_Help_Screen = MyStringId.GetOrCompute("JoinGameScreen_Help_Screen");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_Y} Refresh   {CONTROL:GUI:VIEW} Direct Connect   {CONTROL:GUI:MAIN_MENU} Search Filter   {CONTROL:GUI:LEFT_BUTTON} Server Provider   {CONTROL:GUI:CANCEL} Back
		/// </summary>
		public static readonly MyStringId JoinGameScreen_Help_ScreenGamesTab = MyStringId.GetOrCompute("JoinGameScreen_Help_ScreenGamesTab");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_Y} Refresh   {CONTROL:GUI:BUTTON_X} OK   {CONTROL:GUI:CANCEL} Back
		/// </summary>
		public static readonly MyStringId ModsScreen_Help_Screen = MyStringId.GetOrCompute("ModsScreen_Help_Screen");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_X} OK   {CONTROL:GUI:CANCEL} Back
		/// </summary>
		public static readonly MyStringId WorkshopTagsScreen_Help_Screen = MyStringId.GetOrCompute("WorkshopTagsScreen_Help_Screen");

		/// <summary>
		/// {CONTROL:GUI:CANCEL} Back
		/// </summary>
		public static readonly MyStringId WorkshopTagsScreen_HelpNoOk_Screen = MyStringId.GetOrCompute("WorkshopTagsScreen_HelpNoOk_Screen");

		/// <summary>
		/// Invert Y controller axis for character control
		/// </summary>
		public static readonly MyStringId ToolTipOptionsControls_InvertGamepadYChar = MyStringId.GetOrCompute("ToolTipOptionsControls_InvertGamepadYChar");

		/// <summary>
		/// Invert Y controller axis for jetpack and vehicle control
		/// </summary>
		public static readonly MyStringId ToolTipOptionsControls_InvertGamepadYVehicle = MyStringId.GetOrCompute("ToolTipOptionsControls_InvertGamepadYVehicle");

		/// <summary>
		/// {CONTROL:GUI:ACCEPT} Select   {CONTROL:GUI:BUTTON_Y} Publish
		/// </summary>
		public static readonly MyStringId NewGameScenarios_Help_ScenarioWithPublish = MyStringId.GetOrCompute("NewGameScenarios_Help_ScenarioWithPublish");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_X} Start   {CONTROL:GUI:CANCEL} Back
		/// </summary>
		public static readonly MyStringId NewGameScenarios_Help_Screen = MyStringId.GetOrCompute("NewGameScenarios_Help_Screen");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_X} Join   {CONTROL:GUI:BUTTON_Y} Add to favorites   {CONTROL:GUI:CANCEL} Back
		/// </summary>
		public static readonly MyStringId ServerDetails_Help_ScreenAddFavorites = MyStringId.GetOrCompute("ServerDetails_Help_ScreenAddFavorites");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_X} Join   {CONTROL:GUI:BUTTON_Y} Remove from favorites   {CONTROL:GUI:CANCEL} Back
		/// </summary>
		public static readonly MyStringId ServerDetails_Help_ScreenRemoveFavorites = MyStringId.GetOrCompute("ServerDetails_Help_ScreenRemoveFavorites");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_Y} Advanced   {CONTROL:GUI:MAIN_MENU} Mods   {CONTROL:GUI:BUTTON_X} Start   {CONTROL:GUI:CANCEL} Back
		/// </summary>
		public static readonly MyStringId WorldSettings_Help_ScreenNewGame = MyStringId.GetOrCompute("WorldSettings_Help_ScreenNewGame");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_Y} Refresh   {CONTROL:GUI:BUTTON_X} Start   {CONTROL:GUI:CANCEL} Back   {CONTROL:GUI:VIEW} Open item   {CONTROL:GUI:MAIN_MENU} Browse workshop
		/// </summary>
		public static readonly MyStringId NewGameWorkshop_Help_Screen = MyStringId.GetOrCompute("NewGameWorkshop_Help_Screen");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_Y} Default   {CONTROL:GUI:BUTTON_X} Search   {CONTROL:GUI:CANCEL} Back
		/// </summary>
		public static readonly MyStringId ServerSearch_Help_Screen = MyStringId.GetOrCompute("ServerSearch_Help_Screen");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_Y} Refresh
		/// </summary>
		public static readonly MyStringId MedicalsScreen_Help_Factions = MyStringId.GetOrCompute("MedicalsScreen_Help_Factions");

		/// <summary>
		/// {CONTROL:GUI:VIEW} Players   {CONTROL:GUI:BUTTON_Y} Refresh
		/// </summary>
		public static readonly MyStringId MedicalsScreen_Help_FactionsMultiplayer = MyStringId.GetOrCompute("MedicalsScreen_Help_FactionsMultiplayer");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_Y} Refresh   {CONTROL:GUI:CANCEL} Back
		/// </summary>
		public static readonly MyStringId MedicalsScreen_Help_Respawn = MyStringId.GetOrCompute("MedicalsScreen_Help_Respawn");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_Y} Delete   {CONTROL:GUI:BUTTON_X} New from current position   {CONTROL:GUI:MODIF_L} + {CONTROL:GUI:BUTTON_X} New   {CONTROL:GUI:MODIF_R} + {CONTROL:GUI:BUTTON_X} New from clipboard   {CONTROL:GUI:CANCEL} Back
		/// </summary>
		public static readonly MyStringId TerminalGps_Help_Screen = MyStringId.GetOrCompute("TerminalGps_Help_Screen");

		/// <summary>
		/// {CONTROL:GUI:CANCEL} Back
		/// </summary>
		public static readonly MyStringId TerminalComms_Help_Screen = MyStringId.GetOrCompute("TerminalComms_Help_Screen");

		/// <summary>
		/// {CONTROL:GUI:RIGHT_STICK_BUTTON} Toggle show on HUD   {CONTROL:GUI:BUTTON_Y} Toggle show in terminal   {CONTROL:GUI:BUTTON_X} Toggle On/Off   {CONTROL:GUI:CANCEL} Back   {CONTROL:GUI:MODIF_R} + {CONTROL:GUI:BUTTON_A} Select range
		/// </summary>
		public static readonly MyStringId TerminalControlPanel_Help_Screen = MyStringId.GetOrCompute("TerminalControlPanel_Help_Screen");

		/// <summary>
		/// {CONTROL:GUI:CANCEL} Back
		/// </summary>
		public static readonly MyStringId TerminalFactions_Help_Screen = MyStringId.GetOrCompute("TerminalFactions_Help_Screen");

		/// <summary>
		/// {CONTROL:GUI:CANCEL} Back
		/// </summary>
		public static readonly MyStringId TerminalInfo_Help_Screen = MyStringId.GetOrCompute("TerminalInfo_Help_Screen");

		/// <summary>
		/// {CONTROL:GUI:LEFT_STICK_BUTTON} Left filter   {CONTROL:GUI:RIGHT_STICK_BUTTON} Right filter   {CONTROL:GUI:CANCEL} Back
		/// </summary>
		public static readonly MyStringId TerminalInventory_Help_Screen = MyStringId.GetOrCompute("TerminalInventory_Help_Screen");

		/// <summary>
		/// {CONTROL:GUI:CANCEL} Back
		/// </summary>
		public static readonly MyStringId TerminalProduction_Help_Screen = MyStringId.GetOrCompute("TerminalProduction_Help_Screen");

		/// <summary>
		/// {CONTROL:GUI:CANCEL} Back
		/// </summary>
		public static readonly MyStringId TerminalProperties_Help_Screen = MyStringId.GetOrCompute("TerminalProperties_Help_Screen");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_X} Convert to ship   {CONTROL:GUI:CANCEL} Back
		/// </summary>
		public static readonly MyStringId TerminalInfo_Help_ScreenConvertShip = MyStringId.GetOrCompute("TerminalInfo_Help_ScreenConvertShip");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_X} Convert to station   {CONTROL:GUI:CANCEL} Back
		/// </summary>
		public static readonly MyStringId TerminalInfo_Help_ScreenConvertStation = MyStringId.GetOrCompute("TerminalInfo_Help_ScreenConvertStation");

		/// <summary>
		/// Ammo
		/// </summary>
		public static readonly MyStringId Description_BlueprintClass_Ammo = MyStringId.GetOrCompute("Description_BlueprintClass_Ammo");

		/// <summary>
		/// Basic Ingots and Components - Click on any ingot or component to assemble it.
		/// </summary>
		public static readonly MyStringId Description_BlueprintClass_BasicComponents = MyStringId.GetOrCompute("Description_BlueprintClass_BasicComponents");

		/// <summary>
		/// Basic Tools
		/// </summary>
		public static readonly MyStringId Description_BlueprintClass_BasicTools = MyStringId.GetOrCompute("Description_BlueprintClass_BasicTools");

		/// <summary>
		/// Build Planner - Click on any block from Build Planner to assemble all components remaining for its construction.
		/// </summary>
		public static readonly MyStringId Description_BlueprintClass_BuildPlanner = MyStringId.GetOrCompute("Description_BlueprintClass_BuildPlanner");

		/// <summary>
		/// Common Metals
		/// </summary>
		public static readonly MyStringId Description_BlueprintClass_CommonMetals = MyStringId.GetOrCompute("Description_BlueprintClass_CommonMetals");

		/// <summary>
		/// Components - Click on any component to assemble it.
		/// </summary>
		public static readonly MyStringId Description_BlueprintClass_Components = MyStringId.GetOrCompute("Description_BlueprintClass_Components");

		/// <summary>
		/// Hydrogen Bottles
		/// </summary>
		public static readonly MyStringId Description_BlueprintClass_HydrogenBottles = MyStringId.GetOrCompute("Description_BlueprintClass_HydrogenBottles");

		/// <summary>
		/// Ice
		/// </summary>
		public static readonly MyStringId Description_BlueprintClass_Ice = MyStringId.GetOrCompute("Description_BlueprintClass_Ice");

		/// <summary>
		/// Ingots
		/// </summary>
		public static readonly MyStringId Description_BlueprintClass_Ingots = MyStringId.GetOrCompute("Description_BlueprintClass_Ingots");

		/// <summary>
		/// Large Blocks - Click on any Large Block to assemble all components necessary for it's construction.
		/// </summary>
		public static readonly MyStringId Description_BlueprintClass_LargeBlocks = MyStringId.GetOrCompute("Description_BlueprintClass_LargeBlocks");

		/// <summary>
		/// Oxygen Bottles
		/// </summary>
		public static readonly MyStringId Description_BlueprintClass_OxygenBottles = MyStringId.GetOrCompute("Description_BlueprintClass_OxygenBottles");

		/// <summary>
		/// Small Blocks - Click on any Small Block to assemble all components necessary for it's construction.
		/// </summary>
		public static readonly MyStringId Description_BlueprintClass_SmallBlocks = MyStringId.GetOrCompute("Description_BlueprintClass_SmallBlocks");

		/// <summary>
		/// Tools
		/// </summary>
		public static readonly MyStringId Description_BlueprintClass_Tools = MyStringId.GetOrCompute("Description_BlueprintClass_Tools");

		/// <summary>
		/// Basic Tools
		/// </summary>
		public static readonly MyStringId DisplayName_BlueprintClass_BasicTools = MyStringId.GetOrCompute("DisplayName_BlueprintClass_BasicTools");

		/// <summary>
		/// Tools
		/// </summary>
		public static readonly MyStringId DisplayName_BlueprintClass_Tools = MyStringId.GetOrCompute("DisplayName_BlueprintClass_Tools");

		/// <summary>
		/// {CONTROL:GUI:LEFT_STICK_BUTTON} Filter: {0}
		/// </summary>
		public static readonly MyStringId TerminalProduction_Help_BlueprintFilter = MyStringId.GetOrCompute("TerminalProduction_Help_BlueprintFilter");

		/// <summary>
		/// {CONTROL:GUI:ACCEPT} Remove one (hold to remove all)
		/// </summary>
		public static readonly MyStringId TerminalProduction_Help_QueueGrid = MyStringId.GetOrCompute("TerminalProduction_Help_QueueGrid");

		/// <summary>
		/// {CONTROL:GUI:RIGHT_STICK_BUTTON} Control panel   {CONTROL:GUI:BUTTON_Y} Assembling mode   {CONTROL:GUI:BUTTON_X} Inventory   {CONTROL:GUI:CANCEL} Back
		/// </summary>
		public static readonly MyStringId TerminalProduction_Help_ScreenAssembling = MyStringId.GetOrCompute("TerminalProduction_Help_ScreenAssembling");

		/// <summary>
		/// {CONTROL:GUI:RIGHT_STICK_BUTTON} Control panel   {CONTROL:GUI:BUTTON_Y} Disassembling mode   {CONTROL:GUI:BUTTON_X} Inventory   {CONTROL:GUI:CANCEL} Back
		/// </summary>
		public static readonly MyStringId TerminalProduction_Help_ScreenDisassembling = MyStringId.GetOrCompute("TerminalProduction_Help_ScreenDisassembling");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_X} Add to production   {CONTROL:GUI:VIEW} Deposit all
		/// </summary>
		public static readonly MyStringId TerminalInventory_Help_ItemsGrid = MyStringId.GetOrCompute("TerminalInventory_Help_ItemsGrid");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_X} Add to production   {CONTROL:GUI:MENU} Drop item   {CONTROL:GUI:VIEW} Deposit all
		/// </summary>
		public static readonly MyStringId TerminalInventory_Help_ItemsGrid_Droppable = MyStringId.GetOrCompute("TerminalInventory_Help_ItemsGrid_Droppable");

		/// <summary>
		/// {CONTROL:GUI:ACCEPT} Take control   {CONTROL:GUI:BUTTON_X} Open terminal
		/// </summary>
		public static readonly MyStringId TerminalRemote_Help_ShipsTable = MyStringId.GetOrCompute("TerminalRemote_Help_ShipsTable");

		/// <summary>
		/// {CONTROL:GUI:LEFT_STICK_BUTTON} Sort   {CONTROL:GUI:RIGHT_STICK_BUTTON} Type   {CONTROL:GUI:BUTTON_Y} Refresh   {CONTROL:GUI:BUTTON_X} New from clipboard   {CONTROL:GUI:CANCEL} Back   {CONTROL:GUI:VIEW} Open item on {0}   {CONTROL:GUI:MAIN_MENU} Browse workshop
		/// </summary>
		public static readonly MyStringId BlueprintScreen_Help_Screen = MyStringId.GetOrCompute("BlueprintScreen_Help_Screen");

		/// <summary>
		/// {CONTROL:GUI:LEFT_STICK_BUTTON} Sort   {CONTROL:GUI:RIGHT_STICK_BUTTON} Type   {CONTROL:GUI:BUTTON_Y} Refresh   {CONTROL:GUI:BUTTON_X} New from clipboard   {CONTROL:GUI:CANCEL} Back   {CONTROL:GUI:MAIN_MENU} Browse workshop
		/// </summary>
		public static readonly MyStringId BlueprintScreen_Help_Screen_Local = MyStringId.GetOrCompute("BlueprintScreen_Help_Screen_Local");

		/// <summary>
		/// {CONTROL:GUI:LEFT_STICK_BUTTON} Category   {CONTROL:GUI:RIGHT_STICK_BUTTON} Change action   {CONTROL:GUI:BUTTON_Y} Refresh   {CONTROL:GUI:BUTTON_X} OK   {CONTROL:GUI:CANCEL} Back {CONTROL:GUI:VIEW} Open/Close Visor
		/// </summary>
		public static readonly MyStringId CharacterSkinInventory_Help_ScreenOK = MyStringId.GetOrCompute("CharacterSkinInventory_Help_ScreenOK");

		/// <summary>
		/// {CONTROL:GUI:LEFT_STICK_BUTTON} Category   {CONTROL:GUI:RIGHT_STICK_BUTTON} Change action   {CONTROL:GUI:BUTTON_Y} Refresh   {CONTROL:GUI:BUTTON_X} Craft   {CONTROL:GUI:CANCEL} Back {CONTROL:GUI:VIEW} Open/Close Visor
		/// </summary>
		public static readonly MyStringId CharacterSkinInventory_Help_ScreenCraft = MyStringId.GetOrCompute("CharacterSkinInventory_Help_ScreenCraft");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_Y} Change logo   {CONTROL:GUI:BUTTON_X} OK   {CONTROL:GUI:CANCEL} Back
		/// </summary>
		public static readonly MyStringId FactionCreateEdit_Help_Screen = MyStringId.GetOrCompute("FactionCreateEdit_Help_Screen");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_Y} Defaults   {CONTROL:GUI:CANCEL} Back
		/// </summary>
		public static readonly MyStringId ColorTool_Help_Screen = MyStringId.GetOrCompute("ColorTool_Help_Screen");

		/// <summary>
		/// {CONTROL:GUI:ACCEPT} Profile   {CONTROL:GUI:BUTTON_X} Trade   {CONTROL:GUI:BUTTON_Y} Toggle mute
		/// </summary>
		public static readonly MyStringId PlayersScreen_Help_PlayersList = MyStringId.GetOrCompute("PlayersScreen_Help_PlayersList");

		/// <summary>
		/// {CONTROL:GUI:CANCEL} Back
		/// </summary>
		public static readonly MyStringId PlayersScreen_Help_Screen = MyStringId.GetOrCompute("PlayersScreen_Help_Screen");

		/// <summary>
		/// {CONTROL:GUI:LEFT_STICK_BUTTON} Help   {CONTROL:GUI:RIGHT_STICK_BUTTON} Browse scripts   {CONTROL:GUI:BUTTON_Y} Check   {CONTROL:GUI:BUTTON_X} OK   {CONTROL:GUI:CANCEL} Back
		/// </summary>
		public static readonly MyStringId PbEditor_Help_Screen = MyStringId.GetOrCompute("PbEditor_Help_Screen");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_X} OK   {CONTROL:GUI:CANCEL} Back
		/// </summary>
		public static readonly MyStringId ClaimSkin_Help_Screen = MyStringId.GetOrCompute("ClaimSkin_Help_Screen");

		/// <summary>
		/// {CONTROL:GUI:CANCEL} Back
		/// </summary>
		public static readonly MyStringId PerformanceWarnings_Help_Screen = MyStringId.GetOrCompute("PerformanceWarnings_Help_Screen");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_Y} Refresh   {CONTROL:GUI:BUTTON_X} Open   {CONTROL:GUI:CANCEL} Back
		/// </summary>
		public static readonly MyStringId FolderScreen_Help_Screen = MyStringId.GetOrCompute("FolderScreen_Help_Screen");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_Y} Create GPS   {CONTROL:GUI:BUTTON_X} OK   {CONTROL:GUI:CANCEL} Back
		/// </summary>
		public static readonly MyStringId DatapadEdit_Help_Screen = MyStringId.GetOrCompute("DatapadEdit_Help_Screen");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_Y} Refresh   {CONTROL:GUI:MAIN_MENU} Search Filter   {CONTROL:GUI:LEFT_BUTTON} Server Provider   {CONTROL:GUI:CANCEL} Back
		/// </summary>
		public static readonly MyStringId JoinGameScreen_Help_ScreenGamesTabXbox = MyStringId.GetOrCompute("JoinGameScreen_Help_ScreenGamesTabXbox");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_Y} Refresh   {CONTROL:GUI:MAIN_MENU} Search Filter   {CONTROL:GUI:BUTTON_X} Server Details   {CONTROL:GUI:LEFT_BUTTON} Server Provider   {CONTROL:GUI:CANCEL} Back
		/// </summary>
		public static readonly MyStringId JoinGameScreen_Help_ScreenXbox = MyStringId.GetOrCompute("JoinGameScreen_Help_ScreenXbox");

		/// <summary>
		///
		/// </summary>
		public static readonly MyStringId String1 = MyStringId.GetOrCompute("String1");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_X} Sell
		/// </summary>
		public static readonly MyStringId StoreScreen_Help_Sell = MyStringId.GetOrCompute("StoreScreen_Help_Sell");

		/// <summary>
		/// {CONTROL:GUI:ACCEPT} Select
		/// </summary>
		public static readonly MyStringId Gamepad_Help_Select = MyStringId.GetOrCompute("Gamepad_Help_Select");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_A} Accept
		/// </summary>
		public static readonly MyStringId ContractsScreen_Help_Accept = MyStringId.GetOrCompute("ContractsScreen_Help_Accept");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_X} Finish
		/// </summary>
		public static readonly MyStringId ContractsScreen_Help_Finish = MyStringId.GetOrCompute("ContractsScreen_Help_Finish");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_Y} Refresh
		/// </summary>
		public static readonly MyStringId ContractsScreen_Help_Refresh = MyStringId.GetOrCompute("ContractsScreen_Help_Refresh");

		/// <summary>
		/// Workshop Browser
		/// </summary>
		public static readonly MyStringId ScreenCaptionWorkshopBrowser = MyStringId.GetOrCompute("ScreenCaptionWorkshopBrowser");

		/// <summary>
		/// Created
		/// </summary>
		public static readonly MyStringId WorkshopBrowser_Created = MyStringId.GetOrCompute("WorkshopBrowser_Created");

		/// <summary>
		/// File size
		/// </summary>
		public static readonly MyStringId WorkshopBrowser_FileSize = MyStringId.GetOrCompute("WorkshopBrowser_FileSize");

		/// <summary>
		/// Most Voted
		/// </summary>
		public static readonly MyStringId WorkshopBrowser_MostPopular = MyStringId.GetOrCompute("WorkshopBrowser_MostPopular");

		/// <summary>
		/// Most Recent
		/// </summary>
		public static readonly MyStringId WorkshopBrowser_MostRecent = MyStringId.GetOrCompute("WorkshopBrowser_MostRecent");

		/// <summary>
		/// Most Subscribed
		/// </summary>
		public static readonly MyStringId WorkshopBrowser_MostSubscribed = MyStringId.GetOrCompute("WorkshopBrowser_MostSubscribed");

		/// <summary>
		/// Next page
		/// </summary>
		public static readonly MyStringId WorkshopBrowser_NextPage = MyStringId.GetOrCompute("WorkshopBrowser_NextPage");

		/// <summary>
		/// Previous page
		/// </summary>
		public static readonly MyStringId WorkshopBrowser_PreviousPage = MyStringId.GetOrCompute("WorkshopBrowser_PreviousPage");

		/// <summary>
		/// Refresh
		/// </summary>
		public static readonly MyStringId WorkshopBrowser_Refresh = MyStringId.GetOrCompute("WorkshopBrowser_Refresh");

		/// <summary>
		/// Search
		/// </summary>
		public static readonly MyStringId WorkshopBrowser_Search = MyStringId.GetOrCompute("WorkshopBrowser_Search");

		/// <summary>
		/// Subscribed
		/// </summary>
		public static readonly MyStringId WorkshopBrowser_Subscribed = MyStringId.GetOrCompute("WorkshopBrowser_Subscribed");

		/// <summary>
		/// Subscribers
		/// </summary>
		public static readonly MyStringId WorkshopBrowser_Subscribers = MyStringId.GetOrCompute("WorkshopBrowser_Subscribers");

		/// <summary>
		/// Updated
		/// </summary>
		public static readonly MyStringId WorkshopBrowser_Updated = MyStringId.GetOrCompute("WorkshopBrowser_Updated");

		/// <summary>
		/// {CONTROL:GUI:ACCEPT} Open/Close
		/// </summary>
		public static readonly MyStringId WorkhopBrowser_Help_OpenClose = MyStringId.GetOrCompute("WorkhopBrowser_Help_OpenClose");

		/// <summary>
		/// {CONTROL:GUI:LEFT_BUTTON}{CONTROL:GUI:RIGHT_BUTTON} Change page
		/// </summary>
		public static readonly MyStringId WorkshopBrowser_Help_Paging = MyStringId.GetOrCompute("WorkshopBrowser_Help_Paging");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_Y} Refresh
		/// </summary>
		public static readonly MyStringId WorkshopBrowser_Help_Refresh = MyStringId.GetOrCompute("WorkshopBrowser_Help_Refresh");

		/// <summary>
		/// {CONTROL:GUI:ACCEPT} Select
		/// </summary>
		public static readonly MyStringId WorkshopBrowser_Help_Select = MyStringId.GetOrCompute("WorkshopBrowser_Help_Select");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_X} Toggle category
		/// </summary>
		public static readonly MyStringId WorkshopBrowser_Help_ToggleCategory = MyStringId.GetOrCompute("WorkshopBrowser_Help_ToggleCategory");

		/// <summary>
		/// {CONTROL:GUI:ACCEPT} Toggle subscription
		/// </summary>
		public static readonly MyStringId WorkshopBrowser_Help_ToggleSubscribe = MyStringId.GetOrCompute("WorkshopBrowser_Help_ToggleSubscribe");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_X} Accept offer
		/// </summary>
		public static readonly MyStringId PlayerTrade_Help_AcceptOffer = MyStringId.GetOrCompute("PlayerTrade_Help_AcceptOffer");

		/// <summary>
		/// {CONTROL:GUI:MOVE_LEFT}{CONTROL:GUI:MOVE_RIGHT} Change value
		/// </summary>
		public static readonly MyStringId PlayerTrade_Help_ChangeValue = MyStringId.GetOrCompute("PlayerTrade_Help_ChangeValue");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_X} Submit offer
		/// </summary>
		public static readonly MyStringId PlayerTrade_Help_SubmitOffer = MyStringId.GetOrCompute("PlayerTrade_Help_SubmitOffer");

		/// <summary>
		/// {CONTROL:GUI:ACCEPT} Transfer all
		/// </summary>
		public static readonly MyStringId PlayerTrade_Help_Transfer = MyStringId.GetOrCompute("PlayerTrade_Help_Transfer");

		/// <summary>
		/// {CONTROL:GUI:ACCEPT} Load
		/// </summary>
		public static readonly MyStringId LoadScreen_Help_Load = MyStringId.GetOrCompute("LoadScreen_Help_Load");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_Y} Advanced   {CONTROL:GUI:BUTTON_X} Start   {CONTROL:GUI:CANCEL} Back
		/// </summary>
		public static readonly MyStringId WorldSettings_Help_ScreenNewGame_Modless = MyStringId.GetOrCompute("WorldSettings_Help_ScreenNewGame_Modless");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_Y} Advanced   {CONTROL:GUI:BUTTON_X} OK   {CONTROL:GUI:CANCEL} Back
		/// </summary>
		public static readonly MyStringId WorldSettings_Help_Screen_Modless = MyStringId.GetOrCompute("WorldSettings_Help_Screen_Modless");

		/// <summary>
		/// {CONTROL:GUI:ACCEPT} Join
		/// </summary>
		public static readonly MyStringId MedicalsScreen_Help_FactionList = MyStringId.GetOrCompute("MedicalsScreen_Help_FactionList");

		/// <summary>
		/// {CONTROL:GUI:ACCEPT} Respawn
		/// </summary>
		public static readonly MyStringId MedicalsScreen_Help_RespawnList = MyStringId.GetOrCompute("MedicalsScreen_Help_RespawnList");

		/// <summary>
		/// Toggles the grid handbrake
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_Handbrake = MyStringId.GetOrCompute("ControlMenuItemLabel_Handbrake");

		/// <summary>
		/// Toggles the grid Parking
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_Park = MyStringId.GetOrCompute("ControlMenuItemLabel_Park");

		/// <summary>
		/// Off
		/// </summary>
		public static readonly MyStringId RadialMenuAction_ToggleHandbrake_Off = MyStringId.GetOrCompute("RadialMenuAction_ToggleHandbrake_Off");

		/// <summary>
		/// On
		/// </summary>
		public static readonly MyStringId RadialMenuAction_ToggleHandbrake_On = MyStringId.GetOrCompute("RadialMenuAction_ToggleHandbrake_On");

		/// <summary>
		/// {CONTROL:GUI:ACCEPT} Select
		/// </summary>
		public static readonly MyStringId ContractsScreen_Help_Select = MyStringId.GetOrCompute("ContractsScreen_Help_Select");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_X} OK   {CONTROL:GUI:CANCEL} Cancel
		/// </summary>
		public static readonly MyStringId SaveAs_Help_Screen = MyStringId.GetOrCompute("SaveAs_Help_Screen");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_X} OK   {CONTROL:GUI:CANCEL} Cancel
		/// </summary>
		public static readonly MyStringId Transaction_Help_Screen = MyStringId.GetOrCompute("Transaction_Help_Screen");

		/// <summary>
		/// Off
		/// </summary>
		public static readonly MyStringId RadialMenuAction_ToggleViewMode_Off = MyStringId.GetOrCompute("RadialMenuAction_ToggleViewMode_Off");

		/// <summary>
		/// On
		/// </summary>
		public static readonly MyStringId RadialMenuAction_ToggleViewMode_On = MyStringId.GetOrCompute("RadialMenuAction_ToggleViewMode_On");

		/// <summary>
		/// Focus character/ship
		/// </summary>
		public static readonly MyStringId Spectator_FocusPlayer = MyStringId.GetOrCompute("Spectator_FocusPlayer");

		/// <summary>
		/// Lock to grid
		/// </summary>
		public static readonly MyStringId Spectator_LockToGrid = MyStringId.GetOrCompute("Spectator_LockToGrid");

		/// <summary>
		/// Control character/ship
		/// </summary>
		public static readonly MyStringId Spectator_PlayerControl = MyStringId.GetOrCompute("Spectator_PlayerControl");

		/// <summary>
		/// Rotation speed down
		/// </summary>
		public static readonly MyStringId Spectator_RotationSpeedDown = MyStringId.GetOrCompute("Spectator_RotationSpeedDown");

		/// <summary>
		/// Rotation speed up
		/// </summary>
		public static readonly MyStringId Spectator_RotationSpeedUp = MyStringId.GetOrCompute("Spectator_RotationSpeedUp");

		/// <summary>
		/// Movement speed boost
		/// </summary>
		public static readonly MyStringId Spectator_SpeedBoost = MyStringId.GetOrCompute("Spectator_SpeedBoost");

		/// <summary>
		/// Movement speed down
		/// </summary>
		public static readonly MyStringId Spectator_SpeedDown = MyStringId.GetOrCompute("Spectator_SpeedDown");

		/// <summary>
		/// Movement speed up
		/// </summary>
		public static readonly MyStringId Spectator_SpeedUp = MyStringId.GetOrCompute("Spectator_SpeedUp");

		/// <summary>
		/// Teleport character/ship
		/// </summary>
		public static readonly MyStringId Spectator_Teleport = MyStringId.GetOrCompute("Spectator_Teleport");

		/// <summary>
		/// Crouch
		/// </summary>
		public static readonly MyStringId ControlName_Crouch = MyStringId.GetOrCompute("ControlName_Crouch");

		/// <summary>
		/// Down
		/// </summary>
		public static readonly MyStringId ControlName_Down = MyStringId.GetOrCompute("ControlName_Down");

		/// <summary>
		/// Jetpack Off
		/// </summary>
		public static readonly MyStringId ControlName_JetpackOff = MyStringId.GetOrCompute("ControlName_JetpackOff");

		/// <summary>
		/// Jetpack On
		/// </summary>
		public static readonly MyStringId ControlName_JetpackOn = MyStringId.GetOrCompute("ControlName_JetpackOn");

		/// <summary>
		/// Jump
		/// </summary>
		public static readonly MyStringId ControlName_Jump = MyStringId.GetOrCompute("ControlName_Jump");

		/// <summary>
		/// Up
		/// </summary>
		public static readonly MyStringId ControlName_Up = MyStringId.GetOrCompute("ControlName_Up");

		/// <summary>
		/// Forward/Backward
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerHorizontalMover_Forward = MyStringId.GetOrCompute("HelpScreen_ControllerHorizontalMover_Forward");

		/// <summary>
		/// Jetpack Control
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerJetpackControl = MyStringId.GetOrCompute("HelpScreen_ControllerJetpackControl");

		/// <summary>
		/// Rotation - Pitch
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerRotation_Pitch = MyStringId.GetOrCompute("HelpScreen_ControllerRotation_Pitch");

		/// <summary>
		/// Rotation - Roll
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerRotation_Roll = MyStringId.GetOrCompute("HelpScreen_ControllerRotation_Roll");

		/// <summary>
		/// Rotation - Yaw
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerRotation_Yaw = MyStringId.GetOrCompute("HelpScreen_ControllerRotation_Yaw");

		/// <summary>
		/// Up/Down
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerVerticalMover_Up = MyStringId.GetOrCompute("HelpScreen_ControllerVerticalMover_Up");

		/// <summary>
		/// {CONTROL:GUI:MOVE_LEFT}{CONTROL:GUI:MOVE_RIGHT} Change value
		/// </summary>
		public static readonly MyStringId Gamepad_Help_ChangeValue = MyStringId.GetOrCompute("Gamepad_Help_ChangeValue");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_X} Create offer
		/// </summary>
		public static readonly MyStringId StoreScreenAdmin_Help_CreateOffer = MyStringId.GetOrCompute("StoreScreenAdmin_Help_CreateOffer");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_X} Create order
		/// </summary>
		public static readonly MyStringId StoreScreenAdmin_Help_CreateOrder = MyStringId.GetOrCompute("StoreScreenAdmin_Help_CreateOrder");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_X} Delete
		/// </summary>
		public static readonly MyStringId StoreScreenAdmin_Help_Delete = MyStringId.GetOrCompute("StoreScreenAdmin_Help_Delete");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_X} Confirm
		/// </summary>
		public static readonly MyStringId ContractsScreenGridSelection_Help_Confirm = MyStringId.GetOrCompute("ContractsScreenGridSelection_Help_Confirm");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_X} Create contract
		/// </summary>
		public static readonly MyStringId ContractsScreen_Help_CreateContract = MyStringId.GetOrCompute("ContractsScreen_Help_CreateContract");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_X} Delete
		/// </summary>
		public static readonly MyStringId ContractsScreen_Help_Delete = MyStringId.GetOrCompute("ContractsScreen_Help_Delete");

		/// <summary>
		/// {CONTROL:GUI:VIEW} Open item in workshop
		/// </summary>
		public static readonly MyStringId WorkshopBrowser_Help_OpenItem = MyStringId.GetOrCompute("WorkshopBrowser_Help_OpenItem");

		/// <summary>
		/// {CONTROL:GUI:MAIN_MENU} Browse workshop
		/// </summary>
		public static readonly MyStringId WorkshopBrowser_Help_OpenWorkshop = MyStringId.GetOrCompute("WorkshopBrowser_Help_OpenWorkshop");

		/// <summary>
		/// Open item in workshop
		/// </summary>
		public static readonly MyStringId WorkshopBrowser_OpenItem = MyStringId.GetOrCompute("WorkshopBrowser_OpenItem");

		/// <summary>
		/// Subscribe
		/// </summary>
		public static readonly MyStringId WorkshopBrowser_Subscribe = MyStringId.GetOrCompute("WorkshopBrowser_Subscribe");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_Y} Refresh
		/// </summary>
		public static readonly MyStringId MedicalsScreen_Help_Respawn_Factionless = MyStringId.GetOrCompute("MedicalsScreen_Help_Respawn_Factionless");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_Y} Show help
		/// </summary>
		public static readonly MyStringId MainMenuScreen_Help_Screen = MyStringId.GetOrCompute("MainMenuScreen_Help_Screen");

		/// <summary>
		/// Open chat
		/// </summary>
		public static readonly MyStringId HelpScreen_Chat = MyStringId.GetOrCompute("HelpScreen_Chat");

		/// <summary>
		/// Active contracts
		/// </summary>
		public static readonly MyStringId HelpScreen_Contracts = MyStringId.GetOrCompute("HelpScreen_Contracts");

		/// <summary>
		/// Progression tree
		/// </summary>
		public static readonly MyStringId HelpScreen_Progression = MyStringId.GetOrCompute("HelpScreen_Progression");

		/// <summary>
		/// Toggle HUD
		/// </summary>
		public static readonly MyStringId HelpScreen_ToggleHud = MyStringId.GetOrCompute("HelpScreen_ToggleHud");

		/// <summary>
		/// Tools
		/// </summary>
		public static readonly MyStringId HelpScreen_Tools = MyStringId.GetOrCompute("HelpScreen_Tools");

		/// <summary>
		/// {GAMEPAD_CONTROL:TOOLS:ACTIVE_CONTRACT_SCREEN}
		/// </summary>
		public static readonly MyStringId RadialMenuAction_Shortcut_ActiveContracts = MyStringId.GetOrCompute("RadialMenuAction_Shortcut_ActiveContracts");

		/// <summary>
		/// {GAMEPAD_CONTROL:TOOLS:CHAT_SCREEN}
		/// </summary>
		public static readonly MyStringId RadialMenuAction_Shortcut_OpenChat = MyStringId.GetOrCompute("RadialMenuAction_Shortcut_OpenChat");

		/// <summary>
		/// {GAMEPAD_CONTROL:TOOLS:PROGRESSION_MENU}
		/// </summary>
		public static readonly MyStringId RadialMenuAction_Shortcut_ProgressionMenu = MyStringId.GetOrCompute("RadialMenuAction_Shortcut_ProgressionMenu");

		/// <summary>
		/// {GAMEPAD_CONTROL:TOOLS:TOGGLE_HUD}
		/// </summary>
		public static readonly MyStringId RadialMenuAction_Shortcut_ToggleHUD = MyStringId.GetOrCompute("RadialMenuAction_Shortcut_ToggleHUD");

		/// <summary>
		/// Determines how fast you zoom camera in/out while in 3rd person.
		/// </summary>
		public static readonly MyStringId ToolTipOptionsControls_ZoomMultiplier = MyStringId.GetOrCompute("ToolTipOptionsControls_ZoomMultiplier");

		/// <summary>
		/// 3rd person zoom speed
		/// </summary>
		public static readonly MyStringId ZoomMultiplier = MyStringId.GetOrCompute("ZoomMultiplier");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_X} Show current news   {CONTROL:GUI:BUTTON_Y} Show help   {CONTROL:GUI:CANCEL} Resume game
		/// </summary>
		public static readonly MyStringId MainMenuScreen_Help_ScreenInGameWithLink = MyStringId.GetOrCompute("MainMenuScreen_Help_ScreenInGameWithLink");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_X} Show current news   {CONTROL:GUI:BUTTON_Y} Show help
		/// </summary>
		public static readonly MyStringId MainMenuScreen_Help_ScreenWithLink = MyStringId.GetOrCompute("MainMenuScreen_Help_ScreenWithLink");

		/// <summary>
		/// No items matching your search criteria were found.
		/// </summary>
		public static readonly MyStringId WorkshopBrowser_NotFound = MyStringId.GetOrCompute("WorkshopBrowser_NotFound");

		/// <summary>
		/// Color picker
		/// </summary>
		public static readonly MyStringId ControlName_ColorPicker = MyStringId.GetOrCompute("ControlName_ColorPicker");

		/// <summary>
		/// Mod.io
		/// </summary>
		public static readonly MyStringId ScreenCaptionModIoConsent = MyStringId.GetOrCompute("ScreenCaptionModIoConsent");

		/// <summary>
		/// Steam and Mod.io
		/// </summary>
		public static readonly MyStringId ScreenCaptionSteamAndModIoConsent = MyStringId.GetOrCompute("ScreenCaptionSteamAndModIoConsent");

		/// <summary>
		/// I Agree
		/// </summary>
		public static readonly MyStringId ScreenModIoConsent_ButtonAgree = MyStringId.GetOrCompute("ScreenModIoConsent_ButtonAgree");

		/// <summary>
		/// Opt Out
		/// </summary>
		public static readonly MyStringId ScreenModIoConsent_ButtonOptOut = MyStringId.GetOrCompute("ScreenModIoConsent_ButtonOptOut");

		/// <summary>
		/// Privacy Policy
		/// </summary>
		public static readonly MyStringId ScreenModIoConsent_ButtonPrivacyPolicy = MyStringId.GetOrCompute("ScreenModIoConsent_ButtonPrivacyPolicy");

		/// <summary>
		/// Terms of Use
		/// </summary>
		public static readonly MyStringId ScreenModIoConsent_ButtonTermsOfUse = MyStringId.GetOrCompute("ScreenModIoConsent_ButtonTermsOfUse");

		/// <summary>
		/// {CONTROL:GUI:MAIN_MENU} Privacy Policy
		/// </summary>
		public static readonly MyStringId ScreenModIoConsent_PrivacyPolicyModioHelp = MyStringId.GetOrCompute("ScreenModIoConsent_PrivacyPolicyModioHelp");

		/// <summary>
		/// {CONTROL:GUI:VIEW} Terms of Use
		/// </summary>
		public static readonly MyStringId ScreenModIoConsent_TermsOfUseModioHelp = MyStringId.GetOrCompute("ScreenModIoConsent_TermsOfUseModioHelp");

		/// <summary>
		/// {CONTROL:GUI:RIGHT_STICK_BUTTON} Privacy Policy
		/// </summary>
		public static readonly MyStringId ScreenModIoConsent_PrivacyPolicySteamHelp = MyStringId.GetOrCompute("ScreenModIoConsent_PrivacyPolicySteamHelp");

		/// <summary>
		/// {CONTROL:GUI:LEFT_STICK_BUTTON} Terms of Use
		/// </summary>
		public static readonly MyStringId ScreenModIoConsent_TermsOfUseSteamHelp = MyStringId.GetOrCompute("ScreenModIoConsent_TermsOfUseSteamHelp");

		/// <summary>
		/// We use mod.io to support user-generated content in-game. To continue you must agree to the mod.io Terms of Use and Privacy Policy. A mod.io account will be created for you to browse, share and interact with user-generated content using your:
		/// </summary>
		public static readonly MyStringId ScreenModIoConsent_ConsentTextPart1 = MyStringId.GetOrCompute("ScreenModIoConsent_ConsentTextPart1");

		/// <summary>
		/// We use Steam and mod.io to support user-generated content in-game. To continue you must agree to the Steam and mod.io Terms of Use and Privacy Policy. A mod.io account will be created for you to browse, share and interact with user-generated content using your:
		/// </summary>
		public static readonly MyStringId ScreenSteamAndModIoConsent_ConsentTextPart1 = MyStringId.GetOrCompute("ScreenSteamAndModIoConsent_ConsentTextPart1");

		/// <summary>
		///  •   {0} User ID  •   Display name  •   Avatar
		/// </summary>
		public static readonly MyStringId ScreenModIoConsent_ConsentTextPart2 = MyStringId.GetOrCompute("ScreenModIoConsent_ConsentTextPart2");

		/// <summary>
		///  •   {0} User ID  •   Display name  •   Avatar
		/// </summary>
		public static readonly MyStringId ScreenSteamAndModIoConsent_ConsentTextPart2 = MyStringId.GetOrCompute("ScreenSteamAndModIoConsent_ConsentTextPart2");

		/// <summary>
		/// You agree that your display name, avatar and content will be shared through the mod.io API and website which may be publicly accessible. You can manage your mod.io account and opt out any time via mod.io.
		/// </summary>
		public static readonly MyStringId ScreenModIoConsent_ConsentTextPart3 = MyStringId.GetOrCompute("ScreenModIoConsent_ConsentTextPart3");

		/// <summary>
		/// You agree that your display name, avatar and content will be shared through the mod.io API and website which may be publicly accessible. You can manage your mod.io account and opt out any time via mod.io.
		/// </summary>
		public static readonly MyStringId ScreenSteamAndModIoConsent_ConsentTextPart3 = MyStringId.GetOrCompute("ScreenSteamAndModIoConsent_ConsentTextPart3");

		/// <summary>
		/// Please read Terms of Use and accept them.
		/// </summary>
		public static readonly MyStringId ScreenModIoConsent_LabelReadTOU = MyStringId.GetOrCompute("ScreenModIoConsent_LabelReadTOU");

		/// <summary>
		/// mod.io
		/// </summary>
		public static readonly MyStringId ScreenModIoConsent_LabelModIo = MyStringId.GetOrCompute("ScreenModIoConsent_LabelModIo");

		/// <summary>
		/// Steam
		/// </summary>
		public static readonly MyStringId ScreenModIoConsent_LabelSteam = MyStringId.GetOrCompute("ScreenModIoConsent_LabelSteam");

		/// <summary>
		/// Grated Catwalk End
		/// </summary>
		public static readonly MyStringId DisplayName_Block_GratedCatwalkRailingEnd = MyStringId.GetOrCompute("DisplayName_Block_GratedCatwalkRailingEnd");

		/// <summary>
		/// Grated Catwalk Half Left
		/// </summary>
		public static readonly MyStringId DisplayName_Block_GratedCatwalkRailingHalfLeft = MyStringId.GetOrCompute("DisplayName_Block_GratedCatwalkRailingHalfLeft");

		/// <summary>
		/// Grated Catwalk Half Right
		/// </summary>
		public static readonly MyStringId DisplayName_Block_GratedCatwalkRailingHalfRight = MyStringId.GetOrCompute("DisplayName_Block_GratedCatwalkRailingHalfRight");

		/// <summary>
		/// Grated Half Stairs Mirrored
		/// </summary>
		public static readonly MyStringId DisplayName_Block_GratedHalfStairsMirrored = MyStringId.GetOrCompute("DisplayName_Block_GratedHalfStairsMirrored");

		/// <summary>
		/// Railing Half Left
		/// </summary>
		public static readonly MyStringId DisplayName_Block_RailingHalfLeft = MyStringId.GetOrCompute("DisplayName_Block_RailingHalfLeft");

		/// <summary>
		/// Railing Half Right
		/// </summary>
		public static readonly MyStringId DisplayName_Block_RailingHalfRight = MyStringId.GetOrCompute("DisplayName_Block_RailingHalfRight");

		/// <summary>
		/// The control seat is a cockpit block for small and large grids that allows you to control grids. It is highly comfortable but does not supply oxygen.
		/// </summary>
		public static readonly MyStringId Description_ControlSeat = MyStringId.GetOrCompute("Description_ControlSeat");

		/// <summary>
		/// Antenna Dish
		/// </summary>
		public static readonly MyStringId DisplayName_Block_AntennaDish = MyStringId.GetOrCompute("DisplayName_Block_AntennaDish");

		/// <summary>
		/// Dead Engineer 1
		/// </summary>
		public static readonly MyStringId DisplayName_Block_DeadBody01 = MyStringId.GetOrCompute("DisplayName_Block_DeadBody01");

		/// <summary>
		/// Dead Engineer 2
		/// </summary>
		public static readonly MyStringId DisplayName_Block_DeadBody02 = MyStringId.GetOrCompute("DisplayName_Block_DeadBody02");

		/// <summary>
		/// Dead Engineer 3
		/// </summary>
		public static readonly MyStringId DisplayName_Block_DeadBody03 = MyStringId.GetOrCompute("DisplayName_Block_DeadBody03");

		/// <summary>
		/// Dead Engineer 4
		/// </summary>
		public static readonly MyStringId DisplayName_Block_DeadBody04 = MyStringId.GetOrCompute("DisplayName_Block_DeadBody04");

		/// <summary>
		/// Dead Engineer 5
		/// </summary>
		public static readonly MyStringId DisplayName_Block_DeadBody05 = MyStringId.GetOrCompute("DisplayName_Block_DeadBody05");

		/// <summary>
		/// Dead Engineer 6
		/// </summary>
		public static readonly MyStringId DisplayName_Block_DeadBody06 = MyStringId.GetOrCompute("DisplayName_Block_DeadBody06");

		/// <summary>
		/// The remains of unfortunate engineers. They can contain loot for others to find.
		/// </summary>
		public static readonly MyStringId Description_BlockGroup_DeadBodies = MyStringId.GetOrCompute("Description_BlockGroup_DeadBodies");

		/// <summary>
		/// Dead Engineers
		/// </summary>
		public static readonly MyStringId DisplayName_BlockGroup_DeadBodies = MyStringId.GetOrCompute("DisplayName_BlockGroup_DeadBodies");

		/// <summary>
		/// The remains of an unfortunate engineer.
		/// </summary>
		public static readonly MyStringId Description_DeadEngineer = MyStringId.GetOrCompute("Description_DeadEngineer");

		/// <summary>
		/// Gates are large reinforced doors for hallways, entrances, or small hangars. Gates are also air-tight and capable of keeping atmosphere inside.
		/// </summary>
		public static readonly MyStringId Description_Gate = MyStringId.GetOrCompute("Description_Gate");

		/// <summary>
		/// Gate
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Gate = MyStringId.GetOrCompute("DisplayName_Block_Gate");

		/// <summary>
		/// Offset Door
		/// </summary>
		public static readonly MyStringId DisplayName_Block_OffsetDoor = MyStringId.GetOrCompute("DisplayName_Block_OffsetDoor");

		/// <summary>
		/// Sci-Fi Walls have 6 different sides that can be used to improve your interior design.
		/// </summary>
		public static readonly MyStringId Description_SciFiWall = MyStringId.GetOrCompute("Description_SciFiWall");

		/// <summary>
		/// Very Large LCD Panels from the Sparks Of the Future pack.
		/// </summary>
		public static readonly MyStringId DisplayName_BlockGroup_LCDGroupSOTF = MyStringId.GetOrCompute("DisplayName_BlockGroup_LCDGroupSOTF");

		/// <summary>
		/// Sci-Fi Interior Wall
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SciFiWall = MyStringId.GetOrCompute("DisplayName_Block_SciFiWall");

		/// <summary>
		/// Sparks Of The Future Blocks
		/// </summary>
		public static readonly MyStringId DisplayName_Category_SparksOfTheFuturePack = MyStringId.GetOrCompute("DisplayName_Category_SparksOfTheFuturePack");

		/// <summary>
		/// Sci-Fi LCD Panel 3x3
		/// </summary>
		public static readonly MyStringId DisplayName_LCD_Panel3x3 = MyStringId.GetOrCompute("DisplayName_LCD_Panel3x3");

		/// <summary>
		/// Sci-Fi LCD Panel 5x3
		/// </summary>
		public static readonly MyStringId DisplayName_LCD_Panel5x3 = MyStringId.GetOrCompute("DisplayName_LCD_Panel5x3");

		/// <summary>
		/// Sci-Fi LCD Panel 5x5
		/// </summary>
		public static readonly MyStringId DisplayName_LCD_Panel5x5 = MyStringId.GetOrCompute("DisplayName_LCD_Panel5x5");

		/// <summary>
		/// Neon Tubes are decorative blocks that can be built in all colors. 
		/// </summary>
		public static readonly MyStringId Description_NeonTubes = MyStringId.GetOrCompute("Description_NeonTubes");

		/// <summary>
		/// Neon Tubes
		/// </summary>
		public static readonly MyStringId DisplayName_BlockGroup_NeonTubes = MyStringId.GetOrCompute("DisplayName_BlockGroup_NeonTubes");

		/// <summary>
		/// Neon Tubes Down
		/// </summary>
		public static readonly MyStringId DisplayName_Block_NeonTubesBendDown = MyStringId.GetOrCompute("DisplayName_Block_NeonTubesBendDown");

		/// <summary>
		/// Neon Tubes Up
		/// </summary>
		public static readonly MyStringId DisplayName_Block_NeonTubesBendUp = MyStringId.GetOrCompute("DisplayName_Block_NeonTubesBendUp");

		/// <summary>
		/// Neon Tubes Corner
		/// </summary>
		public static readonly MyStringId DisplayName_Block_NeonTubesCorner = MyStringId.GetOrCompute("DisplayName_Block_NeonTubesCorner");

		/// <summary>
		/// Neon Tubes 1
		/// </summary>
		public static readonly MyStringId DisplayName_Block_NeonTubesStraight1 = MyStringId.GetOrCompute("DisplayName_Block_NeonTubesStraight1");

		/// <summary>
		/// Neon Tubes 2
		/// </summary>
		public static readonly MyStringId DisplayName_Block_NeonTubesStraight2 = MyStringId.GetOrCompute("DisplayName_Block_NeonTubesStraight2");

		/// <summary>
		/// Neon Tubes End 1
		/// </summary>
		public static readonly MyStringId DisplayName_Block_NeonTubesStraightEnd1 = MyStringId.GetOrCompute("DisplayName_Block_NeonTubesStraightEnd1");

		/// <summary>
		/// Neon Tubes End 2
		/// </summary>
		public static readonly MyStringId DisplayName_Block_NeonTubesStraightEnd2 = MyStringId.GetOrCompute("DisplayName_Block_NeonTubesStraightEnd2");

		/// <summary>
		/// Neon Tubes U Shape
		/// </summary>
		public static readonly MyStringId DisplayName_Block_NeonTubesU = MyStringId.GetOrCompute("DisplayName_Block_NeonTubesU");

		/// <summary>
		/// Letter shaped blocks
		/// </summary>
		public static readonly MyStringId Description_Letters = MyStringId.GetOrCompute("Description_Letters");

		/// <summary>
		/// Number shaped blocks
		/// </summary>
		public static readonly MyStringId Description_Numbers = MyStringId.GetOrCompute("Description_Numbers");

		/// <summary>
		/// Symbol shaped blocks
		/// </summary>
		public static readonly MyStringId Description_Symbols = MyStringId.GetOrCompute("Description_Symbols");

		/// <summary>
		/// Symbols
		/// </summary>
		public static readonly MyStringId DisplayName_BlockGroup_Symbols = MyStringId.GetOrCompute("DisplayName_BlockGroup_Symbols");

		/// <summary>
		/// Sci-Fi Control Panel
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SciFiTerminal = MyStringId.GetOrCompute("DisplayName_Block_SciFiTerminal");

		/// <summary>
		/// Number 0
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Symbol0 = MyStringId.GetOrCompute("DisplayName_Block_Symbol0");

		/// <summary>
		/// Number 1
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Symbol1 = MyStringId.GetOrCompute("DisplayName_Block_Symbol1");

		/// <summary>
		/// Number 2
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Symbol2 = MyStringId.GetOrCompute("DisplayName_Block_Symbol2");

		/// <summary>
		/// Number 3
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Symbol3 = MyStringId.GetOrCompute("DisplayName_Block_Symbol3");

		/// <summary>
		/// Number 4
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Symbol4 = MyStringId.GetOrCompute("DisplayName_Block_Symbol4");

		/// <summary>
		/// Number 5
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Symbol5 = MyStringId.GetOrCompute("DisplayName_Block_Symbol5");

		/// <summary>
		/// Number 6
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Symbol6 = MyStringId.GetOrCompute("DisplayName_Block_Symbol6");

		/// <summary>
		/// Number 7
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Symbol7 = MyStringId.GetOrCompute("DisplayName_Block_Symbol7");

		/// <summary>
		/// Number 8
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Symbol8 = MyStringId.GetOrCompute("DisplayName_Block_Symbol8");

		/// <summary>
		/// Number 9
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Symbol9 = MyStringId.GetOrCompute("DisplayName_Block_Symbol9");

		/// <summary>
		/// Letter A
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SymbolA = MyStringId.GetOrCompute("DisplayName_Block_SymbolA");

		/// <summary>
		/// Letter B
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SymbolB = MyStringId.GetOrCompute("DisplayName_Block_SymbolB");

		/// <summary>
		/// Letter C
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SymbolC = MyStringId.GetOrCompute("DisplayName_Block_SymbolC");

		/// <summary>
		/// Letter D
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SymbolD = MyStringId.GetOrCompute("DisplayName_Block_SymbolD");

		/// <summary>
		/// Dot
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SymbolDot = MyStringId.GetOrCompute("DisplayName_Block_SymbolDot");

		/// <summary>
		/// Letter E
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SymbolE = MyStringId.GetOrCompute("DisplayName_Block_SymbolE");

		/// <summary>
		/// Letter F
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SymbolF = MyStringId.GetOrCompute("DisplayName_Block_SymbolF");

		/// <summary>
		/// Letter G
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SymbolG = MyStringId.GetOrCompute("DisplayName_Block_SymbolG");

		/// <summary>
		/// Letter H
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SymbolH = MyStringId.GetOrCompute("DisplayName_Block_SymbolH");

		/// <summary>
		/// Hyphen
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SymbolHyphen = MyStringId.GetOrCompute("DisplayName_Block_SymbolHyphen");

		/// <summary>
		/// Letter I
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SymbolI = MyStringId.GetOrCompute("DisplayName_Block_SymbolI");

		/// <summary>
		/// Letter J
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SymbolJ = MyStringId.GetOrCompute("DisplayName_Block_SymbolJ");

		/// <summary>
		/// Letter K
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SymbolK = MyStringId.GetOrCompute("DisplayName_Block_SymbolK");

		/// <summary>
		/// Letter L
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SymbolL = MyStringId.GetOrCompute("DisplayName_Block_SymbolL");

		/// <summary>
		/// Letter M
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SymbolM = MyStringId.GetOrCompute("DisplayName_Block_SymbolM");

		/// <summary>
		/// Letter N
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SymbolN = MyStringId.GetOrCompute("DisplayName_Block_SymbolN");

		/// <summary>
		/// Letter O
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SymbolO = MyStringId.GetOrCompute("DisplayName_Block_SymbolO");

		/// <summary>
		/// Letter P
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SymbolP = MyStringId.GetOrCompute("DisplayName_Block_SymbolP");

		/// <summary>
		/// Letter Q
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SymbolQ = MyStringId.GetOrCompute("DisplayName_Block_SymbolQ");

		/// <summary>
		/// Letter R
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SymbolR = MyStringId.GetOrCompute("DisplayName_Block_SymbolR");

		/// <summary>
		/// Letter S
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SymbolS = MyStringId.GetOrCompute("DisplayName_Block_SymbolS");

		/// <summary>
		/// Letter T
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SymbolT = MyStringId.GetOrCompute("DisplayName_Block_SymbolT");

		/// <summary>
		/// Letter U
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SymbolU = MyStringId.GetOrCompute("DisplayName_Block_SymbolU");

		/// <summary>
		/// Underscore
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SymbolUnderscore = MyStringId.GetOrCompute("DisplayName_Block_SymbolUnderscore");

		/// <summary>
		/// Letter V
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SymbolV = MyStringId.GetOrCompute("DisplayName_Block_SymbolV");

		/// <summary>
		/// Letter W
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SymbolW = MyStringId.GetOrCompute("DisplayName_Block_SymbolW");

		/// <summary>
		/// Letter X
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SymbolX = MyStringId.GetOrCompute("DisplayName_Block_SymbolX");

		/// <summary>
		/// Letter Y
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SymbolY = MyStringId.GetOrCompute("DisplayName_Block_SymbolY");

		/// <summary>
		/// Letter Z
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SymbolZ = MyStringId.GetOrCompute("DisplayName_Block_SymbolZ");

		/// <summary>
		/// Symbols
		/// </summary>
		public static readonly MyStringId DisplayName_Category_Symbols = MyStringId.GetOrCompute("DisplayName_Category_Symbols");

		/// <summary>
		/// Sci-Fi Four-Button Panel
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SciFiButtonPanel = MyStringId.GetOrCompute("DisplayName_Block_SciFiButtonPanel");

		/// <summary>
		/// Numpad 1
		/// </summary>
		public static readonly MyStringId DisplayName_Screen_Numpad1 = MyStringId.GetOrCompute("DisplayName_Screen_Numpad1");

		/// <summary>
		/// Numpad 2
		/// </summary>
		public static readonly MyStringId DisplayName_Screen_Numpad2 = MyStringId.GetOrCompute("DisplayName_Screen_Numpad2");

		/// <summary>
		/// Numpad 3
		/// </summary>
		public static readonly MyStringId DisplayName_Screen_Numpad3 = MyStringId.GetOrCompute("DisplayName_Screen_Numpad3");

		/// <summary>
		/// Numpad 4
		/// </summary>
		public static readonly MyStringId DisplayName_Screen_Numpad4 = MyStringId.GetOrCompute("DisplayName_Screen_Numpad4");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_X} I Agree
		/// </summary>
		public static readonly MyStringId ScreenModIoConsent_AgreeHelpText = MyStringId.GetOrCompute("ScreenModIoConsent_AgreeHelpText");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_Y} Opt Out
		/// </summary>
		public static readonly MyStringId ScreenModIoConsent_OptOutHelpText = MyStringId.GetOrCompute("ScreenModIoConsent_OptOutHelpText");

		/// <summary>
		/// Mod.io - Privacy Policy
		/// </summary>
		public static readonly MyStringId ScreenModIoConsent_PrivacyPolicy_UrlFriendlyName = MyStringId.GetOrCompute("ScreenModIoConsent_PrivacyPolicy_UrlFriendlyName");

		/// <summary>
		/// Mod.io - Terms of Use
		/// </summary>
		public static readonly MyStringId ScreenModIoConsent_TermsOfUse_UrlFriendlyName = MyStringId.GetOrCompute("ScreenModIoConsent_TermsOfUse_UrlFriendlyName");

		/// <summary>
		/// Steam - Privacy Policy
		/// </summary>
		public static readonly MyStringId ScreenModIoConsent_SteamPrivacyPolicy_UrlFriendlyName = MyStringId.GetOrCompute("ScreenModIoConsent_SteamPrivacyPolicy_UrlFriendlyName");

		/// <summary>
		/// Steam - Terms of Use
		/// </summary>
		public static readonly MyStringId ScreenModIoConsent_SteamTermsOfUse_UrlFriendlyName = MyStringId.GetOrCompute("ScreenModIoConsent_SteamTermsOfUse_UrlFriendlyName");

		/// <summary>
		/// {CONTROL:GUI:ACCEPT} Select  {CONTROL:GUI:BUTTON_Y} Show scheme
		/// </summary>
		public static readonly MyStringId ControlsOptions_Help_Scheme = MyStringId.GetOrCompute("ControlsOptions_Help_Scheme");

		/// <summary>
		/// {CONTROL:GUI:ACCEPT} Transfer items   
		/// </summary>
		public static readonly MyStringId TerminalInventory_Help_TransferItems = MyStringId.GetOrCompute("TerminalInventory_Help_TransferItems");

		/// <summary>
		/// Poster Cosmic Coffee 1
		/// </summary>
		public static readonly MyStringId LCD_Poster_CosmicCoffee01 = MyStringId.GetOrCompute("LCD_Poster_CosmicCoffee01");

		/// <summary>
		/// Poster Cosmic Coffee 2
		/// </summary>
		public static readonly MyStringId LCD_Poster_CosmicCoffee02 = MyStringId.GetOrCompute("LCD_Poster_CosmicCoffee02");

		/// <summary>
		/// Poster Recruit
		/// </summary>
		public static readonly MyStringId LCD_Poster_IWantYou = MyStringId.GetOrCompute("LCD_Poster_IWantYou");

		/// <summary>
		/// Poster Klang Cola 1
		/// </summary>
		public static readonly MyStringId LCD_Poster_klangCola01 = MyStringId.GetOrCompute("LCD_Poster_klangCola01");

		/// <summary>
		/// Poster Klang Cola 2
		/// </summary>
		public static readonly MyStringId LCD_Poster_klangCola02 = MyStringId.GetOrCompute("LCD_Poster_klangCola02");

		/// <summary>
		/// Poster ROS 1
		/// </summary>
		public static readonly MyStringId LCD_Poster_ROS01 = MyStringId.GetOrCompute("LCD_Poster_ROS01");

		/// <summary>
		/// Poster ROS 2
		/// </summary>
		public static readonly MyStringId LCD_Poster_ROS02 = MyStringId.GetOrCompute("LCD_Poster_ROS02");

		/// <summary>
		/// Poster Cosmic Team H
		/// </summary>
		public static readonly MyStringId LCD_CosmicTeam_Landscape = MyStringId.GetOrCompute("LCD_CosmicTeam_Landscape");

		/// <summary>
		/// Poster Cosmic Team V
		/// </summary>
		public static readonly MyStringId LCD_CosmicTeam_Portrait = MyStringId.GetOrCompute("LCD_CosmicTeam_Portrait");

		/// <summary>
		/// Poster Exploration H
		/// </summary>
		public static readonly MyStringId LCD_Exploration_Landscape = MyStringId.GetOrCompute("LCD_Exploration_Landscape");

		/// <summary>
		/// Poster Exploration V
		/// </summary>
		public static readonly MyStringId LCD_Exploration_Portrait = MyStringId.GetOrCompute("LCD_Exploration_Portrait");

		/// <summary>
		/// Poster Thunder Fleet H
		/// </summary>
		public static readonly MyStringId LCD_ThunderFleet_Landscape = MyStringId.GetOrCompute("LCD_ThunderFleet_Landscape");

		/// <summary>
		/// Poster Thunder Fleet V
		/// </summary>
		public static readonly MyStringId LCD_ThunderFleet_Portrait = MyStringId.GetOrCompute("LCD_ThunderFleet_Portrait");

		/// <summary>
		/// The Frostbite Pack includes a new scenario and four new blocks: Antenna Dish, Dead Engineers, Gate and the Offset Door. Additionally, this DLC features the Frozen Armor Skin and LCD Posters.
		/// </summary>
		public static readonly MyStringId Description_FAQ_FrostbitePack = MyStringId.GetOrCompute("Description_FAQ_FrostbitePack");

		/// <summary>
		/// Antennas can be used to broadcast positions, messages HUD markers and allows grids to be accessed or controlled from a distance.  Antennas need to be able to send and receive, so make sure two antennas always overlap each other's position.
		/// </summary>
		public static readonly MyStringId Description_AntennaDish = MyStringId.GetOrCompute("Description_AntennaDish");

		/// <summary>
		/// Doors can seal off interiors and make them air tight while still allowing access for the player.
		/// </summary>
		public static readonly MyStringId Description_OffsetDoor = MyStringId.GetOrCompute("Description_OffsetDoor");

		/// <summary>
		///    Antenna
		/// </summary>
		public static readonly MyStringId BroadcastScreen_Antenna = MyStringId.GetOrCompute("BroadcastScreen_Antenna");

		/// <summary>
		///    Remote Control
		/// </summary>
		public static readonly MyStringId BroadcastScreen_RemoteControl = MyStringId.GetOrCompute("BroadcastScreen_RemoteControl");

		/// <summary>
		/// There is not enough space for the operation. Please, remove some saved games or blueprints and try again.
		/// </summary>
		public static readonly MyStringId MessageBoxWorldOperation_Quota = MyStringId.GetOrCompute("MessageBoxWorldOperation_Quota");

		/// <summary>
		/// Cloud synchronization failed. Please, enable cloud synchronization and try again later.
		/// </summary>
		public static readonly MyStringId MessageBoxWorldOperation_CloudSynchronization = MyStringId.GetOrCompute("MessageBoxWorldOperation_CloudSynchronization");

		/// <summary>
		/// The operation failed. Please, try again later.
		/// </summary>
		public static readonly MyStringId MessageBoxWorldOperation_Error = MyStringId.GetOrCompute("MessageBoxWorldOperation_Error");

		/// <summary>
		/// There is not enough space to save the game! Please, remove some saved games or blueprints and try again.
		/// </summary>
		public static readonly MyStringId MessageBoxWorldSave_Quota = MyStringId.GetOrCompute("MessageBoxWorldSave_Quota");

		/// <summary>
		/// Neon Tubes Down 2
		/// </summary>
		public static readonly MyStringId DisplayName_Block_NeonTubesStraightDown = MyStringId.GetOrCompute("DisplayName_Block_NeonTubesStraightDown");

		/// <summary>
		/// Sci-Fi One-Button Terminal
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SciFiButtonTerminal = MyStringId.GetOrCompute("DisplayName_Block_SciFiButtonTerminal");

		/// <summary>
		/// Hinge
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LargeHinge = MyStringId.GetOrCompute("DisplayName_Block_LargeHinge");

		/// <summary>
		/// Hinge 3x3
		/// </summary>
		public static readonly MyStringId DisplayName_Block_MediumHinge = MyStringId.GetOrCompute("DisplayName_Block_MediumHinge");

		/// <summary>
		/// Hinge
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SmallHinge = MyStringId.GetOrCompute("DisplayName_Block_SmallHinge");

		/// <summary>
		/// Hinges can transfer items and rotate up to 180 degrees.
		/// </summary>
		public static readonly MyStringId Description_Hinge = MyStringId.GetOrCompute("Description_Hinge");

		/// <summary>
		/// Hinge Parts can be reattached to hinges.
		/// </summary>
		public static readonly MyStringId Description_HingeHead = MyStringId.GetOrCompute("Description_HingeHead");

		/// <summary>
		/// Hinge Part
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LargeHingeHead = MyStringId.GetOrCompute("DisplayName_Block_LargeHingeHead");

		/// <summary>
		/// Hinge Part 3x3
		/// </summary>
		public static readonly MyStringId DisplayName_Block_MediumHingeHead = MyStringId.GetOrCompute("DisplayName_Block_MediumHingeHead");

		/// <summary>
		/// Hinge Part
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SmallHingeHead = MyStringId.GetOrCompute("DisplayName_Block_SmallHingeHead");

		/// <summary>
		/// And
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SymbolAnd = MyStringId.GetOrCompute("DisplayName_Block_SymbolAnd");

		/// <summary>
		/// Apostrophe
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SymbolApostrophe = MyStringId.GetOrCompute("DisplayName_Block_SymbolApostrophe");

		/// <summary>
		/// Colon
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SymbolColon = MyStringId.GetOrCompute("DisplayName_Block_SymbolColon");

		/// <summary>
		/// Exclamationmark
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SymbolExclamationMark = MyStringId.GetOrCompute("DisplayName_Block_SymbolExclamationMark");

		/// <summary>
		/// Questionmark
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SymbolQuestionMark = MyStringId.GetOrCompute("DisplayName_Block_SymbolQuestionMark");

		/// <summary>
		/// Blueprint Actions
		/// </summary>
		public static readonly MyStringId RadialMenuGroupTitle_BlueprintActions = MyStringId.GetOrCompute("RadialMenuGroupTitle_BlueprintActions");

		/// <summary>
		/// Open chat and use {CONTROL:GUI:RIGHT_STICK_BUTTON} to paste GPS
		/// </summary>
		public static readonly MyStringId TerminalTab_GPS_CopyToClipboard_GamepadHelp = MyStringId.GetOrCompute("TerminalTab_GPS_CopyToClipboard_GamepadHelp");

		/// <summary>
		/// {CONTROL:GUI:RIGHT_BUTTON} + {GAMEPAD:AXIS_DPAD} Move item Hold {CONTROL:GUI:LEFT_BUTTON} for transfer * 10 Hold {CONTROL:GUI:RIGHT_BUTTON} for transfer * 100 Hold {CONTROL:GUI:LEFT_BUTTON} + {CONTROL:GUI:RIGHT_BUTTON} for transfer * 1000
		/// </summary>
		public static readonly MyStringId ToolTipTerminalInventory_ItemInfoGamepad = MyStringId.GetOrCompute("ToolTipTerminalInventory_ItemInfoGamepad");

		/// <summary>
		/// Toggle block auto-rotation
		/// </summary>
		public static readonly MyStringId ControlName_BlockAutorotation = MyStringId.GetOrCompute("ControlName_BlockAutorotation");

		/// <summary>
		/// Select next color
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerColorNext = MyStringId.GetOrCompute("HelpScreen_ControllerColorNext");

		/// <summary>
		/// Select previous color
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerColorPrevious = MyStringId.GetOrCompute("HelpScreen_ControllerColorPrevious");

		/// <summary>
		/// Select next skin
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerSkinNext = MyStringId.GetOrCompute("HelpScreen_ControllerSkinNext");

		/// <summary>
		/// Select previous skin
		/// </summary>
		public static readonly MyStringId HelpScreen_ControllerSkinPrevious = MyStringId.GetOrCompute("HelpScreen_ControllerSkinPrevious");

		/// <summary>
		/// Camera rotation
		/// </summary>
		public static readonly MyStringId HelpScreen_RotateCamera = MyStringId.GetOrCompute("HelpScreen_RotateCamera");

		/// <summary>
		/// CameraZoom
		/// </summary>
		public static readonly MyStringId HelpScreen_ZoomCamera = MyStringId.GetOrCompute("HelpScreen_ZoomCamera");

		/// <summary>
		/// Open Block radial menu
		/// </summary>
		public static readonly MyStringId Spectator_BlockRadialMenu = MyStringId.GetOrCompute("Spectator_BlockRadialMenu");

		/// <summary>
		/// Horizontal movement
		/// </summary>
		public static readonly MyStringId Spectator_HorizontalMovement = MyStringId.GetOrCompute("Spectator_HorizontalMovement");

		/// <summary>
		/// Rotation
		/// </summary>
		public static readonly MyStringId Spectator_Rotation = MyStringId.GetOrCompute("Spectator_Rotation");

		/// <summary>
		/// Open System radial menu
		/// </summary>
		public static readonly MyStringId Spectator_SystemRadialMenu = MyStringId.GetOrCompute("Spectator_SystemRadialMenu");

		/// <summary>
		/// Strafe
		/// </summary>
		public static readonly MyStringId HelpScreen_Strafe = MyStringId.GetOrCompute("HelpScreen_Strafe");

		/// <summary>
		/// Open Warning screen
		/// </summary>
		public static readonly MyStringId HelpScreen_Warnings = MyStringId.GetOrCompute("HelpScreen_Warnings");

		/// <summary>
		/// Preparing world loading
		/// </summary>
		public static readonly MyStringId ProgressScreen_LoadingWorld = MyStringId.GetOrCompute("ProgressScreen_LoadingWorld");

		/// <summary>
		/// Unloading world
		/// </summary>
		public static readonly MyStringId ProgressScreen_UnloadingWorld = MyStringId.GetOrCompute("ProgressScreen_UnloadingWorld");

		/// <summary>
		/// Active filter:
		/// </summary>
		public static readonly MyStringId ScreenTerminalInventory_FilterGamepadHelp_ActiveFilter = MyStringId.GetOrCompute("ScreenTerminalInventory_FilterGamepadHelp_ActiveFilter");

		/// <summary>
		/// All inventories
		/// </summary>
		public static readonly MyStringId ScreenTerminalInventory_FilterGamepadHelp_AllInventories = MyStringId.GetOrCompute("ScreenTerminalInventory_FilterGamepadHelp_AllInventories");

		/// <summary>
		/// Character
		/// </summary>
		public static readonly MyStringId ScreenTerminalInventory_FilterGamepadHelp_Character = MyStringId.GetOrCompute("ScreenTerminalInventory_FilterGamepadHelp_Character");

		/// <summary>
		/// Current ship
		/// </summary>
		public static readonly MyStringId ScreenTerminalInventory_FilterGamepadHelp_CurrentShip = MyStringId.GetOrCompute("ScreenTerminalInventory_FilterGamepadHelp_CurrentShip");

		/// <summary>
		/// Energy inventories
		/// </summary>
		public static readonly MyStringId ScreenTerminalInventory_FilterGamepadHelp_EnergyInventories = MyStringId.GetOrCompute("ScreenTerminalInventory_FilterGamepadHelp_EnergyInventories");

		/// <summary>
		/// Ship or Station
		/// </summary>
		public static readonly MyStringId ScreenTerminalInventory_FilterGamepadHelp_ShipOrStation = MyStringId.GetOrCompute("ScreenTerminalInventory_FilterGamepadHelp_ShipOrStation");

		/// <summary>
		/// Storage inventories
		/// </summary>
		public static readonly MyStringId ScreenTerminalInventory_FilterGamepadHelp_StorageInventories = MyStringId.GetOrCompute("ScreenTerminalInventory_FilterGamepadHelp_StorageInventories");

		/// <summary>
		/// System inventories
		/// </summary>
		public static readonly MyStringId ScreenTerminalInventory_FilterGamepadHelp_SystemInventories = MyStringId.GetOrCompute("ScreenTerminalInventory_FilterGamepadHelp_SystemInventories");

		/// <summary>
		/// Toggle Relative dampeners
		/// </summary>
		public static readonly MyStringId Dampeners_Relative = MyStringId.GetOrCompute("Dampeners_Relative");

		/// <summary>
		/// {CONTROL:GUI:ACCEPT} Add to queue
		/// </summary>
		public static readonly MyStringId ToolTipTerminalProduction_AddToQueueGamepad = MyStringId.GetOrCompute("ToolTipTerminalProduction_AddToQueueGamepad");

		/// <summary>
		/// Hold {CONTROL:GUI:LEFT_BUTTON} for queue * 10  Hold {CONTROL:GUI:RIGHT_BUTTON} for queue * 100  Hold {CONTROL:GUI:LEFT_BUTTON} + {CONTROL:GUI:RIGHT_BUTTON} for queue * 1000
		/// </summary>
		public static readonly MyStringId ToolTipTerminalProduction_ItemInfoGamepad = MyStringId.GetOrCompute("ToolTipTerminalProduction_ItemInfoGamepad");

		/// <summary>
		/// {CONTROL:GUI:RIGHT_BUTTON} + {GAMEPAD:AXIS_DPAD} Move item Hold {CONTROL:GUI:LEFT_BUTTON} to remove * 10  Hold {CONTROL:GUI:RIGHT_BUTTON} to remove * 100  Hold {CONTROL:GUI:LEFT_BUTTON} + {CONTROL:GUI:RIGHT_BUTTON} to remove * 1000
		/// </summary>
		public static readonly MyStringId ToolTipTerminalProduction_ProductionQueue_ItemInfoGamepad = MyStringId.GetOrCompute("ToolTipTerminalProduction_ProductionQueue_ItemInfoGamepad");

		/// <summary>
		/// Equip Voxel hand
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_EquipVoxelhand = MyStringId.GetOrCompute("ControlMenuItemLabel_EquipVoxelhand");

		/// <summary>
		/// {CONTROL:GUI:BUTTON_X} OK   {CONTROL:GUI:CANCEL} Back
		/// </summary>
		public static readonly MyStringId DialogBlueprintRename_GamepadHelp = MyStringId.GetOrCompute("DialogBlueprintRename_GamepadHelp");

		/// <summary>
		/// Enable Area interaction
		/// </summary>
		public static readonly MyStringId AreaInteration_Label = MyStringId.GetOrCompute("AreaInteration_Label");

		/// <summary>
		/// Area interaction enables you to interact with objects that are close to the crosshair without looking at them directly.
		/// </summary>
		public static readonly MyStringId ToolTipOptionsGame_AreaInteraction = MyStringId.GetOrCompute("ToolTipOptionsGame_AreaInteraction");

		/// <summary>
		/// Open store
		/// </summary>
		public static readonly MyStringId OpenDlcShop = MyStringId.GetOrCompute("OpenDlcShop");

		/// <summary>
		/// N/A
		/// </summary>
		public static readonly MyStringId TieredUpdate_GridPresenceNotAvailable = MyStringId.GetOrCompute("TieredUpdate_GridPresenceNotAvailable");

		/// <summary>
		/// Grid presence tier: 
		/// </summary>
		public static readonly MyStringId TieredUpdate_GridPresenceTier = MyStringId.GetOrCompute("TieredUpdate_GridPresenceTier");

		/// <summary>
		/// N/A
		/// </summary>
		public static readonly MyStringId TieredUpdate_PlayerPresenceNotAvailable = MyStringId.GetOrCompute("TieredUpdate_PlayerPresenceNotAvailable");

		/// <summary>
		/// Player presence tier: 
		/// </summary>
		public static readonly MyStringId TieredUpdate_PlayerPresenceTier = MyStringId.GetOrCompute("TieredUpdate_PlayerPresenceTier");

		/// <summary>
		/// H
		/// </summary>
		public static readonly MyStringId GPSScreen_hueLabel = MyStringId.GetOrCompute("GPSScreen_hueLabel");

		/// <summary>
		/// S
		/// </summary>
		public static readonly MyStringId GPSScreen_saturationLabel = MyStringId.GetOrCompute("GPSScreen_saturationLabel");

		/// <summary>
		/// V
		/// </summary>
		public static readonly MyStringId GPSScreen_valueLabel = MyStringId.GetOrCompute("GPSScreen_valueLabel");

		/// <summary>
		/// Hex
		/// </summary>
		public static readonly MyStringId GPSScreen_hexLabel = MyStringId.GetOrCompute("GPSScreen_hexLabel");

		/// <summary>
		/// Hue: 
		/// </summary>
		public static readonly MyStringId GPSScreen_hueTooltip = MyStringId.GetOrCompute("GPSScreen_hueTooltip");

		/// <summary>
		/// Saturation:
		/// </summary>
		public static readonly MyStringId GPSScreen_saturationTooltip = MyStringId.GetOrCompute("GPSScreen_saturationTooltip");

		/// <summary>
		/// Value:
		/// </summary>
		public static readonly MyStringId GPSScreen_valueTooltip = MyStringId.GetOrCompute("GPSScreen_valueTooltip");

		/// <summary>
		/// Colors HEX: 
		/// </summary>
		public static readonly MyStringId GPSScreen_hexTooltip = MyStringId.GetOrCompute("GPSScreen_hexTooltip");

		/// <summary>
		/// Not replicated
		/// </summary>
		public static readonly MyStringId NotReplicated = MyStringId.GetOrCompute("NotReplicated");

		/// <summary>
		/// Replicated
		/// </summary>
		public static readonly MyStringId Replicated = MyStringId.GetOrCompute("Replicated");

		/// <summary>
		/// Is replicated: 
		/// </summary>
		public static readonly MyStringId TieredUpdate_IsReplicated = MyStringId.GetOrCompute("TieredUpdate_IsReplicated");

		/// <summary>
		/// No
		/// </summary>
		public static readonly MyStringId TieredUpdate_IsReplicated_False = MyStringId.GetOrCompute("TieredUpdate_IsReplicated_False");

		/// <summary>
		/// N/A
		/// </summary>
		public static readonly MyStringId TieredUpdate_IsReplicated_NA = MyStringId.GetOrCompute("TieredUpdate_IsReplicated_NA");

		/// <summary>
		/// Yes
		/// </summary>
		public static readonly MyStringId TieredUpdate_IsReplicated_True = MyStringId.GetOrCompute("TieredUpdate_IsReplicated_True");

		/// <summary>
		/// File path too long
		/// </summary>
		public static readonly MyStringId BlueprintScreen_FilePathTooLong_Caption = MyStringId.GetOrCompute("BlueprintScreen_FilePathTooLong_Caption");

		/// <summary>
		/// File path is too long, current length is {0}, maximum length is {1}. Path:  {2}
		/// </summary>
		public static readonly MyStringId BlueprintScreen_FilePathTooLong_Description = MyStringId.GetOrCompute("BlueprintScreen_FilePathTooLong_Description");

		/// <summary>
		/// Sci-Fi Sliding Door
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SideDoor = MyStringId.GetOrCompute("DisplayName_Block_SideDoor");

		/// <summary>
		/// With a decorative bar counter block you can create a place to serve drinks and share stories of heroism and tragedy.
		/// </summary>
		public static readonly MyStringId Description_BarCounter = MyStringId.GetOrCompute("Description_BarCounter");

		/// <summary>
		/// Sci-Fi Bar Counter
		/// </summary>
		public static readonly MyStringId DisplayName_Block_BarCounter = MyStringId.GetOrCompute("DisplayName_Block_BarCounter");

		/// <summary>
		/// Sci-Fi Bar Counter Corner
		/// </summary>
		public static readonly MyStringId DisplayName_Block_BarCounterCorner = MyStringId.GetOrCompute("DisplayName_Block_BarCounterCorner");

		/// <summary>
		/// Sci-Fi Large Ion Thruster
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LargeThrustSciFi = MyStringId.GetOrCompute("DisplayName_Block_LargeThrustSciFi");

		/// <summary>
		/// Sci-Fi Ion Thruster
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SmallThrustSciFi = MyStringId.GetOrCompute("DisplayName_Block_SmallThrustSciFi");

		/// <summary>
		/// letters A to H
		/// </summary>
		public static readonly MyStringId DisplayName_BlockGroup_LettersAH = MyStringId.GetOrCompute("DisplayName_BlockGroup_LettersAH");

		/// <summary>
		/// Letters, numbers and symbol blocks allow you to build text and indications onto your ships and structures. 
		/// </summary>
		public static readonly MyStringId Description_TextBlocks = MyStringId.GetOrCompute("Description_TextBlocks");

		/// <summary>
		/// The Sparks Of The Future Pack comes with several new blocks like Neon Tubes, a small grid door and a unique button panels. It also comes with several new character animations and armor skins.
		/// </summary>
		public static readonly MyStringId Description_FAQ_SOTFPack = MyStringId.GetOrCompute("Description_FAQ_SOTFPack");

		/// <summary>
		/// There are unique weather systems on every planet that can affect sunlight, wind, oxygen and temperature. Lightning can be dangerous and damage your structures but prioritizes some blocks. Weather can be disabled in world settings.
		/// </summary>
		public static readonly MyStringId Description_FAQ_Weather = MyStringId.GetOrCompute("Description_FAQ_Weather");

		/// <summary>
		/// Symbols
		/// </summary>
		public static readonly MyStringId RadialMenuGroupTitle_Symbols = MyStringId.GetOrCompute("RadialMenuGroupTitle_Symbols");

		/// <summary>
		/// Poster Bright Future H
		/// </summary>
		public static readonly MyStringId LCD_BrightFuture_Landscape = MyStringId.GetOrCompute("LCD_BrightFuture_Landscape");

		/// <summary>
		/// Poster Bright Future V
		/// </summary>
		public static readonly MyStringId LCD_BrightFuture_Portrait = MyStringId.GetOrCompute("LCD_BrightFuture_Portrait");

		/// <summary>
		/// Poster Bright Future
		/// </summary>
		public static readonly MyStringId LCD_BrightFuture_Square = MyStringId.GetOrCompute("LCD_BrightFuture_Square");

		/// <summary>
		/// Poster Cosmic Team
		/// </summary>
		public static readonly MyStringId LCD_CosmicTeam_Square = MyStringId.GetOrCompute("LCD_CosmicTeam_Square");

		/// <summary>
		/// Poster Exploration
		/// </summary>
		public static readonly MyStringId LCD_Exploration_Square = MyStringId.GetOrCompute("LCD_Exploration_Square");

		/// <summary>
		/// Poster Space Travel H
		/// </summary>
		public static readonly MyStringId LCD_SpaceTravel_Landscape = MyStringId.GetOrCompute("LCD_SpaceTravel_Landscape");

		/// <summary>
		/// Poster Space Travel V
		/// </summary>
		public static readonly MyStringId LCD_SpaceTravel_Portrait = MyStringId.GetOrCompute("LCD_SpaceTravel_Portrait");

		/// <summary>
		/// Poster Space Travel
		/// </summary>
		public static readonly MyStringId LCD_SpaceTravel_Square = MyStringId.GetOrCompute("LCD_SpaceTravel_Square");

		/// <summary>
		/// Poster Thunder Fleet
		/// </summary>
		public static readonly MyStringId LCD_ThunderFleet_Square = MyStringId.GetOrCompute("LCD_ThunderFleet_Square");

		/// <summary>
		/// For Boulder reverting, minimum player distance is: {0} m.
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_RevertBoulderTooltip = MyStringId.GetOrCompute("ScreenDebugAdminMenu_RevertBoulderTooltip");

		/// <summary>
		/// Dust Storm
		/// </summary>
		public static readonly MyStringId DisplayName_TSS_Weather_Marsstorm = MyStringId.GetOrCompute("DisplayName_TSS_Weather_Marsstorm");

		/// <summary>
		/// Snow Storm
		/// </summary>
		public static readonly MyStringId DisplayName_TSS_Weather_SnowStorm = MyStringId.GetOrCompute("DisplayName_TSS_Weather_SnowStorm");

		/// <summary>
		/// Decoration #3
		/// </summary>
		public static readonly MyStringId RadialMenuGroupTitle_Decoration3 = MyStringId.GetOrCompute("RadialMenuGroupTitle_Decoration3");

		/// <summary>
		/// Camera Smoothness
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_CameraSmoothness = MyStringId.GetOrCompute("ScreenDebugAdminMenu_CameraSmoothness");

		/// <summary>
		/// Follow
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_Follow = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Follow");

		/// <summary>
		/// Free
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_Free = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Free");

		/// <summary>
		/// None
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_None = MyStringId.GetOrCompute("ScreenDebugAdminMenu_None");

		/// <summary>
		/// Orbit
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_Orbit = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Orbit");

		/// <summary>
		/// Num "number" - load camera position
		/// </summary>
		public static readonly MyStringId ScreenSpectatorAdminMenu_Load = MyStringId.GetOrCompute("ScreenSpectatorAdminMenu_Load");

		/// <summary>
		/// Ctrl + Num "number" - save camera position
		/// </summary>
		public static readonly MyStringId ScreenSpectatorAdminMenu_Save = MyStringId.GetOrCompute("ScreenSpectatorAdminMenu_Save");

		/// <summary>
		/// Saved Positions
		/// </summary>
		public static readonly MyStringId ScreenSpectatorAdminMenu_SavedPositions = MyStringId.GetOrCompute("ScreenSpectatorAdminMenu_SavedPositions");

		/// <summary>
		/// Shortcuts
		/// </summary>
		public static readonly MyStringId ScreenSpectatorAdminMenu_Shortcuts = MyStringId.GetOrCompute("ScreenSpectatorAdminMenu_Shortcuts");

		/// <summary>
		/// &lt;Empty&gt;
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_Empty = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Empty");

		/// <summary>
		/// The Exhaust Pipe emits particles like smoke and fire to decorate vehicles and structures.
		/// </summary>
		public static readonly MyStringId Description_ExhaustPipe = MyStringId.GetOrCompute("Description_ExhaustPipe");

		/// <summary>
		/// Exhaust Pipe
		/// </summary>
		public static readonly MyStringId DisplayName_Block_ExhaustPipe = MyStringId.GetOrCompute("DisplayName_Block_ExhaustPipe");

		/// <summary>
		/// Offroad Wheel Suspension 1x1 Right
		/// </summary>
		public static readonly MyStringId DisplayName_Block_OffroadSuspension1x1 = MyStringId.GetOrCompute("DisplayName_Block_OffroadSuspension1x1");

		/// <summary>
		/// Offroad Wheel Suspension 1x1 Left
		/// </summary>
		public static readonly MyStringId DisplayName_Block_OffroadSuspension1x1mirrored = MyStringId.GetOrCompute("DisplayName_Block_OffroadSuspension1x1mirrored");

		/// <summary>
		/// Offroad Wheel Suspension 3x3 Right
		/// </summary>
		public static readonly MyStringId DisplayName_Block_OffroadSuspension3x3 = MyStringId.GetOrCompute("DisplayName_Block_OffroadSuspension3x3");

		/// <summary>
		/// Offroad Wheel Suspension 3x3 Left
		/// </summary>
		public static readonly MyStringId DisplayName_Block_OffroadSuspension3x3mirrored = MyStringId.GetOrCompute("DisplayName_Block_OffroadSuspension3x3mirrored");

		/// <summary>
		/// Offroad Wheel Suspension 5x5 Right
		/// </summary>
		public static readonly MyStringId DisplayName_Block_OffroadSuspension5x5 = MyStringId.GetOrCompute("DisplayName_Block_OffroadSuspension5x5");

		/// <summary>
		/// Offroad Wheel Suspension 5x5 Left
		/// </summary>
		public static readonly MyStringId DisplayName_Block_OffroadSuspension5x5mirrored = MyStringId.GetOrCompute("DisplayName_Block_OffroadSuspension5x5mirrored");

		/// <summary>
		/// Offroad Wheel 1x1
		/// </summary>
		public static readonly MyStringId DisplayName_Block_OffroadWheel1x1 = MyStringId.GetOrCompute("DisplayName_Block_OffroadWheel1x1");

		/// <summary>
		/// Offroad Wheel 3x3
		/// </summary>
		public static readonly MyStringId DisplayName_Block_OffroadWheel3x3 = MyStringId.GetOrCompute("DisplayName_Block_OffroadWheel3x3");

		/// <summary>
		/// Offroad Wheel 5x5
		/// </summary>
		public static readonly MyStringId DisplayName_Block_OffroadWheel5x5 = MyStringId.GetOrCompute("DisplayName_Block_OffroadWheel5x5");

		/// <summary>
		///
		/// </summary>
		public static readonly MyStringId String2 = MyStringId.GetOrCompute("String2");

		/// <summary>
		/// The Buggy Cockpit is similar to the rover cockpit but with a roll cage to keep you safe. Please keep hands and feet inside. 
		/// </summary>
		public static readonly MyStringId Description_BuggyCockpit = MyStringId.GetOrCompute("Description_BuggyCockpit");

		/// <summary>
		/// The Rover Cockpit is a compact cockpit designed for rovers but works just as well for small ships or large small grid interiors. 
		/// </summary>
		public static readonly MyStringId Description_RoverCockpit = MyStringId.GetOrCompute("Description_RoverCockpit");

		/// <summary>
		/// Buggy Cockpit
		/// </summary>
		public static readonly MyStringId DisplayName_Block_BuggyCockpit = MyStringId.GetOrCompute("DisplayName_Block_BuggyCockpit");

		/// <summary>
		/// Rover Cockpit
		/// </summary>
		public static readonly MyStringId DisplayName_Block_RoverCockpit = MyStringId.GetOrCompute("DisplayName_Block_RoverCockpit");

		/// <summary>
		/// Left Screen
		/// </summary>
		public static readonly MyStringId DisplayName_Screen_Left = MyStringId.GetOrCompute("DisplayName_Screen_Left");

		/// <summary>
		/// Right Screen
		/// </summary>
		public static readonly MyStringId DisplayName_Screen_Right = MyStringId.GetOrCompute("DisplayName_Screen_Right");

		/// <summary>
		/// Small Screen
		/// </summary>
		public static readonly MyStringId DisplayName_Screen_Small = MyStringId.GetOrCompute("DisplayName_Screen_Small");

		/// <summary>
		/// Electric Storm
		/// </summary>
		public static readonly MyStringId DisplayName_TSS_Weather_ElectricStorm = MyStringId.GetOrCompute("DisplayName_TSS_Weather_ElectricStorm");

		/// <summary>
		/// Alien Fog Light
		/// </summary>
		public static readonly MyStringId AlienFogLight = MyStringId.GetOrCompute("AlienFogLight");

		/// <summary>
		/// Alien Fog Heavy
		/// </summary>
		public static readonly MyStringId AlienFogHeavy = MyStringId.GetOrCompute("AlienFogHeavy");

		/// <summary>
		/// Alien Rain Light
		/// </summary>
		public static readonly MyStringId AlienRainLight = MyStringId.GetOrCompute("AlienRainLight");

		/// <summary>
		/// Alien Rain Heavy
		/// </summary>
		public static readonly MyStringId AlienRainHeavy = MyStringId.GetOrCompute("AlienRainHeavy");

		/// <summary>
		/// Alien Thunderstorm Heavy
		/// </summary>
		public static readonly MyStringId AlienThunderstormHeavy = MyStringId.GetOrCompute("AlienThunderstormHeavy");

		/// <summary>
		/// Alien Thunderstorm Light
		/// </summary>
		public static readonly MyStringId AlienThunderstormLight = MyStringId.GetOrCompute("AlienThunderstormLight");

		/// <summary>
		/// Dust
		/// </summary>
		public static readonly MyStringId Dust = MyStringId.GetOrCompute("Dust");

		/// <summary>
		/// Electric Storm
		/// </summary>
		public static readonly MyStringId ElectricStorm = MyStringId.GetOrCompute("ElectricStorm");

		/// <summary>
		/// Snow Light
		/// </summary>
		public static readonly MyStringId SnowLight = MyStringId.GetOrCompute("SnowLight");

		/// <summary>
		/// Snow Heavy
		/// </summary>
		public static readonly MyStringId SnowHeavy = MyStringId.GetOrCompute("SnowHeavy");

		/// <summary>
		/// SandStorm Light
		/// </summary>
		public static readonly MyStringId SandStormLight = MyStringId.GetOrCompute("SandStormLight");

		/// <summary>
		/// SandStorm Heavy
		/// </summary>
		public static readonly MyStringId SandStormHeavy = MyStringId.GetOrCompute("SandStormHeavy");

		/// <summary>
		/// Fog Light
		/// </summary>
		public static readonly MyStringId FogLight = MyStringId.GetOrCompute("FogLight");

		/// <summary>
		/// Fog Heavy
		/// </summary>
		public static readonly MyStringId FogHeavy = MyStringId.GetOrCompute("FogHeavy");

		/// <summary>
		/// Mars Snow
		/// </summary>
		public static readonly MyStringId MarsSnow = MyStringId.GetOrCompute("MarsSnow");

		/// <summary>
		/// Mars Storm Heavy
		/// </summary>
		public static readonly MyStringId MarsStormHeavy = MyStringId.GetOrCompute("MarsStormHeavy");

		/// <summary>
		/// Mars Storm Light
		/// </summary>
		public static readonly MyStringId MarsStormLight = MyStringId.GetOrCompute("MarsStormLight");

		/// <summary>
		/// Thunderstorm Light
		/// </summary>
		public static readonly MyStringId ThunderstormLight = MyStringId.GetOrCompute("ThunderstormLight");

		/// <summary>
		/// Thunderstorm Heavy
		/// </summary>
		public static readonly MyStringId ThunderstormHeavy = MyStringId.GetOrCompute("ThunderstormHeavy");

		/// <summary>
		/// Rain Heavy
		/// </summary>
		public static readonly MyStringId RainHeavy = MyStringId.GetOrCompute("RainHeavy");

		/// <summary>
		/// Rain Light
		/// </summary>
		public static readonly MyStringId RainLight = MyStringId.GetOrCompute("RainLight");

		/// <summary>
		/// Exhaust Effect
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_ExhaustEffect = MyStringId.GetOrCompute("BlockPropertyTitle_ExhaustEffect");

		/// <summary>
		/// Power Dependency
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_PowerDependency = MyStringId.GetOrCompute("BlockPropertyTitle_PowerDependency");

		/// <summary>
		/// Viewport 1
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Viewport1 = MyStringId.GetOrCompute("DisplayName_Block_Viewport1");

		/// <summary>
		/// Viewport 2
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Viewport2 = MyStringId.GetOrCompute("DisplayName_Block_Viewport2");

		/// <summary>
		/// Change Character
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_ReplayTool_ChangeCharacter = MyStringId.GetOrCompute("ScreenDebugAdminMenu_ReplayTool_ChangeCharacter");

		/// <summary>
		/// Changes the currently active character.
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_ReplayTool_ChangeCharacter_Tooltip = MyStringId.GetOrCompute("ScreenDebugAdminMenu_ReplayTool_ChangeCharacter_Tooltip");

		/// <summary>
		/// The Offset Light and Offset Spotlight function the same as regular lights and can be used to illuminate dark areas.
		/// </summary>
		public static readonly MyStringId Description_OffsetLight = MyStringId.GetOrCompute("Description_OffsetLight");

		/// <summary>
		/// Offset Light
		/// </summary>
		public static readonly MyStringId DisplayName_Block_OffsetLight = MyStringId.GetOrCompute("DisplayName_Block_OffsetLight");

		/// <summary>
		/// Offset Spotlight
		/// </summary>
		public static readonly MyStringId DisplayName_Block_OffsetSpotlight = MyStringId.GetOrCompute("DisplayName_Block_OffsetSpotlight");

		/// <summary>
		/// Barred windows have the same integrity as glass windows but are not air tight. Great for keeping big spiders outside.
		/// </summary>
		public static readonly MyStringId Description_BarredWindow = MyStringId.GetOrCompute("Description_BarredWindow");

		/// <summary>
		/// Barred Window
		/// </summary>
		public static readonly MyStringId DisplayName_Block_BarredWindow = MyStringId.GetOrCompute("DisplayName_Block_BarredWindow");

		/// <summary>
		/// Barred Window Face
		/// </summary>
		public static readonly MyStringId DisplayName_Block_BarredWindowFace = MyStringId.GetOrCompute("DisplayName_Block_BarredWindowFace");

		/// <summary>
		/// Barred Window Side
		/// </summary>
		public static readonly MyStringId DisplayName_Block_BarredWindowSide = MyStringId.GetOrCompute("DisplayName_Block_BarredWindowSide");

		/// <summary>
		/// Barred Window Slope
		/// </summary>
		public static readonly MyStringId DisplayName_Block_BarredWindowSlope = MyStringId.GetOrCompute("DisplayName_Block_BarredWindowSlope");

		/// <summary>
		/// Barred Windows
		/// </summary>
		public static readonly MyStringId DisplayName_BlockGroup_BarredWindows = MyStringId.GetOrCompute("DisplayName_BlockGroup_BarredWindows");

		/// <summary>
		/// Storage Shelves can be used to store components and make your hangar or garage look messy and productive.
		/// </summary>
		public static readonly MyStringId Description_StorageShelf = MyStringId.GetOrCompute("Description_StorageShelf");

		/// <summary>
		/// Storage Shelves
		/// </summary>
		public static readonly MyStringId DisplayName_BlockGroup_StorageShelves = MyStringId.GetOrCompute("DisplayName_BlockGroup_StorageShelves");

		/// <summary>
		/// Storage Shelf 1
		/// </summary>
		public static readonly MyStringId DisplayName_Block_StorageShelf1 = MyStringId.GetOrCompute("DisplayName_Block_StorageShelf1");

		/// <summary>
		/// Storage Shelf 2
		/// </summary>
		public static readonly MyStringId DisplayName_Block_StorageShelf2 = MyStringId.GetOrCompute("DisplayName_Block_StorageShelf2");

		/// <summary>
		/// Storage Shelf 3
		/// </summary>
		public static readonly MyStringId DisplayName_Block_StorageShelf3 = MyStringId.GetOrCompute("DisplayName_Block_StorageShelf3");

		/// <summary>
		/// The Wasteland Pack includes a new multiplayer scenario and several new blocks like the Off Road wheels, Car lights, Buggy cockpit, Viewport Blocks and the Exhaust Pipe. Additionally, this DLC features several new armour and player skins like the Heavy Rust Armor Skin, Concrete Armor skin and the Scavenger character skin.
		/// </summary>
		public static readonly MyStringId Description_FAQ_ScrapRacePack = MyStringId.GetOrCompute("Description_FAQ_ScrapRacePack");

		/// <summary>
		/// Viewports are available in the Wasteland Pack. They are windows that fit flush with armour blocks and combine easily with desks and kitchens.
		/// </summary>
		public static readonly MyStringId Description_ViewPort = MyStringId.GetOrCompute("Description_ViewPort");

		/// <summary>
		/// Cracked soil
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_CrackedSoil = MyStringId.GetOrCompute("ControlMenuItemLabel_CrackedSoil");

		/// <summary>
		/// Dusty rocks 1
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_DustyRocks = MyStringId.GetOrCompute("ControlMenuItemLabel_DustyRocks");

		/// <summary>
		/// Dusty rocks 2
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_DustyRocks2 = MyStringId.GetOrCompute("ControlMenuItemLabel_DustyRocks2");

		/// <summary>
		/// Dusty rocks 3
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_DustyRocks3 = MyStringId.GetOrCompute("ControlMenuItemLabel_DustyRocks3");

		/// <summary>
		/// Pertam sand
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_PertamSand = MyStringId.GetOrCompute("ControlMenuItemLabel_PertamSand");

		/// <summary>
		/// Triton blend
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_TritonBlend = MyStringId.GetOrCompute("ControlMenuItemLabel_TritonBlend");

		/// <summary>
		/// Triton ice
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_TritonIce = MyStringId.GetOrCompute("ControlMenuItemLabel_TritonIce");

		/// <summary>
		/// Triton stone
		/// </summary>
		public static readonly MyStringId ControlMenuItemLabel_TritonStone = MyStringId.GetOrCompute("ControlMenuItemLabel_TritonStone");

		/// <summary>
		/// Triton and Pertam
		/// </summary>
		public static readonly MyStringId RadialMenuGroupTitle_VoxelTritonPertam = MyStringId.GetOrCompute("RadialMenuGroupTitle_VoxelTritonPertam");

		/// <summary>
		/// Offroad Wheel 1x1
		/// </summary>
		public static readonly MyStringId DisplayName_Block_OffroadWheel1x1mirrored = MyStringId.GetOrCompute("DisplayName_Block_OffroadWheel1x1mirrored");

		/// <summary>
		/// Offroad Wheel 3x3
		/// </summary>
		public static readonly MyStringId DisplayName_Block_OffroadWheel3x3mirrored = MyStringId.GetOrCompute("DisplayName_Block_OffroadWheel3x3mirrored");

		/// <summary>
		/// Warfare I.
		/// </summary>
		public static readonly MyStringId Description_DLC_Warfare1 = MyStringId.GetOrCompute("Description_DLC_Warfare1");

		/// <summary>
		/// Warfare I.
		/// </summary>
		public static readonly MyStringId DisplayName_DLC_Warfare1 = MyStringId.GetOrCompute("DisplayName_DLC_Warfare1");

		/// <summary>
		/// The Weapon Rack stores weapons and ammunition for quick access.
		/// </summary>
		public static readonly MyStringId Description_WeaponRack = MyStringId.GetOrCompute("Description_WeaponRack");

		/// <summary>
		/// Weapon Rack
		/// </summary>
		public static readonly MyStringId DisplayName_Block_WeaponRack = MyStringId.GetOrCompute("DisplayName_Block_WeaponRack");

		/// <summary>
		/// Targeting System Block Description
		/// </summary>
		public static readonly MyStringId Description_TargetingSystemBlock = MyStringId.GetOrCompute("Description_TargetingSystemBlock");

		/// <summary>
		/// Targeting System Block
		/// </summary>
		public static readonly MyStringId DisplayName_Block_TargetingSystemBlock = MyStringId.GetOrCompute("DisplayName_Block_TargetingSystemBlock");

		/// <summary>
		/// Warfare 1 Blocks
		/// </summary>
		public static readonly MyStringId DisplayName_DLC_Warfare1DLC = MyStringId.GetOrCompute("DisplayName_DLC_Warfare1DLC");

		/// <summary>
		/// Heavy Armor
		/// </summary>
		public static readonly MyStringId RadialMenuGroupTitle_ArmorHeavy = MyStringId.GetOrCompute("RadialMenuGroupTitle_ArmorHeavy");

		/// <summary>
		/// Steam
		/// </summary>
		public static readonly MyStringId WorkshopBrowser_Service0 = MyStringId.GetOrCompute("WorkshopBrowser_Service0");

		/// <summary>
		/// Mod.io
		/// </summary>
		public static readonly MyStringId WorkshopBrowser_Service1 = MyStringId.GetOrCompute("WorkshopBrowser_Service1");

		/// <summary>
		/// Publish
		/// </summary>
		public static readonly MyStringId PublishBlueprint_Caption = MyStringId.GetOrCompute("PublishBlueprint_Caption");

		/// <summary>
		/// Do you want to publish this blueprint?
		/// </summary>
		public static readonly MyStringId PublishBlueprint_Question = MyStringId.GetOrCompute("PublishBlueprint_Question");

		/// <summary>
		/// Changing campaign settings may cause serious problems. It is allowed only in experimental mode.
		/// </summary>
		public static readonly MyStringId WorldFileCouldNotBeEdited = MyStringId.GetOrCompute("WorldFileCouldNotBeEdited");

		/// <summary>
		/// You cannot leave factions when autobalancing is enabled
		/// </summary>
		public static readonly MyStringId TerminalTab_Factions_LeaveToolTip_Balancing = MyStringId.GetOrCompute("TerminalTab_Factions_LeaveToolTip_Balancing");

		/// <summary>
		/// The S-10 standard issue sidearm. Built for use in a hostile environment: Simple, reliable, dependable.
		/// </summary>
		public static readonly MyStringId Description_SemiAutoPistol = MyStringId.GetOrCompute("Description_SemiAutoPistol");

		/// <summary>
		/// S-10
		/// </summary>
		public static readonly MyStringId DisplayName_Item_SemiAutoPistol = MyStringId.GetOrCompute("DisplayName_Item_SemiAutoPistol");

		/// <summary>
		/// S-10 Magazine
		/// </summary>
		public static readonly MyStringId DisplayName_Item_SemiAutoPistolMagazine = MyStringId.GetOrCompute("DisplayName_Item_SemiAutoPistolMagazine");

		/// <summary>
		/// Fire Covers provide cover in interiors or can be used to prevent players from walking off ledges.
		/// </summary>
		public static readonly MyStringId Description_FireCover = MyStringId.GetOrCompute("Description_FireCover");

		/// <summary>
		/// Fire Cover
		/// </summary>
		public static readonly MyStringId DisplayName_Block_FireCover = MyStringId.GetOrCompute("DisplayName_Block_FireCover");

		/// <summary>
		/// Fire Cover Corner
		/// </summary>
		public static readonly MyStringId DisplayName_Block_FireCoverCorner = MyStringId.GetOrCompute("DisplayName_Block_FireCoverCorner");

		/// <summary>
		/// Half Window
		/// </summary>
		public static readonly MyStringId DisplayName_Block_HalfWindow = MyStringId.GetOrCompute("DisplayName_Block_HalfWindow");

		/// <summary>
		/// Half Window Corner
		/// </summary>
		public static readonly MyStringId DisplayName_Block_HalfWindowCorner = MyStringId.GetOrCompute("DisplayName_Block_HalfWindowCorner");

		/// <summary>
		/// Half Window Corner Inv.
		/// </summary>
		public static readonly MyStringId DisplayName_Block_HalfWindowCornerInv = MyStringId.GetOrCompute("DisplayName_Block_HalfWindowCornerInv");

		/// <summary>
		/// Half Window Inv.
		/// </summary>
		public static readonly MyStringId DisplayName_Block_HalfWindowInv = MyStringId.GetOrCompute("DisplayName_Block_HalfWindowInv");

		/// <summary>
		/// Half Windows
		/// </summary>
		public static readonly MyStringId DisplayName_BlockGroup_HalfWindows = MyStringId.GetOrCompute("DisplayName_BlockGroup_HalfWindows");

		/// <summary>
		/// Decoration #4
		/// </summary>
		public static readonly MyStringId RadialMenuGroupTitle_Decoration4 = MyStringId.GetOrCompute("RadialMenuGroupTitle_Decoration4");

		/// <summary>
		/// The Embrasure provides cover while allowing you to keep up the pressure on your enemies. 
		/// </summary>
		public static readonly MyStringId Description_Embrasure = MyStringId.GetOrCompute("Description_Embrasure");

		/// <summary>
		/// Embrasure
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Embrasure = MyStringId.GetOrCompute("DisplayName_Block_Embrasure");

		/// <summary>
		/// The Target Dummy block allows you to hone your skills with handheld weaponry or test their mechanics. You can set them up to perform actions when hit or destroyed. The Target Dummy requires steel plates to repair itself.
		/// </summary>
		public static readonly MyStringId Description_TargetDummy = MyStringId.GetOrCompute("Description_TargetDummy");

		/// <summary>
		/// Target Dummy
		/// </summary>
		public static readonly MyStringId DisplayName_Block_TargetDummy = MyStringId.GetOrCompute("DisplayName_Block_TargetDummy");

		/// <summary>
		/// Enable dummy to be regenerated after its complete destruction.
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_EnableRegeneration = MyStringId.GetOrCompute("BlockPropertyDescription_EnableRegeneration");

		/// <summary>
		/// Time before the dummy is restored
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_RegenerationDelay = MyStringId.GetOrCompute("BlockPropertyDescription_RegenerationDelay");

		/// <summary>
		/// Enable regeneration
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_EnableRegeneration = MyStringId.GetOrCompute("BlockPropertyTitle_EnableRegeneration");

		/// <summary>
		/// Regeneration delay
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_RegenerationDelay = MyStringId.GetOrCompute("BlockPropertyTitle_RegenerationDelay");

		/// <summary>
		/// MR-20 Magazine
		/// </summary>
		public static readonly MyStringId DisplayName_Item_AutomaticRifleGun_Mag_20rd = MyStringId.GetOrCompute("DisplayName_Item_AutomaticRifleGun_Mag_20rd");

		/// <summary>
		/// MR-8P Magazine
		/// </summary>
		public static readonly MyStringId DisplayName_Item_PreciseAutomaticRifleGun_Mag_5rd = MyStringId.GetOrCompute("DisplayName_Item_PreciseAutomaticRifleGun_Mag_5rd");

		/// <summary>
		/// MR-50A Magazine
		/// </summary>
		public static readonly MyStringId DisplayName_Item_RapidFireAutomaticRifleGun_Mag_50rd = MyStringId.GetOrCompute("DisplayName_Item_RapidFireAutomaticRifleGun_Mag_50rd");

		/// <summary>
		/// MR-30E Magazine
		/// </summary>
		public static readonly MyStringId DisplayName_Item_UltimateAutomaticRifleGun_Mag_30rd = MyStringId.GetOrCompute("DisplayName_Item_UltimateAutomaticRifleGun_Mag_30rd");

		/// <summary>
		/// Shoulder fired rocket ordinance. Launches a rocket propelled anti-vehicle projectile.
		/// </summary>
		public static readonly MyStringId Description_BasicHandHeldLauncher = MyStringId.GetOrCompute("Description_BasicHandHeldLauncher");

		/// <summary>
		/// RO-1
		/// </summary>
		public static readonly MyStringId DisplayName_Item_BasicHandHeldLauncher = MyStringId.GetOrCompute("DisplayName_Item_BasicHandHeldLauncher");

		/// <summary>
		/// Building on the reliable design of the RO-1 the PRO-1 provides a number of battlefield improvements, including a precision scope.
		/// </summary>
		public static readonly MyStringId Description_AdvancedHandHeldLauncher = MyStringId.GetOrCompute("Description_AdvancedHandHeldLauncher");

		/// <summary>
		/// An S-10 variant, the E model sidearm features a modified “feather” trigger and boasts a red dot sight.
		/// </summary>
		public static readonly MyStringId Description_ElitePistol = MyStringId.GetOrCompute("Description_ElitePistol");

		/// <summary>
		/// A true “next-generation” sidearm. Featuring heat resistant components, a full-auto trigger group, and extended ammo capacity. The S-20A is purpose-built to take it to the next level.
		/// </summary>
		public static readonly MyStringId Description_FullAutoPistol = MyStringId.GetOrCompute("Description_FullAutoPistol");

		/// <summary>
		/// PRO-1
		/// </summary>
		public static readonly MyStringId DisplayName_Item_AdvancedHandHeldLauncher = MyStringId.GetOrCompute("DisplayName_Item_AdvancedHandHeldLauncher");

		/// <summary>
		/// S-10E
		/// </summary>
		public static readonly MyStringId DisplayName_Item_ElitePistol = MyStringId.GetOrCompute("DisplayName_Item_ElitePistol");

		/// <summary>
		/// S-20A
		/// </summary>
		public static readonly MyStringId DisplayName_Item_FullAutoPistol = MyStringId.GetOrCompute("DisplayName_Item_FullAutoPistol");

		/// <summary>
		/// Time Remaining
		/// </summary>
		public static readonly MyStringId WarfareCounter_TimeRemaining = MyStringId.GetOrCompute("WarfareCounter_TimeRemaining");

		/// <summary>
		/// Escape Pod
		/// </summary>
		public static readonly MyStringId WarfareCounter_EscapePod = MyStringId.GetOrCompute("WarfareCounter_EscapePod");

		/// <summary>
		/// Match
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_Match = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Match");

		/// <summary>
		/// Advance
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_Match_Advance = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Match_Advance");

		/// <summary>
		/// Advance match to next available state
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_Match_Advance_Tooltip = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Match_Advance_Tooltip");

		/// <summary>
		/// Pause
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_Match_Pause = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Match_Pause");

		/// <summary>
		/// Pause the match
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_Match_Pause_Tooltip = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Match_Pause_Tooltip");

		/// <summary>
		/// Start
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_Match_Start = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Match_Start");

		/// <summary>
		/// Restart match to the initial state of PreMatch
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_Match_Start_Tooltip = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Match_Start_Tooltip");

		/// <summary>
		/// Stop
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_Match_Stop = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Match_Stop");

		/// <summary>
		/// End the match by advancing to Finished state
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_Match_Stop_Tooltip = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Match_Stop_Tooltip");

		/// <summary>
		/// Unpause
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_Match_Unpause = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Match_Unpause");

		/// <summary>
		/// Unpause the match
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_Match_Unpause_Tooltip = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Match_Unpause_Tooltip");

		/// <summary>
		/// Add time
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_Match_AddTime = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Match_AddTime");

		/// <summary>
		/// Add remaining time to a current match state (can be both positive or negative)
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_Match_AddTime_Tooltip = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Match_AddTime_Tooltip");

		/// <summary>
		/// Match is disabled
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_Match_DisableText = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Match_DisableText");

		/// <summary>
		/// Match is enabled
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_Match_EnableText = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Match_EnableText");

		/// <summary>
		/// Match is not running
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_Match_NotRunningText = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Match_NotRunningText");

		/// <summary>
		/// Match is running
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_Match_RunningText = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Match_RunningText");

		/// <summary>
		/// Set time
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_Match_SetTime = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Match_SetTime");

		/// <summary>
		/// Set remaining time of current match state (must be non-negative)
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_Match_SetTime_Tooltip = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Match_SetTime_Tooltip");

		/// <summary>
		/// Current state: {0}
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_Match_StateText = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Match_StateText");

		/// <summary>
		/// Remaining time: {0}
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_Match_TimeText = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Match_TimeText");

		/// <summary>
		/// S-10E Magazine
		/// </summary>
		public static readonly MyStringId DisplayName_Item_ElitePistolMagazine = MyStringId.GetOrCompute("DisplayName_Item_ElitePistolMagazine");

		/// <summary>
		/// S-20A Magazine
		/// </summary>
		public static readonly MyStringId DisplayName_Item_FullAutoPistolMagazine = MyStringId.GetOrCompute("DisplayName_Item_FullAutoPistolMagazine");

		/// <summary>
		/// Interior Turret Ammo Box
		/// </summary>
		public static readonly MyStringId DisplayName_Item_InteriorTurret_Mag_100rd = MyStringId.GetOrCompute("DisplayName_Item_InteriorTurret_Mag_100rd");

		/// <summary>
		/// Consumables - Click on any item to assemble it.
		/// </summary>
		public static readonly MyStringId Description_BlueprintClass_Consumables = MyStringId.GetOrCompute("Description_BlueprintClass_Consumables");

		/// <summary>
		/// Consumables
		/// </summary>
		public static readonly MyStringId DisplayName_BlueprintClass_Consumables = MyStringId.GetOrCompute("DisplayName_BlueprintClass_Consumables");

		/// <summary>
		/// The MR-30E is a modernized and battle-ready version of the well known model 20. The model 30E features 3-round burst-fire, an extended magazine, and a red dot sight.
		/// </summary>
		public static readonly MyStringId Description_EliteAutomaticRifle = MyStringId.GetOrCompute("Description_EliteAutomaticRifle");

		/// <summary>
		/// The MR-8P is designed for long range engagements. The model 8P makes use of a much heavier barrel to achieve unmatched accuracy and stopping power.
		/// </summary>
		public static readonly MyStringId Description_PreciseAutomaticRifle = MyStringId.GetOrCompute("Description_PreciseAutomaticRifle");

		/// <summary>
		/// The MR-50A enjoys notoriety as the smallest squad support machine gun in modern use.  The model 50A can unleash a withering stream of suppressive fire, at a rate of 550 RPM.
		/// </summary>
		public static readonly MyStringId Description_RapidFireAutomaticRifle = MyStringId.GetOrCompute("Description_RapidFireAutomaticRifle");

		/// <summary>
		/// : not available. User consent not granted. Go to Options / Game.
		/// </summary>
		public static readonly MyStringId UGC_ServiceNotAvailable_NoConsent = MyStringId.GetOrCompute("UGC_ServiceNotAvailable_NoConsent");

		/// <summary>
		/// Various hand-held weapons allow you to defend yourself; ranging from basic pistols useful as a sidearm to advanced rifles for special operations, and even anti-armor launchers. These weapons need to be loaded with the correct magazine. Standing still, crouching and aiming the weapon will increase accuracy and reduce recoil.
		/// </summary>
		public static readonly MyStringId Description_FAQ_CombatMechanics = MyStringId.GetOrCompute("Description_FAQ_CombatMechanics");

		/// <summary>
		/// Hand-held launchers provide effective anti-armor capability in a small package. The hand-held launchers need to be loaded with the same rocket munition as their block counterparts.
		/// </summary>
		public static readonly MyStringId Description_FAQ_HandHeldLaunchers = MyStringId.GetOrCompute("Description_FAQ_HandHeldLaunchers");

		/// <summary>
		/// Sidearms can be used to defend yourself in a hostile environment. They need to be loaded with the corresponding magazines.
		/// </summary>
		public static readonly MyStringId Description_FAQ_Pistols = MyStringId.GetOrCompute("Description_FAQ_Pistols");

		/// <summary>
		/// Rifles are a step up from the basic pistol and other sidearms, do more damage to blocks, and fit specialized roles. They need to be loaded with the corresponding magazines.
		/// </summary>
		public static readonly MyStringId Description_FAQ_Rifles = MyStringId.GetOrCompute("Description_FAQ_Rifles");

		/// <summary>
		/// Warfare 1: Field Engineer features a variety of new blocks like the Half Window, Embrasure, Weapon Rack, and Fire Cover, as well as a new skin and emotes. 
		/// </summary>
		public static readonly MyStringId Description_FAQ_Warfare1 = MyStringId.GetOrCompute("Description_FAQ_Warfare1");

		/// <summary>
		/// Passage 2
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Passage2 = MyStringId.GetOrCompute("DisplayName_Block_Passage2");

		/// <summary>
		/// Passage 2 Side
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Passage2Side = MyStringId.GetOrCompute("DisplayName_Block_Passage2Side");

		/// <summary>
		/// Damage is turned off
		/// </summary>
		public static readonly MyStringId NotificationDamageTurnedOff = MyStringId.GetOrCompute("NotificationDamageTurnedOff");

		/// <summary>
		/// This grid is immune to damage
		/// </summary>
		public static readonly MyStringId NotificationGridIsImmune = MyStringId.GetOrCompute("NotificationGridIsImmune");

		/// <summary>
		/// Passage 3
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Passage3 = MyStringId.GetOrCompute("DisplayName_Block_Passage3");

		/// <summary>
		/// Passage 3 Cross
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Passage3Cross = MyStringId.GetOrCompute("DisplayName_Block_Passage3Cross");

		/// <summary>
		/// Passage 3 Frame
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Passage3Frame = MyStringId.GetOrCompute("DisplayName_Block_Passage3Frame");

		/// <summary>
		/// Passage 3 Light
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Passage3Light = MyStringId.GetOrCompute("DisplayName_Block_Passage3Light");

		/// <summary>
		/// Passage 3 Wall
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Passage3Wall = MyStringId.GetOrCompute("DisplayName_Block_Passage3Wall");

		/// <summary>
		/// Passage 3 Corner
		/// </summary>
		public static readonly MyStringId DisplayName_Block_PassageScifiCorner = MyStringId.GetOrCompute("DisplayName_Block_PassageScifiCorner");

		/// <summary>
		/// Passage 3 T-junction
		/// </summary>
		public static readonly MyStringId DisplayName_Block_PassageSciFiTjunction = MyStringId.GetOrCompute("DisplayName_Block_PassageSciFiTjunction");

		/// <summary>
		/// Passage 3 Windowed
		/// </summary>
		public static readonly MyStringId DisplayName_Block_PassageSciFiWindow = MyStringId.GetOrCompute("DisplayName_Block_PassageSciFiWindow");

		/// <summary>
		/// WIP stickyBlock
		/// </summary>
		public static readonly MyStringId Description_MagneticPlate = MyStringId.GetOrCompute("Description_MagneticPlate");

		/// <summary>
		/// Large Magnetic Plate
		/// </summary>
		public static readonly MyStringId DisplayName_Block_MagneticPlateLarge = MyStringId.GetOrCompute("DisplayName_Block_MagneticPlateLarge");

		/// <summary>
		/// Large Industrial Cargo Container
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LargeIndustrialCargoContainer = MyStringId.GetOrCompute("DisplayName_Block_LargeIndustrialCargoContainer");

		/// <summary>
		/// Vertical Button Panel
		/// </summary>
		public static readonly MyStringId DisplayName_Block_VerticalButtonPanel = MyStringId.GetOrCompute("DisplayName_Block_VerticalButtonPanel");

		/// <summary>
		/// Industrial Blocks
		/// </summary>
		public static readonly MyStringId DisplayName_DLC_IndustrialPackDLC = MyStringId.GetOrCompute("DisplayName_DLC_IndustrialPackDLC");

		/// <summary>
		/// Allow power transfer while current grid is powered off
		/// </summary>
		public static readonly MyStringId Tooltip_OverridePowerTransfer = MyStringId.GetOrCompute("Tooltip_OverridePowerTransfer");

		/// <summary>
		/// Magnetic Plate
		/// </summary>
		public static readonly MyStringId DisplayName_Block_MagneticPlateSmall = MyStringId.GetOrCompute("DisplayName_Block_MagneticPlateSmall");

		/// <summary>
		/// Conveyor Pipe Curved
		/// </summary>
		public static readonly MyStringId DisplayName_Block_ConveyorPipeCorner = MyStringId.GetOrCompute("DisplayName_Block_ConveyorPipeCorner");

		/// <summary>
		/// Conveyor Pipe End
		/// </summary>
		public static readonly MyStringId DisplayName_Block_ConveyorPipeEnd = MyStringId.GetOrCompute("DisplayName_Block_ConveyorPipeEnd");

		/// <summary>
		/// Conveyor Pipe Flanged
		/// </summary>
		public static readonly MyStringId DisplayName_Block_ConveyorPipeFlange = MyStringId.GetOrCompute("DisplayName_Block_ConveyorPipeFlange");

		/// <summary>
		/// Conveyor Pipe Cross
		/// </summary>
		public static readonly MyStringId DisplayName_Block_ConveyorPipeIntersection = MyStringId.GetOrCompute("DisplayName_Block_ConveyorPipeIntersection");

		/// <summary>
		/// Conveyor Pipe Junction
		/// </summary>
		public static readonly MyStringId DisplayName_Block_ConveyorPipeJunction = MyStringId.GetOrCompute("DisplayName_Block_ConveyorPipeJunction");

		/// <summary>
		/// Industrial Conveyor Pipes
		/// </summary>
		public static readonly MyStringId DisplayName_Block_ConveyorPipes = MyStringId.GetOrCompute("DisplayName_Block_ConveyorPipes");

		/// <summary>
		/// Conveyor Pipe
		/// </summary>
		public static readonly MyStringId DisplayName_Block_ConveyorPipeSeamless = MyStringId.GetOrCompute("DisplayName_Block_ConveyorPipeSeamless");

		/// <summary>
		/// Small Merge Block
		/// </summary>
		public static readonly MyStringId DisplayName_Block_MergeBlockSmall = MyStringId.GetOrCompute("DisplayName_Block_MergeBlockSmall");

		/// <summary>
		/// Beam Block
		/// </summary>
		public static readonly MyStringId DisplayName_Block_BeamBlock = MyStringId.GetOrCompute("DisplayName_Block_BeamBlock");

		/// <summary>
		/// Beam Block End
		/// </summary>
		public static readonly MyStringId DisplayName_Block_BeamBlockEnd = MyStringId.GetOrCompute("DisplayName_Block_BeamBlockEnd");

		/// <summary>
		/// Beam Block Half
		/// </summary>
		public static readonly MyStringId DisplayName_Block_BeamBlockHalf = MyStringId.GetOrCompute("DisplayName_Block_BeamBlockHalf");

		/// <summary>
		/// Beam Block Half Slope
		/// </summary>
		public static readonly MyStringId DisplayName_Block_BeamBlockHalfSlope = MyStringId.GetOrCompute("DisplayName_Block_BeamBlockHalfSlope");

		/// <summary>
		/// Beam Block Junction
		/// </summary>
		public static readonly MyStringId DisplayName_Block_BeamBlockJunction = MyStringId.GetOrCompute("DisplayName_Block_BeamBlockJunction");

		/// <summary>
		/// Beam Block Round
		/// </summary>
		public static readonly MyStringId DisplayName_Block_BeamBlockRound = MyStringId.GetOrCompute("DisplayName_Block_BeamBlockRound");

		/// <summary>
		/// Beam Block Slope
		/// </summary>
		public static readonly MyStringId DisplayName_Block_BeamBlockSlope = MyStringId.GetOrCompute("DisplayName_Block_BeamBlockSlope");

		/// <summary>
		/// Beam Block2x1 Base
		/// </summary>
		public static readonly MyStringId DisplayName_Block_BeamBlockSlope2x1Base = MyStringId.GetOrCompute("DisplayName_Block_BeamBlockSlope2x1Base");

		/// <summary>
		/// Beam Block2x1 Tip
		/// </summary>
		public static readonly MyStringId DisplayName_Block_BeamBlockSlope2x1Tip = MyStringId.GetOrCompute("DisplayName_Block_BeamBlockSlope2x1Tip");

		/// <summary>
		/// Beam Block T-Junction
		/// </summary>
		public static readonly MyStringId DisplayName_Block_BeamBlockTJunction = MyStringId.GetOrCompute("DisplayName_Block_BeamBlockTJunction");

		/// <summary>
		/// Beam blocks offer a variety of different shapes to be used as decoration or light structural support.
		/// </summary>
		public static readonly MyStringId Description_BeamBlock = MyStringId.GetOrCompute("Description_BeamBlock");

		/// <summary>
		/// Colossus On Fire
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusCompetition_01 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusCompetition_01");

		/// <summary>
		/// Designing The Fleet
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusCompetition_02 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusCompetition_02");

		/// <summary>
		/// Entropy
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusCompetition_03 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusCompetition_03");

		/// <summary>
		/// EXODUS
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusCompetition_04 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusCompetition_04");

		/// <summary>
		/// Growing Wild
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusCompetition_05 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusCompetition_05");

		/// <summary>
		/// Into the Asteroid Field
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusCompetition_06 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusCompetition_06");

		/// <summary>
		/// Last Day on Triton
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusCompetition_07 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusCompetition_07");

		/// <summary>
		/// Sands of the Slave Princess
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusCompetition_08 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusCompetition_08");

		/// <summary>
		/// Sector 347
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusCompetition_09 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusCompetition_09");

		/// <summary>
		/// Space Angels
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusCompetition_10 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusCompetition_10");

		/// <summary>
		/// Space Elevator
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusCompetition_11 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusCompetition_11");

		/// <summary>
		/// Space Engineers Main Theme
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusCompetition_12 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusCompetition_12");

		/// <summary>
		/// Space Pirates
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusCompetition_13 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusCompetition_13");

		/// <summary>
		/// SpaceItOut
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusCompetition_14 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusCompetition_14");

		/// <summary>
		/// The City Lies
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusCompetition_15 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusCompetition_15");

		/// <summary>
		/// Timeless Space
		/// </summary>
		public static readonly MyStringId SoundBlock_SoundName_MusCompetition_16 = MyStringId.GetOrCompute("SoundBlock_SoundName_MusCompetition_16");

		/// <summary>
		/// Enable target locking
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_LargeTurretTargetLocking = MyStringId.GetOrCompute("BlockPropertyTitle_LargeTurretTargetLocking");

		/// <summary>
		/// While this is enabled, you can select and lock targets while controlling this block
		/// </summary>
		public static readonly MyStringId BlockPropertyTooltip_LargeTurretTargetLocking = MyStringId.GetOrCompute("BlockPropertyTooltip_LargeTurretTargetLocking");

		/// <summary>
		/// Forget target
		/// </summary>
		public static readonly MyStringId BlockActionTitle_LargeTurretUnlockTarget = MyStringId.GetOrCompute("BlockActionTitle_LargeTurretUnlockTarget");

		/// <summary>
		/// This immediately forgets the current target
		/// </summary>
		public static readonly MyStringId BlockActionTooltip_LargeTurretUnlockTarget = MyStringId.GetOrCompute("BlockActionTooltip_LargeTurretUnlockTarget");

		/// <summary>
		/// Fire at locked target
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_LargeTurretFireAtLockedTarget = MyStringId.GetOrCompute("BlockPropertyTitle_LargeTurretFireAtLockedTarget");

		/// <summary>
		/// Enabling this will make the turrets aim and fire at a locked target
		/// </summary>
		public static readonly MyStringId BlockPropertyTooltip_LargeTurretFireAtLockedTarget = MyStringId.GetOrCompute("BlockPropertyTooltip_LargeTurretFireAtLockedTarget");

		/// <summary>
		/// Industrial Hydrogen Tank
		/// </summary>
		public static readonly MyStringId DisplayName_Block_HydrogenTankIndustrial = MyStringId.GetOrCompute("DisplayName_Block_HydrogenTankIndustrial");

		/// <summary>
		/// Industrial Assembler
		/// </summary>
		public static readonly MyStringId DisplayName_Block_AssemblerIndustrial = MyStringId.GetOrCompute("DisplayName_Block_AssemblerIndustrial");

		/// <summary>
		/// Industrial Refinery
		/// </summary>
		public static readonly MyStringId DisplayName_Block_RefineryIndustrial = MyStringId.GetOrCompute("DisplayName_Block_RefineryIndustrial");

		/// <summary>
		/// Cylindrical Column
		/// </summary>
		public static readonly MyStringId DisplayName_Block_CylindricalColumn = MyStringId.GetOrCompute("DisplayName_Block_CylindricalColumn");

		/// <summary>
		/// Heavy Industry
		/// </summary>
		public static readonly MyStringId Description_DLC_HeavyIndustry = MyStringId.GetOrCompute("Description_DLC_HeavyIndustry");

		/// <summary>
		/// Heavy Industry
		/// </summary>
		public static readonly MyStringId DisplayName_DLC_HeavyIndustry = MyStringId.GetOrCompute("DisplayName_DLC_HeavyIndustry");

		/// <summary>
		/// Light Armor Panel 2x1 Slope Base
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Armor2x1SlopedPanelLight = MyStringId.GetOrCompute("DisplayName_Block_Armor2x1SlopedPanelLight");

		/// <summary>
		/// Light Armor Half Panel
		/// </summary>
		public static readonly MyStringId DisplayName_Block_ArmorHalfPanelLight = MyStringId.GetOrCompute("DisplayName_Block_ArmorHalfPanelLight");

		/// <summary>
		/// Light Armor Panel
		/// </summary>
		public static readonly MyStringId DisplayName_Block_ArmorPanelLight = MyStringId.GetOrCompute("DisplayName_Block_ArmorPanelLight");

		/// <summary>
		/// Light Armor Panel Slope 
		/// </summary>
		public static readonly MyStringId DisplayName_Block_ArmorSlopedPanelLight = MyStringId.GetOrCompute("DisplayName_Block_ArmorSlopedPanelLight");

		/// <summary>
		/// Light Armor Panel Side
		/// </summary>
		public static readonly MyStringId DisplayName_Block_ArmorSlopedSidePanelLight = MyStringId.GetOrCompute("DisplayName_Block_ArmorSlopedSidePanelLight");

		/// <summary>
		/// Light Armor Panel 2x1 Base Right
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Armor2x1SlopedSideBasePanelLight = MyStringId.GetOrCompute("DisplayName_Block_Armor2x1SlopedSideBasePanelLight");

		/// <summary>
		/// Light Armor Panel 2x1 Base Left
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Armor2x1SlopedSideBasePanelLightInv = MyStringId.GetOrCompute("DisplayName_Block_Armor2x1SlopedSideBasePanelLightInv");

		/// <summary>
		/// Light Armor Panel Half Slope
		/// </summary>
		public static readonly MyStringId DisplayName_Block_ArmorHalfSlopedPanelLight = MyStringId.GetOrCompute("DisplayName_Block_ArmorHalfSlopedPanelLight");

		/// <summary>
		/// Heavy Armor Half Panel 2x1 Base Right
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Armor2x1HalfSlopedPanelHeavy = MyStringId.GetOrCompute("DisplayName_Block_Armor2x1HalfSlopedPanelHeavy");

		/// <summary>
		/// Heavy Armor Half Panel 2x1 Base Left
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Armor2x1HalfSlopedPanelHeavyInv = MyStringId.GetOrCompute("DisplayName_Block_Armor2x1HalfSlopedPanelHeavyInv");

		/// <summary>
		/// Light Armor Half Panel 2x1 Base Right
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Armor2x1HalfSlopedPanelLight = MyStringId.GetOrCompute("DisplayName_Block_Armor2x1HalfSlopedPanelLight");

		/// <summary>
		/// Light Armor Half Panel 2x1 Base Left
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Armor2x1HalfSlopedPanelLightInv = MyStringId.GetOrCompute("DisplayName_Block_Armor2x1HalfSlopedPanelLightInv");

		/// <summary>
		/// Heavy Armor Panel 2x1 Slope Base
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Armor2x1SlopedPanelHeavy = MyStringId.GetOrCompute("DisplayName_Block_Armor2x1SlopedPanelHeavy");

		/// <summary>
		/// Heavy Armor Panel 2x1 Base Right
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Armor2x1SlopedSideBasePanelHeavy = MyStringId.GetOrCompute("DisplayName_Block_Armor2x1SlopedSideBasePanelHeavy");

		/// <summary>
		/// Heavy Armor Panel 2x1 Base Left
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Armor2x1SlopedSideBasePanelHeavyInv = MyStringId.GetOrCompute("DisplayName_Block_Armor2x1SlopedSideBasePanelHeavyInv");

		/// <summary>
		/// Heavy Armor Panel 2x1 Tip Right
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Armor2x1SlopedSideTipPanelHeavy = MyStringId.GetOrCompute("DisplayName_Block_Armor2x1SlopedSideTipPanelHeavy");

		/// <summary>
		/// Heavy Armor Panel 2x1 Tip Left
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Armor2x1SlopedSideTipPanelHeavyInv = MyStringId.GetOrCompute("DisplayName_Block_Armor2x1SlopedSideTipPanelHeavyInv");

		/// <summary>
		/// Light Armor Panel 2x1 Tip Right
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Armor2x1SlopedSideTipPanelLight = MyStringId.GetOrCompute("DisplayName_Block_Armor2x1SlopedSideTipPanelLight");

		/// <summary>
		/// Light Armor Panel 2x1 Tip Left
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Armor2x1SlopedSideTipPanelLightInv = MyStringId.GetOrCompute("DisplayName_Block_Armor2x1SlopedSideTipPanelLightInv");

		/// <summary>
		/// Heavy Armor Half Panel
		/// </summary>
		public static readonly MyStringId DisplayName_Block_ArmorHalfPanelHeavy = MyStringId.GetOrCompute("DisplayName_Block_ArmorHalfPanelHeavy");

		/// <summary>
		/// Heavy Armor Panel
		/// </summary>
		public static readonly MyStringId DisplayName_Block_ArmorPanelHeavy = MyStringId.GetOrCompute("DisplayName_Block_ArmorPanelHeavy");

		/// <summary>
		/// Heavy Armor Panel Slope
		/// </summary>
		public static readonly MyStringId DisplayName_Block_ArmorSlopedPanelHeavy = MyStringId.GetOrCompute("DisplayName_Block_ArmorSlopedPanelHeavy");

		/// <summary>
		/// Heavy Armor Panel Side
		/// </summary>
		public static readonly MyStringId DisplayName_Block_ArmorSlopedSidePanelHeavy = MyStringId.GetOrCompute("DisplayName_Block_ArmorSlopedSidePanelHeavy");

		/// <summary>
		/// Heavy Armor Panel Half Slope
		/// </summary>
		public static readonly MyStringId DisplayName_Block_ArmorHalfSlopedPanelHeavy = MyStringId.GetOrCompute("DisplayName_Block_ArmorHalfSlopedPanelHeavy");

		/// <summary>
		///
		/// </summary>
		public static readonly MyStringId String3 = MyStringId.GetOrCompute("String3");

		/// <summary>
		/// Heavy Armor Panel 2x1 Slope Tip
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Armor2x1SlopedPanelTipHeavy = MyStringId.GetOrCompute("DisplayName_Block_Armor2x1SlopedPanelTipHeavy");

		/// <summary>
		/// Light Armor Panel 2x1 Slope Tip
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Armor2x1SlopedPanelTipLight = MyStringId.GetOrCompute("DisplayName_Block_Armor2x1SlopedPanelTipLight");

		/// <summary>
		///
		/// </summary>
		public static readonly MyStringId String4 = MyStringId.GetOrCompute("String4");

		/// <summary>
		/// Light Armor Half Panel 2x1 Tip Right
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Armor2x1HalfSlopedTipPanelLight = MyStringId.GetOrCompute("DisplayName_Block_Armor2x1HalfSlopedTipPanelLight");

		/// <summary>
		/// Light Armor Half Panel 2x1 Tip Left
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Armor2x1HalfSlopedTipPanelLightInv = MyStringId.GetOrCompute("DisplayName_Block_Armor2x1HalfSlopedTipPanelLightInv");

		/// <summary>
		/// Heavy Armor Quarter Panel
		/// </summary>
		public static readonly MyStringId DisplayName_Block_ArmorQuarterPanelHeavy = MyStringId.GetOrCompute("DisplayName_Block_ArmorQuarterPanelHeavy");

		/// <summary>
		/// Light Armor Quarter Panel
		/// </summary>
		public static readonly MyStringId DisplayName_Block_ArmorQuarterPanelLight = MyStringId.GetOrCompute("DisplayName_Block_ArmorQuarterPanelLight");

		/// <summary>
		/// Heavy Armor Half Panel 2x1 Tip Right
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Armor2x1HalfSlopedTipPanelHeavy = MyStringId.GetOrCompute("DisplayName_Block_Armor2x1HalfSlopedTipPanelHeavy");

		/// <summary>
		/// Heavy Armor Half Panel 2x1 Tip Left
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Armor2x1HalfSlopedTipPanelHeavyInv = MyStringId.GetOrCompute("DisplayName_Block_Armor2x1HalfSlopedTipPanelHeavyInv");

		/// <summary>
		/// Poster Industry Of War H
		/// </summary>
		public static readonly MyStringId LCD_HI_Poster1_Landscape = MyStringId.GetOrCompute("LCD_HI_Poster1_Landscape");

		/// <summary>
		/// Poster Industry Of War V
		/// </summary>
		public static readonly MyStringId LCD_HI_Poster1_Portrait = MyStringId.GetOrCompute("LCD_HI_Poster1_Portrait");

		/// <summary>
		/// Poster Industry Of War
		/// </summary>
		public static readonly MyStringId LCD_HI_Poster1_Square = MyStringId.GetOrCompute("LCD_HI_Poster1_Square");

		/// <summary>
		/// Poster Heavy Industry H
		/// </summary>
		public static readonly MyStringId LCD_HI_Poster2_Landscape = MyStringId.GetOrCompute("LCD_HI_Poster2_Landscape");

		/// <summary>
		/// Poster Heavy Industry V
		/// </summary>
		public static readonly MyStringId LCD_HI_Poster2_Portrait = MyStringId.GetOrCompute("LCD_HI_Poster2_Portrait");

		/// <summary>
		/// Poster Heavy Industry
		/// </summary>
		public static readonly MyStringId LCD_HI_Poster2_Square = MyStringId.GetOrCompute("LCD_HI_Poster2_Square");

		/// <summary>
		/// Poster We Want You H
		/// </summary>
		public static readonly MyStringId LCD_HI_Poster3_Landscape = MyStringId.GetOrCompute("LCD_HI_Poster3_Landscape");

		/// <summary>
		/// Poster We Want You V
		/// </summary>
		public static readonly MyStringId LCD_HI_Poster3_Portrait = MyStringId.GetOrCompute("LCD_HI_Poster3_Portrait");

		/// <summary>
		/// Poster We Want You
		/// </summary>
		public static readonly MyStringId LCD_HI_Poster3_Square = MyStringId.GetOrCompute("LCD_HI_Poster3_Square");

		/// <summary>
		/// Pertam Orbiter
		/// </summary>
		public static readonly MyStringId CustomWorld_PetramOrbiter = MyStringId.GetOrCompute("CustomWorld_PetramOrbiter");

		/// <summary>
		/// Industrial Hydrogen Thruster
		/// </summary>
		public static readonly MyStringId DisplayName_Block_HydrogenThrustIndustrial = MyStringId.GetOrCompute("DisplayName_Block_HydrogenThrustIndustrial");

		/// <summary>
		/// Industrial Conveyor Sorter
		/// </summary>
		public static readonly MyStringId DisplayName_Block_IndustrialConveyorSorter = MyStringId.GetOrCompute("DisplayName_Block_IndustrialConveyorSorter");

		/// <summary>
		/// Industrial Large Hydrogen Thruster
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LargeHydrogenThrustIndustrial = MyStringId.GetOrCompute("DisplayName_Block_LargeHydrogenThrustIndustrial");

		/// <summary>
		/// Large
		/// </summary>
		public static readonly MyStringId Blueprint_GridType_Large = MyStringId.GetOrCompute("Blueprint_GridType_Large");

		/// <summary>
		/// Small
		/// </summary>
		public static readonly MyStringId Blueprint_GridType_Small = MyStringId.GetOrCompute("Blueprint_GridType_Small");

		/// <summary>
		/// Spectator Tool
		/// </summary>
		public static readonly MyStringId ScreenDebugAdminMenu_Spectator = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Spectator");

		/// <summary>
		/// Cozy
		/// </summary>
		public static readonly MyStringId TemperatureCozy = MyStringId.GetOrCompute("TemperatureCozy");

		/// <summary>
		/// Extreme Freeze
		/// </summary>
		public static readonly MyStringId TemperatureExtremeFreeze = MyStringId.GetOrCompute("TemperatureExtremeFreeze");

		/// <summary>
		/// Extreme Hot
		/// </summary>
		public static readonly MyStringId TemperatureExtremeHot = MyStringId.GetOrCompute("TemperatureExtremeHot");

		/// <summary>
		/// Owner Last Logout
		/// </summary>
		public static readonly MyStringId OwnerLastLogout = MyStringId.GetOrCompute("OwnerLastLogout");

		/// <summary>
		/// PCU
		/// </summary>
		public static readonly MyStringId PCU = MyStringId.GetOrCompute("PCU");

		/// <summary>
		/// Keep Original
		/// </summary>
		public static readonly MyStringId SpawnMenu_KeepOriginalMaterial = MyStringId.GetOrCompute("SpawnMenu_KeepOriginalMaterial");

		/// <summary>
		/// Keep original asteroid material
		/// </summary>
		public static readonly MyStringId SpawnMenu_KeepOriginalMaterial_Tooltip = MyStringId.GetOrCompute("SpawnMenu_KeepOriginalMaterial_Tooltip");

		/// <summary>
		/// Voxel Size:
		/// </summary>
		public static readonly MyStringId SpawnMenu_VoxelSize = MyStringId.GetOrCompute("SpawnMenu_VoxelSize");

		/// <summary>
		/// Widest cutout, fastest mining
		/// </summary>
		public static readonly MyStringId Item_Drill4_Extra_Tooltip = MyStringId.GetOrCompute("Item_Drill4_Extra_Tooltip");

		/// <summary>
		/// Wider cutout, faster mining
		/// </summary>
		public static readonly MyStringId Item_Drill_Extra_Tooltip = MyStringId.GetOrCompute("Item_Drill_Extra_Tooltip");

		/// <summary>
		/// Longest reach and fastest grinding
		/// </summary>
		public static readonly MyStringId Item_Grinder4_Extra_Tooltip = MyStringId.GetOrCompute("Item_Grinder4_Extra_Tooltip");

		/// <summary>
		/// Longer reach and faster grinding
		/// </summary>
		public static readonly MyStringId Item_Grinder_Extra_Tooltip = MyStringId.GetOrCompute("Item_Grinder_Extra_Tooltip");

		/// <summary>
		/// Longest reach and fastest welding
		/// </summary>
		public static readonly MyStringId Item_Welder4_Extra_Tooltip = MyStringId.GetOrCompute("Item_Welder4_Extra_Tooltip");

		/// <summary>
		/// Longer reach and faster welding
		/// </summary>
		public static readonly MyStringId Item_Welder_Extra_Tooltip = MyStringId.GetOrCompute("Item_Welder_Extra_Tooltip");

		/// <summary>
		/// Industrial Conveyor Sorter
		/// </summary>
		public static readonly MyStringId DisplayName_Block_ConveyorSorterIndustrial = MyStringId.GetOrCompute("DisplayName_Block_ConveyorSorterIndustrial");

		/// <summary>
		/// Blacklist
		/// </summary>
		public static readonly MyStringId Blacklist = MyStringId.GetOrCompute("Blacklist");

		/// <summary>
		/// Whitelist
		/// </summary>
		public static readonly MyStringId Whitelist = MyStringId.GetOrCompute("Whitelist");

		/// <summary>
		/// Bridge Windows
		/// </summary>
		public static readonly MyStringId DisplayName_BlockGroup_BridgeWindowsGroup = MyStringId.GetOrCompute("DisplayName_BlockGroup_BridgeWindowsGroup");

		/// <summary>
		/// Bridge Window Face
		/// </summary>
		public static readonly MyStringId DisplayName_Block_BridgeWindow1x1Face = MyStringId.GetOrCompute("DisplayName_Block_BridgeWindow1x1Face");

		/// <summary>
		/// Bridge Window Slope
		/// </summary>
		public static readonly MyStringId DisplayName_Block_BridgeWindow1x1Slope = MyStringId.GetOrCompute("DisplayName_Block_BridgeWindow1x1Slope");

		/// <summary>
		/// Warfare 2 Blocks
		/// </summary>
		public static readonly MyStringId DisplayName_DLC_Warfare2DLC = MyStringId.GetOrCompute("DisplayName_DLC_Warfare2DLC");

		/// <summary>
		/// Passenger Seat Offset
		/// </summary>
		public static readonly MyStringId DisplayName_Block_PassengerSeatOffset = MyStringId.GetOrCompute("DisplayName_Block_PassengerSeatOffset");

		/// <summary>
		/// Passenger Seat Old
		/// </summary>
		public static readonly MyStringId DisplayName_Block_PassengerSeatOld = MyStringId.GetOrCompute("DisplayName_Block_PassengerSeatOld");

		/// <summary>
		/// Passenger Bench
		/// </summary>
		public static readonly MyStringId DisplayName_Block_PassengerBench = MyStringId.GetOrCompute("DisplayName_Block_PassengerBench");

		/// <summary>
		/// Targeting Info
		/// </summary>
		public static readonly MyStringId DisplayName_TSS_TargetingInfo = MyStringId.GetOrCompute("DisplayName_TSS_TargetingInfo");

		/// <summary>
		/// Distance
		/// </summary>
		public static readonly MyStringId Targeting_Distance = MyStringId.GetOrCompute("Targeting_Distance");

		/// <summary>
		/// Locking
		/// </summary>
		public static readonly MyStringId Targeting_Locking = MyStringId.GetOrCompute("Targeting_Locking");

		/// <summary>
		/// Losing Lock
		/// </summary>
		public static readonly MyStringId Targeting_LosingLock = MyStringId.GetOrCompute("Targeting_LosingLock");

		/// <summary>
		/// No Target
		/// </summary>
		public static readonly MyStringId Targeting_NoTarget = MyStringId.GetOrCompute("Targeting_NoTarget");

		/// <summary>
		/// Status
		/// </summary>
		public static readonly MyStringId Targeting_Status = MyStringId.GetOrCompute("Targeting_Status");

		/// <summary>
		/// Subsystem
		/// </summary>
		public static readonly MyStringId Targeting_Subsystem = MyStringId.GetOrCompute("Targeting_Subsystem");

		/// <summary>
		/// Target
		/// </summary>
		public static readonly MyStringId Targeting_Target = MyStringId.GetOrCompute("Targeting_Target");

		/// <summary>
		/// Target Locked
		/// </summary>
		public static readonly MyStringId Targeting_TargetLocked = MyStringId.GetOrCompute("Targeting_TargetLocked");

		/// <summary>
		/// Velocity
		/// </summary>
		public static readonly MyStringId Targeting_Velocity = MyStringId.GetOrCompute("Targeting_Velocity");

		/// <summary>
		/// Volume
		/// </summary>
		public static readonly MyStringId Targeting_Volume = MyStringId.GetOrCompute("Targeting_Volume");

		/// <summary>
		/// Targeting Info
		/// </summary>
		public static readonly MyStringId TSS_TargetingInfo = MyStringId.GetOrCompute("TSS_TargetingInfo");

		/// <summary>
		/// [RMB] to lock target
		/// </summary>
		public static readonly MyStringId TargetingControlHint = MyStringId.GetOrCompute("TargetingControlHint");

		/// <summary>
		/// Railgun
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Railgun = MyStringId.GetOrCompute("DisplayName_Block_Railgun");

		/// <summary>
		/// Light Panel
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LightPanel = MyStringId.GetOrCompute("DisplayName_Block_LightPanel");

		/// <summary>
		/// Warfare Hangar Door
		/// </summary>
		public static readonly MyStringId DisplayName_Block_AirtightHangarDoorWarfare2A = MyStringId.GetOrCompute("DisplayName_Block_AirtightHangarDoorWarfare2A");

		/// <summary>
		/// Warfare Hangar Door Windowed
		/// </summary>
		public static readonly MyStringId DisplayName_Block_AirtightHangarDoorWarfare2B = MyStringId.GetOrCompute("DisplayName_Block_AirtightHangarDoorWarfare2B");

		/// <summary>
		/// Warfare Hangar Door 2
		/// </summary>
		public static readonly MyStringId DisplayName_Block_AirtightHangarDoorWarfare2C = MyStringId.GetOrCompute("DisplayName_Block_AirtightHangarDoorWarfare2C");

		/// <summary>
		/// Large Warfare Reactor
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LargeReactorWarfare2 = MyStringId.GetOrCompute("DisplayName_Block_LargeReactorWarfare2");

		/// <summary>
		/// Small Warfare Reactor
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SmallReactorWarfare2 = MyStringId.GetOrCompute("DisplayName_Block_SmallReactorWarfare2");

		/// <summary>
		/// {0} to lock target
		/// </summary>
		public static readonly MyStringId NotificationHintLockTarget = MyStringId.GetOrCompute("NotificationHintLockTarget");

		/// <summary>
		/// {0} to unlock target
		/// </summary>
		public static readonly MyStringId NotificationHintUnlockTarget = MyStringId.GetOrCompute("NotificationHintUnlockTarget");

		/// <summary>
		/// Warfare Rocket Launcher
		/// </summary>
		public static readonly MyStringId DisplayName_Block_RocketLauncherWarfare2 = MyStringId.GetOrCompute("DisplayName_Block_RocketLauncherWarfare2");

		/// <summary>
		/// Copy target
		/// </summary>
		public static readonly MyStringId BlockActionTitle_LargeTurretCopyTarget = MyStringId.GetOrCompute("BlockActionTitle_LargeTurretCopyTarget");

		/// <summary>
		/// Make turret lock to your target.
		/// </summary>
		public static readonly MyStringId BlockActionTooltip_LargeTurretCopyTarget = MyStringId.GetOrCompute("BlockActionTooltip_LargeTurretCopyTarget");

		/// <summary>
		/// Medium rate of fire, with a good punch. Uses Autocannon Magazines.  Maximum range: 800 m
		/// </summary>
		public static readonly MyStringId Description_Autocannon = MyStringId.GetOrCompute("Description_Autocannon");

		/// <summary>
		/// Autocannon
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Autocannon = MyStringId.GetOrCompute("DisplayName_Block_Autocannon");

		/// <summary>
		/// Autocannon Magazine
		/// </summary>
		public static readonly MyStringId DisplayName_Item_AutoCannonClip = MyStringId.GetOrCompute("DisplayName_Item_AutoCannonClip");

		/// <summary>
		///  rpm
		/// </summary>
		public static readonly MyStringId MeasurementUnit_Rpm = MyStringId.GetOrCompute("MeasurementUnit_Rpm");

		/// <summary>
		///  m
		/// </summary>
		public static readonly MyStringId MeasurementUnit_Meter = MyStringId.GetOrCompute("MeasurementUnit_Meter");

		/// <summary>
		///  kg
		/// </summary>
		public static readonly MyStringId MeasurementUnit_Kg = MyStringId.GetOrCompute("MeasurementUnit_Kg");

		/// <summary>
		///  m/s
		/// </summary>
		public static readonly MyStringId MeasurementUnit_Mps = MyStringId.GetOrCompute("MeasurementUnit_Mps");

		/// <summary>
		/// Warfare Gatling Gun
		/// </summary>
		public static readonly MyStringId DisplayName_Block_GatlingGunWarfare2 = MyStringId.GetOrCompute("DisplayName_Block_GatlingGunWarfare2");

		/// <summary>
		/// Add tool or weapon
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_AddTool = MyStringId.GetOrCompute("BlockPropertyTitle_AddTool");

		/// <summary>
		/// Add weapon
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_AddWeapon = MyStringId.GetOrCompute("BlockPropertyTitle_AddWeapon");

		/// <summary>
		/// Assign azimuth rotor
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_AssignRotorAzimuth = MyStringId.GetOrCompute("BlockPropertyTitle_AssignRotorAzimuth");

		/// <summary>
		/// Assign elevation rotor
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_AssignRotorElevation = MyStringId.GetOrCompute("BlockPropertyTitle_AssignRotorElevation");

		/// <summary>
		/// Remove tool or weapon
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_RemoveTool = MyStringId.GetOrCompute("BlockPropertyTitle_RemoveTool");

		/// <summary>
		/// Remove weapon
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_RemoveWeapon = MyStringId.GetOrCompute("BlockPropertyTitle_RemoveWeapon");

		/// <summary>
		/// Selected tools and weapons
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_SelectedToolList = MyStringId.GetOrCompute("BlockPropertyTitle_SelectedToolList");

		/// <summary>
		/// Selected weapons
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_SelectedWeaponList = MyStringId.GetOrCompute("BlockPropertyTitle_SelectedWeaponList");

		/// <summary>
		/// Available tools and weapons
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_ToolList = MyStringId.GetOrCompute("BlockPropertyTitle_ToolList");

		/// <summary>
		/// Weapon list
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_WeaponList = MyStringId.GetOrCompute("BlockPropertyTitle_WeaponList");

		/// <summary>
		/// Warfare II.
		/// </summary>
		public static readonly MyStringId Description_DLC_Warfare2 = MyStringId.GetOrCompute("Description_DLC_Warfare2");

		/// <summary>
		/// Warfare II.
		/// </summary>
		public static readonly MyStringId DisplayName_DLC_Warfare2 = MyStringId.GetOrCompute("DisplayName_DLC_Warfare2");

		/// <summary>
		/// Warfare Battery
		/// </summary>
		public static readonly MyStringId DisplayName_Block_BatteryWarfare2 = MyStringId.GetOrCompute("DisplayName_Block_BatteryWarfare2");

		/// <summary>
		/// Modify maximum velocity of azimuth rotor
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_MultiplierAzimuth = MyStringId.GetOrCompute("BlockPropertyDescription_MultiplierAzimuth");

		/// <summary>
		/// Modify maximum velocity of elevation rotor
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_MultiplierElevation = MyStringId.GetOrCompute("BlockPropertyDescription_MultiplierElevation");

		/// <summary>
		/// Azimuth velocity multiplier
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_MultiplierAzimuth = MyStringId.GetOrCompute("BlockPropertyTitle_MultiplierAzimuth");

		/// <summary>
		/// Elevation velocity multiplier
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_MultiplierElevation = MyStringId.GetOrCompute("BlockPropertyTitle_MultiplierElevation");

		/// <summary>
		/// Block for controlling custom turrets
		/// </summary>
		public static readonly MyStringId Description_LargeTurretControlBlock = MyStringId.GetOrCompute("Description_LargeTurretControlBlock");

		/// <summary>
		/// Custom Turret Controller
		/// </summary>
		public static readonly MyStringId DisplayName_TurretControlBlock = MyStringId.GetOrCompute("DisplayName_TurretControlBlock");

		/// <summary>
		/// Sliding Hatch Door
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SlidingHatchDoor = MyStringId.GetOrCompute("DisplayName_Block_SlidingHatchDoor");

		/// <summary>
		/// Half Sliding Hatch Door
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SlidingHatchDoorHalf = MyStringId.GetOrCompute("DisplayName_Block_SlidingHatchDoorHalf");

		/// <summary>
		/// Searchlights are articulated Spotlights that can target nearby grids and can be used as cameras.
		/// </summary>
		public static readonly MyStringId Description_Searchlight = MyStringId.GetOrCompute("Description_Searchlight");

		/// <summary>
		/// Searchlight
		/// </summary>
		public static readonly MyStringId DisplayName_Block_Searchlight = MyStringId.GetOrCompute("DisplayName_Block_Searchlight");

		/// <summary>
		/// Paper
		/// </summary>
		public static readonly MyStringId DisplayName_EmoteRPS_Paper = MyStringId.GetOrCompute("DisplayName_EmoteRPS_Paper");

		/// <summary>
		/// Rock
		/// </summary>
		public static readonly MyStringId DisplayName_EmoteRPS_Rock = MyStringId.GetOrCompute("DisplayName_EmoteRPS_Rock");

		/// <summary>
		/// Scissors
		/// </summary>
		public static readonly MyStringId DisplayName_EmoteRPS_Scissors = MyStringId.GetOrCompute("DisplayName_EmoteRPS_Scissors");

		/// <summary>
		/// Heat Vent
		/// </summary>
		public static readonly MyStringId DisplayName_Block_HeatVentWarfare2 = MyStringId.GetOrCompute("DisplayName_Block_HeatVentWarfare2");

		/// <summary>
		/// Heat Vents open and emit light when the ships power usage increases.
		/// </summary>
		public static readonly MyStringId Description_HeatVent = MyStringId.GetOrCompute("Description_HeatVent");

		/// <summary>
		/// Heat Vent
		/// </summary>
		public static readonly MyStringId DisplayName_Block_HeatVent = MyStringId.GetOrCompute("DisplayName_Block_HeatVent");

		/// <summary>
		/// A titanic turret perfectly suited for battles against heavily armored targets. Uses Artillery Shells.  Maximum range: 2000 m
		/// </summary>
		public static readonly MyStringId Description_LargeCalibreTurret = MyStringId.GetOrCompute("Description_LargeCalibreTurret");

		/// <summary>
		/// Slower and bigger sibling of the Autocannon. Deals decent damage to armored targets. Uses Assault Cannon Shells.  Maximum range: 1400 m
		/// </summary>
		public static readonly MyStringId Description_MediumCalibreTurret = MyStringId.GetOrCompute("Description_MediumCalibreTurret");

		/// <summary>
		/// Autocannon Turret
		/// </summary>
		public static readonly MyStringId DisplayName_Block_AutoCannonTurret = MyStringId.GetOrCompute("DisplayName_Block_AutoCannonTurret");

		/// <summary>
		/// Artillery Turret
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LargeCalibreTurret = MyStringId.GetOrCompute("DisplayName_Block_LargeCalibreTurret");

		/// <summary>
		/// Assault Cannon Turret
		/// </summary>
		public static readonly MyStringId DisplayName_Block_MediumCalibreTurret = MyStringId.GetOrCompute("DisplayName_Block_MediumCalibreTurret");

		/// <summary>
		/// Artillery Shell
		/// </summary>
		public static readonly MyStringId DisplayName_Item_LargeCalibreAmmo = MyStringId.GetOrCompute("DisplayName_Item_LargeCalibreAmmo");

		/// <summary>
		/// Assault Cannon Shell
		/// </summary>
		public static readonly MyStringId DisplayName_Item_MediumCalibreAmmo = MyStringId.GetOrCompute("DisplayName_Item_MediumCalibreAmmo");

		/// <summary>
		/// Turret will shoot only if the angle to target is less than deviation.
		/// </summary>
		public static readonly MyStringId BlockPropertyDescription_AngleDeviation = MyStringId.GetOrCompute("BlockPropertyDescription_AngleDeviation");

		/// <summary>
		/// Angle deviation
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_AngleDeviation = MyStringId.GetOrCompute("BlockPropertyTitle_AngleDeviation");

		/// <summary>
		/// High range, maximum penetration, very low rate of fire. Needs to charge up before each shot. Uses Large Railgun Sabots.  Maximum range: 2000 m
		/// </summary>
		public static readonly MyStringId Description_Railgun = MyStringId.GetOrCompute("Description_Railgun");

		/// <summary>
		/// Elevation: '{0}' 
		/// </summary>
		public static readonly MyStringId TurretControlBlock_Detail_Azi = MyStringId.GetOrCompute("TurretControlBlock_Detail_Azi");

		/// <summary>
		/// Camera: '{0}' 
		/// </summary>
		public static readonly MyStringId TurretControlBlock_Detail_Camera = MyStringId.GetOrCompute("TurretControlBlock_Detail_Camera");

		/// <summary>
		/// Azimuth: '{0}' 
		/// </summary>
		public static readonly MyStringId TurretControlBlock_Detail_Elev = MyStringId.GetOrCompute("TurretControlBlock_Detail_Elev");

		/// <summary>
		///    '{0}' 
		/// </summary>
		public static readonly MyStringId TurretControlBlock_Detail_Format = MyStringId.GetOrCompute("TurretControlBlock_Detail_Format");

		/// <summary>
		/// Status: 
		/// </summary>
		public static readonly MyStringId TurretControlBlock_Detail_Status = MyStringId.GetOrCompute("TurretControlBlock_Detail_Status");

		/// <summary>
		/// weapon/tool/camera
		/// </summary>
		public static readonly MyStringId TurretControlBlock_Detail_Status_Def = MyStringId.GetOrCompute("TurretControlBlock_Detail_Status_Def");

		/// <summary>
		///    ERROR: Missing elevation or azimuth rotor/hinge 
		/// </summary>
		public static readonly MyStringId TurretControlBlock_Detail_Status_Error1 = MyStringId.GetOrCompute("TurretControlBlock_Detail_Status_Error1");

		/// <summary>
		///    ERROR: Must have a linked weapon, tool or camera 
		/// </summary>
		public static readonly MyStringId TurretControlBlock_Detail_Status_Error2 = MyStringId.GetOrCompute("TurretControlBlock_Detail_Status_Error2");

		/// <summary>
		///    NOMINAL: '{0}' used as aiming reference 
		/// </summary>
		public static readonly MyStringId TurretControlBlock_Detail_Status_Norm = MyStringId.GetOrCompute("TurretControlBlock_Detail_Status_Norm");

		/// <summary>
		///    WARNING: No clue about multiple weapons yet 
		/// </summary>
		public static readonly MyStringId TurretControlBlock_Detail_Status_Warn = MyStringId.GetOrCompute("TurretControlBlock_Detail_Status_Warn");

		/// <summary>
		/// Tools:  
		/// </summary>
		public static readonly MyStringId TurretControlBlock_Detail_Tool = MyStringId.GetOrCompute("TurretControlBlock_Detail_Tool");

		/// <summary>
		/// Weapons:  
		/// </summary>
		public static readonly MyStringId TurretControlBlock_Detail_Weapon = MyStringId.GetOrCompute("TurretControlBlock_Detail_Weapon");

		/// <summary>
		/// Enable AI
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_EnableAI = MyStringId.GetOrCompute("BlockPropertyTitle_EnableAI");

		/// <summary>
		/// Large Railgun Sabot
		/// </summary>
		public static readonly MyStringId DisplayName_Item_LargeRailgunAmmo = MyStringId.GetOrCompute("DisplayName_Item_LargeRailgunAmmo");

		/// <summary>
		/// Small Railgun Sabot
		/// </summary>
		public static readonly MyStringId DisplayName_Item_SmallRailgunAmmo = MyStringId.GetOrCompute("DisplayName_Item_SmallRailgunAmmo");

		/// <summary>
		/// Assault Cannon
		/// </summary>
		public static readonly MyStringId DisplayName_Block_MediumCalibreGun = MyStringId.GetOrCompute("DisplayName_Block_MediumCalibreGun");

		/// <summary>
		/// Helm
		/// </summary>
		public static readonly MyStringId DisplayName_Block_CockpitStandingBridge = MyStringId.GetOrCompute("DisplayName_Block_CockpitStandingBridge");

		/// <summary>
		/// Station
		/// </summary>
		public static readonly MyStringId TssTargetingInfo_StaticGrid = MyStringId.GetOrCompute("TssTargetingInfo_StaticGrid");

		/// <summary>
		/// Main cockpit not set
		/// </summary>
		public static readonly MyStringId TssTargetingInfo_NoMainCockpit = MyStringId.GetOrCompute("TssTargetingInfo_NoMainCockpit");

		/// <summary>
		/// No locked target
		/// </summary>
		public static readonly MyStringId TssTargetingInfo_NoTargetLocked = MyStringId.GetOrCompute("TssTargetingInfo_NoTargetLocked");

		/// <summary>
		/// Target Friends
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_LargeTurretTargetFriends = MyStringId.GetOrCompute("BlockPropertyTitle_LargeTurretTargetFriends");

		/// <summary>
		/// Blast Doors are used to create custom doors in conjunction with mechanical blocks like pistons, rotors, or hinges.
		/// </summary>
		public static readonly MyStringId Description_BlastDoor = MyStringId.GetOrCompute("Description_BlastDoor");

		/// <summary>
		/// The Custom Turret Controller is capable of providing AI behavior to custom built rotor and hinge-based turrets. It can also be used to manually control the turret. A custom turret requires at least one rotor/hinge and one weapon/tool or camera to be functional.
		/// </summary>
		public static readonly MyStringId Description_TurretControlBlock = MyStringId.GetOrCompute("Description_TurretControlBlock");

		/// <summary>
		/// LiveOps Designers
		/// </summary>
		public static readonly MyStringId Department_LiveOpsDesigners = MyStringId.GetOrCompute("Department_LiveOpsDesigners");

		/// <summary>
		/// LiveOps Producer
		/// </summary>
		public static readonly MyStringId Department_LiveOpsProducer = MyStringId.GetOrCompute("Department_LiveOpsProducer");

		/// <summary>
		/// LiveOps Programmers
		/// </summary>
		public static readonly MyStringId Department_LiveOpsProgrammers = MyStringId.GetOrCompute("Department_LiveOpsProgrammers");

		/// <summary>
		/// LiveOps Technical Leader
		/// </summary>
		public static readonly MyStringId Department_LiveOpsTechLead = MyStringId.GetOrCompute("Department_LiveOpsTechLead");

		/// <summary>
		/// A titanic gun perfectly suited for battles against heavily armored targets. Uses Artillery Shells.  Maximum range: 2000 m
		/// </summary>
		public static readonly MyStringId Description_HeavyCalibreGun = MyStringId.GetOrCompute("Description_HeavyCalibreGun");

		/// <summary>
		/// Artillery
		/// </summary>
		public static readonly MyStringId DisplayName_Block_HeavyCalibreGun = MyStringId.GetOrCompute("DisplayName_Block_HeavyCalibreGun");

		/// <summary>
		/// Salute
		/// </summary>
		public static readonly MyStringId DisplayName_Salute = MyStringId.GetOrCompute("DisplayName_Salute");

		/// <summary>
		/// Slower and bigger sibling of the Autocannon. Deals decent damage to armored targets. Uses Assault Cannon Shells.  Maximum range: 1400 m
		/// </summary>
		public static readonly MyStringId Description_MediumCalibreGun = MyStringId.GetOrCompute("Description_MediumCalibreGun");

		/// <summary>
		/// Helms are control stations that are operated in standing position.
		/// </summary>
		public static readonly MyStringId Description_CockpitStandingBridge = MyStringId.GetOrCompute("Description_CockpitStandingBridge");

		/// <summary>
		/// Large Warfare Ion Thruster
		/// </summary>
		public static readonly MyStringId DisplayName_Block_LargeModularThruster = MyStringId.GetOrCompute("DisplayName_Block_LargeModularThruster");

		/// <summary>
		/// Warfare Ion Thruster
		/// </summary>
		public static readonly MyStringId DisplayName_Block_SmallModularThruster = MyStringId.GetOrCompute("DisplayName_Block_SmallModularThruster");

		/// <summary>
		/// Medium rate of fire, with a good punch in a small turret. Uses Autocannon Magazines.  Maximum range: 800 m
		/// </summary>
		public static readonly MyStringId Description_AutoCannonTurret = MyStringId.GetOrCompute("Description_AutoCannonTurret");

		/// <summary>
		/// Target Enemies
		/// </summary>
		public static readonly MyStringId BlockPropertyTitle_LargeTurretTargetEnemies = MyStringId.GetOrCompute("BlockPropertyTitle_LargeTurretTargetEnemies");

		/// <summary>
		/// High range, maximum penetration, very low rate of fire. Needs to charge up before each shot. Uses Small Railgun Sabots.  Maximum range: 1400 m
		/// </summary>
		public static readonly MyStringId Description_SmallRailgun = MyStringId.GetOrCompute("Description_SmallRailgun");

		/// <summary>
		/// A bigger version of the rocket launcher, capable of using the conveyor system to automatically reload. Uses Missiles.  Maximum range: 800 m
		/// </summary>
		public static readonly MyStringId Description_LargeRocketLauncher = MyStringId.GetOrCompute("Description_LargeRocketLauncher");

		/// <summary>
		/// Asteroid Armory
		/// </summary>
		public static readonly MyStringId CustomWorld_AsteroidArmory = MyStringId.GetOrCompute("CustomWorld_AsteroidArmory");
=======
		public static readonly MyStringId Gamepad_Help_Back = MyStringId.GetOrCompute("Gamepad_Help_Back");

		public static readonly MyStringId StoreScreen_Help_Buy = MyStringId.GetOrCompute("StoreScreen_Help_Buy");

		public static readonly MyStringId StoreScreen_Help_ChangeAmount = MyStringId.GetOrCompute("StoreScreen_Help_ChangeAmount");

		public static readonly MyStringId StoreScreen_Help_Deposit = MyStringId.GetOrCompute("StoreScreen_Help_Deposit");

		public static readonly MyStringId StoreScreen_Help_Refresh = MyStringId.GetOrCompute("StoreScreen_Help_Refresh");

		public static readonly MyStringId StoreScreen_Help_SortBy = MyStringId.GetOrCompute("StoreScreen_Help_SortBy");

		public static readonly MyStringId StoreScreen_Help_Withdraw = MyStringId.GetOrCompute("StoreScreen_Help_Withdraw");

		public static readonly MyStringId StoreScreen_Help_ChangeInventory = MyStringId.GetOrCompute("StoreScreen_Help_ChangeInventory");

		public static readonly MyStringId BlueprintPublished = MyStringId.GetOrCompute("BlueprintPublished");

		public static readonly MyStringId WorkshopError = MyStringId.GetOrCompute("WorkshopError");

		public static readonly MyStringId WorkshopPublishRestricted = MyStringId.GetOrCompute("WorkshopPublishRestricted");

		public static readonly MyStringId WorkshopRestricted = MyStringId.GetOrCompute("WorkshopRestricted");

		public static readonly MyStringId WorkshopNoUser = MyStringId.GetOrCompute("WorkshopNoUser");

		public static readonly MyStringId WorkshopAgeRestricted = MyStringId.GetOrCompute("WorkshopAgeRestricted");

		public static readonly MyStringId DisplayName_Block_OffroadWheel5x5mirrored = MyStringId.GetOrCompute("DisplayName_Block_OffroadWheel5x5mirrored");

		public static readonly MyStringId ActiveContractsScreen_Help_Refresh = MyStringId.GetOrCompute("ActiveContractsScreen_Help_Refresh");

		public static readonly MyStringId ControlMenuItemLabel_ActiveContracts = MyStringId.GetOrCompute("ControlMenuItemLabel_ActiveContracts");

		public static readonly MyStringId MainMenuScreen_Help_Menu = MyStringId.GetOrCompute("MainMenuScreen_Help_Menu");

		public static readonly MyStringId RadialMenuAction_EnableBroadcasting_None = MyStringId.GetOrCompute("RadialMenuAction_EnableBroadcasting_None");

		public static readonly MyStringId RadialMenuAction_EnableBroadcasting_Off = MyStringId.GetOrCompute("RadialMenuAction_EnableBroadcasting_Off");

		public static readonly MyStringId RadialMenuAction_EnableBroadcasting_On = MyStringId.GetOrCompute("RadialMenuAction_EnableBroadcasting_On");

		public static readonly MyStringId RadialMenuAction_EnabledConnectors_None = MyStringId.GetOrCompute("RadialMenuAction_EnabledConnectors_None");

		public static readonly MyStringId RadialMenuAction_EnabledConnectors_Off = MyStringId.GetOrCompute("RadialMenuAction_EnabledConnectors_Off");

		public static readonly MyStringId RadialMenuAction_EnabledConnectors_On = MyStringId.GetOrCompute("RadialMenuAction_EnabledConnectors_On");

		public static readonly MyStringId RadialMenuAction_EnabledDampeners_None = MyStringId.GetOrCompute("RadialMenuAction_EnabledDampeners_None");

		public static readonly MyStringId RadialMenuAction_EnabledDampeners_Off = MyStringId.GetOrCompute("RadialMenuAction_EnabledDampeners_Off");

		public static readonly MyStringId RadialMenuAction_EnabledDampeners_On = MyStringId.GetOrCompute("RadialMenuAction_EnabledDampeners_On");

		public static readonly MyStringId RadialMenuAction_EnabledLights_None = MyStringId.GetOrCompute("RadialMenuAction_EnabledLights_None");

		public static readonly MyStringId RadialMenuAction_EnabledLights_Off = MyStringId.GetOrCompute("RadialMenuAction_EnabledLights_Off");

		public static readonly MyStringId RadialMenuAction_EnabledLights_On = MyStringId.GetOrCompute("RadialMenuAction_EnabledLights_On");

		public static readonly MyStringId RadialMenuAction_EnablePower_None = MyStringId.GetOrCompute("RadialMenuAction_EnablePower_None");

		public static readonly MyStringId RadialMenuAction_EnablePower_Off = MyStringId.GetOrCompute("RadialMenuAction_EnablePower_Off");

		public static readonly MyStringId RadialMenuAction_EnablePower_On = MyStringId.GetOrCompute("RadialMenuAction_EnablePower_On");

		public static readonly MyStringId RadialMenuAction_Hud_Hidden = MyStringId.GetOrCompute("RadialMenuAction_Hud_Hidden");

		public static readonly MyStringId RadialMenuAction_Hud_Visible = MyStringId.GetOrCompute("RadialMenuAction_Hud_Visible");

		public static readonly MyStringId RadialMenuAction_PlacementMode_ClipboardRoattion_Disabled = MyStringId.GetOrCompute("RadialMenuAction_PlacementMode_ClipboardRoattion_Disabled");

		public static readonly MyStringId RadialMenuAction_PlacementMode_ClipboardRoattion_Enabled = MyStringId.GetOrCompute("RadialMenuAction_PlacementMode_ClipboardRoattion_Enabled");

		public static readonly MyStringId RadialMenuAction_PlacementMode_Grid_Free = MyStringId.GetOrCompute("RadialMenuAction_PlacementMode_Grid_Free");

		public static readonly MyStringId RadialMenuAction_PlacementMode_Grid_Gravity = MyStringId.GetOrCompute("RadialMenuAction_PlacementMode_Grid_Gravity");

		public static readonly MyStringId RadialMenuAction_PlacementMode_Grid_Local = MyStringId.GetOrCompute("RadialMenuAction_PlacementMode_Grid_Local");

		public static readonly MyStringId RadialMenuAction_Signal_Default = MyStringId.GetOrCompute("RadialMenuAction_Signal_Default");

		public static readonly MyStringId RadialMenuAction_Signal_Full = MyStringId.GetOrCompute("RadialMenuAction_Signal_Full");

		public static readonly MyStringId RadialMenuAction_Signal_MaxSignals = MyStringId.GetOrCompute("RadialMenuAction_Signal_MaxSignals");

		public static readonly MyStringId RadialMenuAction_Signal_NoNames = MyStringId.GetOrCompute("RadialMenuAction_Signal_NoNames");

		public static readonly MyStringId RadialMenuAction_Signal_Off = MyStringId.GetOrCompute("RadialMenuAction_Signal_Off");

		public static readonly MyStringId RadialMenuAction_SwitchCamera_FirstPerson = MyStringId.GetOrCompute("RadialMenuAction_SwitchCamera_FirstPerson");

		public static readonly MyStringId RadialMenuAction_SwitchCamera_None = MyStringId.GetOrCompute("RadialMenuAction_SwitchCamera_None");

		public static readonly MyStringId RadialMenuAction_SwitchCamera_ThirdPerson = MyStringId.GetOrCompute("RadialMenuAction_SwitchCamera_ThirdPerson");

		public static readonly MyStringId RadialMenuAction_Symmetry_Off = MyStringId.GetOrCompute("RadialMenuAction_Symmetry_Off");

		public static readonly MyStringId RadialMenuAction_Symmetry_On = MyStringId.GetOrCompute("RadialMenuAction_Symmetry_On");

		public static readonly MyStringId RadialMenuAction_ToggleAutoRotation_Off = MyStringId.GetOrCompute("RadialMenuAction_ToggleAutoRotation_Off");

		public static readonly MyStringId RadialMenuAction_ToggleAutoRotation_On = MyStringId.GetOrCompute("RadialMenuAction_ToggleAutoRotation_On");

		public static readonly MyStringId RadialMenuAction_Visor_Off = MyStringId.GetOrCompute("RadialMenuAction_Visor_Off");

		public static readonly MyStringId RadialMenuAction_Visor_On = MyStringId.GetOrCompute("RadialMenuAction_Visor_On");

		public static readonly MyStringId RadialMenuAction_Shortcut_AdminMenu = MyStringId.GetOrCompute("RadialMenuAction_Shortcut_AdminMenu");

		public static readonly MyStringId RadialMenuAction_Shortcut_BlueprintScreen = MyStringId.GetOrCompute("RadialMenuAction_Shortcut_BlueprintScreen");

		public static readonly MyStringId RadialMenuAction_Shortcut_ColorTool = MyStringId.GetOrCompute("RadialMenuAction_Shortcut_ColorTool");

		public static readonly MyStringId RadialMenuAction_Shortcut_PlacementMode = MyStringId.GetOrCompute("RadialMenuAction_Shortcut_PlacementMode");

		public static readonly MyStringId RadialMenuAction_Shortcut_ShowProgressionTree = MyStringId.GetOrCompute("RadialMenuAction_Shortcut_ShowProgressionTree");

		public static readonly MyStringId RadialMenuAction_Shortcut_SwitchCamera = MyStringId.GetOrCompute("RadialMenuAction_Shortcut_SwitchCamera");

		public static readonly MyStringId RadialMenuAction_Shortcut_ToggleAutoRotation = MyStringId.GetOrCompute("RadialMenuAction_Shortcut_ToggleAutoRotation");

		public static readonly MyStringId RadialMenuAction_Shortcut_ToggleBroadcasting = MyStringId.GetOrCompute("RadialMenuAction_Shortcut_ToggleBroadcasting");

		public static readonly MyStringId RadialMenuAction_Shortcut_ToggleConnectors = MyStringId.GetOrCompute("RadialMenuAction_Shortcut_ToggleConnectors");

		public static readonly MyStringId RadialMenuAction_Shortcut_ToggleDampeners = MyStringId.GetOrCompute("RadialMenuAction_Shortcut_ToggleDampeners");

		public static readonly MyStringId RadialMenuAction_Shortcut_ToggleLights = MyStringId.GetOrCompute("RadialMenuAction_Shortcut_ToggleLights");

		public static readonly MyStringId RadialMenuAction_Shortcut_TogglePower = MyStringId.GetOrCompute("RadialMenuAction_Shortcut_TogglePower");

		public static readonly MyStringId RadialMenuAction_Shortcut_ToggleSignals = MyStringId.GetOrCompute("RadialMenuAction_Shortcut_ToggleSignals");

		public static readonly MyStringId RadialMenuAction_Shortcut_ToggleSymmetry = MyStringId.GetOrCompute("RadialMenuAction_Shortcut_ToggleSymmetry");

		public static readonly MyStringId RadialMenuAction_Shortcut_ToggleVisor = MyStringId.GetOrCompute("RadialMenuAction_Shortcut_ToggleVisor");

		public static readonly MyStringId RadialMenuAction_Shortcut_Unequip = MyStringId.GetOrCompute("RadialMenuAction_Shortcut_Unequip");

		public static readonly MyStringId MainMenuScreen_Help_Exit = MyStringId.GetOrCompute("MainMenuScreen_Help_Exit");

		public static readonly MyStringId OptionsScreen_Help_Menu = MyStringId.GetOrCompute("OptionsScreen_Help_Menu");

		public static readonly MyStringId BannerControl_Help_Next = MyStringId.GetOrCompute("BannerControl_Help_Next");

		public static readonly MyStringId BannerControl_Help_Open = MyStringId.GetOrCompute("BannerControl_Help_Open");

		public static readonly MyStringId BannerControl_Help_Previous = MyStringId.GetOrCompute("BannerControl_Help_Previous");

		public static readonly MyStringId MainMenuScreen_Help_ScreenIngame = MyStringId.GetOrCompute("MainMenuScreen_Help_ScreenIngame");

		public static readonly MyStringId NewsControl_Help_Next = MyStringId.GetOrCompute("NewsControl_Help_Next");

		public static readonly MyStringId NewsControl_Help_Previous = MyStringId.GetOrCompute("NewsControl_Help_Previous");

		public static readonly MyStringId EditFactionLogoScreen_Help_ChangeColor = MyStringId.GetOrCompute("EditFactionLogoScreen_Help_ChangeColor");

		public static readonly MyStringId EditFactionLogoScreen_Help_Selection = MyStringId.GetOrCompute("EditFactionLogoScreen_Help_Selection");

		public static readonly MyStringId HelpScreen_ResetPlane = MyStringId.GetOrCompute("HelpScreen_ResetPlane");

		public static readonly MyStringId HelpScreen_SetPlane = MyStringId.GetOrCompute("HelpScreen_SetPlane");

		public static readonly MyStringId HelpScreen_SymmetryNextPlane = MyStringId.GetOrCompute("HelpScreen_SymmetryNextPlane");

		public static readonly MyStringId HelpScreen_SymmetryTurnOffSetup = MyStringId.GetOrCompute("HelpScreen_SymmetryTurnOffSetup");

		public static readonly MyStringId HelpScreen_SymmetryUnequip = MyStringId.GetOrCompute("HelpScreen_SymmetryUnequip");

		public static readonly MyStringId TerminalControlPanel_Cockpit_ControlGyros = MyStringId.GetOrCompute("TerminalControlPanel_Cockpit_ControlGyros");

		public static readonly MyStringId TerminalControlPanel_Cockpit_ControlGyros_Tooltip = MyStringId.GetOrCompute("TerminalControlPanel_Cockpit_ControlGyros_Tooltip");

		public static readonly MyStringId RadialMenuAction_BuildingMode_Line = MyStringId.GetOrCompute("RadialMenuAction_BuildingMode_Line");

		public static readonly MyStringId RadialMenuAction_BuildingMode_Plane = MyStringId.GetOrCompute("RadialMenuAction_BuildingMode_Plane");

		public static readonly MyStringId RadialMenuAction_BuildingMode_Single = MyStringId.GetOrCompute("RadialMenuAction_BuildingMode_Single");

		public static readonly MyStringId AudioOptions_Help_Screen = MyStringId.GetOrCompute("AudioOptions_Help_Screen");

		public static readonly MyStringId ControlsOptions_Help_Screen = MyStringId.GetOrCompute("ControlsOptions_Help_Screen");

		public static readonly MyStringId DisplayOptions_Help_Screen = MyStringId.GetOrCompute("DisplayOptions_Help_Screen");

		public static readonly MyStringId GameOptions_Help_Screen_TabGeneral = MyStringId.GetOrCompute("GameOptions_Help_Screen_TabGeneral");

		public static readonly MyStringId GameOptions_Help_Screen_TabCrosshair = MyStringId.GetOrCompute("GameOptions_Help_Screen_TabCrosshair");

		public static readonly MyStringId GraphicsOptions_Help_Screen = MyStringId.GetOrCompute("GraphicsOptions_Help_Screen");

		public static readonly MyStringId AdvancedWorldSettings_Help_Screen = MyStringId.GetOrCompute("AdvancedWorldSettings_Help_Screen");

		public static readonly MyStringId LoadScreen_Help_Screen = MyStringId.GetOrCompute("LoadScreen_Help_Screen");

		public static readonly MyStringId WorldSettings_Help_Screen = MyStringId.GetOrCompute("WorldSettings_Help_Screen");

		public static readonly MyStringId JoinGameScreen_Help_Screen = MyStringId.GetOrCompute("JoinGameScreen_Help_Screen");

		public static readonly MyStringId JoinGameScreen_Help_ScreenGamesTab = MyStringId.GetOrCompute("JoinGameScreen_Help_ScreenGamesTab");

		public static readonly MyStringId ModsScreen_Help_Screen = MyStringId.GetOrCompute("ModsScreen_Help_Screen");

		public static readonly MyStringId WorkshopTagsScreen_Help_Screen = MyStringId.GetOrCompute("WorkshopTagsScreen_Help_Screen");

		public static readonly MyStringId WorkshopTagsScreen_HelpNoOk_Screen = MyStringId.GetOrCompute("WorkshopTagsScreen_HelpNoOk_Screen");

		public static readonly MyStringId ToolTipOptionsControls_InvertGamepadYChar = MyStringId.GetOrCompute("ToolTipOptionsControls_InvertGamepadYChar");

		public static readonly MyStringId ToolTipOptionsControls_InvertGamepadYVehicle = MyStringId.GetOrCompute("ToolTipOptionsControls_InvertGamepadYVehicle");

		public static readonly MyStringId NewGameScenarios_Help_ScenarioWithPublish = MyStringId.GetOrCompute("NewGameScenarios_Help_ScenarioWithPublish");

		public static readonly MyStringId NewGameScenarios_Help_Screen = MyStringId.GetOrCompute("NewGameScenarios_Help_Screen");

		public static readonly MyStringId ServerDetails_Help_ScreenAddFavorites = MyStringId.GetOrCompute("ServerDetails_Help_ScreenAddFavorites");

		public static readonly MyStringId ServerDetails_Help_ScreenRemoveFavorites = MyStringId.GetOrCompute("ServerDetails_Help_ScreenRemoveFavorites");

		public static readonly MyStringId WorldSettings_Help_ScreenNewGame = MyStringId.GetOrCompute("WorldSettings_Help_ScreenNewGame");

		public static readonly MyStringId NewGameWorkshop_Help_Screen = MyStringId.GetOrCompute("NewGameWorkshop_Help_Screen");

		public static readonly MyStringId ServerSearch_Help_Screen = MyStringId.GetOrCompute("ServerSearch_Help_Screen");

		public static readonly MyStringId MedicalsScreen_Help_Factions = MyStringId.GetOrCompute("MedicalsScreen_Help_Factions");

		public static readonly MyStringId MedicalsScreen_Help_FactionsMultiplayer = MyStringId.GetOrCompute("MedicalsScreen_Help_FactionsMultiplayer");

		public static readonly MyStringId MedicalsScreen_Help_Respawn = MyStringId.GetOrCompute("MedicalsScreen_Help_Respawn");

		public static readonly MyStringId TerminalGps_Help_Screen = MyStringId.GetOrCompute("TerminalGps_Help_Screen");

		public static readonly MyStringId TerminalComms_Help_Screen = MyStringId.GetOrCompute("TerminalComms_Help_Screen");

		public static readonly MyStringId TerminalControlPanel_Help_Screen = MyStringId.GetOrCompute("TerminalControlPanel_Help_Screen");

		public static readonly MyStringId TerminalFactions_Help_Screen = MyStringId.GetOrCompute("TerminalFactions_Help_Screen");

		public static readonly MyStringId TerminalInfo_Help_Screen = MyStringId.GetOrCompute("TerminalInfo_Help_Screen");

		public static readonly MyStringId TerminalInventory_Help_Screen = MyStringId.GetOrCompute("TerminalInventory_Help_Screen");

		public static readonly MyStringId TerminalProduction_Help_Screen = MyStringId.GetOrCompute("TerminalProduction_Help_Screen");

		public static readonly MyStringId TerminalProperties_Help_Screen = MyStringId.GetOrCompute("TerminalProperties_Help_Screen");

		public static readonly MyStringId TerminalInfo_Help_ScreenConvertShip = MyStringId.GetOrCompute("TerminalInfo_Help_ScreenConvertShip");

		public static readonly MyStringId TerminalInfo_Help_ScreenConvertStation = MyStringId.GetOrCompute("TerminalInfo_Help_ScreenConvertStation");

		public static readonly MyStringId Description_BlueprintClass_Ammo = MyStringId.GetOrCompute("Description_BlueprintClass_Ammo");

		public static readonly MyStringId Description_BlueprintClass_BasicComponents = MyStringId.GetOrCompute("Description_BlueprintClass_BasicComponents");

		public static readonly MyStringId Description_BlueprintClass_BasicTools = MyStringId.GetOrCompute("Description_BlueprintClass_BasicTools");

		public static readonly MyStringId Description_BlueprintClass_BuildPlanner = MyStringId.GetOrCompute("Description_BlueprintClass_BuildPlanner");

		public static readonly MyStringId Description_BlueprintClass_CommonMetals = MyStringId.GetOrCompute("Description_BlueprintClass_CommonMetals");

		public static readonly MyStringId Description_BlueprintClass_Components = MyStringId.GetOrCompute("Description_BlueprintClass_Components");

		public static readonly MyStringId Description_BlueprintClass_HydrogenBottles = MyStringId.GetOrCompute("Description_BlueprintClass_HydrogenBottles");

		public static readonly MyStringId Description_BlueprintClass_Ice = MyStringId.GetOrCompute("Description_BlueprintClass_Ice");

		public static readonly MyStringId Description_BlueprintClass_Ingots = MyStringId.GetOrCompute("Description_BlueprintClass_Ingots");

		public static readonly MyStringId Description_BlueprintClass_LargeBlocks = MyStringId.GetOrCompute("Description_BlueprintClass_LargeBlocks");

		public static readonly MyStringId Description_BlueprintClass_OxygenBottles = MyStringId.GetOrCompute("Description_BlueprintClass_OxygenBottles");

		public static readonly MyStringId Description_BlueprintClass_SmallBlocks = MyStringId.GetOrCompute("Description_BlueprintClass_SmallBlocks");

		public static readonly MyStringId Description_BlueprintClass_Tools = MyStringId.GetOrCompute("Description_BlueprintClass_Tools");

		public static readonly MyStringId DisplayName_BlueprintClass_BasicTools = MyStringId.GetOrCompute("DisplayName_BlueprintClass_BasicTools");

		public static readonly MyStringId DisplayName_BlueprintClass_Tools = MyStringId.GetOrCompute("DisplayName_BlueprintClass_Tools");

		public static readonly MyStringId TerminalProduction_Help_BlueprintFilter = MyStringId.GetOrCompute("TerminalProduction_Help_BlueprintFilter");

		public static readonly MyStringId TerminalProduction_Help_QueueGrid = MyStringId.GetOrCompute("TerminalProduction_Help_QueueGrid");

		public static readonly MyStringId TerminalProduction_Help_ScreenAssembling = MyStringId.GetOrCompute("TerminalProduction_Help_ScreenAssembling");

		public static readonly MyStringId TerminalProduction_Help_ScreenDisassembling = MyStringId.GetOrCompute("TerminalProduction_Help_ScreenDisassembling");

		public static readonly MyStringId TerminalInventory_Help_ItemsGrid = MyStringId.GetOrCompute("TerminalInventory_Help_ItemsGrid");

		public static readonly MyStringId TerminalInventory_Help_ItemsGrid_Droppable = MyStringId.GetOrCompute("TerminalInventory_Help_ItemsGrid_Droppable");

		public static readonly MyStringId TerminalRemote_Help_ShipsTable = MyStringId.GetOrCompute("TerminalRemote_Help_ShipsTable");

		public static readonly MyStringId BlueprintScreen_Help_Screen = MyStringId.GetOrCompute("BlueprintScreen_Help_Screen");

		public static readonly MyStringId BlueprintScreen_Help_Screen_Local = MyStringId.GetOrCompute("BlueprintScreen_Help_Screen_Local");

		public static readonly MyStringId CharacterSkinInventory_Help_ScreenOK = MyStringId.GetOrCompute("CharacterSkinInventory_Help_ScreenOK");

		public static readonly MyStringId CharacterSkinInventory_Help_ScreenCraft = MyStringId.GetOrCompute("CharacterSkinInventory_Help_ScreenCraft");

		public static readonly MyStringId FactionCreateEdit_Help_Screen = MyStringId.GetOrCompute("FactionCreateEdit_Help_Screen");

		public static readonly MyStringId ColorTool_Help_Screen = MyStringId.GetOrCompute("ColorTool_Help_Screen");

		public static readonly MyStringId PlayersScreen_Help_PlayersList = MyStringId.GetOrCompute("PlayersScreen_Help_PlayersList");

		public static readonly MyStringId PlayersScreen_Help_Screen = MyStringId.GetOrCompute("PlayersScreen_Help_Screen");

		public static readonly MyStringId PbEditor_Help_Screen = MyStringId.GetOrCompute("PbEditor_Help_Screen");

		public static readonly MyStringId ClaimSkin_Help_Screen = MyStringId.GetOrCompute("ClaimSkin_Help_Screen");

		public static readonly MyStringId PerformanceWarnings_Help_Screen = MyStringId.GetOrCompute("PerformanceWarnings_Help_Screen");

		public static readonly MyStringId FolderScreen_Help_Screen = MyStringId.GetOrCompute("FolderScreen_Help_Screen");

		public static readonly MyStringId DatapadEdit_Help_Screen = MyStringId.GetOrCompute("DatapadEdit_Help_Screen");

		public static readonly MyStringId JoinGameScreen_Help_ScreenGamesTabXbox = MyStringId.GetOrCompute("JoinGameScreen_Help_ScreenGamesTabXbox");

		public static readonly MyStringId JoinGameScreen_Help_ScreenXbox = MyStringId.GetOrCompute("JoinGameScreen_Help_ScreenXbox");

		public static readonly MyStringId String1 = MyStringId.GetOrCompute("String1");

		public static readonly MyStringId StoreScreen_Help_Sell = MyStringId.GetOrCompute("StoreScreen_Help_Sell");

		public static readonly MyStringId Gamepad_Help_Select = MyStringId.GetOrCompute("Gamepad_Help_Select");

		public static readonly MyStringId ContractsScreen_Help_Accept = MyStringId.GetOrCompute("ContractsScreen_Help_Accept");

		public static readonly MyStringId ContractsScreen_Help_Finish = MyStringId.GetOrCompute("ContractsScreen_Help_Finish");

		public static readonly MyStringId ContractsScreen_Help_Refresh = MyStringId.GetOrCompute("ContractsScreen_Help_Refresh");

		public static readonly MyStringId ScreenCaptionWorkshopBrowser = MyStringId.GetOrCompute("ScreenCaptionWorkshopBrowser");

		public static readonly MyStringId WorkshopBrowser_Created = MyStringId.GetOrCompute("WorkshopBrowser_Created");

		public static readonly MyStringId WorkshopBrowser_FileSize = MyStringId.GetOrCompute("WorkshopBrowser_FileSize");

		public static readonly MyStringId WorkshopBrowser_MostPopular = MyStringId.GetOrCompute("WorkshopBrowser_MostPopular");

		public static readonly MyStringId WorkshopBrowser_MostRecent = MyStringId.GetOrCompute("WorkshopBrowser_MostRecent");

		public static readonly MyStringId WorkshopBrowser_MostSubscribed = MyStringId.GetOrCompute("WorkshopBrowser_MostSubscribed");

		public static readonly MyStringId WorkshopBrowser_NextPage = MyStringId.GetOrCompute("WorkshopBrowser_NextPage");

		public static readonly MyStringId WorkshopBrowser_PreviousPage = MyStringId.GetOrCompute("WorkshopBrowser_PreviousPage");

		public static readonly MyStringId WorkshopBrowser_Refresh = MyStringId.GetOrCompute("WorkshopBrowser_Refresh");

		public static readonly MyStringId WorkshopBrowser_Search = MyStringId.GetOrCompute("WorkshopBrowser_Search");

		public static readonly MyStringId WorkshopBrowser_Subscribed = MyStringId.GetOrCompute("WorkshopBrowser_Subscribed");

		public static readonly MyStringId WorkshopBrowser_Subscribers = MyStringId.GetOrCompute("WorkshopBrowser_Subscribers");

		public static readonly MyStringId WorkshopBrowser_Updated = MyStringId.GetOrCompute("WorkshopBrowser_Updated");

		public static readonly MyStringId WorkhopBrowser_Help_OpenClose = MyStringId.GetOrCompute("WorkhopBrowser_Help_OpenClose");

		public static readonly MyStringId WorkshopBrowser_Help_Paging = MyStringId.GetOrCompute("WorkshopBrowser_Help_Paging");

		public static readonly MyStringId WorkshopBrowser_Help_Refresh = MyStringId.GetOrCompute("WorkshopBrowser_Help_Refresh");

		public static readonly MyStringId WorkshopBrowser_Help_Select = MyStringId.GetOrCompute("WorkshopBrowser_Help_Select");

		public static readonly MyStringId WorkshopBrowser_Help_ToggleCategory = MyStringId.GetOrCompute("WorkshopBrowser_Help_ToggleCategory");

		public static readonly MyStringId WorkshopBrowser_Help_ToggleSubscribe = MyStringId.GetOrCompute("WorkshopBrowser_Help_ToggleSubscribe");

		public static readonly MyStringId PlayerTrade_Help_AcceptOffer = MyStringId.GetOrCompute("PlayerTrade_Help_AcceptOffer");

		public static readonly MyStringId PlayerTrade_Help_ChangeValue = MyStringId.GetOrCompute("PlayerTrade_Help_ChangeValue");

		public static readonly MyStringId PlayerTrade_Help_SubmitOffer = MyStringId.GetOrCompute("PlayerTrade_Help_SubmitOffer");

		public static readonly MyStringId PlayerTrade_Help_Transfer = MyStringId.GetOrCompute("PlayerTrade_Help_Transfer");

		public static readonly MyStringId LoadScreen_Help_Load = MyStringId.GetOrCompute("LoadScreen_Help_Load");

		public static readonly MyStringId WorldSettings_Help_ScreenNewGame_Modless = MyStringId.GetOrCompute("WorldSettings_Help_ScreenNewGame_Modless");

		public static readonly MyStringId WorldSettings_Help_Screen_Modless = MyStringId.GetOrCompute("WorldSettings_Help_Screen_Modless");

		public static readonly MyStringId MedicalsScreen_Help_FactionList = MyStringId.GetOrCompute("MedicalsScreen_Help_FactionList");

		public static readonly MyStringId MedicalsScreen_Help_RespawnList = MyStringId.GetOrCompute("MedicalsScreen_Help_RespawnList");

		public static readonly MyStringId ControlMenuItemLabel_Handbrake = MyStringId.GetOrCompute("ControlMenuItemLabel_Handbrake");

		public static readonly MyStringId RadialMenuAction_ToggleHandbrake_Off = MyStringId.GetOrCompute("RadialMenuAction_ToggleHandbrake_Off");

		public static readonly MyStringId RadialMenuAction_ToggleHandbrake_On = MyStringId.GetOrCompute("RadialMenuAction_ToggleHandbrake_On");

		public static readonly MyStringId ContractsScreen_Help_Select = MyStringId.GetOrCompute("ContractsScreen_Help_Select");

		public static readonly MyStringId SaveAs_Help_Screen = MyStringId.GetOrCompute("SaveAs_Help_Screen");

		public static readonly MyStringId Transaction_Help_Screen = MyStringId.GetOrCompute("Transaction_Help_Screen");

		public static readonly MyStringId RadialMenuAction_ToggleViewMode_Off = MyStringId.GetOrCompute("RadialMenuAction_ToggleViewMode_Off");

		public static readonly MyStringId RadialMenuAction_ToggleViewMode_On = MyStringId.GetOrCompute("RadialMenuAction_ToggleViewMode_On");

		public static readonly MyStringId Spectator_FocusPlayer = MyStringId.GetOrCompute("Spectator_FocusPlayer");

		public static readonly MyStringId Spectator_LockToGrid = MyStringId.GetOrCompute("Spectator_LockToGrid");

		public static readonly MyStringId Spectator_PlayerControl = MyStringId.GetOrCompute("Spectator_PlayerControl");

		public static readonly MyStringId Spectator_RotationSpeedDown = MyStringId.GetOrCompute("Spectator_RotationSpeedDown");

		public static readonly MyStringId Spectator_RotationSpeedUp = MyStringId.GetOrCompute("Spectator_RotationSpeedUp");

		public static readonly MyStringId Spectator_SpeedBoost = MyStringId.GetOrCompute("Spectator_SpeedBoost");

		public static readonly MyStringId Spectator_SpeedDown = MyStringId.GetOrCompute("Spectator_SpeedDown");

		public static readonly MyStringId Spectator_SpeedUp = MyStringId.GetOrCompute("Spectator_SpeedUp");

		public static readonly MyStringId Spectator_Teleport = MyStringId.GetOrCompute("Spectator_Teleport");

		public static readonly MyStringId ControlName_Crouch = MyStringId.GetOrCompute("ControlName_Crouch");

		public static readonly MyStringId ControlName_Down = MyStringId.GetOrCompute("ControlName_Down");

		public static readonly MyStringId ControlName_JetpackOff = MyStringId.GetOrCompute("ControlName_JetpackOff");

		public static readonly MyStringId ControlName_JetpackOn = MyStringId.GetOrCompute("ControlName_JetpackOn");

		public static readonly MyStringId ControlName_Jump = MyStringId.GetOrCompute("ControlName_Jump");

		public static readonly MyStringId ControlName_Up = MyStringId.GetOrCompute("ControlName_Up");

		public static readonly MyStringId HelpScreen_ControllerHorizontalMover_Forward = MyStringId.GetOrCompute("HelpScreen_ControllerHorizontalMover_Forward");

		public static readonly MyStringId HelpScreen_ControllerJetpackControl = MyStringId.GetOrCompute("HelpScreen_ControllerJetpackControl");

		public static readonly MyStringId HelpScreen_ControllerRotation_Pitch = MyStringId.GetOrCompute("HelpScreen_ControllerRotation_Pitch");

		public static readonly MyStringId HelpScreen_ControllerRotation_Roll = MyStringId.GetOrCompute("HelpScreen_ControllerRotation_Roll");

		public static readonly MyStringId HelpScreen_ControllerRotation_Yaw = MyStringId.GetOrCompute("HelpScreen_ControllerRotation_Yaw");

		public static readonly MyStringId HelpScreen_ControllerVerticalMover_Up = MyStringId.GetOrCompute("HelpScreen_ControllerVerticalMover_Up");

		public static readonly MyStringId Gamepad_Help_ChangeValue = MyStringId.GetOrCompute("Gamepad_Help_ChangeValue");

		public static readonly MyStringId StoreScreenAdmin_Help_CreateOffer = MyStringId.GetOrCompute("StoreScreenAdmin_Help_CreateOffer");

		public static readonly MyStringId StoreScreenAdmin_Help_CreateOrder = MyStringId.GetOrCompute("StoreScreenAdmin_Help_CreateOrder");

		public static readonly MyStringId StoreScreenAdmin_Help_Delete = MyStringId.GetOrCompute("StoreScreenAdmin_Help_Delete");

		public static readonly MyStringId ContractsScreenGridSelection_Help_Confirm = MyStringId.GetOrCompute("ContractsScreenGridSelection_Help_Confirm");

		public static readonly MyStringId ContractsScreen_Help_CreateContract = MyStringId.GetOrCompute("ContractsScreen_Help_CreateContract");

		public static readonly MyStringId ContractsScreen_Help_Delete = MyStringId.GetOrCompute("ContractsScreen_Help_Delete");

		public static readonly MyStringId WorkshopBrowser_Help_OpenItem = MyStringId.GetOrCompute("WorkshopBrowser_Help_OpenItem");

		public static readonly MyStringId WorkshopBrowser_Help_OpenWorkshop = MyStringId.GetOrCompute("WorkshopBrowser_Help_OpenWorkshop");

		public static readonly MyStringId WorkshopBrowser_OpenItem = MyStringId.GetOrCompute("WorkshopBrowser_OpenItem");

		public static readonly MyStringId WorkshopBrowser_Subscribe = MyStringId.GetOrCompute("WorkshopBrowser_Subscribe");

		public static readonly MyStringId MedicalsScreen_Help_Respawn_Factionless = MyStringId.GetOrCompute("MedicalsScreen_Help_Respawn_Factionless");

		public static readonly MyStringId MainMenuScreen_Help_Screen = MyStringId.GetOrCompute("MainMenuScreen_Help_Screen");

		public static readonly MyStringId HelpScreen_Chat = MyStringId.GetOrCompute("HelpScreen_Chat");

		public static readonly MyStringId HelpScreen_Contracts = MyStringId.GetOrCompute("HelpScreen_Contracts");

		public static readonly MyStringId HelpScreen_Progression = MyStringId.GetOrCompute("HelpScreen_Progression");

		public static readonly MyStringId HelpScreen_ToggleHud = MyStringId.GetOrCompute("HelpScreen_ToggleHud");

		public static readonly MyStringId HelpScreen_Tools = MyStringId.GetOrCompute("HelpScreen_Tools");

		public static readonly MyStringId RadialMenuAction_Shortcut_ActiveContracts = MyStringId.GetOrCompute("RadialMenuAction_Shortcut_ActiveContracts");

		public static readonly MyStringId RadialMenuAction_Shortcut_OpenChat = MyStringId.GetOrCompute("RadialMenuAction_Shortcut_OpenChat");

		public static readonly MyStringId RadialMenuAction_Shortcut_ProgressionMenu = MyStringId.GetOrCompute("RadialMenuAction_Shortcut_ProgressionMenu");

		public static readonly MyStringId RadialMenuAction_Shortcut_ToggleHUD = MyStringId.GetOrCompute("RadialMenuAction_Shortcut_ToggleHUD");

		public static readonly MyStringId ToolTipOptionsControls_ZoomMultiplier = MyStringId.GetOrCompute("ToolTipOptionsControls_ZoomMultiplier");

		public static readonly MyStringId ZoomMultiplier = MyStringId.GetOrCompute("ZoomMultiplier");

		public static readonly MyStringId MainMenuScreen_Help_ScreenInGameWithLink = MyStringId.GetOrCompute("MainMenuScreen_Help_ScreenInGameWithLink");

		public static readonly MyStringId MainMenuScreen_Help_ScreenWithLink = MyStringId.GetOrCompute("MainMenuScreen_Help_ScreenWithLink");

		public static readonly MyStringId WorkshopBrowser_NotFound = MyStringId.GetOrCompute("WorkshopBrowser_NotFound");

		public static readonly MyStringId ControlName_ColorPicker = MyStringId.GetOrCompute("ControlName_ColorPicker");

		public static readonly MyStringId ScreenCaptionModIoConsent = MyStringId.GetOrCompute("ScreenCaptionModIoConsent");

		public static readonly MyStringId ScreenCaptionSteamAndModIoConsent = MyStringId.GetOrCompute("ScreenCaptionSteamAndModIoConsent");

		public static readonly MyStringId ScreenModIoConsent_ButtonAgree = MyStringId.GetOrCompute("ScreenModIoConsent_ButtonAgree");

		public static readonly MyStringId ScreenModIoConsent_ButtonOptOut = MyStringId.GetOrCompute("ScreenModIoConsent_ButtonOptOut");

		public static readonly MyStringId ScreenModIoConsent_ButtonPrivacyPolicy = MyStringId.GetOrCompute("ScreenModIoConsent_ButtonPrivacyPolicy");

		public static readonly MyStringId ScreenModIoConsent_ButtonTermsOfUse = MyStringId.GetOrCompute("ScreenModIoConsent_ButtonTermsOfUse");

		public static readonly MyStringId ScreenModIoConsent_PrivacyPolicyModioHelp = MyStringId.GetOrCompute("ScreenModIoConsent_PrivacyPolicyModioHelp");

		public static readonly MyStringId ScreenModIoConsent_TermsOfUseModioHelp = MyStringId.GetOrCompute("ScreenModIoConsent_TermsOfUseModioHelp");

		public static readonly MyStringId ScreenModIoConsent_PrivacyPolicySteamHelp = MyStringId.GetOrCompute("ScreenModIoConsent_PrivacyPolicySteamHelp");

		public static readonly MyStringId ScreenModIoConsent_TermsOfUseSteamHelp = MyStringId.GetOrCompute("ScreenModIoConsent_TermsOfUseSteamHelp");

		public static readonly MyStringId ScreenModIoConsent_ConsentTextPart1 = MyStringId.GetOrCompute("ScreenModIoConsent_ConsentTextPart1");

		public static readonly MyStringId ScreenSteamAndModIoConsent_ConsentTextPart1 = MyStringId.GetOrCompute("ScreenSteamAndModIoConsent_ConsentTextPart1");

		public static readonly MyStringId ScreenModIoConsent_ConsentTextPart2 = MyStringId.GetOrCompute("ScreenModIoConsent_ConsentTextPart2");

		public static readonly MyStringId ScreenSteamAndModIoConsent_ConsentTextPart2 = MyStringId.GetOrCompute("ScreenSteamAndModIoConsent_ConsentTextPart2");

		public static readonly MyStringId ScreenModIoConsent_ConsentTextPart3 = MyStringId.GetOrCompute("ScreenModIoConsent_ConsentTextPart3");

		public static readonly MyStringId ScreenSteamAndModIoConsent_ConsentTextPart3 = MyStringId.GetOrCompute("ScreenSteamAndModIoConsent_ConsentTextPart3");

		public static readonly MyStringId ScreenModIoConsent_LabelReadTOU = MyStringId.GetOrCompute("ScreenModIoConsent_LabelReadTOU");

		public static readonly MyStringId ScreenModIoConsent_LabelModIo = MyStringId.GetOrCompute("ScreenModIoConsent_LabelModIo");

		public static readonly MyStringId ScreenModIoConsent_LabelSteam = MyStringId.GetOrCompute("ScreenModIoConsent_LabelSteam");

		public static readonly MyStringId DisplayName_Block_GratedCatwalkRailingEnd = MyStringId.GetOrCompute("DisplayName_Block_GratedCatwalkRailingEnd");

		public static readonly MyStringId DisplayName_Block_GratedCatwalkRailingHalfLeft = MyStringId.GetOrCompute("DisplayName_Block_GratedCatwalkRailingHalfLeft");

		public static readonly MyStringId DisplayName_Block_GratedCatwalkRailingHalfRight = MyStringId.GetOrCompute("DisplayName_Block_GratedCatwalkRailingHalfRight");

		public static readonly MyStringId DisplayName_Block_GratedHalfStairsMirrored = MyStringId.GetOrCompute("DisplayName_Block_GratedHalfStairsMirrored");

		public static readonly MyStringId DisplayName_Block_RailingHalfLeft = MyStringId.GetOrCompute("DisplayName_Block_RailingHalfLeft");

		public static readonly MyStringId DisplayName_Block_RailingHalfRight = MyStringId.GetOrCompute("DisplayName_Block_RailingHalfRight");

		public static readonly MyStringId Description_ControlSeat = MyStringId.GetOrCompute("Description_ControlSeat");

		public static readonly MyStringId DisplayName_Block_AntennaDish = MyStringId.GetOrCompute("DisplayName_Block_AntennaDish");

		public static readonly MyStringId DisplayName_Block_DeadBody01 = MyStringId.GetOrCompute("DisplayName_Block_DeadBody01");

		public static readonly MyStringId DisplayName_Block_DeadBody02 = MyStringId.GetOrCompute("DisplayName_Block_DeadBody02");

		public static readonly MyStringId DisplayName_Block_DeadBody03 = MyStringId.GetOrCompute("DisplayName_Block_DeadBody03");

		public static readonly MyStringId DisplayName_Block_DeadBody04 = MyStringId.GetOrCompute("DisplayName_Block_DeadBody04");

		public static readonly MyStringId DisplayName_Block_DeadBody05 = MyStringId.GetOrCompute("DisplayName_Block_DeadBody05");

		public static readonly MyStringId DisplayName_Block_DeadBody06 = MyStringId.GetOrCompute("DisplayName_Block_DeadBody06");

		public static readonly MyStringId Description_BlockGroup_DeadBodies = MyStringId.GetOrCompute("Description_BlockGroup_DeadBodies");

		public static readonly MyStringId DisplayName_BlockGroup_DeadBodies = MyStringId.GetOrCompute("DisplayName_BlockGroup_DeadBodies");

		public static readonly MyStringId Description_DeadEngineer = MyStringId.GetOrCompute("Description_DeadEngineer");

		public static readonly MyStringId Description_Gate = MyStringId.GetOrCompute("Description_Gate");

		public static readonly MyStringId DisplayName_Block_Gate = MyStringId.GetOrCompute("DisplayName_Block_Gate");

		public static readonly MyStringId DisplayName_Block_OffsetDoor = MyStringId.GetOrCompute("DisplayName_Block_OffsetDoor");

		public static readonly MyStringId Description_SciFiWall = MyStringId.GetOrCompute("Description_SciFiWall");

		public static readonly MyStringId DisplayName_BlockGroup_LCDGroupSOTF = MyStringId.GetOrCompute("DisplayName_BlockGroup_LCDGroupSOTF");

		public static readonly MyStringId DisplayName_Block_SciFiWall = MyStringId.GetOrCompute("DisplayName_Block_SciFiWall");

		public static readonly MyStringId DisplayName_Category_SparksOfTheFuturePack = MyStringId.GetOrCompute("DisplayName_Category_SparksOfTheFuturePack");

		public static readonly MyStringId DisplayName_LCD_Panel3x3 = MyStringId.GetOrCompute("DisplayName_LCD_Panel3x3");

		public static readonly MyStringId DisplayName_LCD_Panel5x3 = MyStringId.GetOrCompute("DisplayName_LCD_Panel5x3");

		public static readonly MyStringId DisplayName_LCD_Panel5x5 = MyStringId.GetOrCompute("DisplayName_LCD_Panel5x5");

		public static readonly MyStringId Description_NeonTubes = MyStringId.GetOrCompute("Description_NeonTubes");

		public static readonly MyStringId DisplayName_BlockGroup_NeonTubes = MyStringId.GetOrCompute("DisplayName_BlockGroup_NeonTubes");

		public static readonly MyStringId DisplayName_Block_NeonTubesBendDown = MyStringId.GetOrCompute("DisplayName_Block_NeonTubesBendDown");

		public static readonly MyStringId DisplayName_Block_NeonTubesBendUp = MyStringId.GetOrCompute("DisplayName_Block_NeonTubesBendUp");

		public static readonly MyStringId DisplayName_Block_NeonTubesCorner = MyStringId.GetOrCompute("DisplayName_Block_NeonTubesCorner");

		public static readonly MyStringId DisplayName_Block_NeonTubesStraight1 = MyStringId.GetOrCompute("DisplayName_Block_NeonTubesStraight1");

		public static readonly MyStringId DisplayName_Block_NeonTubesStraight2 = MyStringId.GetOrCompute("DisplayName_Block_NeonTubesStraight2");

		public static readonly MyStringId DisplayName_Block_NeonTubesStraightEnd1 = MyStringId.GetOrCompute("DisplayName_Block_NeonTubesStraightEnd1");

		public static readonly MyStringId DisplayName_Block_NeonTubesStraightEnd2 = MyStringId.GetOrCompute("DisplayName_Block_NeonTubesStraightEnd2");

		public static readonly MyStringId DisplayName_Block_NeonTubesU = MyStringId.GetOrCompute("DisplayName_Block_NeonTubesU");

		public static readonly MyStringId Description_Letters = MyStringId.GetOrCompute("Description_Letters");

		public static readonly MyStringId Description_Numbers = MyStringId.GetOrCompute("Description_Numbers");

		public static readonly MyStringId Description_Symbols = MyStringId.GetOrCompute("Description_Symbols");

		public static readonly MyStringId DisplayName_BlockGroup_Symbols = MyStringId.GetOrCompute("DisplayName_BlockGroup_Symbols");

		public static readonly MyStringId DisplayName_Block_SciFiTerminal = MyStringId.GetOrCompute("DisplayName_Block_SciFiTerminal");

		public static readonly MyStringId DisplayName_Block_Symbol0 = MyStringId.GetOrCompute("DisplayName_Block_Symbol0");

		public static readonly MyStringId DisplayName_Block_Symbol1 = MyStringId.GetOrCompute("DisplayName_Block_Symbol1");

		public static readonly MyStringId DisplayName_Block_Symbol2 = MyStringId.GetOrCompute("DisplayName_Block_Symbol2");

		public static readonly MyStringId DisplayName_Block_Symbol3 = MyStringId.GetOrCompute("DisplayName_Block_Symbol3");

		public static readonly MyStringId DisplayName_Block_Symbol4 = MyStringId.GetOrCompute("DisplayName_Block_Symbol4");

		public static readonly MyStringId DisplayName_Block_Symbol5 = MyStringId.GetOrCompute("DisplayName_Block_Symbol5");

		public static readonly MyStringId DisplayName_Block_Symbol6 = MyStringId.GetOrCompute("DisplayName_Block_Symbol6");

		public static readonly MyStringId DisplayName_Block_Symbol7 = MyStringId.GetOrCompute("DisplayName_Block_Symbol7");

		public static readonly MyStringId DisplayName_Block_Symbol8 = MyStringId.GetOrCompute("DisplayName_Block_Symbol8");

		public static readonly MyStringId DisplayName_Block_Symbol9 = MyStringId.GetOrCompute("DisplayName_Block_Symbol9");

		public static readonly MyStringId DisplayName_Block_SymbolA = MyStringId.GetOrCompute("DisplayName_Block_SymbolA");

		public static readonly MyStringId DisplayName_Block_SymbolB = MyStringId.GetOrCompute("DisplayName_Block_SymbolB");

		public static readonly MyStringId DisplayName_Block_SymbolC = MyStringId.GetOrCompute("DisplayName_Block_SymbolC");

		public static readonly MyStringId DisplayName_Block_SymbolD = MyStringId.GetOrCompute("DisplayName_Block_SymbolD");

		public static readonly MyStringId DisplayName_Block_SymbolDot = MyStringId.GetOrCompute("DisplayName_Block_SymbolDot");

		public static readonly MyStringId DisplayName_Block_SymbolE = MyStringId.GetOrCompute("DisplayName_Block_SymbolE");

		public static readonly MyStringId DisplayName_Block_SymbolF = MyStringId.GetOrCompute("DisplayName_Block_SymbolF");

		public static readonly MyStringId DisplayName_Block_SymbolG = MyStringId.GetOrCompute("DisplayName_Block_SymbolG");

		public static readonly MyStringId DisplayName_Block_SymbolH = MyStringId.GetOrCompute("DisplayName_Block_SymbolH");

		public static readonly MyStringId DisplayName_Block_SymbolHyphen = MyStringId.GetOrCompute("DisplayName_Block_SymbolHyphen");

		public static readonly MyStringId DisplayName_Block_SymbolI = MyStringId.GetOrCompute("DisplayName_Block_SymbolI");

		public static readonly MyStringId DisplayName_Block_SymbolJ = MyStringId.GetOrCompute("DisplayName_Block_SymbolJ");

		public static readonly MyStringId DisplayName_Block_SymbolK = MyStringId.GetOrCompute("DisplayName_Block_SymbolK");

		public static readonly MyStringId DisplayName_Block_SymbolL = MyStringId.GetOrCompute("DisplayName_Block_SymbolL");

		public static readonly MyStringId DisplayName_Block_SymbolM = MyStringId.GetOrCompute("DisplayName_Block_SymbolM");

		public static readonly MyStringId DisplayName_Block_SymbolN = MyStringId.GetOrCompute("DisplayName_Block_SymbolN");

		public static readonly MyStringId DisplayName_Block_SymbolO = MyStringId.GetOrCompute("DisplayName_Block_SymbolO");

		public static readonly MyStringId DisplayName_Block_SymbolP = MyStringId.GetOrCompute("DisplayName_Block_SymbolP");

		public static readonly MyStringId DisplayName_Block_SymbolQ = MyStringId.GetOrCompute("DisplayName_Block_SymbolQ");

		public static readonly MyStringId DisplayName_Block_SymbolR = MyStringId.GetOrCompute("DisplayName_Block_SymbolR");

		public static readonly MyStringId DisplayName_Block_SymbolS = MyStringId.GetOrCompute("DisplayName_Block_SymbolS");

		public static readonly MyStringId DisplayName_Block_SymbolT = MyStringId.GetOrCompute("DisplayName_Block_SymbolT");

		public static readonly MyStringId DisplayName_Block_SymbolU = MyStringId.GetOrCompute("DisplayName_Block_SymbolU");

		public static readonly MyStringId DisplayName_Block_SymbolUnderscore = MyStringId.GetOrCompute("DisplayName_Block_SymbolUnderscore");

		public static readonly MyStringId DisplayName_Block_SymbolV = MyStringId.GetOrCompute("DisplayName_Block_SymbolV");

		public static readonly MyStringId DisplayName_Block_SymbolW = MyStringId.GetOrCompute("DisplayName_Block_SymbolW");

		public static readonly MyStringId DisplayName_Block_SymbolX = MyStringId.GetOrCompute("DisplayName_Block_SymbolX");

		public static readonly MyStringId DisplayName_Block_SymbolY = MyStringId.GetOrCompute("DisplayName_Block_SymbolY");

		public static readonly MyStringId DisplayName_Block_SymbolZ = MyStringId.GetOrCompute("DisplayName_Block_SymbolZ");

		public static readonly MyStringId DisplayName_Category_Symbols = MyStringId.GetOrCompute("DisplayName_Category_Symbols");

		public static readonly MyStringId DisplayName_Block_SciFiButtonPanel = MyStringId.GetOrCompute("DisplayName_Block_SciFiButtonPanel");

		public static readonly MyStringId DisplayName_Screen_Numpad1 = MyStringId.GetOrCompute("DisplayName_Screen_Numpad1");

		public static readonly MyStringId DisplayName_Screen_Numpad2 = MyStringId.GetOrCompute("DisplayName_Screen_Numpad2");

		public static readonly MyStringId DisplayName_Screen_Numpad3 = MyStringId.GetOrCompute("DisplayName_Screen_Numpad3");

		public static readonly MyStringId DisplayName_Screen_Numpad4 = MyStringId.GetOrCompute("DisplayName_Screen_Numpad4");

		public static readonly MyStringId ScreenModIoConsent_AgreeHelpText = MyStringId.GetOrCompute("ScreenModIoConsent_AgreeHelpText");

		public static readonly MyStringId ScreenModIoConsent_OptOutHelpText = MyStringId.GetOrCompute("ScreenModIoConsent_OptOutHelpText");

		public static readonly MyStringId ScreenModIoConsent_PrivacyPolicy_UrlFriendlyName = MyStringId.GetOrCompute("ScreenModIoConsent_PrivacyPolicy_UrlFriendlyName");

		public static readonly MyStringId ScreenModIoConsent_TermsOfUse_UrlFriendlyName = MyStringId.GetOrCompute("ScreenModIoConsent_TermsOfUse_UrlFriendlyName");

		public static readonly MyStringId ScreenModIoConsent_SteamPrivacyPolicy_UrlFriendlyName = MyStringId.GetOrCompute("ScreenModIoConsent_SteamPrivacyPolicy_UrlFriendlyName");

		public static readonly MyStringId ScreenModIoConsent_SteamTermsOfUse_UrlFriendlyName = MyStringId.GetOrCompute("ScreenModIoConsent_SteamTermsOfUse_UrlFriendlyName");

		public static readonly MyStringId ControlsOptions_Help_Scheme = MyStringId.GetOrCompute("ControlsOptions_Help_Scheme");

		public static readonly MyStringId TerminalInventory_Help_TransferItems = MyStringId.GetOrCompute("TerminalInventory_Help_TransferItems");

		public static readonly MyStringId LCD_Poster_CosmicCoffee01 = MyStringId.GetOrCompute("LCD_Poster_CosmicCoffee01");

		public static readonly MyStringId LCD_Poster_CosmicCoffee02 = MyStringId.GetOrCompute("LCD_Poster_CosmicCoffee02");

		public static readonly MyStringId LCD_Poster_IWantYou = MyStringId.GetOrCompute("LCD_Poster_IWantYou");

		public static readonly MyStringId LCD_Poster_klangCola01 = MyStringId.GetOrCompute("LCD_Poster_klangCola01");

		public static readonly MyStringId LCD_Poster_klangCola02 = MyStringId.GetOrCompute("LCD_Poster_klangCola02");

		public static readonly MyStringId LCD_Poster_ROS01 = MyStringId.GetOrCompute("LCD_Poster_ROS01");

		public static readonly MyStringId LCD_Poster_ROS02 = MyStringId.GetOrCompute("LCD_Poster_ROS02");

		public static readonly MyStringId LCD_CosmicTeam_Landscape = MyStringId.GetOrCompute("LCD_CosmicTeam_Landscape");

		public static readonly MyStringId LCD_CosmicTeam_Portrait = MyStringId.GetOrCompute("LCD_CosmicTeam_Portrait");

		public static readonly MyStringId LCD_Exploration_Landscape = MyStringId.GetOrCompute("LCD_Exploration_Landscape");

		public static readonly MyStringId LCD_Exploration_Portrait = MyStringId.GetOrCompute("LCD_Exploration_Portrait");

		public static readonly MyStringId LCD_ThunderFleet_Landscape = MyStringId.GetOrCompute("LCD_ThunderFleet_Landscape");

		public static readonly MyStringId LCD_ThunderFleet_Portrait = MyStringId.GetOrCompute("LCD_ThunderFleet_Portrait");

		public static readonly MyStringId Description_FAQ_FrostbitePack = MyStringId.GetOrCompute("Description_FAQ_FrostbitePack");

		public static readonly MyStringId Description_AntennaDish = MyStringId.GetOrCompute("Description_AntennaDish");

		public static readonly MyStringId Description_OffsetDoor = MyStringId.GetOrCompute("Description_OffsetDoor");

		public static readonly MyStringId BroadcastScreen_Antenna = MyStringId.GetOrCompute("BroadcastScreen_Antenna");

		public static readonly MyStringId BroadcastScreen_RemoteControl = MyStringId.GetOrCompute("BroadcastScreen_RemoteControl");

		public static readonly MyStringId MessageBoxWorldOperation_Quota = MyStringId.GetOrCompute("MessageBoxWorldOperation_Quota");

		public static readonly MyStringId MessageBoxWorldOperation_CloudSynchronization = MyStringId.GetOrCompute("MessageBoxWorldOperation_CloudSynchronization");

		public static readonly MyStringId MessageBoxWorldOperation_Error = MyStringId.GetOrCompute("MessageBoxWorldOperation_Error");

		public static readonly MyStringId MessageBoxWorldSave_Quota = MyStringId.GetOrCompute("MessageBoxWorldSave_Quota");

		public static readonly MyStringId DisplayName_Block_NeonTubesStraightDown = MyStringId.GetOrCompute("DisplayName_Block_NeonTubesStraightDown");

		public static readonly MyStringId DisplayName_Block_SciFiButtonTerminal = MyStringId.GetOrCompute("DisplayName_Block_SciFiButtonTerminal");

		public static readonly MyStringId DisplayName_Block_LargeHinge = MyStringId.GetOrCompute("DisplayName_Block_LargeHinge");

		public static readonly MyStringId DisplayName_Block_MediumHinge = MyStringId.GetOrCompute("DisplayName_Block_MediumHinge");

		public static readonly MyStringId DisplayName_Block_SmallHinge = MyStringId.GetOrCompute("DisplayName_Block_SmallHinge");

		public static readonly MyStringId Description_Hinge = MyStringId.GetOrCompute("Description_Hinge");

		public static readonly MyStringId Description_HingeHead = MyStringId.GetOrCompute("Description_HingeHead");

		public static readonly MyStringId DisplayName_Block_LargeHingeHead = MyStringId.GetOrCompute("DisplayName_Block_LargeHingeHead");

		public static readonly MyStringId DisplayName_Block_MediumHingeHead = MyStringId.GetOrCompute("DisplayName_Block_MediumHingeHead");

		public static readonly MyStringId DisplayName_Block_SmallHingeHead = MyStringId.GetOrCompute("DisplayName_Block_SmallHingeHead");

		public static readonly MyStringId DisplayName_Block_SymbolAnd = MyStringId.GetOrCompute("DisplayName_Block_SymbolAnd");

		public static readonly MyStringId DisplayName_Block_SymbolApostrophe = MyStringId.GetOrCompute("DisplayName_Block_SymbolApostrophe");

		public static readonly MyStringId DisplayName_Block_SymbolColon = MyStringId.GetOrCompute("DisplayName_Block_SymbolColon");

		public static readonly MyStringId DisplayName_Block_SymbolExclamationMark = MyStringId.GetOrCompute("DisplayName_Block_SymbolExclamationMark");

		public static readonly MyStringId DisplayName_Block_SymbolQuestionMark = MyStringId.GetOrCompute("DisplayName_Block_SymbolQuestionMark");

		public static readonly MyStringId RadialMenuGroupTitle_BlueprintActions = MyStringId.GetOrCompute("RadialMenuGroupTitle_BlueprintActions");

		public static readonly MyStringId TerminalTab_GPS_CopyToClipboard_GamepadHelp = MyStringId.GetOrCompute("TerminalTab_GPS_CopyToClipboard_GamepadHelp");

		public static readonly MyStringId ToolTipTerminalInventory_ItemInfoGamepad = MyStringId.GetOrCompute("ToolTipTerminalInventory_ItemInfoGamepad");

		public static readonly MyStringId ControlName_BlockAutorotation = MyStringId.GetOrCompute("ControlName_BlockAutorotation");

		public static readonly MyStringId HelpScreen_ControllerColorNext = MyStringId.GetOrCompute("HelpScreen_ControllerColorNext");

		public static readonly MyStringId HelpScreen_ControllerColorPrevious = MyStringId.GetOrCompute("HelpScreen_ControllerColorPrevious");

		public static readonly MyStringId HelpScreen_ControllerSkinNext = MyStringId.GetOrCompute("HelpScreen_ControllerSkinNext");

		public static readonly MyStringId HelpScreen_ControllerSkinPrevious = MyStringId.GetOrCompute("HelpScreen_ControllerSkinPrevious");

		public static readonly MyStringId HelpScreen_RotateCamera = MyStringId.GetOrCompute("HelpScreen_RotateCamera");

		public static readonly MyStringId HelpScreen_ZoomCamera = MyStringId.GetOrCompute("HelpScreen_ZoomCamera");

		public static readonly MyStringId Spectator_BlockRadialMenu = MyStringId.GetOrCompute("Spectator_BlockRadialMenu");

		public static readonly MyStringId Spectator_HorizontalMovement = MyStringId.GetOrCompute("Spectator_HorizontalMovement");

		public static readonly MyStringId Spectator_Rotation = MyStringId.GetOrCompute("Spectator_Rotation");

		public static readonly MyStringId Spectator_SystemRadialMenu = MyStringId.GetOrCompute("Spectator_SystemRadialMenu");

		public static readonly MyStringId HelpScreen_Strafe = MyStringId.GetOrCompute("HelpScreen_Strafe");

		public static readonly MyStringId HelpScreen_Warnings = MyStringId.GetOrCompute("HelpScreen_Warnings");

		public static readonly MyStringId ProgressScreen_LoadingWorld = MyStringId.GetOrCompute("ProgressScreen_LoadingWorld");

		public static readonly MyStringId ProgressScreen_UnloadingWorld = MyStringId.GetOrCompute("ProgressScreen_UnloadingWorld");

		public static readonly MyStringId ScreenTerminalInventory_FilterGamepadHelp_ActiveFilter = MyStringId.GetOrCompute("ScreenTerminalInventory_FilterGamepadHelp_ActiveFilter");

		public static readonly MyStringId ScreenTerminalInventory_FilterGamepadHelp_AllInventories = MyStringId.GetOrCompute("ScreenTerminalInventory_FilterGamepadHelp_AllInventories");

		public static readonly MyStringId ScreenTerminalInventory_FilterGamepadHelp_Character = MyStringId.GetOrCompute("ScreenTerminalInventory_FilterGamepadHelp_Character");

		public static readonly MyStringId ScreenTerminalInventory_FilterGamepadHelp_CurrentShip = MyStringId.GetOrCompute("ScreenTerminalInventory_FilterGamepadHelp_CurrentShip");

		public static readonly MyStringId ScreenTerminalInventory_FilterGamepadHelp_EnergyInventories = MyStringId.GetOrCompute("ScreenTerminalInventory_FilterGamepadHelp_EnergyInventories");

		public static readonly MyStringId ScreenTerminalInventory_FilterGamepadHelp_ShipOrStation = MyStringId.GetOrCompute("ScreenTerminalInventory_FilterGamepadHelp_ShipOrStation");

		public static readonly MyStringId ScreenTerminalInventory_FilterGamepadHelp_StorageInventories = MyStringId.GetOrCompute("ScreenTerminalInventory_FilterGamepadHelp_StorageInventories");

		public static readonly MyStringId ScreenTerminalInventory_FilterGamepadHelp_SystemInventories = MyStringId.GetOrCompute("ScreenTerminalInventory_FilterGamepadHelp_SystemInventories");

		public static readonly MyStringId Dampeners_Relative = MyStringId.GetOrCompute("Dampeners_Relative");

		public static readonly MyStringId ToolTipTerminalProduction_AddToQueueGamepad = MyStringId.GetOrCompute("ToolTipTerminalProduction_AddToQueueGamepad");

		public static readonly MyStringId ToolTipTerminalProduction_ItemInfoGamepad = MyStringId.GetOrCompute("ToolTipTerminalProduction_ItemInfoGamepad");

		public static readonly MyStringId ToolTipTerminalProduction_ProductionQueue_ItemInfoGamepad = MyStringId.GetOrCompute("ToolTipTerminalProduction_ProductionQueue_ItemInfoGamepad");

		public static readonly MyStringId ControlMenuItemLabel_EquipVoxelhand = MyStringId.GetOrCompute("ControlMenuItemLabel_EquipVoxelhand");

		public static readonly MyStringId DialogBlueprintRename_GamepadHelp = MyStringId.GetOrCompute("DialogBlueprintRename_GamepadHelp");

		public static readonly MyStringId AreaInteration_Label = MyStringId.GetOrCompute("AreaInteration_Label");

		public static readonly MyStringId ToolTipOptionsGame_AreaInteraction = MyStringId.GetOrCompute("ToolTipOptionsGame_AreaInteraction");

		public static readonly MyStringId OpenDlcShop = MyStringId.GetOrCompute("OpenDlcShop");

		public static readonly MyStringId TieredUpdate_GridPresenceNotAvailable = MyStringId.GetOrCompute("TieredUpdate_GridPresenceNotAvailable");

		public static readonly MyStringId TieredUpdate_GridPresenceTier = MyStringId.GetOrCompute("TieredUpdate_GridPresenceTier");

		public static readonly MyStringId TieredUpdate_PlayerPresenceNotAvailable = MyStringId.GetOrCompute("TieredUpdate_PlayerPresenceNotAvailable");

		public static readonly MyStringId TieredUpdate_PlayerPresenceTier = MyStringId.GetOrCompute("TieredUpdate_PlayerPresenceTier");

		public static readonly MyStringId GPSScreen_hueLabel = MyStringId.GetOrCompute("GPSScreen_hueLabel");

		public static readonly MyStringId GPSScreen_saturationLabel = MyStringId.GetOrCompute("GPSScreen_saturationLabel");

		public static readonly MyStringId GPSScreen_valueLabel = MyStringId.GetOrCompute("GPSScreen_valueLabel");

		public static readonly MyStringId GPSScreen_hexLabel = MyStringId.GetOrCompute("GPSScreen_hexLabel");

		public static readonly MyStringId GPSScreen_hueTooltip = MyStringId.GetOrCompute("GPSScreen_hueTooltip");

		public static readonly MyStringId GPSScreen_saturationTooltip = MyStringId.GetOrCompute("GPSScreen_saturationTooltip");

		public static readonly MyStringId GPSScreen_valueTooltip = MyStringId.GetOrCompute("GPSScreen_valueTooltip");

		public static readonly MyStringId GPSScreen_hexTooltip = MyStringId.GetOrCompute("GPSScreen_hexTooltip");

		public static readonly MyStringId NotReplicated = MyStringId.GetOrCompute("NotReplicated");

		public static readonly MyStringId Replicated = MyStringId.GetOrCompute("Replicated");

		public static readonly MyStringId TieredUpdate_IsReplicated = MyStringId.GetOrCompute("TieredUpdate_IsReplicated");

		public static readonly MyStringId TieredUpdate_IsReplicated_False = MyStringId.GetOrCompute("TieredUpdate_IsReplicated_False");

		public static readonly MyStringId TieredUpdate_IsReplicated_NA = MyStringId.GetOrCompute("TieredUpdate_IsReplicated_NA");

		public static readonly MyStringId TieredUpdate_IsReplicated_True = MyStringId.GetOrCompute("TieredUpdate_IsReplicated_True");

		public static readonly MyStringId BlueprintScreen_FilePathTooLong_Caption = MyStringId.GetOrCompute("BlueprintScreen_FilePathTooLong_Caption");

		public static readonly MyStringId BlueprintScreen_FilePathTooLong_Description = MyStringId.GetOrCompute("BlueprintScreen_FilePathTooLong_Description");

		public static readonly MyStringId DisplayName_Block_SideDoor = MyStringId.GetOrCompute("DisplayName_Block_SideDoor");

		public static readonly MyStringId Description_BarCounter = MyStringId.GetOrCompute("Description_BarCounter");

		public static readonly MyStringId DisplayName_Block_BarCounter = MyStringId.GetOrCompute("DisplayName_Block_BarCounter");

		public static readonly MyStringId DisplayName_Block_BarCounterCorner = MyStringId.GetOrCompute("DisplayName_Block_BarCounterCorner");

		public static readonly MyStringId DisplayName_Block_LargeThrustSciFi = MyStringId.GetOrCompute("DisplayName_Block_LargeThrustSciFi");

		public static readonly MyStringId DisplayName_Block_SmallThrustSciFi = MyStringId.GetOrCompute("DisplayName_Block_SmallThrustSciFi");

		public static readonly MyStringId DisplayName_BlockGroup_LettersAH = MyStringId.GetOrCompute("DisplayName_BlockGroup_LettersAH");

		public static readonly MyStringId Description_TextBlocks = MyStringId.GetOrCompute("Description_TextBlocks");

		public static readonly MyStringId Description_FAQ_SOTFPack = MyStringId.GetOrCompute("Description_FAQ_SOTFPack");

		public static readonly MyStringId Description_FAQ_Weather = MyStringId.GetOrCompute("Description_FAQ_Weather");

		public static readonly MyStringId RadialMenuGroupTitle_Symbols = MyStringId.GetOrCompute("RadialMenuGroupTitle_Symbols");

		public static readonly MyStringId LCD_BrightFuture_Landscape = MyStringId.GetOrCompute("LCD_BrightFuture_Landscape");

		public static readonly MyStringId LCD_BrightFuture_Portrait = MyStringId.GetOrCompute("LCD_BrightFuture_Portrait");

		public static readonly MyStringId LCD_BrightFuture_Square = MyStringId.GetOrCompute("LCD_BrightFuture_Square");

		public static readonly MyStringId LCD_CosmicTeam_Square = MyStringId.GetOrCompute("LCD_CosmicTeam_Square");

		public static readonly MyStringId LCD_Exploration_Square = MyStringId.GetOrCompute("LCD_Exploration_Square");

		public static readonly MyStringId LCD_SpaceTravel_Landscape = MyStringId.GetOrCompute("LCD_SpaceTravel_Landscape");

		public static readonly MyStringId LCD_SpaceTravel_Portrait = MyStringId.GetOrCompute("LCD_SpaceTravel_Portrait");

		public static readonly MyStringId LCD_SpaceTravel_Square = MyStringId.GetOrCompute("LCD_SpaceTravel_Square");

		public static readonly MyStringId LCD_ThunderFleet_Square = MyStringId.GetOrCompute("LCD_ThunderFleet_Square");

		public static readonly MyStringId ScreenDebugAdminMenu_RevertBoulderTooltip = MyStringId.GetOrCompute("ScreenDebugAdminMenu_RevertBoulderTooltip");

		public static readonly MyStringId DisplayName_TSS_Weather_Marsstorm = MyStringId.GetOrCompute("DisplayName_TSS_Weather_Marsstorm");

		public static readonly MyStringId DisplayName_TSS_Weather_SnowStorm = MyStringId.GetOrCompute("DisplayName_TSS_Weather_SnowStorm");

		public static readonly MyStringId RadialMenuGroupTitle_Decoration3 = MyStringId.GetOrCompute("RadialMenuGroupTitle_Decoration3");

		public static readonly MyStringId ScreenDebugAdminMenu_CameraSmoothness = MyStringId.GetOrCompute("ScreenDebugAdminMenu_CameraSmoothness");

		public static readonly MyStringId ScreenDebugAdminMenu_Follow = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Follow");

		public static readonly MyStringId ScreenDebugAdminMenu_Free = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Free");

		public static readonly MyStringId ScreenDebugAdminMenu_None = MyStringId.GetOrCompute("ScreenDebugAdminMenu_None");

		public static readonly MyStringId ScreenDebugAdminMenu_Orbit = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Orbit");

		public static readonly MyStringId ScreenSpectatorAdminMenu_Load = MyStringId.GetOrCompute("ScreenSpectatorAdminMenu_Load");

		public static readonly MyStringId ScreenSpectatorAdminMenu_Save = MyStringId.GetOrCompute("ScreenSpectatorAdminMenu_Save");

		public static readonly MyStringId ScreenSpectatorAdminMenu_SavedPositions = MyStringId.GetOrCompute("ScreenSpectatorAdminMenu_SavedPositions");

		public static readonly MyStringId ScreenSpectatorAdminMenu_Shortcuts = MyStringId.GetOrCompute("ScreenSpectatorAdminMenu_Shortcuts");

		public static readonly MyStringId ScreenDebugAdminMenu_Empty = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Empty");

		public static readonly MyStringId Description_ExhaustPipe = MyStringId.GetOrCompute("Description_ExhaustPipe");

		public static readonly MyStringId DisplayName_Block_ExhaustPipe = MyStringId.GetOrCompute("DisplayName_Block_ExhaustPipe");

		public static readonly MyStringId DisplayName_Block_OffroadSuspension1x1 = MyStringId.GetOrCompute("DisplayName_Block_OffroadSuspension1x1");

		public static readonly MyStringId DisplayName_Block_OffroadSuspension1x1mirrored = MyStringId.GetOrCompute("DisplayName_Block_OffroadSuspension1x1mirrored");

		public static readonly MyStringId DisplayName_Block_OffroadSuspension3x3 = MyStringId.GetOrCompute("DisplayName_Block_OffroadSuspension3x3");

		public static readonly MyStringId DisplayName_Block_OffroadSuspension3x3mirrored = MyStringId.GetOrCompute("DisplayName_Block_OffroadSuspension3x3mirrored");

		public static readonly MyStringId DisplayName_Block_OffroadSuspension5x5 = MyStringId.GetOrCompute("DisplayName_Block_OffroadSuspension5x5");

		public static readonly MyStringId DisplayName_Block_OffroadSuspension5x5mirrored = MyStringId.GetOrCompute("DisplayName_Block_OffroadSuspension5x5mirrored");

		public static readonly MyStringId DisplayName_Block_OffroadWheel1x1 = MyStringId.GetOrCompute("DisplayName_Block_OffroadWheel1x1");

		public static readonly MyStringId DisplayName_Block_OffroadWheel3x3 = MyStringId.GetOrCompute("DisplayName_Block_OffroadWheel3x3");

		public static readonly MyStringId DisplayName_Block_OffroadWheel5x5 = MyStringId.GetOrCompute("DisplayName_Block_OffroadWheel5x5");

		public static readonly MyStringId String2 = MyStringId.GetOrCompute("String2");

		public static readonly MyStringId Description_BuggyCockpit = MyStringId.GetOrCompute("Description_BuggyCockpit");

		public static readonly MyStringId Description_RoverCockpit = MyStringId.GetOrCompute("Description_RoverCockpit");

		public static readonly MyStringId DisplayName_Block_BuggyCockpit = MyStringId.GetOrCompute("DisplayName_Block_BuggyCockpit");

		public static readonly MyStringId DisplayName_Block_RoverCockpit = MyStringId.GetOrCompute("DisplayName_Block_RoverCockpit");

		public static readonly MyStringId DisplayName_Screen_Left = MyStringId.GetOrCompute("DisplayName_Screen_Left");

		public static readonly MyStringId DisplayName_Screen_Right = MyStringId.GetOrCompute("DisplayName_Screen_Right");

		public static readonly MyStringId DisplayName_Screen_Small = MyStringId.GetOrCompute("DisplayName_Screen_Small");

		public static readonly MyStringId DisplayName_TSS_Weather_ElectricStorm = MyStringId.GetOrCompute("DisplayName_TSS_Weather_ElectricStorm");

		public static readonly MyStringId AlienFogLight = MyStringId.GetOrCompute("AlienFogLight");

		public static readonly MyStringId AlienFogHeavy = MyStringId.GetOrCompute("AlienFogHeavy");

		public static readonly MyStringId AlienRainLight = MyStringId.GetOrCompute("AlienRainLight");

		public static readonly MyStringId AlienRainHeavy = MyStringId.GetOrCompute("AlienRainHeavy");

		public static readonly MyStringId AlienThunderstormHeavy = MyStringId.GetOrCompute("AlienThunderstormHeavy");

		public static readonly MyStringId AlienThunderstormLight = MyStringId.GetOrCompute("AlienThunderstormLight");

		public static readonly MyStringId Dust = MyStringId.GetOrCompute("Dust");

		public static readonly MyStringId ElectricStorm = MyStringId.GetOrCompute("ElectricStorm");

		public static readonly MyStringId SnowLight = MyStringId.GetOrCompute("SnowLight");

		public static readonly MyStringId SnowHeavy = MyStringId.GetOrCompute("SnowHeavy");

		public static readonly MyStringId SandStormLight = MyStringId.GetOrCompute("SandStormLight");

		public static readonly MyStringId SandStormHeavy = MyStringId.GetOrCompute("SandStormHeavy");

		public static readonly MyStringId FogLight = MyStringId.GetOrCompute("FogLight");

		public static readonly MyStringId FogHeavy = MyStringId.GetOrCompute("FogHeavy");

		public static readonly MyStringId MarsSnow = MyStringId.GetOrCompute("MarsSnow");

		public static readonly MyStringId MarsStormHeavy = MyStringId.GetOrCompute("MarsStormHeavy");

		public static readonly MyStringId MarsStormLight = MyStringId.GetOrCompute("MarsStormLight");

		public static readonly MyStringId ThunderstormLight = MyStringId.GetOrCompute("ThunderstormLight");

		public static readonly MyStringId ThunderstormHeavy = MyStringId.GetOrCompute("ThunderstormHeavy");

		public static readonly MyStringId RainHeavy = MyStringId.GetOrCompute("RainHeavy");

		public static readonly MyStringId RainLight = MyStringId.GetOrCompute("RainLight");

		public static readonly MyStringId BlockPropertyTitle_ExhaustEffect = MyStringId.GetOrCompute("BlockPropertyTitle_ExhaustEffect");

		public static readonly MyStringId BlockPropertyTitle_PowerDependency = MyStringId.GetOrCompute("BlockPropertyTitle_PowerDependency");

		public static readonly MyStringId DisplayName_Block_Viewport1 = MyStringId.GetOrCompute("DisplayName_Block_Viewport1");

		public static readonly MyStringId DisplayName_Block_Viewport2 = MyStringId.GetOrCompute("DisplayName_Block_Viewport2");

		public static readonly MyStringId ScreenDebugAdminMenu_ReplayTool_ChangeCharacter = MyStringId.GetOrCompute("ScreenDebugAdminMenu_ReplayTool_ChangeCharacter");

		public static readonly MyStringId ScreenDebugAdminMenu_ReplayTool_ChangeCharacter_Tooltip = MyStringId.GetOrCompute("ScreenDebugAdminMenu_ReplayTool_ChangeCharacter_Tooltip");

		public static readonly MyStringId Description_OffsetLight = MyStringId.GetOrCompute("Description_OffsetLight");

		public static readonly MyStringId DisplayName_Block_OffsetLight = MyStringId.GetOrCompute("DisplayName_Block_OffsetLight");

		public static readonly MyStringId DisplayName_Block_OffsetSpotlight = MyStringId.GetOrCompute("DisplayName_Block_OffsetSpotlight");

		public static readonly MyStringId Description_BarredWindow = MyStringId.GetOrCompute("Description_BarredWindow");

		public static readonly MyStringId DisplayName_Block_BarredWindow = MyStringId.GetOrCompute("DisplayName_Block_BarredWindow");

		public static readonly MyStringId DisplayName_Block_BarredWindowFace = MyStringId.GetOrCompute("DisplayName_Block_BarredWindowFace");

		public static readonly MyStringId DisplayName_Block_BarredWindowSide = MyStringId.GetOrCompute("DisplayName_Block_BarredWindowSide");

		public static readonly MyStringId DisplayName_Block_BarredWindowSlope = MyStringId.GetOrCompute("DisplayName_Block_BarredWindowSlope");

		public static readonly MyStringId DisplayName_BlockGroup_BarredWindows = MyStringId.GetOrCompute("DisplayName_BlockGroup_BarredWindows");

		public static readonly MyStringId Description_StorageShelf = MyStringId.GetOrCompute("Description_StorageShelf");

		public static readonly MyStringId DisplayName_BlockGroup_StorageShelves = MyStringId.GetOrCompute("DisplayName_BlockGroup_StorageShelves");

		public static readonly MyStringId DisplayName_Block_StorageShelf1 = MyStringId.GetOrCompute("DisplayName_Block_StorageShelf1");

		public static readonly MyStringId DisplayName_Block_StorageShelf2 = MyStringId.GetOrCompute("DisplayName_Block_StorageShelf2");

		public static readonly MyStringId DisplayName_Block_StorageShelf3 = MyStringId.GetOrCompute("DisplayName_Block_StorageShelf3");

		public static readonly MyStringId Description_FAQ_ScrapRacePack = MyStringId.GetOrCompute("Description_FAQ_ScrapRacePack");

		public static readonly MyStringId Description_ViewPort = MyStringId.GetOrCompute("Description_ViewPort");

		public static readonly MyStringId ControlMenuItemLabel_CrackedSoil = MyStringId.GetOrCompute("ControlMenuItemLabel_CrackedSoil");

		public static readonly MyStringId ControlMenuItemLabel_DustyRocks = MyStringId.GetOrCompute("ControlMenuItemLabel_DustyRocks");

		public static readonly MyStringId ControlMenuItemLabel_DustyRocks2 = MyStringId.GetOrCompute("ControlMenuItemLabel_DustyRocks2");

		public static readonly MyStringId ControlMenuItemLabel_DustyRocks3 = MyStringId.GetOrCompute("ControlMenuItemLabel_DustyRocks3");

		public static readonly MyStringId ControlMenuItemLabel_PertamSand = MyStringId.GetOrCompute("ControlMenuItemLabel_PertamSand");

		public static readonly MyStringId ControlMenuItemLabel_TritonBlend = MyStringId.GetOrCompute("ControlMenuItemLabel_TritonBlend");

		public static readonly MyStringId ControlMenuItemLabel_TritonIce = MyStringId.GetOrCompute("ControlMenuItemLabel_TritonIce");

		public static readonly MyStringId ControlMenuItemLabel_TritonStone = MyStringId.GetOrCompute("ControlMenuItemLabel_TritonStone");

		public static readonly MyStringId RadialMenuGroupTitle_VoxelTritonPertam = MyStringId.GetOrCompute("RadialMenuGroupTitle_VoxelTritonPertam");

		public static readonly MyStringId DisplayName_Block_OffroadWheel1x1mirrored = MyStringId.GetOrCompute("DisplayName_Block_OffroadWheel1x1mirrored");

		public static readonly MyStringId DisplayName_Block_OffroadWheel3x3mirrored = MyStringId.GetOrCompute("DisplayName_Block_OffroadWheel3x3mirrored");

		public static readonly MyStringId Description_DLC_Warfare1 = MyStringId.GetOrCompute("Description_DLC_Warfare1");

		public static readonly MyStringId DisplayName_DLC_Warfare1 = MyStringId.GetOrCompute("DisplayName_DLC_Warfare1");

		public static readonly MyStringId Description_WeaponRack = MyStringId.GetOrCompute("Description_WeaponRack");

		public static readonly MyStringId DisplayName_Block_WeaponRack = MyStringId.GetOrCompute("DisplayName_Block_WeaponRack");

		public static readonly MyStringId DisplayName_DLC_Warfare1DLC = MyStringId.GetOrCompute("DisplayName_DLC_Warfare1DLC");

		public static readonly MyStringId RadialMenuGroupTitle_ArmorHeavy = MyStringId.GetOrCompute("RadialMenuGroupTitle_ArmorHeavy");

		public static readonly MyStringId WorkshopBrowser_Service0 = MyStringId.GetOrCompute("WorkshopBrowser_Service0");

		public static readonly MyStringId WorkshopBrowser_Service1 = MyStringId.GetOrCompute("WorkshopBrowser_Service1");

		public static readonly MyStringId PublishBlueprint_Caption = MyStringId.GetOrCompute("PublishBlueprint_Caption");

		public static readonly MyStringId PublishBlueprint_Question = MyStringId.GetOrCompute("PublishBlueprint_Question");

		public static readonly MyStringId WorldFileCouldNotBeEdited = MyStringId.GetOrCompute("WorldFileCouldNotBeEdited");

		public static readonly MyStringId TerminalTab_Factions_LeaveToolTip_Balancing = MyStringId.GetOrCompute("TerminalTab_Factions_LeaveToolTip_Balancing");

		public static readonly MyStringId Description_SemiAutoPistol = MyStringId.GetOrCompute("Description_SemiAutoPistol");

		public static readonly MyStringId DisplayName_Item_SemiAutoPistol = MyStringId.GetOrCompute("DisplayName_Item_SemiAutoPistol");

		public static readonly MyStringId DisplayName_Item_SemiAutoPistolMagazine = MyStringId.GetOrCompute("DisplayName_Item_SemiAutoPistolMagazine");

		public static readonly MyStringId Description_FireCover = MyStringId.GetOrCompute("Description_FireCover");

		public static readonly MyStringId DisplayName_Block_FireCover = MyStringId.GetOrCompute("DisplayName_Block_FireCover");

		public static readonly MyStringId DisplayName_Block_FireCoverCorner = MyStringId.GetOrCompute("DisplayName_Block_FireCoverCorner");

		public static readonly MyStringId DisplayName_Block_HalfWindow = MyStringId.GetOrCompute("DisplayName_Block_HalfWindow");

		public static readonly MyStringId DisplayName_Block_HalfWindowCorner = MyStringId.GetOrCompute("DisplayName_Block_HalfWindowCorner");

		public static readonly MyStringId DisplayName_Block_HalfWindowCornerInv = MyStringId.GetOrCompute("DisplayName_Block_HalfWindowCornerInv");

		public static readonly MyStringId DisplayName_Block_HalfWindowInv = MyStringId.GetOrCompute("DisplayName_Block_HalfWindowInv");

		public static readonly MyStringId DisplayName_BlockGroup_HalfWindows = MyStringId.GetOrCompute("DisplayName_BlockGroup_HalfWindows");

		public static readonly MyStringId RadialMenuGroupTitle_Decoration4 = MyStringId.GetOrCompute("RadialMenuGroupTitle_Decoration4");

		public static readonly MyStringId Description_Embrasure = MyStringId.GetOrCompute("Description_Embrasure");

		public static readonly MyStringId DisplayName_Block_Embrasure = MyStringId.GetOrCompute("DisplayName_Block_Embrasure");

		public static readonly MyStringId Description_TargetDummy = MyStringId.GetOrCompute("Description_TargetDummy");

		public static readonly MyStringId DisplayName_Block_TargetDummy = MyStringId.GetOrCompute("DisplayName_Block_TargetDummy");

		public static readonly MyStringId BlockPropertyDescription_EnableRegeneration = MyStringId.GetOrCompute("BlockPropertyDescription_EnableRegeneration");

		public static readonly MyStringId BlockPropertyDescription_RegenerationDelay = MyStringId.GetOrCompute("BlockPropertyDescription_RegenerationDelay");

		public static readonly MyStringId BlockPropertyTitle_EnableRegeneration = MyStringId.GetOrCompute("BlockPropertyTitle_EnableRegeneration");

		public static readonly MyStringId BlockPropertyTitle_RegenerationDelay = MyStringId.GetOrCompute("BlockPropertyTitle_RegenerationDelay");

		public static readonly MyStringId DisplayName_Item_AutomaticRifleGun_Mag_20rd = MyStringId.GetOrCompute("DisplayName_Item_AutomaticRifleGun_Mag_20rd");

		public static readonly MyStringId DisplayName_Item_PreciseAutomaticRifleGun_Mag_5rd = MyStringId.GetOrCompute("DisplayName_Item_PreciseAutomaticRifleGun_Mag_5rd");

		public static readonly MyStringId DisplayName_Item_RapidFireAutomaticRifleGun_Mag_50rd = MyStringId.GetOrCompute("DisplayName_Item_RapidFireAutomaticRifleGun_Mag_50rd");

		public static readonly MyStringId DisplayName_Item_UltimateAutomaticRifleGun_Mag_30rd = MyStringId.GetOrCompute("DisplayName_Item_UltimateAutomaticRifleGun_Mag_30rd");

		public static readonly MyStringId Description_BasicHandHeldLauncher = MyStringId.GetOrCompute("Description_BasicHandHeldLauncher");

		public static readonly MyStringId DisplayName_Item_BasicHandHeldLauncher = MyStringId.GetOrCompute("DisplayName_Item_BasicHandHeldLauncher");

		public static readonly MyStringId Description_AdvancedHandHeldLauncher = MyStringId.GetOrCompute("Description_AdvancedHandHeldLauncher");

		public static readonly MyStringId Description_ElitePistol = MyStringId.GetOrCompute("Description_ElitePistol");

		public static readonly MyStringId Description_FullAutoPistol = MyStringId.GetOrCompute("Description_FullAutoPistol");

		public static readonly MyStringId DisplayName_Item_AdvancedHandHeldLauncher = MyStringId.GetOrCompute("DisplayName_Item_AdvancedHandHeldLauncher");

		public static readonly MyStringId DisplayName_Item_ElitePistol = MyStringId.GetOrCompute("DisplayName_Item_ElitePistol");

		public static readonly MyStringId DisplayName_Item_FullAutoPistol = MyStringId.GetOrCompute("DisplayName_Item_FullAutoPistol");

		public static readonly MyStringId WarfareCounter_TimeRemaining = MyStringId.GetOrCompute("WarfareCounter_TimeRemaining");

		public static readonly MyStringId WarfareCounter_EscapePod = MyStringId.GetOrCompute("WarfareCounter_EscapePod");

		public static readonly MyStringId ScreenDebugAdminMenu_Match = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Match");

		public static readonly MyStringId ScreenDebugAdminMenu_Match_Advance = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Match_Advance");

		public static readonly MyStringId ScreenDebugAdminMenu_Match_Advance_Tooltip = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Match_Advance_Tooltip");

		public static readonly MyStringId ScreenDebugAdminMenu_Match_Pause = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Match_Pause");

		public static readonly MyStringId ScreenDebugAdminMenu_Match_Pause_Tooltip = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Match_Pause_Tooltip");

		public static readonly MyStringId ScreenDebugAdminMenu_Match_Start = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Match_Start");

		public static readonly MyStringId ScreenDebugAdminMenu_Match_Start_Tooltip = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Match_Start_Tooltip");

		public static readonly MyStringId ScreenDebugAdminMenu_Match_Stop = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Match_Stop");

		public static readonly MyStringId ScreenDebugAdminMenu_Match_Stop_Tooltip = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Match_Stop_Tooltip");

		public static readonly MyStringId ScreenDebugAdminMenu_Match_Unpause = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Match_Unpause");

		public static readonly MyStringId ScreenDebugAdminMenu_Match_Unpause_Tooltip = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Match_Unpause_Tooltip");

		public static readonly MyStringId ScreenDebugAdminMenu_Match_AddTime = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Match_AddTime");

		public static readonly MyStringId ScreenDebugAdminMenu_Match_AddTime_Tooltip = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Match_AddTime_Tooltip");

		public static readonly MyStringId ScreenDebugAdminMenu_Match_DisableText = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Match_DisableText");

		public static readonly MyStringId ScreenDebugAdminMenu_Match_EnableText = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Match_EnableText");

		public static readonly MyStringId ScreenDebugAdminMenu_Match_NotRunningText = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Match_NotRunningText");

		public static readonly MyStringId ScreenDebugAdminMenu_Match_RunningText = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Match_RunningText");

		public static readonly MyStringId ScreenDebugAdminMenu_Match_SetTime = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Match_SetTime");

		public static readonly MyStringId ScreenDebugAdminMenu_Match_SetTime_Tooltip = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Match_SetTime_Tooltip");

		public static readonly MyStringId ScreenDebugAdminMenu_Match_StateText = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Match_StateText");

		public static readonly MyStringId ScreenDebugAdminMenu_Match_TimeText = MyStringId.GetOrCompute("ScreenDebugAdminMenu_Match_TimeText");

		public static readonly MyStringId DisplayName_Item_ElitePistolMagazine = MyStringId.GetOrCompute("DisplayName_Item_ElitePistolMagazine");

		public static readonly MyStringId DisplayName_Item_FullAutoPistolMagazine = MyStringId.GetOrCompute("DisplayName_Item_FullAutoPistolMagazine");

		public static readonly MyStringId DisplayName_Item_InteriorTurret_Mag_100rd = MyStringId.GetOrCompute("DisplayName_Item_InteriorTurret_Mag_100rd");

		public static readonly MyStringId Description_BlueprintClass_Consumables = MyStringId.GetOrCompute("Description_BlueprintClass_Consumables");

		public static readonly MyStringId DisplayName_BlueprintClass_Consumables = MyStringId.GetOrCompute("DisplayName_BlueprintClass_Consumables");

		public static readonly MyStringId Description_EliteAutomaticRifle = MyStringId.GetOrCompute("Description_EliteAutomaticRifle");

		public static readonly MyStringId Description_PreciseAutomaticRifle = MyStringId.GetOrCompute("Description_PreciseAutomaticRifle");

		public static readonly MyStringId Description_RapidFireAutomaticRifle = MyStringId.GetOrCompute("Description_RapidFireAutomaticRifle");

		public static readonly MyStringId UGC_ServiceNotAvailable_NoConsent = MyStringId.GetOrCompute("UGC_ServiceNotAvailable_NoConsent");

		public static readonly MyStringId Description_FAQ_CombatMechanics = MyStringId.GetOrCompute("Description_FAQ_CombatMechanics");

		public static readonly MyStringId Description_FAQ_HandHeldLaunchers = MyStringId.GetOrCompute("Description_FAQ_HandHeldLaunchers");

		public static readonly MyStringId Description_FAQ_Pistols = MyStringId.GetOrCompute("Description_FAQ_Pistols");

		public static readonly MyStringId Description_FAQ_Rifles = MyStringId.GetOrCompute("Description_FAQ_Rifles");

		public static readonly MyStringId Description_FAQ_Warfare1 = MyStringId.GetOrCompute("Description_FAQ_Warfare1");

		public static readonly MyStringId DisplayName_Block_Passage2 = MyStringId.GetOrCompute("DisplayName_Block_Passage2");

		public static readonly MyStringId DisplayName_Block_Passage2Side = MyStringId.GetOrCompute("DisplayName_Block_Passage2Side");

		public static readonly MyStringId NotificationDamageTurnedOff = MyStringId.GetOrCompute("NotificationDamageTurnedOff");

		public static readonly MyStringId NotificationGridIsImmune = MyStringId.GetOrCompute("NotificationGridIsImmune");

		public static readonly MyStringId DisplayName_Block_Passage3 = MyStringId.GetOrCompute("DisplayName_Block_Passage3");

		public static readonly MyStringId DisplayName_Block_Passage3Cross = MyStringId.GetOrCompute("DisplayName_Block_Passage3Cross");

		public static readonly MyStringId DisplayName_Block_Passage3Frame = MyStringId.GetOrCompute("DisplayName_Block_Passage3Frame");

		public static readonly MyStringId DisplayName_Block_Passage3Light = MyStringId.GetOrCompute("DisplayName_Block_Passage3Light");

		public static readonly MyStringId DisplayName_Block_Passage3Wall = MyStringId.GetOrCompute("DisplayName_Block_Passage3Wall");

		public static readonly MyStringId DisplayName_Block_PassageScifiCorner = MyStringId.GetOrCompute("DisplayName_Block_PassageScifiCorner");

		public static readonly MyStringId DisplayName_Block_PassageSciFiTjunction = MyStringId.GetOrCompute("DisplayName_Block_PassageSciFiTjunction");

		public static readonly MyStringId DisplayName_Block_PassageSciFiWindow = MyStringId.GetOrCompute("DisplayName_Block_PassageSciFiWindow");
>>>>>>> d46cf8619665219cc163a7b28984ced59ed9470d
	}
}
